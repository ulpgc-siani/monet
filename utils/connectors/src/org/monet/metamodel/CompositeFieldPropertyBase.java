package org.monet.metamodel;

import java.util.ArrayList;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Collection;

/**
CompositeFieldProperty
Esta propiedad se utiliza para incluir un campo secci√≥n en un formulario

*/

public  class CompositeFieldPropertyBase extends MultipleableFieldProperty {

	
	public static class IsExtensible  {protected void copy(IsExtensible instance) {}protected void merge(IsExtensible child) {}}protected IsExtensible _isExtensible;public boolean isExtensible() { return (_isExtensible != null); }public IsExtensible getIsExtensible() { return _isExtensible; }public void setIsExtensible(boolean value) { if(value) _isExtensible = new IsExtensible(); else {_isExtensible = null;}}public static class IsConditional  {protected void copy(IsConditional instance) {}protected void merge(IsConditional child) {}}protected IsConditional _isConditional;public boolean isConditional() { return (_isConditional != null); }public IsConditional getIsConditional() { return _isConditional; }public void setIsConditional(boolean value) { if(value) _isConditional = new IsConditional(); else {_isConditional = null;}}public static class RangeProperty  {protected Long _min;public Long getMin() { return _min; }public void setMin(Long value) { _min = value; }protected Long _max;public Long getMax() { return _max; }public void setMax(Long value) { _max = value; }protected void copy(RangeProperty instance) {this._min = instance._min;
this._max = instance._max;
}protected void merge(RangeProperty child) {if(child._min != null)this._min = child._min;
if(child._max != null)this._max = child._max;
}}protected RangeProperty _rangeProperty;public RangeProperty getRange() { return _rangeProperty; }public void setRange(RangeProperty value) { if(_rangeProperty!=null) _rangeProperty.merge(value); else {_rangeProperty = value;} }public static class ViewProperty  {public enum ModeEnumeration { EXPANDED,COMPACT }protected ModeEnumeration _mode;public ModeEnumeration getMode() { return _mode; }public void setMode(ModeEnumeration value) { _mode = value; }public static class SummaryProperty  {protected ArrayList<org.monet.metamodel.internal.Ref> _field = new ArrayList<org.monet.metamodel.internal.Ref>();public ArrayList<org.monet.metamodel.internal.Ref> getField() { return _field; }public void setField(ArrayList<org.monet.metamodel.internal.Ref> value) { _field = value; }protected void copy(SummaryProperty instance) {this._field.addAll(instance._field);
}protected void merge(SummaryProperty child) {if(child._field != null)this._field.addAll(child._field);
}}protected SummaryProperty _summaryProperty;public SummaryProperty getSummary() { return _summaryProperty; }public void setSummary(SummaryProperty value) { if(_summaryProperty!=null) _summaryProperty.merge(value); else {_summaryProperty = value;} }public static class ShowProperty  {protected ArrayList<org.monet.metamodel.internal.Ref> _field = new ArrayList<org.monet.metamodel.internal.Ref>();public ArrayList<org.monet.metamodel.internal.Ref> getField() { return _field; }public void setField(ArrayList<org.monet.metamodel.internal.Ref> value) { _field = value; }protected String _layout;public String getLayout() { return _layout; }public void setLayout(String value) { _layout = value; }protected String _layoutExtended;public String getLayoutExtended() { return _layoutExtended; }public void setLayoutExtended(String value) { _layoutExtended = value; }protected void copy(ShowProperty instance) {this._field.addAll(instance._field);
this._layout = instance._layout;
this._layoutExtended = instance._layoutExtended;
}protected void merge(ShowProperty child) {if(child._field != null)this._field.addAll(child._field);
if(child._layout != null)this._layout = child._layout;
if(child._layoutExtended != null)this._layoutExtended = child._layoutExtended;
}}protected ShowProperty _showProperty;public ShowProperty getShow() { return _showProperty; }public void setShow(ShowProperty value) { if(_showProperty!=null) _showProperty.merge(value); else {_showProperty = value;} }protected void copy(ViewProperty instance) {this._mode = instance._mode;
this._summaryProperty = instance._summaryProperty; 
this._showProperty = instance._showProperty; 
}protected void merge(ViewProperty child) {if(child._mode != null)this._mode = child._mode;
if(_summaryProperty == null) _summaryProperty = child._summaryProperty; else if (child._summaryProperty != null) {_summaryProperty.merge(child._summaryProperty);}
if(_showProperty == null) _showProperty = child._showProperty; else if (child._showProperty != null) {_showProperty.merge(child._showProperty);}
}}protected ViewProperty _viewProperty;public ViewProperty getView() { return _viewProperty; }public void setView(ViewProperty value) { if(_viewProperty!=null) _viewProperty.merge(value); else {_viewProperty = value;} }
	protected LinkedHashMap<String, TextFieldProperty> _textFieldPropertyMap = new LinkedHashMap<String, TextFieldProperty>();protected LinkedHashMap<String, NodeFieldProperty> _nodeFieldPropertyMap = new LinkedHashMap<String, NodeFieldProperty>();protected LinkedHashMap<String, LinkFieldProperty> _linkFieldPropertyMap = new LinkedHashMap<String, LinkFieldProperty>();protected LinkedHashMap<String, SummationFieldProperty> _summationFieldPropertyMap = new LinkedHashMap<String, SummationFieldProperty>();protected LinkedHashMap<String, CheckFieldProperty> _checkFieldPropertyMap = new LinkedHashMap<String, CheckFieldProperty>();protected LinkedHashMap<String, MemoFieldProperty> _memoFieldPropertyMap = new LinkedHashMap<String, MemoFieldProperty>();protected LinkedHashMap<String, PictureFieldProperty> _pictureFieldPropertyMap = new LinkedHashMap<String, PictureFieldProperty>();protected LinkedHashMap<String, FileFieldProperty> _fileFieldPropertyMap = new LinkedHashMap<String, FileFieldProperty>();protected LinkedHashMap<String, DateFieldProperty> _dateFieldPropertyMap = new LinkedHashMap<String, DateFieldProperty>();protected LinkedHashMap<String, SerialFieldProperty> _serialFieldPropertyMap = new LinkedHashMap<String, SerialFieldProperty>();protected LinkedHashMap<String, CompositeFieldProperty> _compositeFieldPropertyMap = new LinkedHashMap<String, CompositeFieldProperty>();protected LinkedHashMap<String, UriFieldProperty> _uriFieldPropertyMap = new LinkedHashMap<String, UriFieldProperty>();protected LinkedHashMap<String, BooleanFieldProperty> _booleanFieldPropertyMap = new LinkedHashMap<String, BooleanFieldProperty>();protected LinkedHashMap<String, NumberFieldProperty> _numberFieldPropertyMap = new LinkedHashMap<String, NumberFieldProperty>();protected LinkedHashMap<String, SelectFieldProperty> _selectFieldPropertyMap = new LinkedHashMap<String, SelectFieldProperty>();public void addTextFieldProperty(TextFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();TextFieldProperty current = _textFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {TextFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_textFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_textFieldPropertyMap.put(key, value);} }public java.util.Map<String,TextFieldProperty> getTextFieldPropertyMap() { return _textFieldPropertyMap; }public java.util.Collection<TextFieldProperty> getTextFieldPropertyList() { return _textFieldPropertyMap.values(); }public void addNodeFieldProperty(NodeFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();NodeFieldProperty current = _nodeFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {NodeFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_nodeFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_nodeFieldPropertyMap.put(key, value);} }public java.util.Map<String,NodeFieldProperty> getNodeFieldPropertyMap() { return _nodeFieldPropertyMap; }public java.util.Collection<NodeFieldProperty> getNodeFieldPropertyList() { return _nodeFieldPropertyMap.values(); }public void addLinkFieldProperty(LinkFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();LinkFieldProperty current = _linkFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {LinkFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_linkFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_linkFieldPropertyMap.put(key, value);} }public java.util.Map<String,LinkFieldProperty> getLinkFieldPropertyMap() { return _linkFieldPropertyMap; }public java.util.Collection<LinkFieldProperty> getLinkFieldPropertyList() { return _linkFieldPropertyMap.values(); }public void addSummationFieldProperty(SummationFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();SummationFieldProperty current = _summationFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {SummationFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_summationFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_summationFieldPropertyMap.put(key, value);} }public java.util.Map<String,SummationFieldProperty> getSummationFieldPropertyMap() { return _summationFieldPropertyMap; }public java.util.Collection<SummationFieldProperty> getSummationFieldPropertyList() { return _summationFieldPropertyMap.values(); }public void addCheckFieldProperty(CheckFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();CheckFieldProperty current = _checkFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {CheckFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_checkFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_checkFieldPropertyMap.put(key, value);} }public java.util.Map<String,CheckFieldProperty> getCheckFieldPropertyMap() { return _checkFieldPropertyMap; }public java.util.Collection<CheckFieldProperty> getCheckFieldPropertyList() { return _checkFieldPropertyMap.values(); }public void addMemoFieldProperty(MemoFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();MemoFieldProperty current = _memoFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {MemoFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_memoFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_memoFieldPropertyMap.put(key, value);} }public java.util.Map<String,MemoFieldProperty> getMemoFieldPropertyMap() { return _memoFieldPropertyMap; }public java.util.Collection<MemoFieldProperty> getMemoFieldPropertyList() { return _memoFieldPropertyMap.values(); }public void addPictureFieldProperty(PictureFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();PictureFieldProperty current = _pictureFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {PictureFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_pictureFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_pictureFieldPropertyMap.put(key, value);} }public java.util.Map<String,PictureFieldProperty> getPictureFieldPropertyMap() { return _pictureFieldPropertyMap; }public java.util.Collection<PictureFieldProperty> getPictureFieldPropertyList() { return _pictureFieldPropertyMap.values(); }public void addFileFieldProperty(FileFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();FileFieldProperty current = _fileFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {FileFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_fileFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_fileFieldPropertyMap.put(key, value);} }public java.util.Map<String,FileFieldProperty> getFileFieldPropertyMap() { return _fileFieldPropertyMap; }public java.util.Collection<FileFieldProperty> getFileFieldPropertyList() { return _fileFieldPropertyMap.values(); }public void addDateFieldProperty(DateFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();DateFieldProperty current = _dateFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {DateFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_dateFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_dateFieldPropertyMap.put(key, value);} }public java.util.Map<String,DateFieldProperty> getDateFieldPropertyMap() { return _dateFieldPropertyMap; }public java.util.Collection<DateFieldProperty> getDateFieldPropertyList() { return _dateFieldPropertyMap.values(); }public void addSerialFieldProperty(SerialFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();SerialFieldProperty current = _serialFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {SerialFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_serialFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_serialFieldPropertyMap.put(key, value);} }public java.util.Map<String,SerialFieldProperty> getSerialFieldPropertyMap() { return _serialFieldPropertyMap; }public java.util.Collection<SerialFieldProperty> getSerialFieldPropertyList() { return _serialFieldPropertyMap.values(); }public void addCompositeFieldProperty(CompositeFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();CompositeFieldProperty current = _compositeFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {CompositeFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_compositeFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_compositeFieldPropertyMap.put(key, value);} }public java.util.Map<String,CompositeFieldProperty> getCompositeFieldPropertyMap() { return _compositeFieldPropertyMap; }public java.util.Collection<CompositeFieldProperty> getCompositeFieldPropertyList() { return _compositeFieldPropertyMap.values(); }public void addUriFieldProperty(UriFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();UriFieldProperty current = _uriFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {UriFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_uriFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_uriFieldPropertyMap.put(key, value);} }public java.util.Map<String,UriFieldProperty> getUriFieldPropertyMap() { return _uriFieldPropertyMap; }public java.util.Collection<UriFieldProperty> getUriFieldPropertyList() { return _uriFieldPropertyMap.values(); }public void addBooleanFieldProperty(BooleanFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();BooleanFieldProperty current = _booleanFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {BooleanFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_booleanFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_booleanFieldPropertyMap.put(key, value);} }public java.util.Map<String,BooleanFieldProperty> getBooleanFieldPropertyMap() { return _booleanFieldPropertyMap; }public java.util.Collection<BooleanFieldProperty> getBooleanFieldPropertyList() { return _booleanFieldPropertyMap.values(); }public void addNumberFieldProperty(NumberFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();NumberFieldProperty current = _numberFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {NumberFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_numberFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_numberFieldPropertyMap.put(key, value);} }public java.util.Map<String,NumberFieldProperty> getNumberFieldPropertyMap() { return _numberFieldPropertyMap; }public java.util.Collection<NumberFieldProperty> getNumberFieldPropertyList() { return _numberFieldPropertyMap.values(); }public void addSelectFieldProperty(SelectFieldProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();SelectFieldProperty current = _selectFieldPropertyMap.get(key);if (current != null) {if (current.getClass().isAssignableFrom(value.getClass())) {try {SelectFieldProperty instance = value.getClass().newInstance();instance.copy(current);instance.setCode(value.getCode());instance.setName(value.getName());instance.merge(value);_selectFieldPropertyMap.put(key, instance);}catch (Exception exception) {}}else current.merge(value);} else {_selectFieldPropertyMap.put(key, value);} }public java.util.Map<String,SelectFieldProperty> getSelectFieldPropertyMap() { return _selectFieldPropertyMap; }public java.util.Collection<SelectFieldProperty> getSelectFieldPropertyList() { return _selectFieldPropertyMap.values(); }protected ArrayList<FieldProperty> _allFieldPropertyList;protected void createAllFieldPropertyList() {_allFieldPropertyList = new ArrayList<FieldProperty>();_allFieldPropertyList.addAll(_textFieldPropertyMap.values());_allFieldPropertyList.addAll(_nodeFieldPropertyMap.values());_allFieldPropertyList.addAll(_linkFieldPropertyMap.values());_allFieldPropertyList.addAll(_summationFieldPropertyMap.values());_allFieldPropertyList.addAll(_checkFieldPropertyMap.values());_allFieldPropertyList.addAll(_memoFieldPropertyMap.values());_allFieldPropertyList.addAll(_pictureFieldPropertyMap.values());_allFieldPropertyList.addAll(_fileFieldPropertyMap.values());_allFieldPropertyList.addAll(_dateFieldPropertyMap.values());_allFieldPropertyList.addAll(_serialFieldPropertyMap.values());_allFieldPropertyList.addAll(_compositeFieldPropertyMap.values());_allFieldPropertyList.addAll(_uriFieldPropertyMap.values());_allFieldPropertyList.addAll(_booleanFieldPropertyMap.values());_allFieldPropertyList.addAll(_numberFieldPropertyMap.values());_allFieldPropertyList.addAll(_selectFieldPropertyMap.values());}public ArrayList<FieldProperty> getAllFieldPropertyList() {if (_allFieldPropertyList == null) createAllFieldPropertyList();return _allFieldPropertyList;}protected LinkedHashMap<String,FieldProperty> _allFieldPropertyMap;protected void createAllFieldPropertyMap() {_allFieldPropertyMap = new LinkedHashMap<String,FieldProperty>();if (_allFieldPropertyList == null) createAllFieldPropertyList();for (FieldProperty item : _allFieldPropertyList) {_allFieldPropertyMap.put(item.getCode(), item);_allFieldPropertyMap.put(item.getName(), item);}}public FieldProperty getField(String key) {if (_allFieldPropertyMap == null) createAllFieldPropertyMap();return _allFieldPropertyMap.get(key);}

	public void copy(CompositeFieldPropertyBase instance) {
		this._label = instance._label;
this._description = instance._description;
this._template = instance._template;
this._code = instance._code;
this._name = instance._name;

		this._isExtensible = instance._isExtensible; 
this._isConditional = instance._isConditional; 
this._rangeProperty = instance._rangeProperty; 
this._viewProperty = instance._viewProperty; 
this._isMultiple = instance._isMultiple; 
this._isRequired = instance._isRequired; 
this._isReadonly = instance._isReadonly; 
this._isExtended = instance._isExtended; 
this._isSuperfield = instance._isSuperfield; 
this._isStatic = instance._isStatic; 
this._isUnivocal = instance._isUnivocal; 
_displayPropertyList.addAll(instance._displayPropertyList);

		for(TextFieldProperty item : instance._textFieldPropertyMap.values())this.addTextFieldProperty(item);for(NodeFieldProperty item : instance._nodeFieldPropertyMap.values())this.addNodeFieldProperty(item);for(LinkFieldProperty item : instance._linkFieldPropertyMap.values())this.addLinkFieldProperty(item);for(SummationFieldProperty item : instance._summationFieldPropertyMap.values())this.addSummationFieldProperty(item);for(CheckFieldProperty item : instance._checkFieldPropertyMap.values())this.addCheckFieldProperty(item);for(MemoFieldProperty item : instance._memoFieldPropertyMap.values())this.addMemoFieldProperty(item);for(PictureFieldProperty item : instance._pictureFieldPropertyMap.values())this.addPictureFieldProperty(item);for(FileFieldProperty item : instance._fileFieldPropertyMap.values())this.addFileFieldProperty(item);for(DateFieldProperty item : instance._dateFieldPropertyMap.values())this.addDateFieldProperty(item);for(SerialFieldProperty item : instance._serialFieldPropertyMap.values())this.addSerialFieldProperty(item);for(CompositeFieldProperty item : instance._compositeFieldPropertyMap.values())this.addCompositeFieldProperty(item);for(UriFieldProperty item : instance._uriFieldPropertyMap.values())this.addUriFieldProperty(item);for(BooleanFieldProperty item : instance._booleanFieldPropertyMap.values())this.addBooleanFieldProperty(item);for(NumberFieldProperty item : instance._numberFieldPropertyMap.values())this.addNumberFieldProperty(item);for(SelectFieldProperty item : instance._selectFieldPropertyMap.values())this.addSelectFieldProperty(item);
	}

	public void merge(CompositeFieldPropertyBase child) {
		super.merge(child);
		
		
		if(_isExtensible == null) _isExtensible = child._isExtensible; else if (child._isExtensible != null) {_isExtensible.merge(child._isExtensible);}
if(_isConditional == null) _isConditional = child._isConditional; else if (child._isConditional != null) {_isConditional.merge(child._isConditional);}
if(_rangeProperty == null) _rangeProperty = child._rangeProperty; else if (child._rangeProperty != null) {_rangeProperty.merge(child._rangeProperty);}
if(_viewProperty == null) _viewProperty = child._viewProperty; else if (child._viewProperty != null) {_viewProperty.merge(child._viewProperty);}

		for(TextFieldProperty item : child._textFieldPropertyMap.values())this.addTextFieldProperty(item);for(NodeFieldProperty item : child._nodeFieldPropertyMap.values())this.addNodeFieldProperty(item);for(LinkFieldProperty item : child._linkFieldPropertyMap.values())this.addLinkFieldProperty(item);for(SummationFieldProperty item : child._summationFieldPropertyMap.values())this.addSummationFieldProperty(item);for(CheckFieldProperty item : child._checkFieldPropertyMap.values())this.addCheckFieldProperty(item);for(MemoFieldProperty item : child._memoFieldPropertyMap.values())this.addMemoFieldProperty(item);for(PictureFieldProperty item : child._pictureFieldPropertyMap.values())this.addPictureFieldProperty(item);for(FileFieldProperty item : child._fileFieldPropertyMap.values())this.addFileFieldProperty(item);for(DateFieldProperty item : child._dateFieldPropertyMap.values())this.addDateFieldProperty(item);for(SerialFieldProperty item : child._serialFieldPropertyMap.values())this.addSerialFieldProperty(item);for(CompositeFieldProperty item : child._compositeFieldPropertyMap.values())this.addCompositeFieldProperty(item);for(UriFieldProperty item : child._uriFieldPropertyMap.values())this.addUriFieldProperty(item);for(BooleanFieldProperty item : child._booleanFieldPropertyMap.values())this.addBooleanFieldProperty(item);for(NumberFieldProperty item : child._numberFieldPropertyMap.values())this.addNumberFieldProperty(item);for(SelectFieldProperty item : child._selectFieldPropertyMap.values())this.addSelectFieldProperty(item);
	}

	public Class<?> getMetamodelClass() {
		return CompositeFieldPropertyBase.class;
	}

}

