package org.monet.modelling.ide.builders.stages.semantic.gen;

import java.util.Collection;

import org.monet.modelling.ide.problems.Problem;
import org.monet.modelling.kernel.model.*;

#createClassHeader ($metaclass)

#foreach ($attribute in $metaclass.getAttributeList())
#if ($attribute.getOwner() == $metaclass)
#createAttribute ($attribute,"metaitem")
#end 
#end
#foreach ($property in $metaclass.getPropertyList())
#if ($property.getOwner() == $metaclass && $property.isEditable())
#createProperty ($property)
#end
#end
#foreach ($include in $metaclass.getIncludeList())
#if ($include.getOwner() == $metaclass)
#createInclude ($include)
#end
#end
  }
}


#* ********************************************************************************************************************************************* *#

#macro (createAttribute $attribute $item)
#set ($name = $attribute.getName())
#set ($type = $attribute.getType())
#set ($link = $attribute.getLink())
#if ($type == "key")
  #if (!$attribute.isRequired())
    if(${item}.get${syntax.getToken($name,true,false)}() != null && !${item}.get${syntax.getToken($name,true,false)}().isEmpty())
  #end
    this.checkName(${item}.get${syntax.getToken($name,true,false)}(), ${link}.class);
#elseif ($type == "code")
  if (${item}.get${syntax.getToken($name,true,false)}() == null || ${item}.get${syntax.getToken($name,true,false)}().isEmpty())
    ${item}.set${syntax.getToken($name,true,false)}(this.getCode(${item}.getName(), ${item}.getClass()));
  else
    this.checkUnique(${item}.get${syntax.getToken($name,true,false)}());
#end
#end

#* ********************************************************************************************************************************************* *#

#macro (createProperty $property)
#set ($name = $property.getName())
#set ($isMultiple = $property.isMultiple())
  #if ($property.isRequired())
    #set ($required = "")
  #else
    #set ($required = ",required=false")
  #end

  #if ($isMultiple)
    #set ($key = $property.getKey())
    #set ($value = $property.getValue())
    #if ($property.getAttributeList().size() > 0)
      #if ($key == "")
        for(${property.getOwner().getName()}.${syntax.getToken($name,true,false)} item : metaitem.get${syntax.getToken($name,true,false)}List()) {
        #foreach ($attribute in $property.getAttributeList())
          #createAttribute ($attribute,"item")
        #end
        }
      #end
    #end
  #else
    #if (!$property.isBoolean() && !$property.isAllowable())
      if(metaitem.get$syntax.getToken($name,true,false)() != null) {
      ${property.getOwner().getName()}.$syntax.getToken($name,true,false) item = metaitem.get$syntax.getToken($name,true,false)();
      #foreach ($attribute in $property.getAttributeList())
        #createAttribute ($attribute,"item")
      #end
      }
    #end
  #end
#end

#* ********************************************************************************************************************************************* *#

#macro (createInclude $include)
#set ($name = $include.getName())
#set ($isMultiple = $include.isMultiple())
#set($classList = $include.getLinkTree())
#foreach ($class in $classList)
  #if ($class.isAbstract() == false)
    #set ($type = $class.getName())
    #if ($isMultiple)
      #set ($typeList = $type + "List")
      ${syntax.getToken($type,true,false)}SemanticChecks ${syntax.getToken($type,false,false)} = new ${syntax.getToken($type,true,false)}SemanticChecks();
      ${syntax.getToken($type,false,false)}.setProblems(this.getProblems());
      ${syntax.getToken($type,false,false)}.setModule(this.getModule());
      for(${syntax.getToken($type,true,false)} include : metaitem.get${syntax.getToken($type,true,false)}List()) {
        ${syntax.getToken($type,false,false)}.check(include);
      }
    #else
      ${syntax.getToken($type,true,false)}SemanticChecks ${syntax.getToken($type,false,false)} = new ${syntax.getToken($type,true,false)}SemanticChecks();
      ${syntax.getToken($type,false,false)}.setProblems(this.getProblems());
      ${syntax.getToken($type,false,false)}.setModule(this.getModule());
      ${syntax.getToken($type,false,false)}.check(metaitem.get${syntax.getToken($type,true,false)}());
    #end
  #end
#end
#end

#* ********************************************************************************************************************************************* *#

#macro (createClassHeader $metaclass)
#if($metaclass.getParentName() != "")
  #set ($parentClass = ${metaclass.getParentName()} + "SemanticChecks")
#elseif($metaclass.isDefinition())
  #set ($parentClass = "DefinitionRule")
#else
  #set ($parentClass = "DeclarationRule")
#end
#set ($rulename = $metaclass.getName() + "SemanticChecks")
#set ($name = $metaclass.getName())
public class $rulename extends $parentClass {

#if($metaclass.isDefinition())
  @Override
  public boolean activateRule(Definition definition) {
    return definition instanceof $name;
  }
  public void checkNodes(Definition definition) {
  #if($metaclass.getParentName() != "")
    super.checkNodes(definition);
  #end
    $name metaitem = ($name) definition;
#else
  public void check($name metaitem) {
  if(metaitem == null) return;
  #if($metaclass.getParentName() != "")
    super.check(metaitem);
  #end
#end

  
#end

#* ********************************************************************************************************************************************* *#

#macro (createComment $comment)
#if ($comment != "")
// $comment
#end
#end 


