/*
 * generated by Xtext
 */
package org.monet.editor.dsl;

import org.eclipse.xtext.formatting.INodeModelFormatter;
import org.eclipse.xtext.generator.IOutputConfigurationProvider;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.monet.editor.dsl.configuration.CustomOutputConfigurationProvider;
import org.monet.editor.dsl.formatting.NodeModelFormatter;
import org.monet.editor.dsl.generator.FixedModelGenerator;
import org.monet.editor.dsl.helper.TypeRefCache;
import org.monet.editor.dsl.helper.TypeRefCacheImpl;
import org.monet.editor.dsl.jvmmodel.MMLExtensions;
import org.monet.editor.dsl.jvmmodel.inferers.AttributeInferer;
import org.monet.editor.dsl.jvmmodel.inferers.BehaviourInferer;
import org.monet.editor.dsl.jvmmodel.inferers.ClassNameInferer;
import org.monet.editor.dsl.jvmmodel.inferers.DashboardInferer;
import org.monet.editor.dsl.jvmmodel.inferers.DatastoreBuilderInferer;
import org.monet.editor.dsl.jvmmodel.inferers.DatastoreInferer;
import org.monet.editor.dsl.jvmmodel.inferers.DefinitionInferer;
import org.monet.editor.dsl.jvmmodel.inferers.FieldInferer;
import org.monet.editor.dsl.jvmmodel.inferers.JobSchemaInferer;
import org.monet.editor.dsl.jvmmodel.inferers.ProjectInferer;
import org.monet.editor.dsl.jvmmodel.inferers.PropertyInferer;
import org.monet.editor.dsl.jvmmodel.inferers.RuleInferer;
import org.monet.editor.dsl.jvmmodel.inferers.SchemaInferer;
import org.monet.editor.dsl.jvmmodel.inferers.DistributionInferer;
import org.monet.editor.dsl.jvmmodel.inferers.TaskContestInferer;
import org.monet.editor.dsl.jvmmodel.inferers.TaskContestantsInferer;
import org.monet.editor.dsl.jvmmodel.inferers.TaskCustomerInferer;
import org.monet.editor.dsl.jvmmodel.inferers.TaskInferer;
import org.monet.editor.dsl.jvmmodel.inferers.TaskProviderExternalInferer;
import org.monet.editor.dsl.jvmmodel.inferers.TaskProviderInternalInferer;
import org.monet.editor.dsl.metamodel.MetaModelStructure;
import org.monet.editor.dsl.metamodel.MetaModelStructureImpl;
import org.monet.editor.dsl.naming.MonetDeclarativeQualifiedNameProvider;
import org.monet.editor.dsl.resources.ResourceDescriptionStrategy;
import org.monet.editor.dsl.scoping.MonetModelingLanguageImportedNamespaceAwareLocalScopeProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class MonetModelingLanguageRuntimeModule extends org.monet.editor.dsl.AbstractMonetModelingLanguageRuntimeModule {

  @Override
  public void configure(Binder binder) {
    super.configure(binder);
    
    binder.bind(MetaModelStructure.class).to(MetaModelStructureImpl.class);
    binder.bind(TypeRefCache.class).to(TypeRefCacheImpl.class);
    binder.bind(MMLExtensions.class);
    binder.bind(AttributeInferer.class);
    binder.bind(BehaviourInferer.class);
    binder.bind(ClassNameInferer.class);
    binder.bind(DefinitionInferer.class);
    binder.bind(DashboardInferer.class);
    binder.bind(DatastoreInferer.class);
    binder.bind(FieldInferer.class);
    binder.bind(ProjectInferer.class);
    binder.bind(PropertyInferer.class);
    binder.bind(RuleInferer.class);
    binder.bind(SchemaInferer.class);
    binder.bind(JobSchemaInferer.class);
    binder.bind(DistributionInferer.class);
    binder.bind(DatastoreBuilderInferer.class);
    binder.bind(TaskInferer.class);
    binder.bind(TaskContestInferer.class);
    binder.bind(TaskCustomerInferer.class);
    binder.bind(TaskContestantsInferer.class);
    binder.bind(TaskProviderExternalInferer.class);
    binder.bind(TaskProviderInternalInferer.class);
  }
  
  public void configureIScopeProviderDelegate(com.google.inject.Binder binder) {
    binder.bind(IScopeProvider.class).annotatedWith(
        Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(MonetModelingLanguageImportedNamespaceAwareLocalScopeProvider.class);
  }
  
  @Override
  public Class<? extends INodeModelFormatter> bindINodeModelFormatter() {
    return NodeModelFormatter.class;
  }
  
  public Class<? extends org.eclipse.xtext.generator.IGenerator> bindIGenerator() {
    return FixedModelGenerator.class;
  }
  
  @Override
  public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
    return MonetDeclarativeQualifiedNameProvider.class;
  }
  
  public Class<? extends IOutputConfigurationProvider> bindIOutputConfigurationProvider() {
    return CustomOutputConfigurationProvider.class;
  }
  
  @Override
  public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
    return ResourceDescriptionStrategy.class;
  }
  
}
