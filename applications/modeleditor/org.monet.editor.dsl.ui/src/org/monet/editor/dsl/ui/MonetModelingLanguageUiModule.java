/*
 * generated by Xtext
 */
package org.monet.editor.dsl.ui;

import org.eclipse.jface.text.hyperlink.IHyperlinkDetector;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.ui.editor.IXtextEditorCallback;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalPostProcessor;
import org.eclipse.xtext.ui.editor.contentassist.IContentProposalProvider;
import org.eclipse.xtext.ui.editor.contentassist.ITemplateProposalProvider;
import org.eclipse.xtext.ui.editor.hover.IEObjectHoverProvider;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration;
import org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator;
import org.eclipse.xtext.ui.resource.IResourceSetProvider;
import org.eclipse.xtext.ui.resource.SimpleResourceSetProvider;
import org.monet.editor.dsl.ui.contentassist.MonetModelingLanguageCompletionProposalPostProcessor;
import org.monet.editor.dsl.ui.contentassist.MonetModelingLanguageProposalProvider;
import org.monet.editor.dsl.ui.hover.EObjectHoverProvider;
import org.monet.editor.dsl.ui.outline.tasks.ITaskElementChecker;
import org.monet.editor.dsl.ui.outline.tasks.MonetModelingLanguageTaskElementChecker;
import org.monet.editor.dsl.ui.outline.tasks.TaskConstants;
import org.monet.editor.dsl.ui.outline.tasks.XtextTaskCalculator;
import org.monet.editor.dsl.ui.syntaxcoloring.SemanticHighlightingCalculator;
import org.monet.editor.dsl.ui.syntaxcoloring.SemanticHighlightingConfiguration;
import org.monet.editor.dsl.ui.template.TemplateProposalProvider;

import com.google.inject.name.Names;

/**
 * Use this class to register components to be used within the IDE.
 */
public class MonetModelingLanguageUiModule extends AbstractMonetModelingLanguageUiModule {
	public MonetModelingLanguageUiModule(AbstractUIPlugin plugin) {
		super(plugin);
	}
	
	@Override
	public Class<? extends ITemplateProposalProvider> bindITemplateProposalProvider() {
	  return TemplateProposalProvider.class;
	}

	@Override
	public Class<? extends ISemanticHighlightingCalculator> bindISemanticHighlightingCalculator() {
	  return SemanticHighlightingCalculator.class;
	}
	
	@Override
	public Class<? extends IHighlightingConfiguration> bindIHighlightingConfiguration() {
	  return SemanticHighlightingConfiguration.class;
	}
	
	@Override
	public Class<? extends IEObjectHoverProvider> bindIEObjectHoverProvider() {
	  return EObjectHoverProvider.class;
	}
	
	
	public void configureMatchingTagMarker(com.google.inject.Binder binder) {
		binder.bind(IXtextEditorCallback.class)
				.annotatedWith(Names.named(TaskConstants.XTEXT_TASKS)).to( //$NON-NLS-1$
						XtextTaskCalculator.class);
	}

	public Class<? extends ITaskElementChecker> bindTaskElementChecker() {
		return MonetModelingLanguageTaskElementChecker.class;
	}

	@Override
	public Class<? extends IContentProposalProvider> bindIContentProposalProvider() {
	  return MonetModelingLanguageProposalProvider.class;
	}
	
	@Override
	public Class<? extends ICompletionProposalPostProcessor> bindICompletionProposalPostProcessor() {
	  return MonetModelingLanguageCompletionProposalPostProcessor.class;
	}
	
}
