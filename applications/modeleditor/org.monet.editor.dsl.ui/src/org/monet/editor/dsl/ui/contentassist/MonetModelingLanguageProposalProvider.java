/*
* generated by Xtext
*/
package org.monet.editor.dsl.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.monet.editor.dsl.helper.XtendHelper;
import org.monet.editor.dsl.metamodel.Item;
import org.monet.editor.dsl.metamodel.MetaModelStructure;
import org.monet.editor.dsl.ui.contentassist.AbstractMonetModelingLanguageProposalProvider;

import com.google.common.base.Predicate;
import com.google.inject.Inject;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class MonetModelingLanguageProposalProvider extends AbstractMonetModelingLanguageProposalProvider {

  @Inject
  private MetaModelStructure metaModelStructure;
  
  @Override
  public void complete_DefinitionType(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    super.complete_DefinitionType(model, ruleCall, context, acceptor);
    
    for(String definition : this.metaModelStructure.getDefinitions())
      acceptor.accept(createCompletionProposal(definition, context));
  }
  
  @Override
  public void completeXTReference_Value(final EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    Item referenceItem = XtendHelper.checkElement(model, metaModelStructure);
    String referencedName = referenceItem.getValueTypeQualifiedName();
    final String finalReferencedName = referencedName.substring(referencedName.lastIndexOf(".")+1);
    
    lookupCrossReference(((CrossReference)assignment.getTerminal()), context, acceptor, new Predicate<IEObjectDescription>() {
      
      public boolean apply(IEObjectDescription input) {
        EObject suggestedModel = EcoreUtil2.resolve(input.getEObjectOrProxy(), model);
        if(suggestedModel.eIsProxy())
          return false;
        
        final Item suggestedItem = XtendHelper.checkElement(suggestedModel, metaModelStructure);
        
        if(suggestedItem == null)
          return false;
        
        return metaModelStructure.areFamily(suggestedItem.getName(), finalReferencedName);
      }
    });
  }
  
}
