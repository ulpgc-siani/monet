package org.monet.metamodel;

import java.util.ArrayList;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Collection;

/**
DimensionDefinition
Una dimensi√≥n es un repositorio de hechos en un esquema multidimensional

*/

public  class DimensionDefinitionBase extends EntityDefinition {

	public enum ResolutionEnumeration { MONTHS,DAYS,HOURS,MINUTES,SECONDS }protected ResolutionEnumeration _resolution;public ResolutionEnumeration getResolution() { return _resolution; }public void setResolution(ResolutionEnumeration value) { _resolution = value; }
	public static class DimensionProperty extends org.monet.metamodel.AbstractAttributeProperty {public static class IsUnlimited  {protected void merge(IsUnlimited child) {}}protected IsUnlimited _isUnlimited;public boolean isUnlimited() { return (_isUnlimited != null); }public IsUnlimited getIsUnlimited() { return _isUnlimited; }public void setIsUnlimited(boolean value) { if(value) _isUnlimited = new IsUnlimited(); else {_isUnlimited = null;}}public static class HierarchyProperty extends org.monet.metamodel.ReferenceableProperty {protected LinkedHashMap<String, AttributeProperty> _attributePropertyMap = new LinkedHashMap<String, AttributeProperty>();public void addAttributeProperty(AttributeProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();AttributeProperty current = _attributePropertyMap.get(key);if(current != null) {current.merge(value);} else {_attributePropertyMap.put(key, value);} }public java.util.Map<String,AttributeProperty> getAttributePropertyMap() { return _attributePropertyMap; }public java.util.Collection<AttributeProperty> getAttributePropertyList() { return _attributePropertyMap.values(); }protected void merge(HierarchyProperty child) {super.merge(child);for(AttributeProperty item : child._attributePropertyMap.values())this.addAttributeProperty(item);}}protected LinkedHashMap<String, HierarchyProperty> _hierarchyPropertyMap = new LinkedHashMap<String, HierarchyProperty>();public void addHierarchy(HierarchyProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();HierarchyProperty current = _hierarchyPropertyMap.get(key);if(current != null) {current.merge(value);} else {_hierarchyPropertyMap.put(key, value);} }public java.util.Map<String,HierarchyProperty> getHierarchyMap() { return _hierarchyPropertyMap; }public java.util.Collection<HierarchyProperty> getHierarchyList() { return _hierarchyPropertyMap.values(); }protected void merge(DimensionProperty child) {super.merge(child);if(_isUnlimited == null) _isUnlimited = child._isUnlimited; else {_isUnlimited.merge(child._isUnlimited);}
for(HierarchyProperty item : child._hierarchyPropertyMap.values())this.addHierarchy(item);
}}protected LinkedHashMap<String, DimensionProperty> _dimensionPropertyMap = new LinkedHashMap<String, DimensionProperty>();public void addDimension(DimensionProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();DimensionProperty current = _dimensionPropertyMap.get(key);if(current != null) {current.merge(value);} else {_dimensionPropertyMap.put(key, value);} }public java.util.Map<String,DimensionProperty> getDimensionMap() { return _dimensionPropertyMap; }public java.util.Collection<DimensionProperty> getDimensionList() { return _dimensionPropertyMap.values(); }public static class MetricProperty extends org.monet.metamodel.ReferenceableProperty {public enum TypeEnumeration { BOOLEAN,INTEGER,REAL }protected TypeEnumeration _type;public TypeEnumeration getType() { return _type; }public void setType(TypeEnumeration value) { _type = value; }protected void merge(MetricProperty child) {super.merge(child);if(child._type != null)this._type = child._type;
}}protected LinkedHashMap<String, MetricProperty> _metricPropertyMap = new LinkedHashMap<String, MetricProperty>();public void addMetric(MetricProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();MetricProperty current = _metricPropertyMap.get(key);if(current != null) {current.merge(value);} else {_metricPropertyMap.put(key, value);} }public java.util.Map<String,MetricProperty> getMetricMap() { return _metricPropertyMap; }public java.util.Collection<MetricProperty> getMetricList() { return _metricPropertyMap.values(); }public static class IndicatorPropertyBase extends org.monet.metamodel.ReferenceableProperty {protected Object _label;public Object getLabel() { return _label; }public void setLabel(Object value) { _label = value; }public enum ImprovementEnumeration { POSITIVE,NEGATIVE }protected ImprovementEnumeration _improvement;public ImprovementEnumeration getImprovement() { return _improvement; }public void setImprovement(ImprovementEnumeration value) { _improvement = value; }public static class UnitProperty  {protected Object _label;public Object getLabel() { return _label; }public void setLabel(Object value) { _label = value; }public enum TypeEnumeration { LINEAR,DISCRETE }protected TypeEnumeration _type;public TypeEnumeration getType() { return _type; }public void setType(TypeEnumeration value) { _type = value; }protected void merge(UnitProperty child) {if(child._label != null)this._label = child._label;
if(child._type != null)this._type = child._type;
}}protected UnitProperty _unitProperty;public UnitProperty getUnit() { return _unitProperty; }public void setUnit(UnitProperty value) { if(_unitProperty!=null) _unitProperty.merge(value); else {_unitProperty = value;} }public static class SimpleProperty  {protected org.monet.metamodel.internal.Ref _metric;public org.monet.metamodel.internal.Ref getMetric() { return _metric; }public void setMetric(org.monet.metamodel.internal.Ref value) { _metric = value; }public enum OperatorEnumeration { SUM,COUNT,AVERAGE,DEVIATION }protected OperatorEnumeration _operator;public OperatorEnumeration getOperator() { return _operator; }public void setOperator(OperatorEnumeration value) { _operator = value; }protected void merge(SimpleProperty child) {if(child._metric != null)this._metric = child._metric;
if(child._operator != null)this._operator = child._operator;
}}protected SimpleProperty _simpleProperty;public SimpleProperty getSimple() { return _simpleProperty; }public void setSimple(SimpleProperty value) { if(_simpleProperty!=null) _simpleProperty.merge(value); else {_simpleProperty = value;} }public static class FormulaProperty  {protected void merge(FormulaProperty child) {}}protected FormulaProperty _formulaProperty;public FormulaProperty getFormula() { return _formulaProperty; }public void setFormula(FormulaProperty value) { if(_formulaProperty!=null) _formulaProperty.merge(value); else {_formulaProperty = value;} }protected void merge(IndicatorPropertyBase child) {super.merge(child);if(child._label != null)this._label = child._label;
if(child._improvement != null)this._improvement = child._improvement;
if(_unitProperty == null) _unitProperty = child._unitProperty; else {_unitProperty.merge(child._unitProperty);}
if(_simpleProperty == null) _simpleProperty = child._simpleProperty; else {_simpleProperty.merge(child._simpleProperty);}
if(_formulaProperty == null) _formulaProperty = child._formulaProperty; else {_formulaProperty.merge(child._formulaProperty);}
}}protected LinkedHashMap<String, DimensionDefinition.IndicatorProperty> _indicatorPropertyMap = new LinkedHashMap<String, DimensionDefinition.IndicatorProperty>();public void addIndicator(DimensionDefinition.IndicatorProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();DimensionDefinition.IndicatorProperty current = _indicatorPropertyMap.get(key);if(current != null) {current.merge(value);} else {_indicatorPropertyMap.put(key, value);} }public java.util.Map<String,DimensionDefinition.IndicatorProperty> getIndicatorMap() { return _indicatorPropertyMap; }public java.util.Collection<DimensionDefinition.IndicatorProperty> getIndicatorList() { return _indicatorPropertyMap.values(); }public static class ViewProperty extends org.monet.metamodel.ViewProperty {protected Object _label;public Object getLabel() { return _label; }public void setLabel(Object value) { _label = value; }public static class IsDefault  {protected void merge(IsDefault child) {}}protected IsDefault _isDefault;public boolean isDefault() { return (_isDefault != null); }public IsDefault getIsDefault() { return _isDefault; }public void setIsDefault(boolean value) { if(value) _isDefault = new IsDefault(); else {_isDefault = null;}}public static class IsWidget  {protected void merge(IsWidget child) {}}protected IsWidget _isWidget;public boolean isWidget() { return (_isWidget != null); }public IsWidget getIsWidget() { return _isWidget; }public void setIsWidget(boolean value) { if(value) _isWidget = new IsWidget(); else {_isWidget = null;}}public static class ForProperty  {protected org.monet.metamodel.internal.Ref _role;public org.monet.metamodel.internal.Ref getRole() { return _role; }public void setRole(org.monet.metamodel.internal.Ref value) { _role = value; }protected void merge(ForProperty child) {if(child._role != null)this._role = child._role;
}}protected ForProperty _forProperty;public ForProperty getFor() { return _forProperty; }public void setFor(ForProperty value) { if(_forProperty!=null) _forProperty.merge(value); else {_forProperty = value;} }public static class ShowProperty  {public enum ScaleEnumeration { YEAR,MONTH,DAY,HOUR,MINUTE,SECOND }protected ScaleEnumeration _scale;public ScaleEnumeration getScale() { return _scale; }public void setScale(ScaleEnumeration value) { _scale = value; }protected Long _size;public Long getSize() { return _size; }public void setSize(Long value) { _size = value; }public static class ReportProperty  {protected ArrayList<org.monet.metamodel.internal.Ref> _indicator = new ArrayList<org.monet.metamodel.internal.Ref>();public ArrayList<org.monet.metamodel.internal.Ref> getIndicator() { return _indicator; }public void setIndicator(ArrayList<org.monet.metamodel.internal.Ref> value) { _indicator = value; }protected void merge(ReportProperty child) {if(child._indicator != null)this._indicator.addAll(child._indicator);
}}protected ReportProperty _reportProperty;public ReportProperty getReport() { return _reportProperty; }public void setReport(ReportProperty value) { if(_reportProperty!=null) _reportProperty.merge(value); else {_reportProperty = value;} }public static class DrillProperty  {protected org.monet.metamodel.internal.Ref _indicator;public org.monet.metamodel.internal.Ref getIndicator() { return _indicator; }public void setIndicator(org.monet.metamodel.internal.Ref value) { _indicator = value; }protected void merge(DrillProperty child) {if(child._indicator != null)this._indicator = child._indicator;
}}protected DrillProperty _drillProperty;public DrillProperty getDrill() { return _drillProperty; }public void setDrill(DrillProperty value) { if(_drillProperty!=null) _drillProperty.merge(value); else {_drillProperty = value;} }public static class MultidrillProperty  {protected void merge(MultidrillProperty child) {}}protected MultidrillProperty _multidrillProperty;public MultidrillProperty getMultidrill() { return _multidrillProperty; }public void setMultidrill(MultidrillProperty value) { if(_multidrillProperty!=null) _multidrillProperty.merge(value); else {_multidrillProperty = value;} }protected void merge(ShowProperty child) {if(child._scale != null)this._scale = child._scale;
if(child._size != null)this._size = child._size;
if(_reportProperty == null) _reportProperty = child._reportProperty; else {_reportProperty.merge(child._reportProperty);}
if(_drillProperty == null) _drillProperty = child._drillProperty; else {_drillProperty.merge(child._drillProperty);}
if(_multidrillProperty == null) _multidrillProperty = child._multidrillProperty; else {_multidrillProperty.merge(child._multidrillProperty);}
}}protected ShowProperty _showProperty;public ShowProperty getShow() { return _showProperty; }public void setShow(ShowProperty value) { if(_showProperty!=null) _showProperty.merge(value); else {_showProperty = value;} }protected void merge(ViewProperty child) {super.merge(child);if(child._label != null)this._label = child._label;
if(_isDefault == null) _isDefault = child._isDefault; else {_isDefault.merge(child._isDefault);}
if(_isWidget == null) _isWidget = child._isWidget; else {_isWidget.merge(child._isWidget);}
if(_forProperty == null) _forProperty = child._forProperty; else {_forProperty.merge(child._forProperty);}
if(_showProperty == null) _showProperty = child._showProperty; else {_showProperty.merge(child._showProperty);}
}}protected LinkedHashMap<String, ViewProperty> _viewPropertyMap = new LinkedHashMap<String, ViewProperty>();public void addView(ViewProperty value) {String key = value.getName() != null ? value.getName() : value.getCode();ViewProperty current = _viewPropertyMap.get(key);if(current != null) {current.merge(value);} else {_viewPropertyMap.put(key, value);} }public java.util.Map<String,ViewProperty> getViewMap() { return _viewPropertyMap; }public java.util.Collection<ViewProperty> getViewList() { return _viewPropertyMap.values(); }
	

	public void merge(DimensionDefinitionBase child) {
		super.merge(child);
		
		if(child._resolution != null)this._resolution = child._resolution;

		for(DimensionProperty item : child._dimensionPropertyMap.values())this.addDimension(item);
for(MetricProperty item : child._metricPropertyMap.values())this.addMetric(item);
for(DimensionDefinition.IndicatorProperty item : child._indicatorPropertyMap.values())this.addIndicator(item);
for(ViewProperty item : child._viewPropertyMap.values())this.addView(item);

		
	}

	public Class<?> getMetamodelClass() {
		return DimensionDefinitionBase.class;
	}

}

