/*
    Monet Office Application
    (c) 2009 Grupo de Ingenieria del Sofware y Sistemas de la Universidad de Las Palmas de Gran Canaria

    Office is free software under the terms of the GNU Affero General Public License.
    For details, see web site: http://www.gnu.org/licenses/
*/

AppTemplate.ViewNodeLocationEditionToolbar='<ul><li><a class="op point" href="javascript:void(null)">::AddPoint::</a></li><li><a class="op line" href="javascript:void(null)">::AddLine::</a></li><li><a class="op poly" href="javascript:void(null)">::AddPolygon::</a></li><li><a class="op clean" href="javascript:void(null)">::CleanLocation::</a></li><li><a class="op finish" href="javascript:void(null)">::FinishEditingLocation::</a></li><li><a class="op cancel" href="javascript:void(null)">::CancelEditingLocation::</a></li></ul>';
AppTemplate.ViewNodeLocationNavigationToolbar='<ul><li><a class="op center" href="javascript:void(null)">::CenterLocation::</a></li></ul>';
AppTemplate.ViewNodeLocationSearch='<label>::FindLocation::</label><input type="text"></input><a class="op accept button" href="javascript:void(null)">::Accept::</a>';
AppTemplate.ViewPlacemarkInfoWindow='<div class="infowindow"><div class="title"><a href="javascript:CommandDispatcher.dispatch(\'shownode({id})\');">{name}</a></div><div class="description">{description}</div><div class="extradata">{extraData}</div></div>';
AppTemplate.ViewMapLayer='<div class="view map-layer"><div class=\'toolbar\'><div class="loading-map">::Loading::</div><div class="navigator"><span><a class=\'command previous air\'>::Previous::</a></span><span class="air"><span style="margin-right:5px;">::Page::</span><span class="page"></span>/<span class=\'count\'></span></span><span class="air"><a class=\'command next\'>::Next::</a></span></div></div><div class=\'map\'></div></div>';
AppTemplate.ViewMapLayerSearch='<label>::FindLocation::</label><input type="text"></input><a class="op accept" href="javascript:void(null)">::Accept::</a>';
AppTemplate.ViewerDocumentList='<div class=\'header\'><table><tr><td><a class=\'previous\' title=\'::Previous::\'></a></td><td><select class="documents"></select></td><td><a class=\'next\' title=\'::Next::\'></a></td></tr></table></div><div class="dialog add" style="display:none;"><div><div>::FileLabel::</div><input class="label" type="text"></input></div><div class="file"><div>::File::</div><form class="form" method="post" enctype="multipart/form-data"><input type="file" name="newFile" class="input file"/></form></div><div style="margin-top:15px;"><a class="button accept">::Accept::</a><a class="button cancel">::Cancel::</a></div><div class="uploading">::Uploading::</div><div class="error">::ErrorOnUpload::</div></div><div class="dialog rename" style="display:none;"><div><div>::FileLabel::</div><input class="label" type="text"></input></div><div style="margin-top:15px;"><a class="button accept">::Accept::</a><a class="button cancel">::Cancel::</a></div></div><div class="empty" style="display:none;">::NoDocuments::</div><div class=\'loading\' style=\'display:none;\'>::Loading::</div><div class=\'container\'></div>';
AppTemplate.DialogPrintEntityAttribute='<option value="{code}" {selected}>{label}</option>';
AppTemplate.DialogPrintEntityDateAttribute='<option value="{code}" {selected}>{label}</option>';
AppTemplate.DialogPrintEntity='<div class="dialog printentity" style="width:480px;"><table><tr><td class="header"><label>::Headers::</label><table><tr><td><div class="outfield"><div class="outtitle">::Column:: 1</div></div></td><td><div class="outbody"><select class="column"><option value="_none">::None::</option></select></div></td></tr><tr><td><div class="outfield"><div class="outtitle">::Column:: 2</div></div></td><td><div class="outbody"><select class="column"><option value="_none">::None::</option></select></div></td></tr><tr><td><div class="outfield"><div class="outtitle">::Column:: 3</div></div></td><td><div class="outbody"><select class="column"><option value="_none">::None::</option></select></div></td></tr><tr><td><div class="outfield"><div class="outtitle">::Column:: 4</div></div></td><td><div class="outbody"><select class="column"><option value="_none">::None::</option></select></div></td></tr><tr><td><div class="outfield"><div class="outtitle">::Column:: 5</div></div></td><td><div class="outbody"><select class="column"><option value="_none">::None::</option></select></div></td></tr></table></td><td class="range"><div class="label"><label>::Range::</label></div><table><tr><td><div class="outfield"><div class="outtitle">::DateAttribute::</div><div class="outbody"><select class="date-attributes"></select></div></div><div class="outfield"><div class="outtitle">::FromDate::</div><div class="outbody"><input id="dlgPrintEntity.fromDate"/></div></div><div class="outfield"><div class="outtitle">::ToDate::</div><div class="outbody"><input id="dlgPrintEntity.toDate"/></div></div></td></tr></table></td></tr></table><ul class="toolbar"><li><a class="behaviour button accept" href="#">::Accept::</a></li></ul></div>';
AppTemplate.DialogRememberPreference='<div id="dlgRememberPreference" class="dialog rememberpreference"><div class="x-dlg-hd"><span id="dlgRememberPreference.title"></span></div><div class="x-dlg-bd"><div id="dlgRememberPreference.center" class="x-layout-inactive-content body" style="padding:10px;"><div id="dlgRememberPreference.status" class="status"><div class="template"><div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div><div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3 class="title"></h3><span class="summary"></span></div></div></div><div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div></div></div><div class="outfield"><div class="outtitle"><span id="dlgRememberPreference.description"></span></div><div class="outbody"><div class="radio option"><input type="checkbox" name="dlgRememberPreference.remember" id="dlgRememberPreference.remember" value="true"/><label for="dlgRememberPreference.remember"/>::RememberPreference::</label></div></div></div></div></div></div>';
AppTemplate.DialogSelectTaskOwner='<div class="dialog selecttaskowner" style="width:380px;"><div class="tabs"><div class="tab tab_username"><input type="text" class="component"/><div class="options"><a class="clearvalue" title="borrar"></a></div><div class="grid" style="height:210px;width:100%;margin-top:5px;"></div></div><div class="tab tab_reason"><textarea rows="6" class="reason"></textarea></div></div><ul class="toolbar"><li><a class="behaviour button accept" href="#">::Accept::</a></li></ul></div>';
AppTemplate.DialogAlertEntity='<div id="dlgAlertEntity" class="dialog alertentity"><div class="x-dlg-hd">::Title::</div><div class="x-dlg-bd"><div id="dlgAlertEntity.center" class="x-layout-inactive-content" style="padding:10px;"><div id="dlgAlertEntity.status" class="status"><div class="template"><div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div><div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3 class="title"></h3><span class="summary"></span></div></div></div><div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div></div></div><div class="outfield"><div class="outtitle">::Message::</div><textarea id="dlgAlertEntity.Message"></textarea></div><div class="outfield"><div class="outtitle">::Users::</div><div id="dlgAlertEntity.UserList" class="list">::NoUsers::</div></div><div id="dlgAlertEntity.RoleUserTabs"><div id="dlgAlertEntity.UserTabs"><div id="dlgAlertEntity.DialogSearchUsers"></div></div><div id="dlgAlertEntity.RoleTabs"><div id="dlgAlertEntity.DialogSearchRoles"></div></div></div></div></div></div>';
AppTemplate.DialogAlertEntityUser='<li class="user"><span class="title">{sFullname}</span><a class="link" href="deleteuser({Id})">::Delete::</a></li>';
AppTemplate.DialogSearchUsers='<div id="dlgSearchUsers" class="dialog searchusers"><div class="outfield"><div class="outbody"><input id="dlgSearchUsers.Filter" name="dlgSearchUsers.Filter" type="text"></input><div id="dlgSearchUsers.Users" class="list"></div></div></div></div>';
AppTemplate.DialogSearchUsersItem='<li><a href="adduser({Id})" alt="::Add::" title="::Add::"><div class="title">{sFullname}</div><div class="description">{sEmail}</div></a></li>';
AppTemplate.DialogSearchRoles='<div id="dlgSearchRoles" class="dialog searchroles"><div class="outfield"><div class="outbody"><input id="dlgSearchRoles.Filter" name="dlgSearchRoles.Filter" type="text"></input><div id="dlgSearchRoles.Roles" class="list"></div></div></div></div>';
AppTemplate.DialogSearchRolesItem='<li><a href="addrole({Id})" alt="::Add::" title="::Add::"><div class="title">{sFullname}</div></a></li>';
AppTemplate.DialogTaskComments='<div id="dlgTaskComments" class="dialog taskcomments"><div class="title">::Title::</div><div class="body"></div></div>';
AppTemplate.ViewUserUnitItem='<li class="active_{active} {disabledLabel}"><a class="command" href="{command}" title="{anchorTitle}">{fullLabel}</a><iframe width="100%" height="55" src="{url}/banner.jsp?view=minimal" style="border: 0px none;"/></li>V';
AppTemplate.ViewUser='<span class="view user"><span id="Username" class="text"><a id="UsernameLabel" href="#" style="white-space:nowrap;"></a><img class="toggle" src="::ImagesPath::/s.gif"/><div id="UsernamePanel" class="panel username"><!--<div class="profile"><table width="100%"><tr><td width="1%"><img class="photo" src="#"/></td><td><div class="info"><div class="fullname"></div><div class="email"></div><ul class="toolbar"><li><a class="command editaccount">::EditProfile::</a></li></ul></div></td></tr></table></div>--><ul class="options"><li class="section"><div class="title">::Units::</div><ul class="units">::Loading::</ul></li></ul><a class="command logout" href="logout()" title="::Logout::" id="cmdLogout" class="command">::Logout::</a></div></span></span>';
AppTemplate.Desktop='<div id="LoadingMask" style="width:100%;height:97%;position:absolute;z-index:20000;left:0;top:0;">&#160;</div><div id="ReportContainer" class="messagebox"><div class="template"><div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div><div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3 class="title"></h3><span class="summary"></span></div></div></div><div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div></div></div><div id="Loading" class="loading"><div class="loading-indicator"><img src="::ImagesPath::/loading.gif" alt="::Starting::" title="::Starting::"/><span>::Starting::</span></div></div><div id="Desktop" class="Desktop"><iframe id="frameHistory" name="frameHistory" class="history"></iframe><iframe id="frameSignatureApp" name="frameSignatureApp" class="signature-app" src="::Url::/signapp.html" style="display:none;"></iframe><div id="pushClientHolder" style="display:none;"></div><div style="display: none;"><img src="::ImagesPath::/s.gif"></img><img src="::ImagesPath::/icons/loading.gif"></img><img src="::ImagesPath::/backgrounds/text-bg.gif"></img><img src="::ImagesPath::/icons/add-trigger.gif"></img><img src="::ImagesPath::/icons/expand-trigger.gif"></img><img src="::ImagesPath::/icons/collapse-trigger.gif"></img><img src="::ImagesPath::/icons/search-trigger.gif"></img><img src="::ImagesPath::/icons/add-trigger.gif"></img><img src="::ImagesPath::/icons/raise-trigger.gif"></img><img src="::ImagesPath::/icons/bury-trigger.gif"></img><img src="::ImagesPath::/icons/delete-trigger.gif"></img><img src="::ImagesPath::/icons/addition-trigger.gif"></img><img src="::ImagesPath::/icons/subtraction-trigger.gif"></img></div><div id="LayoutHeader" class="layout header"><div class="leftbox"><div id="HeaderLogo" class="logo"><table><tr><td><a class="command home" href="showhome()" title="::ShowHome::"></a><img class="federation image"/></td><td style="vertical-align:middle;"><a class="command home" href="showhome()" title="::ShowHome::"></a><table><tr><td><div class="space label subtitle"></div></td></tr><tr><td><div class="model label title"></div></td></tr></table></td></tr></table></div><!--<div id="DialogSearchNodes" style="float:left;margin:16px 10px;"></div>--><div id="ActionLoading" class="actionloading">::Loading::</div></div><div class="rightbox"><div id="ToolbarHeader" class="toolbar header"></div><div id="ViewUser" class="block fright"></div></div></div><div id="LayoutMain" class="layout main"><div id="DialogException"></div><div id="LayoutMainCenter" class="layout main center" style="overflow:hidden;"><div id="LayoutMainCenterHeader" class="layout main center header"><div id="ToolbarMain"></div><div id="DialogSectionsNavigator"></div></div><div id="LayoutMainCenterBody" class="layout main center body"><div class="messages"><div id="ActionDone" class="actiondone"></div></div><div id="NodesContainer"></div></div><div id="LayoutMainCenterFooter" class="layout main center footer"><div id="ToolbarMainFooter"></div></div><div id="ViewTaskList"></div><div id="ViewTrash"></div><div id="ViewDashboard"></div><div id="ViewAnalysisboard"></div><div id="ViewTeam"></div><div id="ViewSourceList"></div><div id="ViewSource"></div><div id="ViewRoleList"></div><div id="ViewRole"></div><div id="ViewNotificationList"></div><div id="ViewPageNews"></div></div><div id="LayoutMainRight" class="layout main right" style="height:100%;"><div id="TabPanelsMainRight" style="height:100%;"><div id="TabPanelMainRightHelper"><div id="ViewerHelperSideBar" class="viewer helper"></div></div></div></div></div><div id="LayoutFooter" class="layout footer"><div class="leftbox"><div id="FooterLogosPanel"><img class="model image"/></div><div class="powered">powered by<span>Monet</span></div></div><div class="rightbox"><div id="ViewFurnitureSet"></div></div></div></div>';
AppTemplate.DialogSearchNodes='<div class="dialog searchnodes"><input class="condition" type="text" size="40" name="dlgSearchNodes.Condition" id="dlgSearchNodes.Condition"/><input class="search" type="button" name="dlgSearchNodes.ButtonSearch" id="dlgSearchNodes.ButtonSearch" value="::Search::"/></div>';
AppTemplate.ViewNode='<div class="view node"><div class="NodeContainer"></div></div>';
AppTemplate.DialogEditNode='<div id="dlgEditNode" class="dialog editnode"><div class="x-dlg-hd">::Title::</div><div class="x-dlg-bd"><div id="dlgEditNode.center" class="x-layout-inactive-content" style="padding:10px;"><div id="dlgEditNode.status" class="status"><div class="template"><div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div><div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3 class="title"></h3><span class="summary"></span></div></div></div><div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div></div></div><div id="dlgEditNode.dialogbox"><div class="loading">::Loading::</div></div></div></div></div>';
AppTemplate.DialogEditNodeDescriptors='<div id="dlgEditNodeDescriptors" class="dialog editnodedescriptors"><div class="x-dlg-hd">::Title::</div><div class="x-dlg-bd"><div id="dlgEditNodeDescriptors.center" class="x-layout-inactive-content" style="padding:10px;"><div id="dlgEditNodeDescriptors.status" class="status"><div class="template"><div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div><div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3 class="title"></h3><span class="summary"></span></div></div></div><div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div></div></div><div id="dlgEditNodeDescriptors.report" class="report"></div><div class="outfield required"><div class="outtitle">::Label::</div><div class="outbody"><input class="text" type="text" name="dlgEditNodeDescriptors.label" id="dlgEditNodeDescriptors.label"/></div></div><div class="outfield"><div class="outtitle">::Description::</div><div class="outbody"><textarea rows="3" id="dlgEditNodeDescriptors.description" name="dlgEditNodeDescriptors.description" rows="7"></textarea></div></div></div></div></div>';
AppTemplate.DialogAddNode='<div id="dlgAddNode" class="dialog addnode"><div class="x-dlg-hd">::Title::</div><div class="x-dlg-bd"><div id="dlgAddNode.center" class="x-layout-inactive-content body"><div id="dlgAddNode.status" class="status"><div class="template"><div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div><div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3 class="title"></h3><span class="summary"></span></div></div></div><div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div></div></div><div class="step 1 main"><div class="outfield"><div class="outtitle">::AddFrom::</div><div class="outbody"><div class="radio"><input type="radio" name="dlgAddNode.from" id="dlgAddNode.addblank" value=".branch.fromfile" checked/><label for="dlgAddNode.addblank"/>::AddBlank::</label><div id="dlgAddNode.addblanklist" class="outfield nodetypelist"><div class="outtitle" style="font-weight: normal;">::NodeTypeListBlank::</div><div class="outbody"><input id="dlgAddNode.addblanklistinput"></input></div></div></div><div class="radio"><input type="radio" name="dlgAddNode.from" id="dlgAddNode.addfromfile" value=".branch.fromfile"/><label for="dlgAddNode.addfromfile"/>::AddFromFile::</label></div><div class="radio"><input type="radio" name="dlgAddNode.from" id="dlgAddNode.addfromclipboard" value=".branch.fromclipboard"/><label for="dlgAddNode.addfromclipboard">::AddFromClipboard::</label><div id="dlgAddNode.addfromclipboardlist" class="outfield nodetypelist"><div class="outtitle" style="font-weight: normal;">::NodeTypeList::</div><div class="outbody"><input id="dlgAddNode.addfromclipboardlistinput"></input><div id="dlgAddNode.loadingnodetype" class="ploading">::LoadingNodeType::</div><div id="dlgAddNode.nodetype" class="nodetype"><div>Lista de campos:</div><ul id="dlgAddNode.nodetypefields" class="fields"></ul></div></div></div></div></div></div></div><div class="step 2 branch fromfile"><div class="outfield"><div class="outtitle">::Options::</div><div class="outbody"><div class="radio"><input type="radio" name="dlgAddNode.options" id="dlgAddNode.optionpreserveoriginal" value="all"/><label for="dlgAddNode.optionpreserveoriginal"/>::OptionPreserveOriginal::</label></div><div class="radio"><input type="radio" name="dlgAddNode.options" id="dlgAddNode.optionreplace" value="selected"/><label for="dlgAddNode.optionreplace">::OptionReplace::</label></div><div class="radio"><input type="radio" name="dlgAddNode.options" id="dlgAddNode.optionduplicate" value="selected"/><label for="dlgAddNode.optionduplicate">::OptionDuplicate::</label></div></div></div><div class="outfield"><div class="outtitle">::Description::</div><div class="outbody"><textarea rows="3" name="dlgAddNode.description" id="dlgAddNode.description" style="height: 150px;"></textarea></div></div><div class="outfield"><div class="outtitle">::File::</div><div class="outbody"><div class="dialoguploadfilebox"><table id="dlgAddNode.filelist" class="filelist"></table></div><iframe class="dialogufbi" name="dlgAddNode.uploadfileframe" frameborder="0" scrolling="no"></iframe></div></div></div><div class="step 2 3 branch fromclipboard"><div id="dlgAddNode.dataimporter" class="dataimporter"></div></div></div></div></div>';
AppTemplate.Wizard='<div class="wizard"><div class="steps"></div><div class="display"></div><div class="toolbar"><table><tr><td><a class="behaviour button previous">::Previous::</a></td><td><a class="behaviour button next">::Next::</a></td><td><a class="behaviour button finish">::Finish::</a></td></tr></table></div></div>';
AppTemplate.DialogEditNodeDocument='<div class="dialog editnodedocument"><div class="body"><div class="step 1 main"><div class="wizard title" style="display:none;">::Step1Wizard::</div><div class="outtitle">::Step1Title:: (::Step1Wizard::)</div><div class="outdescription">::Step1Description::</div><div class="outbody"><div class="outfield"><a class="button download" href="javascript:void(null)">::DownloadDocument::</a><a class="button continue" href="javascript:void(null)">::ContinueEdition::</a><a class="cancel" href="javascript:void(null)">::CancelEdition::</a></div></div></div><div class="step 2"><div class="wizard title" style="display:none;">::Step2Wizard::</div><div class="outtitle">::Step2Title:: (::Step2Wizard::)</div><div class="outdescription">::Step2Description::</div><div class="outbody"><div class="outfield"><a class="button download again" href="javascript:void(null)">::DownloadAgain::</a><a class="cancel" href="javascript:void(null)">::CancelEdition::</a></div></div></div><div class="step 3"><div class="wizard title" style="display:none;">::Step3Wizard::</div><div class="outtitle">::Step3Title:: (::Step3Wizard::)</div><div class="outdescription">::Step3Description::</div><div class="outbody"><div class="outfield"><a class="button replace" href="javascript:void(null)">::ReplaceDocument::</a><a class="cancel" href="javascript:void(null)">::CancelEdition::</a></div></div></div><div class="step 4"><div class="wizard title" style="display:none;">::Step4Wizard::</div><div class="outtitle">::Step4Title:: (::Step4Wizard::)</div><div class="outdescription">::Step4Description::</div><div class="outbody"><div class="outfield file"><form id="DialogEditNodeDocument.form"><input type="file" size="35" name="file" class="file"/></form><div id="dlgEditNodeDocument.status"><div class="title" style="display:none;"></div><span class="summary" style="color:red;"></span></div></div><div class="outfield"><a class="button finish" href="javascript:void(null)">::FinishEdition::</a><a class="cancel" href="javascript:void(null)">::CancelEdition::</a></div></div></div></div></div>';
AppTemplate.DialogGenerateReport='<div id="dlgGenerateReport" class="dialog generatereport"><div class="x-dlg-hd">::Title::</div><div class="x-dlg-bd"><div id="dlgGenerateReport.center" class="x-layout-inactive-content body" style="padding:10px;"><div id="dlgGenerateReport.status" class="status"><div class="template"><div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div><div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3 class="title"></h3><span class="summary"></span></div></div></div><div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div></div></div><div class="outfield"><div class="outtitle">::Options::</div><div class="outbody"><div class="radio option"><input type="radio" name="dlgGenerateReport.options" id="dlgGenerateReport.optionall" value="all" checked/><label for="dlgGenerateReport.optionall">::OptionAll::</label></div><div class="radio option"><input type="radio" name="dlgGenerateReport.options" id="dlgGenerateReport.optionselection" value="selection"/><label for="dlgGenerateReport.optionselection">::OptionSelection::</label><div class="info">::AddSelectedNodesInfo::</div></div></div></div><div class="outfield"><div class="outtitle">::Filters::</div><div class="outbody"><div class="radio filter"><input type="checkbox" name="dlgGenerateReport.filtertype" id="dlgGenerateReport.filtertype" value="all"/><label for="dlgGenerateReport.filtertype">::FilterNodeType::</label><div class="dialog"><div id="dlgGenerateReport.filtertypelist" class="list">::NoNodeTypes::</div><input id="dlgGenerateReport.filtertypeselector"></input></div></div><div class="radio filter"><input type="checkbox" name="dlgGenerateReport.filterdates" id="dlgGenerateReport.filterdates" value="all"/><label for="dlgGenerateReport.filterdates">::FilterDates::</label><div class="dialog"><div class="row"><div class="column title">::FromDate::</div><div class="column selector" style="margin-left: 10px;"><input id="dlgGenerateReport.filterdatesfrom"></input></div></div><div class="row"><div class="column title">::ToDate::</div><div class="column selector" style="margin-left: 14px;"><input id="dlgGenerateReport.filterdatesto"></input></div></div></div></div></div></div></div></div></div>';
AppTemplate.DialogGenerateReportType='<li class="nodetype"><span class="title">{sTitle}</span><a class="link" href="deletenodetype({Id})">::Delete::</a></li>';
AppTemplate.DialogShareNode='<div id="dlgShareNode" class="dialog sharenode"><div class="x-dlg-hd">::Title::</div><div class="x-dlg-bd"><div id="dlgShareNode.center" class="x-layout-inactive-content" style="padding:10px;"><div id="dlgShareNode.status" class="status"><div class="template"><div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div><div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3 class="title"></h3><span class="summary"></span></div></div></div><div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div></div></div><div id="dlgShareNode.Info" class="x-layout-inactive-content" style="padding:10px;"><div class="outfield"><div class="outtitle">::Description::</div><div class="outbody"><textarea rows="10" name="dlgShareNode.Description" id="dlgShareNode.Description"/></textarea></div></div><div class="outfield"><div class="outtitle">::ExpireDate::</div><div class="outbody"><input id="dlgShareNode.ExpireDate" name="dlgShareNode.ExpireDate" type="text"/></div></div></div><div id="dlgShareNode.Users" class="x-layout-inactive-content" style="padding:10px;"><table class="composition" cellspacing="10" cellpadding="10"><tr><td width="290px"><div class="outfield"><div class="outtitle">::Users::</div><div id="dlgShareNode.UserList" class="list">::NoUsers::</div></div></td><td width="20px">&nbsp;</td><td width="290px"><div id="dlgShareNode.DialogSearchUsers"></div></td></tr></table></div></div></div></div>';
AppTemplate.DialogShareNodeUser='<li class="user"><span class="title">{sFullname}</span><a class="link" href="deleteuser({Id})">::Delete::</a></li>';
AppTemplate.ViewTask='<div class="view task"><div class="TaskContainer"></div></div>';
AppTemplate.ViewTeam='<div class="view team"><div class="TeamContainer"></div></div>';
AppTemplate.ViewerHelperToolbarNavigation='<a class="command #{code}" href="#{command}">#{label}</a>';
AppTemplate.ViewerHelperToolbarAdd='<a class="command button #{code}" href="addnode(blank,#{code},null,null,#{parent})">#{label}</a>';
AppTemplate.ViewerHelperToolbarCopy='<a class="command button #{code}" href="copynode(#{id},#{mode},#{parent})">::Copy::</a>';
AppTemplate.ViewerHelperToolbarDownload='<a class="command button #{code}" href="downloadnode(#{id})">#{label}</a>';
AppTemplate.ViewerHelperToolbarEdit='<a class="command button #{css} #{code}" href="shownode(#{id},#{mode},#{index},#{count})">#{label}</a>';
AppTemplate.ViewerHelperToolbarPrint='<a class="command button #{code}" href="printnode(#{id},#{format},#{view})">#{label}</a>';
AppTemplate.ViewerHelperToolbarTool='<a class="command button #{code}" href="executenodecommand(#{id},#{name})" style="display:#{display};">#{label}</a>';
AppTemplate.ViewerHelperToolbarCustom='<a class="command button #{css} #{code}" href="#{command}" style="display:#{display};">#{label}</a>';
AppTemplate.ViewerHelperToolbarSimple='#{operation}';
AppTemplate.ViewerHelperToolbarMultiple='<a class="button behaviour" href="toggleselector()">#{label}</a><ul class="options">#{operations}</ul>';
AppTemplate.ViewerHelperToolbarMultipleItem='<li class="option">#{operation}</li>';
AppTemplate.ViewerHelperToolbar='<table><tr><td class="pivot"><a style="display:none;" class="command button highlight backtask">::BackTask::</a></td><td><a style="display:none;" class="command button highlight backlink">::BackNode::</a></td></tr></table>';
AppTemplate.ViewNodeNotesItem='<li class="note"><input class="name" type="text" value="{name}" {readonly}></input><input class="value" value="{value}" {readonly}></input><a class="delete" href="javascript:void(null)">::Delete::</a></li>';
AppTemplate.ViewNodeNotes='<div class="view node notes"><ul class="notes"></ul><ul><li class="dialog"><input class="name" type="text" placeholder="::DialogAddNoteName::"/><input class="value" placeholder="::DialogAddNoteValue::"></input><div><a class="button addnote" href="javascript:void(null)">::Add::</a></div></li></ul></div>';
AppTemplate.ViewerHelperSidebarAdd='<li><a class="command #{code}" href="addnode(blank,#{code},null,null,#{parent})">#{label}</a></li>';
AppTemplate.ViewerHelperSidebarCopy='<li><a class="command #{code}" href="copynode(#{id},#{mode},#{parent})">::Copy::</a></li>';
AppTemplate.ViewerHelperSidebarDownload='<li><a class="command #{code}" href="downloadnode(#{id})">#{label}</a></li>';
AppTemplate.ViewerHelperSidebarPrint='<li><a class="command #{code}" href="printnode(#{id},#{format},#{view})">#{label}</a></li>';
AppTemplate.ViewerHelperSidebarTool='<li><a class="command #{code}" href="executenodecommand(#{id},#{name})" style="display:#{display};">#{label}</a></li>';
AppTemplate.ViewerHelperSidebarCustom='<li><a class="command #{code}" href="#{command}" style="display:#{display};">#{label}</a></li>';
AppTemplate.ViewerHelperSidebar='<div class="block add"><div class="info"><div class="title">::Add::</div></div><ul></ul></div><div class="block observers"></div><div class="component"><div class="block editors"></div><div class="block preview"></div><div class="block list"></div><div class="block revisionlist"></div><div class="block map"></div><div class="block source"></div><div class="block role"></div></div><div class="block tools"><div class="info"><div class="title">::Tools::</div></div><ul></ul></div><div class="block chat"></div><div class="block help"></div>';
AppTemplate.ViewerHelperPage='<div class="info"><div class="title">::Label::</div></div><div class="page"></div>';
AppTemplate.ViewerHelperEditors='<div class="header"><!--<div class="toolbar"><span>::GotoField::</span>&nbsp;<a class="command" href="firstfield()">::FirstField::</a>&nbsp;|&nbsp;<a class="command" href="previousfield()">::PreviousField::</a>&nbsp;|&nbsp;<a class="command" href="nextfield()">::NextField::</a>&nbsp;|&nbsp;<a class="command" href="lastfield()">::LastField::</a></div><div class="toolbar right"><a class="command undo" href="undonode()" title="::Undo::" alt="::Undo::"></a><a class="command redo" href="redonode()" title="::Redo::" alt="::Redo::"></a></div>--></div><div class="editor eboolean"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageBoolean::</div><div class="description"></div><div class="dialogs"><div class="dialog store"><div class="toolbar"></div><div class="grid"></div></div><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div><div class="editor echeck"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageCheck::</div><div class="description"></div><div class="dialogs"><div class="dialog source"><div class="subtitle">::Source::</div><select></select></div><div class="toolbar"><div class="filter"><span></span><input type="text" class="text filter"></input></div></div><div class="dialog history"><div class="grid"></div></div><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--><!--<div><a class="behaviour togglecheck" href="togglecheck()">::Check::</a></div>--></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div><div class="editor edate"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageDate::</div><div class="description"></div><div class="dialogs"><div class="dialog date"><div><div class="datepicker"></div></div></div><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div><div class="verrors"><div class="verror format">::DateWrong::</div></div></div></div><div class="editor efile"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageFile::</div><div class="description"></div><div class="dialogs"><div class="dialog fileupload"><div class="dialog"><div><div>::FileLabel::</div><input class="label" type="text"></input></div><div><div>::File::</div><form class="form" method="post" enctype="multipart/form-data"><input type="file" name="newFile" class="input file" multiple/></form></div><br><div class="uploading"></div><div class="filesize exceeded"></div></div></div><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--><!--<div><a class="behaviour download" href="download()">::Download::</a></div>--></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div><div class="editor egroup"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="dialogs"><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--></div></div><div class="edition"></div></div><div class="editor elink"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageLink::</div><div class="description"></div><div class="dialogs"><div class="dialog source"><div class="subtitle">::Source::</div><select></select></div><div class="toolbar"><div class="filter"><span></span><input type="text" class="text filter"/></div><a class="view-table active" href="#" title="::Table::"></a><a class="view-locations" href="#" title="::Locations::"></a></div><div class="dialog store"><div class="grid"></div></div><div class="dialog history"><div class="grid"></div></div><div class="dialog location"><div class="map"></div><div class="info"></div></div><div class="toolbar"><div><a class="behaviour selectother" href="selectother()">::SelectOther::</a></div><div><a class="behaviour togglehistory" href="togglehistory()"></a></div><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div><div class="editor elist"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageList::</div><div class="description"></div><div class="dialogs"><div class="dialog list"><div class="toolbar">::Select::&nbsp;&nbsp;<a class="behaviour" href="selectall()">::All::</a><span>&nbsp;|&nbsp;</span><a class="behaviour" href="selectnone()">::None::</a><span>&nbsp;|&nbsp;</span><a class="behaviour" href="selectinvert()">::Invert::</a></div><ul class="items"></ul><div class="toolbar"><div><a class="behaviour" href="additem()">::Add::</a></div><div><a class="behaviour deleteitems" href="deleteitems()">::DeleteSelected::</a></div><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--></div></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div><div class="editor enumber"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageNumber::</div><div class="description"></div><div class="dialogs"><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--><div><a class="behaviour increment" href="increment()">::Increment::</a></div><div><a class="behaviour decrement" href="decrement()">::Decrement::</a></div></div></div><div class="edition"><div class="fmsgs"><div class="fmsg format"></div><div class="fmsg increments"></div><div class="fmsg range"></div><div class="fmsg equivalences"></div><div class="fmsg ihelp"></div></div><div class="verrors"><div class="verror format">::NumberWrong::</div><div class="verror range">::NumberRangeWrong::</div></div></div></div><div class="editor epattern"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageFormat::</div><div class="description"></div><div class="dialogs"><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div><div class="verrors"><div class="verror format">::FormatWrong::</div></div></div></div><div class="editor epicture"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessagePicture::</div><div class="description"></div><div class="dialogs"><div class="dialog pictureupload"><div class="dialog"><form class="form" method="post" enctype="multipart/form-data"><input type="hidden" class="slicex" name="slicex" value="10"/><input type="hidden" class="slicey" name="slicey" value="10"/><input type="hidden" class="slicewidth" name="slicewidth" value=""/><input type="hidden" class="sliceheight" name="sliceheight" value=""/><input type="file" name="newPicture" class="input file" multiple/></form><div class="crop imageContainer"><img class="preview"/><div class="toolbar upload"><div class="message">::CropMessage::</div><a class="button upload" href="upload()">::Accept::</a></div></div><div class="uploading"></div><div class="filesize exceeded"></div></div></div><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--><!--<div><a class="behaviour download" href="download()">::Download::</a></div>--></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div><div class="editor ecomposite"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="dialogs"><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--></div></div><div class="edition"></div></div><div class="editor eselect"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageSelect::</div><div class="description"></div><div class="dialogs"><div class="dialog source"><div class="subtitle">::Source::</div><select></select></div><div class="toolbar"><div class="filter"><span></span><input type="text" class="text filter"></input></div></div><div class="dialog store"><div class="grid"></div></div><div class="dialog history"><div class="grid"></div></div><div class="toolbar"><div><a class="behaviour selectother" href="selectother()">::SelectOther::</a></div><div><a class="behaviour togglehistory" href="togglehistory()"></a></div><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div><div class="editor etext"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageText::</div><div class="description"></div><div class="dialogs"><div class="toolbar"><div class="filter"><span></span><input type="text" class="text filter"></input></div></div><div class="dialog history"><div class="grid"></div></div><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--><div><a class="behaviour supindex" href="supindex()">::SupIndex::</a></div><div><a class="behaviour subindex" href="subindex()">::SubIndex::</a></div><div><a class="behaviour bold" href="bold()">::Bold::</a></div><div><a class="behaviour italic" href="italic()">::Italic::</a></div></div></div><div class="edition"><div class="preview"></div><div class="fmsgs"><div class="fmsg ihelp"></div></div><div class="verrors"><div class="verror length">::LengthWrong::</div></div></div></div><div class="editor esnode"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageLink::</div><div class="description"></div><div class="dialogs"><div class="toolbar"><div class="filter"><span></span><input type="text" class="text filter"></input></div></div><div class="dialog store"><div class="grid"></div></div><div class="dialog history"><div class="grid"></div></div><div class="toolbar"><div><a class="behaviour selectother" href="selectother()">::SelectOther::</a></div><div><a class="behaviour togglehistory" href="togglehistory()"></a></div><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--><!--<div><a class="behaviour clearfield" href="clearfield()">::ClearField::</a></div>--></div></div><div class="edition"><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div><div class="editor eserial"><div class="info"><div class="title">::Edition::</div><!--<a class="help" href="#" title="::Help::"></a>--></div><div class="emessage"></div><div class="description"></div><div class="dialogs"><div class="toolbar"><!--<div><a class="behaviour loaddefaultvalue" href="loaddefaultvalue()">::LoadDefaultValue::</a></div>--><!--<div><a class="behaviour adddefaultvalue" href="adddefaultvalue()">::AddDefaultValue::</a></div>--></div></div><div class="edition">::MessageSerial::</div></div><div class="editor elocation"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageLocation::</div><div class="description"></div><div class="dialogs"><div class="dialog location"><div class="map"></div><div class="info"></div><div class="toolbar"><div><a class="op point" href="#">::AddPoint::</a></div><div><a class="op line" href="#">::AddLine::</a></div><div><a class="op poly" href="#">::AddPolygon::</a></div><div><a class="op clean" href="#">::CleanLocation::</a></div><div><a class="op finish" href="#">::FinishEditingLocation::</a></div><div><a class="op cancel" href="#">::CancelEditingLocation::</a></div><div>&nbsp;</div><div><a class="op center" href="#">::CenterLocation::</a></div></div></div></div><div class="edition"><div class="preview"></div><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div><div class="editor esummation"><div class="info"><div class="title">::Edition::</div><a class="help" href="#" title="::Help::"></a></div><div class="emessage">::MessageLocation::</div><div class="description"></div><div class="dialogs"><div class="dialog summation"><div class="info"></div></div></div><div class="edition"><div class="preview"></div><div class="fmsgs"><div class="fmsg ihelp"></div></div></div></div>';
AppTemplate.ViewerHelperPreview='<div class="info"><div class="title">::Title::</div></div><div id="PreviewButtons"></div><div id="PreviewThumbnails"></div>';
AppTemplate.ViewerHelperObservers='<label>::Label::</label><ul class="observers"></ul>';
AppTemplate.ViewerHelperObserversItem='<li class="observer"><div class="box" style="background-color:#{color}"></div><div class="fullname" style="color:#{color}">#{fullname}#{field}</div></li>';
AppTemplate.ViewerHelperRevisionList='<div class="info"><div class="title">::Title::</div></div><div id="RevisionListViewer"></div>';
AppTemplate.ViewerHelperRevisionListItem='<div class=\'item\'><table width=\'100%\'><tr><td><div class=\'command label\'>#{label}</div></td></tr></table></div>';
AppTemplate.ViewerHelperChatItem='<li><div class="date"><span class="state"></span><span class="value"></span></div><div class="message"></div></li>';
AppTemplate.ViewerHelperChatNoItems='<li><div>::NoMessages::</div></li>';
AppTemplate.ViewerHelperChat='<div class="info"><div class="title">::Title::</div></div><ul class="items"></ul><ul class="toolbar"><li><textarea type="text" placeholder="::WriteMessage::"></textarea><a class="button sendmessage" href="javascript:void(null)">::SendMessage::</a></li></ul>';
AppTemplate.ViewerHelperMap='<div id="MapViewerWizard"><div class="edition"><div class="title">::Edition::</div><div class="info"></div><div class="toolbar"></div></div><div class="navigation"><div class="title">::Navigation::</div><div class="search"></div><div class="toolbar"></div></div></div>';
AppTemplate.ViewerHelperSource='<div id="SourceViewerWizard"><div id="ViewHelperSource"><div class="dialog publish" style="display:none;"><div class="title">::NewTerms::</div><div class="description">::NewTermsDescription::</div><div class="toolbar" style="margin-top: 5px;">::Select::<a class="selectall" href="javascript:void(null)">::SelectAll::</a>&nbsp;-&nbsp;<a class="selectnone" href="javascript:void(null)">::SelectNone::</a></div><ul class="container"></ul><div class="toolbar"><input class="button publish" type="button" value="::Publish::"/></div></div><div class="dialog term" style="display:none;"><div class="title"></div><div class="fields"><table><tr class="field code"><td class="label"><label>::Code::</label></td><td><input type="text" class="component" readonly disabled></input></td></tr><tr class="field label"><td class="label"><label>::Label::</label></td><td><input type="text" class="component"></input></td></tr><tr class="field type"><td class="label"><label>::Type::</label></td><td><div class="component"><div><input type="radio" id="source_type_term" name="source_type" class="type" value="0" checked/><label for="source_type_term">::Term::</label></div><div><input type="radio" id="source_type_category" name="source_type" class="type" value="2"/><label for="source_type_category">::Category::</label></div></div></td></tr><tr class="field tags"><td class="label"><label>::Tags::</label></td><td><div class="component"><ul></ul><ul class="template"><li><table><tr><td style="width:47%"><input type="text" class="name" placeholder="::Name::"/></td><td style="width:47%"><input type="text" class="value" placeholder="::Value::"/></td><td><a class="deletetag" href="javascript:void(null)"></a></td></tr></table></li></ul><a class="addtag" href="javascript:void(null)">::Add::...</a></div></td></tr><tr class="field superterm"><td class="label"><label for="source_superterm" class="superterm">::SuperTerm::</label></td><td><input type="checkbox" id="source_superterm" class="component" value="true"/></td></tr></table></div><div class="toolbar"><input class="button enable" type="button" value="::Enable::"/><input class="button disable" type="button" value="::Disable::"/><input class="button delete" type="button" value="::Delete::"/></div></div><div class="dialog children" style="display:none;"><div class="title"></div><div class="fields"><table><tr class="field childcode"><td class="label"><label>::Code::</label><div class="message term exists">::TermExists::</div></td><td><input type="text" class="component"></input></td></tr><tr class="field childlabel"><td class="label"><label>::Label::</label></td><td><input type="text" class="component"></input></td></tr></table></div><div class="toolbar"><input class="button add" type="button" value="::Add::"/></div></div></div></div>';
AppTemplate.ViewerHelperRole='<div id="RoleViewerWizard"><div id="ViewHelperRole"><div class="dialog"><div><span class="title"></span><span class="states"><span class=\'state active\'>::StateActive::</span><span class=\'state pending\'>::StatePending::</span><span class=\'state inactive\'>::StateInactive::</span></span></div><div class="subtitle"><span></span>&nbsp;-&nbsp;<span class="definitiontype"></span></div><div class="dates"><div class=\'date pending\'></div><div class=\'date active\'></div><div class=\'date noexpires\'>::DateNoExpires::</div><div class=\'date expires\'></div><div class=\'date expired begin\'></div><div class=\'date expired end\'></div></div><div class="fields"><table><tr class="field definitiontype"><td class="label"><label>::DefinitionType::</label></td><td><select class="component"></select></td></tr><tr class="field type"><td class="label"><label>::Type::</label></td><td><div class="component"><input type="radio" id="role_type_user" name="role_type" class="type" value="user" checked/><label id="role_type_user_label" for="role_type_user" style="margin-right:10px;">::TypeUser::</label><input type="radio" id="role_type_service" name="role_type" class="type" value="service"/><label id="role_type_service_label" for="role_type_service" style="margin-right:10px;">::TypeService::</label><input type="radio" id="role_type_feeder" name="role_type" class="type" value="feeder"/><label id="role_type_feeder_label" for="role_type_feeder">::TypeFeeder::</label><div class="dialog users" style="display:none;"><div class="message user">::SelectUser::</div><div class="usersbox"></div></div><div class="dialog services" style="display:none;"><div class="message service">::SelectService::</div><div class="servicesbox"></div></div><div class="dialog feeders" style="display:none;"><div class="message feeder">::SelectFeeder::</div><div class="feedersbox"></div></div></div></td></tr><tr class="field begindate"><td class="label"><label>::BeginDate::</label></td><td><div class="message begin">::SelectBeginDate::</div><input class="component" readonly></input><div class="picker"></div></td></tr><tr class="field expiredate"><td class="label"><input type="checkbox" id="role_expires" class="expires" value="true" style="margin-top:2px;margin-right:5px;width:13px;"/><label for="role_expires" class="expires">::Expires::</label></td><td style="height:30px;"><div class="message expire">::SelectExpireDate::</div><input class="component" readonly></input><div class="picker"></div></td></tr><tr class="historyroles"><td colspan="2"><div class="title">::HistoryRoles::</div><div class="historyitems"></div></td></tr></table></div></div><div class="toolbar"><input class="button add" type="button" value="::ButtonAdd::"/><input class="button addother" type="button" value="::ButtonAddOther::"/><input class="button save" type="button" value="::ButtonSave::"/></div></div></div>';
AppTemplate.ViewerHelperRoleUser='<div class="viewerhelperroleuser"><div class="label">{label}</div><div class="email">{email}</div></div>';
AppTemplate.ViewerHelperList='<div id="ListViewerWizard"></div>';
AppTemplate.ViewFurnitureSetItem='<li class="active_#{active} highlighted_#{highlighted}"><a class="command" href="#{command}" title="#{fullLabel}">#{shortLabel}<span>#{bubble}</span></a></li>';
AppTemplate.ViewFurnitureSetBannerItem='<li><a class="command label" href="#{command}">#{label}</a></li>';
AppTemplate.ViewFurnitureSet='<div class="view furnitureset"><ul></ul><div class="banner"><label>::News::</label><ul></ul></div></div>';
EMPTY = "";
BLANK = " ";
NBSP = "&nbsp;";
ELLIPSE = "...";
DOT = ".";
COMMA = ",";
EQUAL = "=";
QUOTE = "'";
LEFT_BRACKET = "(";
RIGHT_BRACKET = ")";
DOUBLE_QUOTE = '"';
AMP = "&";
DASH = "-";
SLASH = "/";
SHARP = "#";
BR = "<br>";
UL = "<ul>";
_UL = "</ul>";
LI = "<li>";
_LI = "</li>";
SPACE = "&nbsp;";
PX = 'px';
DUMMY = "dummy";
QUESTION = "?";

NULL_STRING = "null";
TOOLBAR = "toolbar";
DATE_FORMAT_INTERNAL = "d/m/Y/H:i:s";

TEMPLATE_SEPARATOR = "::";
DEFAULT_WIDTH = "100%";
DEFAULT_HEIGHT = "100%";
POSITION_ABSOLUTE = "absolute";
POSITION_RELATIVE = "relative";

NODE_DATA_CONTAINER_ID_PREFIX = "form_";
MONET_LINK_PATTERN = "ml://([^\\.]*)\\.([^/]*)(/edit)?";
MONET_LINK_TYPE_NODE = "node";
MONET_LINK_TYPE_TASK = "task";
MONET_LINK_TYPE_NEWS = "news";
KEY_TAG = "%KEY%";

ID_NODE_SEARCH = "idsearch";

MONET_FILTER_SEPARATOR = ":";
MONET_FILTERS_SEPARATOR = "_f_";

OPTION_YES = "yes";
OPTION_OK = "ok";
OPTION_NO = "no";
OPTION_CANCEL = "cancel";

CURRENT_NODE = "current";

BUTTON_RESULT_YES = OPTION_YES;
BUTTON_RESULT_OK = OPTION_OK;
BUTTON_RESULT_NO = OPTION_NO;
BUTTON_RESULT_CANCEL = OPTION_CANCEL;

SEARCH_RESULTS_PER_PAGE = 10;

MODE_LINK = "link";
MODE_EMBED = "embed";
MODE_FORM = "form";

BUSINESS_MODEL_BROWSE = "browse";
BUSINESS_MODEL_EXPORT = "export";
BUSINESS_MODEL_PRINT = "print";

TARGET_ENVIRONMENT = "environment";

MAX_SHORT_LABEL_LENGTH = "42";
MAX_SHORT_COMPOSITE_LENGTH = "80";
MAX_SHORT_DESCRIPTION_LENGTH = "60";
MAX_SHORT_COMPOSITE_TITLE_LENGTH = "70";

ORIENTATION_HORIZONTAL = "horizontal";
ORIENTATION_VERTICAL = "vertical";

DESCRIPTOR_LABEL = "label";
DESCRIPTOR_DESCRIPTION = "description";
DESCRIPTOR_PRODUCEDATE = "producedate";
DESCRIPTOR_HIGHLIGHTED = "highlighted";

TEMPLATE_SELECT_NODE_TYPES = "selectnodetypes";

INDEX_PAGE = "index";

FIELD_CODE_SEPARATOR = DASH;
FIELD_WIDGET_CODE_SEPARATOR = SHARP;

FIELD_TYPE_LIST = 'list';
FIELD_TYPE_SELECT = 'select';
FIELD_TYPE_DATE = 'date';
FIELD_TYPE_FILE = 'file';
FIELD_TYPE_PICTURE = 'picture';
FIELD_TYPE_FILE = 'file';
FIELD_TYPE_BOOLEAN = 'boolean';
FIELD_TYPE_TEXT = 'text';
FIELD_TYPE_NUMBER = "number";
FIELD_TYPE_COMPOSITE = "composite";
FIELD_TYPE_LINK = "link";
FIELD_TYPE_FORMULA = "formula";
FIELD_TYPE_DESCRIPTOR = "descriptor";
FIELD_TYPE_CHECK = "check";
FIELD_TYPE_NODE = "snode";
FIELD_TYPE_SERIAL = "serial";
FIELD_TYPE_LOCATION = "location";
FIELD_TYPE_SUMMATION = "summation";

FIELD_CODE = "code";
FIELD_VALUE = "value";

FORMAT_MONET = "Monet";
FORMAT_CVN = "Cvn";
FORMAT_HTML = "Html";
FORMAT_PDF = "Pdf";

G_POINT = "POINT";
G_LINESTRING = "LINESTRING";
G_POLYGON = "POLYGON";
G_MULTIPOLYGON = "MULTIPOLYGON";

OPTION_ALL = "all";
OPTION_SELECTION = "selection";
FILTER_NODE_TYPES = "nodetypes";
FILTER_DATES = "dates";

FILTER_NEWS_POST = "MESSAGE";
FILTER_NEWS_AUTHOR = "AUTHOR";
FILTER_NEWS_TASK = "TASK";
FILTER_NEWS_TYPE = "TYPE";

VIEW_NODE_TYPE_NONE = "none";
VIEW_NODE_TYPE_NODE = "node";
VIEW_NODE_TYPE_COLLECTION = "collection";
VIEW_NODE_TYPE_FORM = "form";
VIEW_TASK_TYPE_TASK = "task";
VIEW_SOURCE_TYPE_SOURCE = "source";
VIEW_TEAM_TYPE_TEAM = "team";

VIEW_TASK_HISTORY_EXTENDED = "extended";
VIEW_TASK_HISTORY_COLLAPSED = "collapsed";

TASK_RECOMMENDED = "recommended";

DEFINITION_TYPE_FORM = "form";

TASK_TYPE_ALL = "all";
TASK_TYPE_NONE = "none";
TASK_TYPE_SHARE = "task.share";
TASK_TYPE_REVISION = "task.revision";
TASK_TYPE_NOTIFICATION = "task.notification";
TASK_TYPE_ATTACH_NODE = "task.attachnode";

TASK_STATE_ALL = "all";
TASK_STATE_NONE = "none";
TASK_STATE_NEW = "new";
TASK_STATE_PENDING = "pending";
TASK_STATE_EXPIRED = "expired";
TASK_STATE_FINISHED = "finished";
TASK_STATE_ABORTED = "aborted";

SERVER_DATE_FORMAT = "d/m/Y/H:i:s";
SERVER_ERROR_PREFIX = "err_";
SERVER_SESSION_EXPIRES = "err_session_expires";
SERVER_USER_NOT_LOGGED = "err_user_not_logged";
SERVER_BUSINESSUNIT_STOPPED = "err_businessunit_stopped";

KEY_ENTER = 13;
INFINITE = "*";

WIDGET_LIST = 'WidgetList';
WIDGET_TABLE = 'WidgetTable';
WIDGET_SELECT = 'WidgetSelect';
WIDGET_DATE = 'WidgetDate';
WIDGET_FILE = 'WidgetFile';
WIDGET_PICTURE = 'WidgetPicture';
WIDGET_BOOLEAN = 'WidgetBoolean';
WIDGET_TEXT = 'WidgetText';
WIDGET_REQUIRED = 'WidgetRequired';
WIDGET_COMPOSITE = 'WidgetComposite';
WIDGET_LINK = 'WidgetLink';
WIDGET_NUMBER = 'WidgetNumber';
WIDGET_FORMULA = 'WidgetFormula';
WIDGET_CHECK = 'WidgetCheck';
WIDGET_DESCRIPTOR = 'WidgetDescriptor';
WIDGET_NODE = 'WidgetNode';
WIDGET_SERIAL = 'WidgetSerial';
WIDGET_LOCATION = 'WidgetLocation';
WIDGET_SUMMATION = 'WidgetSummation';

HISTORY = "history";
SOURCE = "source";
SOURCE_STORE = "store";
DATA_LINK = "datalink";
INDEX = "index";
OTHER = "other";
SEARCH = "search";
DATE = "date";
FILE_UPLOAD = "fileupload";
PICTURE_UPLOAD = "pictureupload";
LIST = "list";
LOCATION = "location";

CSS_LOGO = ".logo";
CSS_FEDERATION_IMAGE = ".federation.image";
CSS_SPACE_IMAGE = ".space.image";
CSS_MODEL_IMAGE = ".model.image";
CSS_HOME_DIALOG = ".dialog";
CSS_ACTIVE = ".active";
CSS_LINK = "._link";
CSS_TEMPLATE_ONE = ".template .one";
CSS_TEMPLATE_OTHER = ".template .other";
CSS_EDITOR = ".editor";
CSS_EDITOR_LINK_CLOSE = "a.close";
CSS_EDITOR_INFO_TITLE = ".title";
CSS_EDITOR_INFO_DESCRIPTION = ".description";
CSS_EDITOR_INFO_IHELP = ".ihelp";
CSS_EDITOR_INFO_EHELP = ".ehelp";
CSS_EDITOR_INFO_CONTEXT = ".context";
CSS_EDITOR_DATE = ".date";
CSS_EDITOR_NUMBER_FORMAT = ".format";
CSS_EDITOR_NUMBER_INCREMENTS = ".increments";
CSS_EDITOR_NUMBER_RANGE = ".range";
CSS_EDITOR_NUMBER_EQUIVALENCES = ".equivalences";
CSS_EDITOR_NUMBER_FORMAT = ".format";
CSS_EDITOR_TOGGLE_HISTORY = ".togglehistory";
CSS_EDITOR_SELECT_OTHER = ".selectother";
CSS_EDITOR_LOAD_DEFAULT_VALUE = ".loaddefaultvalue";
CSS_EDITOR_ADD_DEFAULT_VALUE = ".adddefaultvalue";
CSS_EDITOR_CLEAR_FIELD = ".clearfield";
CSS_EDITOR_CURRENT_POSITION = ".currentposition";
CSS_EDITOR_SET_POINT = ".setpoint";
CSS_EDITOR_SET_LINE = ".setline";
CSS_EDITOR_SET_POLYGON = ".setpolygon";
CSS_EDITOR_CENTER_LOCATION = ".centerlocation";
CSS_EDITOR_HELP = ".help";
CSS_EDITOR_VIEW_LOCATIONS = ".view-locations";
CSS_EDITOR_VIEW_TABLE = ".view-table";
CSS_EDITOR_EMESSAGE = ".emessage";
CSS_EDITOR_TOGGLE_CHECK = ".togglecheck";
CSS_EDITOR_LENGTH = ".length";
CSS_EDITOR_FILTER = "input.filter";
CSS_EDITOR_PREVIEW = ".preview";
CSS_EDITOR_INCREMENT = ".increment";
CSS_EDITOR_DECREMENT = ".decrement";
CSS_EDITOR_DOWNLOAD = ".download";
CSS_EDITOR_SERIAL = ".serial";
CSS_EDITOR_SUP_INDEX = ".supindex";
CSS_EDITOR_SUB_INDEX = ".subindex";
CSS_EDITOR_BOLD = ".bold";
CSS_EDITOR_ITALIC = ".italic";
CSS_EDITOR_DATE_PICKER = ".picker";
CSS_EDITOR_DIALOG_HISTORY = ".history";
CSS_EDITOR_DIALOG_LIST = ".list";
CSS_EDITOR_DIALOG_SOURCE = ".source";
CSS_EDITOR_DIALOG_SOURCE_STORE = ".store";
CSS_EDITOR_DIALOG_OTHER = ".other";
CSS_EDITOR_DIALOG_DATE = ".date";
CSS_EDITOR_DIALOG_LOCATION = ".location";
CSS_EDITOR_DIALOG_FILE_UPLOAD = ".fileupload";
CSS_EDITOR_DIALOG_PICTURE_UPLOAD = ".pictureupload";
CSS_EDITOR_DIALOG_ELEMENT_LOADING = ".loading";
CSS_EDITOR_DIALOG_ELEMENT_EMPTY = ".empty";
CSS_EDITOR_DIALOG_ELEMENT_GRID = ".grid";
CSS_EDITOR_DIALOG_ELEMENT_PREVIEW = ".preview";
CSS_EDITOR_DIALOG_ELEMENT_ITEMS = ".items";
CSS_EDITOR_DIALOG_ELEMENT_ITEM_OPTIONS = ".elementoptions";
CSS_EDITOR_DIALOG_ELEMENT_ITEM_WIDGET = ".elementwidget";
CSS_EDITOR_DIALOG_ELEMENT_ITEM_DELETE = ".delete";
CSS_EDITOR_DIALOG_ELEMENT_ITEM_RAISE = ".raise";
CSS_EDITOR_DIALOG_ELEMENT_ITEM_BURY = ".bury";
CSS_EDITOR_DIALOG_ELEMENT_ITEM_MOVE = ".move";
CSS_EDITOR_DIALOG_ELEMENT_DELETE = ".delete";
CSS_EDITOR_DIALOG_ELEMENT_CURRENT_YEAR = ".currentyear";
CSS_EDITOR_DIALOG_ELEMENT_PREVIOUS = ".previous";
CSS_EDITOR_DIALOG_ELEMENT_NEXT = ".next";
CSS_EDITOR_DIALOG_ELEMENT_DIALOG = ".dialog";
CSS_EDITOR_DIALOG_ELEMENT_INPUT_FILE = "input.file";
CSS_EDITOR_DIALOG_ELEMENT_BUTTON_UPLOAD = ".button.upload";
CSS_EDITOR_DIALOG_ELEMENT_BUTTON_ACCEPT = ".button.accept";
CSS_EDITOR_DIALOG_ELEMENT_CROP_LAYER = ".crop";
CSS_EDITOR_DIALOG_ELEMENT_FORM = ".form";
CSS_EDITOR_DIALOG_ELEMENT_LABEL = ".label";
CSS_EDITOR_DIALOG_ELEMENT_UPLOADING = ".uploading";
CSS_EDITOR_DIALOG_ELEMENT_FILE_SIZE_EXCEEDED = ".filesize.exceeded";
CSS_EDITOR_DIALOG_ELEMENT_THUMBNAIL = ".thumbnail";
CSS_EDITOR_DIALOG_ELEMENT_SLICE_X = ".slicex";
CSS_EDITOR_DIALOG_ELEMENT_SLICE_Y = ".slicey";
CSS_EDITOR_DIALOG_ELEMENT_SLICE_WIDTH = ".slicewidth";
CSS_EDITOR_DIALOG_ELEMENT_SLICE_HEIGHT = ".sliceheight";
CSS_EDITOR_DIALOG_ELEMENT_DAY = ".cday";
CSS_EDITOR_DIALOG_ELEMENT_MONTH = ".cmonth";
CSS_EDITOR_DIALOG_ELEMENT_YEAR = ".cyear";
CSS_EDITOR_DIALOG_ELEMENT_TIME = ".ctime";
CSS_EDITOR_DIALOG_ELEMENT_SELECT = "select";
CSS_EDITOR_VALIDATION_ERROR = ".verror";

VALIDATION_ERROR_FORMAT = "format";
VALIDATION_ERROR_RANGE = "range";
VALIDATION_ERROR_LENGTH = "length";

CLASS_READONLY = "readonly";
CLASS_BUTTON = "button";
CLASS_EDITOR_LAYER = "editorlayer";
CLASS_EDITOR_WAITING_MESSAGE = "message";
CLASS_EDITOR_WAITING_ERROR = "error";
CLASS_GRID = "grid";
CLASS_WIDGET_ELEMENT_LIST_ITEM_OPTIONS_COMPOSITE = "composite";
CLASS_WIDGET_ELEMENT_RELOADING = "reloading";
CLASS_PREVIEW_PAGES_VIEW = "pagesView";

WIDGET_OPTION_EDITOR_OFFSET = 60;
WIDGET_PATTERN_CODES_SEPARATOR = COMMA;

WIDGET_VIEW_MODE_PREVIEW = "preview";
WIDGET_VIEW_MODE_LINK = "link";

//------------------------------------------------------------------

var Variables = new Object;
Variables = {
  Command: "command",
  Dummy: "dummy"
};

var Literals = new Object;
Literals = {

  //Main Layers
  Layout: {
    Header: "LayoutHeader",
    Main: "LayoutMain",
    MainHeader: "LayoutMainHeader",
    MainCenter: "LayoutMainCenter",
    MainCenterHeader: "LayoutMainCenterHeader",
    MainCenterBody: "LayoutMainCenterBody",
    MainRight: "LayoutMainRight",
    Footer: "LayoutFooter"
  },

  Viewers: {
    HelperSideBar: "ViewerHelperSideBar"
  },

  Views: {
    User: "ViewUser",
    Node: "ViewNode",
    FurnitureSet: "ViewFurnitureSet",
    NotificationList: "ViewNotificationList",
    Team: "ViewTeam",
    SourceList: "ViewSourceList",
    Source: "ViewSource",
    RoleList: "ViewRoleList",
    Role: "ViewRole",
    TaskList: "ViewTaskList",
    PageNews: "ViewPageNews",
    Trash: "ViewTrash",
    Dashboard: "ViewDashboard",
    Analysisboard: "ViewAnalysisboard"
  },

  Dialogs: {
    Login: "DialogLogin",
    Exception: "DialogException",
    SearchNodes: "DialogSearchNodes",
    EditNode: "DialogEditNode",
    EditNodeDescriptors: "DialogEditNodeDescriptors",
    SectionsNavigator: "DialogSectionsNavigator"
  },

  Frames: {
    History: "frameHistory",
    SignatureApp: "frameSignatureApp"
  },

  Toolbars: {
    Header: "ToolbarHeader",
    TaskList: "ToolbarTaskList",
    Menu: "ToolbarMenu",
    Main: "ToolbarMain",
    MainFooter: "ToolbarMainFooter",
    Trash: "ToolbarTrash"
  },

  TabPanels: {
    MainRight: "TabPanelsMainRight",
    MainRightHelper: "TabPanelMainRightHelper"
  },

  StyleRules: {
    Command: "command",
    ChangeCommand: "changecommand"
  },

  FloatLayer: {
    LocationTop: "top",
    LocationRight: "right",
    LocationBottom: "bottom",
    LocationLeft: "left",
    LocationCursor: "cursor"
  },

  ActionMessage: {
    Loading: "ActionLoading",
    Done: "ActionDone"
  },

  HeaderLogo: "HeaderLogo",
  FooterLogosPanel: "FooterLogosPanel",
  GotoCondition: "GotoCondition",
  SearchCondition: "SearchCondition",
  Desktop: "Desktop",
  Loading: "Loading",
  LoadingMask: "LoadingMask",
  LoadingIndicator: "LoadingIndicator",

  ReportContainer: "ReportContainer",
  ReportBanner: "ReportBanner",
  NodesContainer: "NodesContainer",
  ListOfThumbs: "PreviewThumbnails",
  ListOfNodes: "ListOfNodes",
  PreviewThumbnails: "PreviewThumbnails",
  PreviewButtons: "PreviewButtons",
  ListViewerWizard: "ListViewerWizard",
  MapViewerWizard: "MapViewerWizard",

  ImagesPath: "ImagesPath",
  Url: "Url",

  //Icon Classes
  DocumentIcon: "DocumentIcon",
  TaskIcon: "TaskIcon",
  Data: "DataInit"

};

var CommonDates = {
  "es": ['Hoy', 'Ayer'],
  "en": ['Today', 'Yesterday']
};

var aMonths = {
  "es": ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
  "en": ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};

var aDays = {
  "es": ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
  "en": ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};

var Widths = new Object;

Widths = {

  //Main Layers
  Layout: {
    Header: 60,
    Main: 100,
    MainHeader: 35,
    MainCenter: 100,
    MainCenterHeader: 0,
    MainCenterHeaderNoNavigation: 26,
    MainCenterBody: 100,
    MainRight: 400,
    Footer: 30
  }

};

var RefreshTaskType = new Object;

RefreshTaskType = {
  Forms: "form",
  Collections: "collections",
  Descriptors: "descriptors",
  References: "references",
  RecoveredFromTrash: "recoveredfromtrash",
  Added: "added",
  Deleted: "deleted",
  Discarted: "discarted",
  Copied: "copied"
};

var MarkType = new Object;

MarkType = {
  RecoveredFromTrash: "recoveredfromtrash",
  Added: "added",
  Copied: "copied"
};

// ----------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------
// EXTENSION
// ----------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------

CLASS_OBSERVER = "observer";
CLASS_FORM = "form";
CLASS_WIDGET = "widget";
CLASS_DISABLED = "disabled";
CLASS_LOCKED = "locked";
CLASS_LOCK = "lock";
CLASS_SIGNING = "signing";

CLASS_HIDDEN = "hidden";
CLASS_OPENED = "opened";
CLASS_CLOSED = "closed";
CLASS_SELECTED = "selected";
CLASS_ACTIVE = "active";
CLASS_FOCUS = "focus";
CLASS_HIGHLIGHTED = "highlighted";
CLASS_REQUIRED = 'required';
CLASS_EDITABLE = 'editable';
CLASS_ALLOW_OTHERS = 'allowOthers';
CLASS_MULTIPLE = "multiple";
CLASS_NEGATIVE = "negative";
CLASS_TOTAL = "total";
CLASS_TABLE_VIEW = "tableview";
CLASS_EXTENSIBLE = "extensible";
CLASS_EXTENDED = "extended";
CLASS_CONDITIONAL = "conditional";
CLASS_CONDITIONED = "conditioned";
CLASS_WRONG = "wrong";
CLASS_EXPANDED = "expanded";
CLASS_MARK = "mark";
CLASS_DIRTY = "dirty";
CLASS_FUNCTION = "function";
CLASS_ONLOAD_COMMAND = "onload";
CLASS_LOADING = "loading";
CLASS_READONLY = "readonly";
CLASS_NO_HISTORY = "nohistory";
CLASS_ZOOMED = 'zoomed';

CLASS_WIDGET_LIST = 'wlist';
CLASS_WIDGET_TABLE = 'wtable';
CLASS_WIDGET_SELECT = 'wselect';
CLASS_WIDGET_DATE = 'wdate';
CLASS_WIDGET_FILE = 'wfile';
CLASS_WIDGET_PICTURE = 'wpicture';
CLASS_WIDGET_BOOLEAN = 'wboolean';
CLASS_WIDGET_TEXT = 'wtext';
CLASS_WIDGET_REQUIRED = 'wrequired';
CLASS_WIDGET_COMPOSITE = 'wcomposite';
CLASS_WIDGET_LINK = 'wlink';
CLASS_WIDGET_NUMBER = 'wnumber';
CLASS_WIDGET_FORMULA = 'wformula';
CLASS_WIDGET_CHECK = 'wcheck';
CLASS_WIDGET_DESCRIPTOR = 'wdescriptor';
CLASS_WIDGET_NODE = 'wnode';
CLASS_WIDGET_SERIAL = 'wserial';
CLASS_WIDGET_LOCATION = 'wlocation';
CLASS_WIDGET_SUMMATION = 'wsummation';

CLASS_WIDGET_LONG = "long";

CSS_WIDGET_LIST = DOT + CLASS_WIDGET_LIST;
CSS_WIDGET_TABLE = DOT + CLASS_WIDGET_TABLE;
CSS_WIDGET_SELECT = DOT + CLASS_WIDGET_SELECT;
CSS_WIDGET_DATE = DOT + CLASS_WIDGET_DATE;
CSS_WIDGET_PICTURE = DOT + CLASS_WIDGET_PICTURE;
CSS_WIDGET_FILE = DOT + CLASS_WIDGET_FILE;
CSS_WIDGET_BOOLEAN = DOT + CLASS_WIDGET_BOOLEAN;
CSS_WIDGET_TEXT = DOT + CLASS_WIDGET_TEXT;
CSS_WIDGET_REQUIRED = DOT + CLASS_WIDGET_REQUIRED;
CSS_WIDGET_COMPOSITE = DOT + CLASS_WIDGET_COMPOSITE;
CSS_WIDGET_LINK = DOT + CLASS_WIDGET_LINK;
CSS_WIDGET_NUMBER = DOT + CLASS_WIDGET_NUMBER;
CSS_WIDGET_FORMULA = DOT + CLASS_WIDGET_FORMULA;
CSS_WIDGET_CHECK = DOT + CLASS_WIDGET_CHECK;
CSS_WIDGET_DESCRIPTOR = DOT + CLASS_WIDGET_DESCRIPTOR;
CSS_WIDGET_NODE = DOT + CLASS_WIDGET_NODE;
CSS_WIDGET_SERIAL = DOT + CLASS_WIDGET_SERIAL;
CSS_WIDGET_LOCATION = DOT + CLASS_WIDGET_LOCATION;
CSS_WIDGET_SUMMATION = DOT + CLASS_WIDGET_SUMMATION;

CLASS_FIELD = "field";
CLASS_FIELD_LIST = 'flist';
CLASS_FIELD_SELECT = 'fselect';
CLASS_FIELD_DATE = 'fdate';
CLASS_FIELD_FILE = 'ffile';
CLASS_FIELD_PICTURE = 'fpicture';
CLASS_FIELD_BOOLEAN = 'fboolean';
CLASS_FIELD_TEXT = 'ftext';
CLASS_FIELD_NUMBER = 'fnumber';
CLASS_FIELD_LINK = 'flink';
CLASS_FIELD_COMPOSITE = 'fcomposite';
CLASS_FIELD_COMPOSITE_ITEM = 'element';
CLASS_FIELD_CHECK = 'fcheck';
CLASS_FIELD_DESCRIPTOR = 'fdescriptor';
CLASS_FIELD_STORE_SHOWCODE = "showcode";
CLASS_FIELD_NODE = 'fnode';
CLASS_FIELD_SERIAL = 'fserial';
CLASS_FIELD_LOCATION = 'flocation';
CLASS_FIELD_SUMMATION = 'fsummation';
CLASS_FIELD_DATA_HEADER_VALUE_COLUMN = "valuecl";
CLASS_FIELD_SUPER = "super";

//------------------------------------------------------------------
CSS_OBSERVER = ".observer";
CSS_FORM = ".form";

CSS_FIELD = ".field";
CSS_FIELD_NODE_PREFIX = ".field.nid";
CSS_FIELD_COMPOSITE = ".field.fcomposite";
CSS_FIELD_COMPOSITE_ITEM = ".field.fcomposite .element";

CSS_FIELD_DEF_NODE = ".def.node";
CSS_FIELD_DEF_CODE_OTHER = ".def.other";
CSS_FIELD_DEF_SOURCES = ".def.sources";
CSS_FIELD_DEF_TEMPLATE_VIEW = ".def.tpl.view";
CSS_FIELD_DEF_TEMPLATE_EDIT = ".def.tpl.edit";
CSS_FIELD_DEF_SOURCE_STORE = ".def.source.store";
CSS_FIELD_DEF_INDEX_STORE = ".def.index.store";
CSS_FIELD_DEF_HISTORY_STORE = ".def.history.store";
CSS_FIELD_DEF_HEADER = ".def.header";
CSS_FIELD_DEF_DATA_LINK = ".def.data.link";
CSS_FIELD_DEF_DATA_LINK_LOCATIONS = ".def.data.link_locations";
CSS_FIELD_DEF_DATA_DOMAIN = ".def.data.domain";
CSS_FIELD_DEF_NODETYPES = ".def.nodetypes";
CSS_FIELD_DEF_FORMAT = '.def.format';
CSS_FIELD_DEF_EDITION = '.def.edition';
CSS_FIELD_DEF_RANGE = '.def.range';
CSS_FIELD_DEF_METRICS = '.def.metrics';
CSS_FIELD_DEF_FORMULA = '.def.formula';
CSS_FIELD_DEF_NAME = '.def.name';
CSS_FIELD_DEF_RESULT_TYPE = '.def.resulttype';
CSS_FIELD_DEF_SIZE = ".def.size";
CSS_FIELD_DEF_LIMIT = ".def.limit";
CSS_FIELD_DEF_DEFAULT = ".def.default";
CSS_FIELD_DEF_ASPECT = ".def.aspect";
CSS_FIELD_DEF_TEXT_EDITION = ".def.text.edition";
CSS_FIELD_DEF_MIN_LENGTH = ".def.length.min";
CSS_FIELD_DEF_MAX_LENGTH = ".def.length.max";
CSS_FIELD_DEF_MESSAGE_WHEN_EMPTY = ".def.msgwhenempty";
CSS_FIELD_DEF_MESSAGE_WHEN_REQUIRED = ".def.msgwhenrequired";
CSS_FIELD_DEF_LABEL_FIELD = ".def.labelfield";
CSS_FIELD_DEF_FLATTEN = ".def.flatten";
CSS_FIELD_DEF_FILTERS = ".def.filters";
CSS_FIELD_DEF_DEPTH = ".def.depth";
CSS_FIELD_DEF_FROM = ".def.from";
CSS_FIELD_DEF_PARTNER_CONTEXT = ".def.partnercontext";
CSS_FIELD_DEF_PATTERN = ".def.pattern";
CSS_FIELD_DEF_ALLOW_ADD = ".def.allowadd";
CSS_FIELD_DEF_COLLECTION = ".def.field_collection";

CLASS_WIDGET_OTHER = "other";

CSS_WIDGET = '.widget';
CSS_WIDGET_FROM_ELEMENT_WIDGET = '.elementwidget .widget';
CSS_WIDGET_DATA = '.data';
CSS_WIDGET_DROPDOWN = 'a.dropdown';
CSS_FIELD = '.field';
CSS_LABEL = '.label';
CSS_WIDGET_ELEMENT_OPTIONS = '.options';
CSS_WIDGET_ELEMENT_TITLE = '.title';
CSS_WIDGET_ELEMENT_ONLINE_MENU = '.onlinemenu';
CSS_WIDGET_ELEMENT_COMPONENT = '.component';
CSS_WIDGET_ELEMENT_SUPER = '.super';
CSS_WIDGET_ELEMENT_MORE_LINK = ".more";
CSS_WIDGET_ELEMENT_TABLE_MORE_LINK = "table .more";
CSS_WIDGET_ELEMENT_TABLE_REMOVE_LINK = "table .remove";
CSS_WIDGET_ELEMENT_CLEAR_VALUE = ".clearvalue";
CSS_WIDGET_ELEMENT_HIPERLINK = ".hiperlink";
CSS_WIDGET_ELEMENT_VIEW_MODE = ".viewmode";
CSS_WIDGET_ELEMENT_MARK = ".mark";
CSS_WIDGET_ELEMENT_TEMPLATE = ".template";
CSS_WIDGET_ELEMENT_THUMBNAIL = ".pictureframe .thumbnail";
CSS_WIDGET_ELEMENT_FIELDSBOX = '.fieldsbox';
CSS_WIDGET_ELEMENT_NODE_BOX = '.nodebox';
CSS_WIDGET_ELEMENT_NODE_CONTAINER = '.nodecontainer';
CSS_WIDGET_ELEMENT_UNLINK = ".unlink";
CSS_WIDGET_ELEMENT_CAPSULE = ".capsule";
CSS_WIDGET_ELEMENT_RADIO_LIST = ".radiolist";
CSS_WIDGET_ELEMENT_RADIO = ".radio";
CSS_WIDGET_ELEMENT_CHECK_LIST = ".checklist";
CSS_WIDGET_ELEMENT_RELOADING = "." + CLASS_WIDGET_ELEMENT_RELOADING;
CSS_WIDGET_ELEMENT_CHECK = ".check";
CSS_WIDGET_ELEMENT_CHECKER = ".checker";
CSS_WIDGET_ELEMENT_CHECKALL = "span .checkall";
CSS_WIDGET_ELEMENT_UNCHECKALL = "span .uncheckall";
CSS_WIDGET_ELEMENT_METRICS = '.metrics';
CSS_WIDGET_ELEMENT_TABLE = 'table .table';
CSS_WIDGET_ELEMENT_TABLE_ROW_TEMPLATE = 'table .rowtemplate';
CSS_WIDGET_ELEMENT_TABLE_UP = '.table';
CSS_WIDGET_ELEMENT_TABLE_ITEM = 'li.element';
CSS_WIDGET_ELEMENT_LABEL = '.label';
CSS_WIDGET_ELEMENT_VALUE = '.value';
CSS_WIDGET_ELEMENT_LINK = '.link';
CSS_WIDGET_ELEMENT_LIST = '.list';
CSS_WIDGET_ELEMENT_LIST_OPTIONS = '.elementoptions';
CSS_WIDGET_ELEMENT_LIST_WIDGET = '.elementwidget';
CSS_WIDGET_ELEMENT_LIST_OPTIONS_MOVE = '.move';
CSS_WIDGET_ELEMENT_LIST_ITEM = 'li.element';
CSS_WIDGET_ELEMENT_LIST_ITEM_DELETE = '.delete';
CSS_WIDGET_ELEMENT_TABLE_ITEM_DELETE = 'table .delete';
CSS_WIDGET_ELEMENT_TABLE_ITEM_CHECK = 'table .check';
CSS_WIDGET_ELEMENT_LOADING = '.wloading';
CSS_WIDGET_ELEMENT_CAPTION = '.wcaption';
CSS_WIDGET_ELEMENT_AUTHOR = '.author';
CSS_WIDGET_ELEMENT_DATE = '.date';
CSS_WIDGET_ELEMENT_FACTS = '.facts';
CSS_WIDGET_ELEMENT_FACTS_LIST = '.facts .list';
CSS_WIDGET_ELEMENT_TOGGLE_FACTS = '.togglefacts';
CSS_WIDGET_ELEMENT_ADD = '.add';
CSS_WIDGET_ELEMENT_ADD_FACT = '.addfact';
CSS_WIDGET_ELEMENT_HEADER = '.header';
CSS_WIDGET_ELEMENT_SHOW_NODE = '.shownode';
CSS_WIDGET_ELEMENT_SELECT_STATE = 'select.state';
CSS_WIDGET_ELEMENT_STATE = 'div.state';
CSS_WIDGET_ELEMENT_TOOLBAR = '.header .toolbar';
CSS_WIDGET_ELEMENT_CHILD_COUNT = '.childcount';
CSS_WIDGET_SUMMATION_ITEM = ".summationitem";

CSS_ITITLE = '.ititle';
CSS_IHELP = '.ihelp';
CSS_EHELP = '.ehelp';
CSS_NUMBER_ADD = '.add';
CSS_NUMBER_SUBTRACT = '.subtract';
CSS_FILE_DOWNLOAD = '.download';
CSS_COLLAPSE = '.collapse';
CSS_EXPAND = '.expand';
CSS_OPTION = ".option";
CSS_MAIN = '.main';
CSS_SEARCH = '.search';
CSS_CLOSE = ".close";
CSS_MARK = ".mark";
CSS_FUNCTION = ".function";
CSS_ONLOAD_COMMAND = ".onload";
CSS_LOCKED = '.locked';

CSS_OBJECT = '.object';
CSS_NODE = '.node';
CSS_NODE_PAGE = '.node.page';
CSS_NODE_EMBED = '.node.embed';
CSS_NODE_FIELD = '.node.offield';
CSS_SECTION = '.section';
CSS_COMPOSITE = '.composite';
CSS_COLLECTION = '.collection';
CSS_REFERENCE = '.reference';
CSS_REFERENCE_LIST = '.referencelist';
CSS_SELECTOR = '.selector';
CSS_BUTTON = '.button';
CSS_OPTIONS = '.options';
CSS_HIDDENABLE = '.hiddenable';
CSS_CONTROL_INFO = '.controlinfo';
CSS_TITLE = '.title';
CSS_DESCRIPTION = '.description';
CSS_HIGHLIGHT = '.highlight';
CSS_BODY = '.body';
CSS_ROUTE_MAP = '.routemap';
CSS_TEAM = '.team';
CSS_TASK = '.task';
CSS_TASK_LIST = '.tasklist';
CSS_TASK_TEAM = '.team';
CSS_TASK_TEAM_USER_LIST = '.userlist';
CSS_OPERATION = '.operation';
CSS_HISTORY = 'div.history';
CSS_HISTORY_ITEMS = '.historyitems';
CSS_HISTORY_ITEMS_CHILDS = '.historyitems .fact';
CSS_HISTORY_MORE = '.historymore';

CLASS_PAGE = 'page';
CLASS_TASK_LIST = 'tasklist';
CLASS_NODE = 'node';
CLASS_EMBED = 'embed';
CLASS_NODE_FIELD = 'offield';
CLASS_SECTION = 'section';
CLASS_COMPOSITE = 'composite';
CLASS_COLLECTION = 'collection';
CLASS_REFERENCE = 'reference';
CLASS_TASK = 'task';
CLASS_TEAM = 'team';

CSS_PAGE = '.page';
CSS_DATA = 'input.data';
CSS_COMPONENT = '.component';
CSS_DATA_OTHER = '.dataother';
CSS_TEMPLATE = ".template";

CONTROL_INFO_SECTION_NODES_SEPARATOR = ";";

//------------------------------------------------------------------

HTML_DIV = 'div';
HTML_LABEL = 'label';
HTML_INPUT = 'input';
HTML_PARAGRAPH = "p";
HTML_SELECT = "select";
HTML_INPUT = "input";
HTML_ANCHOR = "a";

//------------------------------------------------------------------

NODE_ID_PREFIX = 'node_';
COMPOSITE_ID_PREFIX = 'composite_';
NODEREFERENCE_ID_PREFIX = 'nodereference_';


_ID_PREFIX = 'task_';
DEFAULT = "default";

//------------------------------------------------------------------

SELECT_ALL = "all";
SELECT_NONE = "none";
SELECT_INVERT = "invert";
SELECT_HIGHLIGHTED = "highlighted";

//------------------------------------------------------------------

OTHER = "other";

//------------------------------------------------------------------

INPUT_PREFIX = "input_";

//------------------------------------------------------------------

HIGHLIGHT_DURATION = 5;

//------------------------------------------------------------------

MODE_PREVIEW = "preview";
MODE_EDITION = "edition";
DEFAULT_MODE = MODE_EDITION;

function CGBaseModel() {
  this.data = null;
  this.bIsDirty = false;
};

CGBaseModel.prototype.serialize = function () {
  if (this.data)
    return Ext.util.JSON.encode(this.data);
  else
    return null;
};

CGBaseModel.prototype.unserialize = function (serializedData) {
  this.data = Ext.util.JSON.decode(serializedData);
};

CGBaseModel.prototype.isLoaded = function () {
  return this.data != null;
};

CGBaseModel.prototype.isDirty = function () {
  return this.bIsDirty;
};

HtmlUtil = {

  getEncodingTranslationTable: function () {
    var entities = {}, hash_map = {}, decimal = 0, symbol = '';

    entities['38'] = '&amp;';
    entities['60'] = '&lt;';
    entities['62'] = '&gt;';

    for (decimal in entities) {
      symbol = String.fromCharCode(decimal);
      hash_map[symbol] = entities[decimal];
    }

    return hash_map;
  },

  encode: function (string) {
    var hash_map = {}, symbol = '', tmp_str = '', entity = '';
    tmp_str = string.toString();

    hash_map = HtmlUtil.getEncodingTranslationTable();

    for (symbol in hash_map) {
      entity = hash_map[symbol];
      tmp_str = tmp_str.split(symbol).join(entity);
    }

    return tmp_str;
  },

  decode: function (string) {
    var hash_map = {}, symbol = '', tmp_str = '', entity = '';

    if (string == null) return null;

    tmp_str = string.toString();

    return tmp_str;
  }
};

function CGIndicator() {
  this.code = "";
  this.iOrder = -1;
  this.sValue = "";
};

CGIndicator.CODE = "code";
CGIndicator.CODE_OTHER = "otro";
CGIndicator.DETAILS = "details";
CGIndicator.VALUE = "value";
CGIndicator.SUPER = "super";
CGIndicator.OTHER = "other";
CGIndicator.EXTENDED = "extended";
CGIndicator.CONDITIONED = "conditioned";
CGIndicator.METRIC = "metric";
CGIndicator.FORMAT = "format";
CGIndicator.NODE_LINK = "nodelink";
CGIndicator.CHECKED = "checked";
CGIndicator.INTERNAL = "internal";
CGIndicator.RESULTTYPE = "resulttype";
CGIndicator.DESCRIPTOR = "descriptor";
CGIndicator.CAPTION = "caption";
CGIndicator.FULLCAPTION = "fullcaption";
CGIndicator.NODE = "node";
CGIndicator.STATE = "state";
CGIndicator.AUTHOR = "author";
CGIndicator.DATE = "date";
CGIndicator.FACT = "fact";
CGIndicator.FACTS_COUNT = "factcount";
CGIndicator.SOURCE = "source";
CGIndicator.FROM = "from";

CGIndicator.prototype.unserialize = function (sData) {
  this.unserializeFromXmlDocument(parseXml(sData).childNodes[0]);
};

CGIndicator.prototype.getValue = function () {
  return this.sValue;
};

CGIndicator.prototype.setValue = function (sValue) {
  this.sValue = (sValue) ? sValue : "";
};

CGIndicator.prototype.unserializeFromXmlDocument = function (XmlIndicator) {
  this.code = XmlIndicator.getAttribute("code");
  this.iOrder = XmlIndicator.getAttribute("order");
  this.sValue = (XmlIndicator.firstChild) ? XmlIndicator.firstChild.data : "";
};

CGIndicator.prototype.serialize = function () {
  var sContent = "<indicator code=\"" + this.code + "\" order=\"" + this.iOrder + "\">";
  sContent += HtmlUtil.encode(this.sValue);
  sContent += "</indicator>";
  return sContent;
};

function CGIndicatorList() {
  this.aIndicators = new Array;
  this.aIndexIndicators = new Array();
};

CGIndicatorList.prototype.getIndicator = function (code) {
  if (this.aIndexIndicators[code] == null) return null;
  return this.aIndicators[this.aIndexIndicators[code]];
};

CGIndicatorList.prototype.getIndicators = function () {
  return this.aIndicators;
};

CGIndicatorList.prototype.clear = function () {
  this.aIndicators = new Array();
  this.aIndexIndicators = new Array();
};

CGIndicatorList.prototype.addIndicatorByValue = function (code, iOrder, sValue) {
  var Indicator = new CGIndicator();
  Indicator.code = code;
  Indicator.iOrder = iOrder;
  Indicator.setValue(sValue);
  this.addIndicator(Indicator);
};

CGIndicatorList.prototype.addIndicator = function (Indicator) {
  this.aIndicators.push(Indicator);
  this.aIndexIndicators[Indicator.code] = this.aIndicators.length - 1;
};

CGIndicatorList.prototype.unserialize = function (sData) {
  this.unserializeFromXmlDocument(parseXml(sData).childNodes[0]);
};

CGIndicatorList.prototype.unserializeFromXmlDocument = function (XmlIndicatorList) {
  var aChildren = XmlIndicatorList.childNodes;

  if (aChildren == null) aChildren = XmlIndicatorList.children;
  if (aChildren == null) return;

  this.clear();
  for (var iPos = 0; iPos < aChildren.length; iPos++) {
    if (aChildren[iPos].tagName.toLowerCase() == "indicator") {
      var Indicator = new CGIndicator();
      Indicator.unserializeFromXmlDocument(aChildren[iPos]);
      this.addIndicator(Indicator);
    }
  }
};

CGIndicatorList.prototype.serialize = function () {
  var sIndicators = "";
  var iPos = 0;

  for (var iPos = 0; iPos < this.aIndicators.length; iPos++) {
    if (this.aIndicators[iPos].iOrder == -1) this.aIndicators[iPos].iOrder = iPos;
    sIndicators += this.aIndicators[iPos].serialize();
  }

  if (sIndicators == "") return "";

  return "<indicatorlist>" + sIndicators + "</indicatorlist>";
};

function CGAttribute() {
  this.code = "";
  this.iOrder = -1;
  this.AttributeList = new CGAttributeList();
  this.IndicatorList = new CGIndicatorList();
};

CGAttribute.OPTION = "option";

CGAttribute.prototype.getCode = function () {
  return this.code;
};

CGAttribute.prototype.setCode = function (code) {
  this.code = code;
};

CGAttribute.prototype.getOrder = function () {
  return this.iOrder;
};

CGAttribute.prototype.setOrder = function (iOrder) {
  this.iOrder = iOrder;
};

CGAttribute.prototype.addIndicatorByValue = function (code, iOrder, sValue) {
  this.IndicatorList.addIndicatorByValue(code, iOrder, sValue);
};

CGAttribute.prototype.getAttributeList = function () {
  return this.AttributeList;
};

CGAttribute.prototype.getAttributes = function () {
  return this.AttributeList.getAttributes();
};

CGAttribute.prototype.getAttribute = function (code) {
  return this.AttributeList.getAttribute(code);
};

CGAttribute.prototype.setAttributeList = function (AttributeList) {
  this.AttributeList = AttributeList;
};

CGAttribute.prototype.getIndicatorList = function () {
  return this.IndicatorList;
};

CGAttribute.prototype.getIndicators = function () {
  return this.IndicatorList.getIndicators();
};

CGAttribute.prototype.getIndicator = function (code) {
  return this.IndicatorList.getIndicator(code);
};

CGAttribute.prototype.getIndicatorValue = function (code) {
  var Indicator = this.IndicatorList.getIndicator(code);
  if (Indicator == null) return "";
  return Indicator.getValue();
};

CGAttribute.prototype.setIndicatorList = function (IndicatorList) {
  this.IndicatorList = IndicatorList;
};

CGAttribute.prototype.unserialize = function (sData) {
  if (sData == "") return;
  this.unserializeFromXmlDocument(parseXml(sData).childNodes[0]);
};

CGAttribute.prototype.unserializeFromXmlDocument = function (XmlAttribute) {
  var aChildren = XmlAttribute.childNodes;

  this.code = XmlAttribute.getAttribute("code");
  this.iOrder = XmlAttribute.getAttribute("order");

  if (aChildren == null) aChildren = XmlAttribute.children;
  if (aChildren == null) return;

  for (var iPos = 0; iPos < aChildren.length; iPos++) {
    if (aChildren[iPos].tagName.toLowerCase() == "attributelist") this.AttributeList.unserializeFromXmlDocument(aChildren[iPos]);
    else if (aChildren[iPos].tagName.toLowerCase() == "indicatorlist") this.IndicatorList.unserializeFromXmlDocument(aChildren[iPos]);
  }
};

CGAttribute.prototype.serialize = function () {
  var sContent = "<attribute code=\"" + this.code + "\" order=\"" + this.iOrder + "\">";
  sContent += this.AttributeList.serialize();
  sContent += this.IndicatorList.serialize();
  sContent += "</attribute>";
  return sContent;
};

CGAttribute.prototype.serializeWithData = function (sData) {
  var sContent = "<attribute code=\"" + this.code + "\" order=\"" + this.iOrder + "\">";
  sContent += sData;
  sContent += "</attribute>";
  return sContent;
};

var Templates = {
  "CERT_ITEM": "<li class=\"thumbItem\"><a href=\"#\" onClick=\"setSelected(::CERT_ID::);\">::CERT_ALIAS::</a></li>"
};

//--------------------------------------------------------------------


function TCertificate() {
  this.Id = null;
  this.Name = null;
}

//--------------------------------------------------------------------

function TSigner(DOMApplet, language) {
  this.certListNative = null;
  this.certListPlatino = null;
  this.language = language!=null?language:"es";
  this.DOMWebSigner = DOMApplet;

  if (!this.init())
    return;

  this.loadCertList();
}

TSigner.initialized = false;

TSigner.translations = {
  "es": "Para poder realizar la firma, este sitio ha de estar dado de alta en la lista de sitios de confianza. Abra el panel de preferencias de Java e incluya este sitio en la lista.",
  "en": "This site must be included in the trusted sites. Open Java preferences panel and include this site."
}

//--------------------------------------------------------------------

TSigner.prototype.isInitialized = function() {
  return TSigner.initialized;
};

TSigner.prototype.init = function () {
  if (TSigner.initialized)
    return true;

  if (!this.DOMWebSigner.init) {
    alert(TSigner.translations[this.language]);
    return false;
  }

  this.DOMWebSigner.init(navigator.userAgent);
  TSigner.initialized = true;
  return true;
};

TSigner.prototype.loadCertList = function () {
  this.certListNative = eval("(" + this.DOMWebSigner.getAllCertificatesAliases() + ")");
};

//--------------------------------------------------------------------

TSigner.prototype.findIdCertificateByCN_Platino = function (cn) {
  for (var i = 0; i < this.certListPlatino.length; i++) {
    if (this.certListPlatino[i] != null) {
      if (this.certListPlatino[i] != "") {
        if (cn == this.certListPlatino[i][1]) return i;
      }
    }
  }

  return null;
}

//--------------------------------------------------------------------

TSigner.prototype.findIdCertificateByCN_Native = function (cn) {
  var regExp = new RegExp("CN=\"([^\"]*)\"|CN=([^,]*),|CN=([^$]*)$");

  for (var i = 0; i < this.certListNative.length; i++) {
    if (this.certListNative[i] != null) {
      var rvalues = regExp.exec(this.certListNative[i].SubjectDN);
      if (rvalues) {
        if ((rvalues[3] != null) && (rvalues[3] != "")) {
          var current_cn = rvalues[3];
        } else if ((rvalues[2] != null) && (rvalues[2] != "")) {
          var current_cn = rvalues[2];
        } else {
          var current_cn = rvalues[1];
        }
        if (current_cn == cn) return i;
      }
    }
  }

  return null
}

//--------------------------------------------------------------------

TSigner.prototype.GetCertificates = function () {
  var certificates = new Array();

  if (!this.isInitialized())
    return certificates;

  var regExp = new RegExp("CN=\"([^\"]*)\"|CN=([^,]*),|CN=([^$]*)$");

  for (var i = 0; i < this.certListNative.length; i++) {
    if (this.certListNative[i] != null) {
      var rvalues = regExp.exec(this.certListNative[i].SubjectDN);
      if (rvalues) {
        if ((rvalues[3] != null) && (rvalues[3] != "")) {
          var cn = rvalues[3];
        } else if ((rvalues[2] != null) && (rvalues[2] != "")) {
          var cn = rvalues[2];
        } else {
          var cn = rvalues[1];
        }

        var cert = new Object();
        cert.Id = i;
        cert.Name = cn;
        certificates[i] = cert;
      }

    }
  }

  return certificates;
}

//--------------------------------------------------------------------

TSigner.prototype.SignText = function (CertificateCN, Document) {
  var IdCertificate = this.findIdCertificateByCN_Native(CertificateCN);
  if (IdCertificate == null) return null;

  if ((Document == null) || (Document == "")) return null;

  var Certificate = this.certListNative[IdCertificate];
  if (Certificate == null) return null;
  return this.DOMWebSigner.signText(Document, Certificate.KeyStore, Certificate.Alias);
}

//--------------------------------------------------------------------

TSigner.prototype.SignDocument = function (CertificateCN, Hash) {
  //Esto no se hace vía platino porque no se puede generar una firma válida para incrustar en pdf

  var IdCertificate = this.findIdCertificateByCN_Native(CertificateCN);
  if (IdCertificate == null) return null;

  if ((Hash == null) || (Hash == "")) return null;

  var Certificate = this.certListNative[IdCertificate];
  if (Certificate == null) return null;
  return this.DOMWebSigner.signDocument(Hash, Certificate.KeyStore, Certificate.Alias);
}

//--------------------------------------------------------------------

TSigner.prototype.GetCertificateSerialization = function (CertificateCN) {
  //Esto no se hace vía platino porque no se puede generar una firma válida para incrustar en pdf

  var IdCertificate = this.findIdCertificateByCN_Native(CertificateCN);
  if (IdCertificate == null) return null;

  var Certificate = this.certListNative[IdCertificate];
  return this.DOMWebSigner.getCertificate(Certificate.KeyStore, Certificate.Alias);
}

//--------------------------------------------------------------------

State = {};
State.View = null;
State.discardNode = false;
State.LastView = null;
State.LastObject = {};
State.LastObject.Id = null;
State.LastObject.Mode = null;
State.aSelectedNodesReferences = [];
State.aSelectedTrashNodesReferences = [];
State.aMarkedNodesReferences = [];
State.NodeReferenceMarkType = null;
State.Searching = false;
State.LastSearch = {};
State.logout = false;
State.aRefreshingTasks = [];
State.LastCommand = {};
State.ListViewerStates = {};
State.CurrentView = null;
State.isShowingPrototype = false;
State.RoleDefinitionList = null;
State.PartnerList = null;
State.SetsContext = {};
State.NodesStates = {};
State.ActiveFurniture = null;
State.MainNodes = {};

State.getSelectedNodesReferences = function (IdNode) {
  if (!State.aSelectedNodesReferences[IdNode]) return [];
  return State.aSelectedNodesReferences[IdNode];
};

State.addNodeReferenceToSelection = function (IdNode, IdNodeReference) {
  if (!State.aSelectedNodesReferences[IdNode]) State.aSelectedNodesReferences[IdNode] = [];
  State.aSelectedNodesReferences[IdNode][IdNodeReference] = IdNodeReference;
};

State.deleteSelectedNodeReference = function (IdNode, IdNodeReference) {
  if (!State.aSelectedNodesReferences[IdNode]) return;
  delete State.aSelectedNodesReferences[IdNode][IdNodeReference];
};

State.addNodesReferencesToSelection = function (IdNode, aNodesReferences) {
  for (var IdNodeReference in aNodesReferences) {
    if (isFunction(aNodesReferences[IdNodeReference])) continue;
    State.addNodeReferenceToSelection(IdNode, IdNodeReference);
  }
};

State.deleteSelectedNodesReferences = function (IdNode) {
  State.aSelectedNodesReferences[IdNode] = [];
};

State.getSelectedTrashNodesReferences = function (IdNode) {
  return State.aSelectedTrashNodesReferences;
};

State.addNodeReferenceToTrashSelection = function (IdNodeReference) {
  State.aSelectedTrashNodesReferences[IdNodeReference] = IdNodeReference;
};

State.deleteSelectedNodeReferenceFromTrash = function (IdNodeReference) {
  delete State.aSelectedTrashNodesReferences[IdNodeReference];
};

State.addNodesReferencesToTrashSelection = function (aNodesReferences) {
  for (var IdNodeReference in aNodesReferences) {
    if (isFunction(aNodesReferences[IdNodeReference])) continue;
    State.addNodeReferenceToTrashSelection(IdNodeReference);
  }
};

State.deleteSelectedNodesReferencesFromTrash = function () {
  State.aSelectedTrashNodesReferences = [];
};

State.registerListViewerState = function (Id, NewState) {
  State.ListViewerStates[Id] = NewState;
};

State.getListViewerState = function (Id) {
  return State.ListViewerStates[Id];
};

State.getListViewerFilters = function (Id) {
  var state = State.ListViewerStates[Id];
  if (state == null) return null;

  var result = {};
  result["query"] = state.Filter;
  result["sortsby"] = "";
  result["groupsby"] = "";
  for (var i = 0; i < state.Sorts.length; i++)
    result["sortsby"] += state.Sorts[i].Code + MONET_FILTER_SEPARATOR + state.Sorts[i].Mode + MONET_FILTERS_SEPARATOR;
  for (var i = 0; i < state.Groups.length; i++)
    result["groupsby"] += state.Groups[i].Code + MONET_FILTER_SEPARATOR + state.Groups[i].Value + MONET_FILTERS_SEPARATOR;

  if (result["sortsby"].length > 0)
    result["sortsby"] = result["sortsby"].substring(0, result["sortsby"].length - MONET_FILTERS_SEPARATOR.length);
  if (result["groupsby"].length > 0)
    result["groupsby"] = result["groupsby"].substring(0, result["groupsby"].length - MONET_FILTERS_SEPARATOR.length);

  return result;
};

Helper = new Object;
Helper.PAGE = "page";
Helper.EDITORS = "editors";
Helper.PREVIEW = "preview";
Helper.OBSERVERS = "observers";
Helper.REVISIONLIST = "revisionlist";
Helper.MAP = "map";
Helper.SOURCE = "source";
Helper.ROLE = "role";
Helper.LIST = "list";
Helper.CHAT = "chat";

EventManager = new Object;
EventManager.aListeners = new Array();
EventManager.bDoNotifications = true;

EventManager.CREATE_NODE = "createnode";
EventManager.CREATE_TASK = "createtask";
EventManager.BEFORE_OPEN_NODE = "beforeopennode";
EventManager.OPEN_NODE = "opennode";
EventManager.FOCUS_NODE = "focusnode";
EventManager.BLUR_NODE = "blurnode";
EventManager.FOCUS_NODE_VIEW = "focusnodeview";
EventManager.OPEN_TASK = "opentask";
EventManager.FOCUS_TASK_VIEW = "focustaskview";
EventManager.CLOSE_NODE = "closenode";
EventManager.CLOSE_TASK = "closetask";
EventManager.SAVE_NODE = "savenode";
EventManager.SAVE_TASK = "savetask";
EventManager.POST_EXECUTE_NODE_COMMAND = "postexecutenodecommand";
EventManager.FOCUS_FIELD = "focusfield";
EventManager.BLUR_FIELD = "blurfield";
EventManager.CHANGE_FIELD = "changefield";
EventManager.LINK_FIELD = "linkfield";
EventManager.ADD_FIELD = "addfield";
EventManager.REMOVE_FIELD = "removefield";

EventManager.addListener = function (Listener) {
  EventManager.aListeners.push(Listener);
};

EventManager.enableNotifications = function () {
  EventManager.bDoNotifications = true;
};

EventManager.disableNotifications = function () {
  EventManager.bDoNotifications = false;
};

EventManager.notify = function (EventType, Sender) {

  if (!EventManager.bDoNotifications) return;

  for (var i = 0; i < EventManager.aListeners.length; i++) {
    if (EventType == EventManager.CREATE_NODE && EventManager.aListeners[i].nodeCreated) EventManager.aListeners[i].nodeCreated(Sender);
    else if (EventType == EventManager.BEFORE_OPEN_NODE && EventManager.aListeners[i].nodeBeforeOpened) EventManager.aListeners[i].nodeBeforeOpened(Sender);
    else if (EventType == EventManager.OPEN_NODE && EventManager.aListeners[i].nodeOpened) EventManager.aListeners[i].nodeOpened(Sender);
    else if (EventType == EventManager.FOCUS_NODE && EventManager.aListeners[i].nodeFocused) EventManager.aListeners[i].nodeFocused(Sender);
    else if (EventType == EventManager.FOCUS_NODE_VIEW && EventManager.aListeners[i].nodeViewFocused) EventManager.aListeners[i].nodeViewFocused(Sender);
    else if (EventType == EventManager.CLOSE_NODE && EventManager.aListeners[i].nodeClosed) EventManager.aListeners[i].nodeClosed(Sender);
    else if (EventType == EventManager.SAVE_NODE && EventManager.aListeners[i].nodeSaved) EventManager.aListeners[i].nodeSaved(Sender);
    else if (EventType == EventManager.FOCUS_FIELD && EventManager.aListeners[i].nodeFieldFocused) EventManager.aListeners[i].nodeFieldFocused(Sender);
    else if (EventType == EventManager.BLUR_FIELD && EventManager.aListeners[i].nodeFieldBlur) EventManager.aListeners[i].nodeFieldBlur(Sender);
    else if (EventType == EventManager.CHANGE_FIELD && EventManager.aListeners[i].nodeFieldChanged) EventManager.aListeners[i].nodeFieldChanged(Sender);
    else if (EventType == EventManager.POST_EXECUTE_NODE_COMMAND && EventManager.aListeners[i].nodeExecutePostCommand) EventManager.aListeners[i].nodeExecutePostCommand(Sender);
    else if (EventType == EventManager.CREATE_TASK && EventManager.aListeners[i].taskCreated) EventManager.aListeners[i].taskCreated(Sender);
    else if (EventType == EventManager.OPEN_TASK && EventManager.aListeners[i].taskOpened) EventManager.aListeners[i].taskOpened(Sender);
    else if (EventType == EventManager.FOCUS_TASK_VIEW && EventManager.aListeners[i].taskViewFocused) EventManager.aListeners[i].taskViewFocused(Sender);
    else if (EventType == EventManager.CLOSE_TASK && EventManager.aListeners[i].taskClosed) EventManager.aListeners[i].taskClosed(Sender);
    else if (EventType == EventManager.SAVE_TASK && EventManager.aListeners[i].taskSaved) EventManager.aListeners[i].taskSaved(Sender);
  }

};

//--------------------------------------------------------------------------------

function translate(sText, Data, sPrefix) {
  if (!sText) return;
  if (!sPrefix) sPrefix = EMPTY;

  if (Context.Config) {
    var Expression = new RegExp(TEMPLATE_SEPARATOR + Literals.ImagesPath + TEMPLATE_SEPARATOR, "g");
    sText = sText.replace(Expression, Context.Config.ImagesPath);
    Expression = new RegExp(TEMPLATE_SEPARATOR + Literals.Url + TEMPLATE_SEPARATOR, "g");
    sText = sText.replace(Expression, Context.Config.Url);
  }

  for (var index in Data) {
    if (Literals[index])
      var sName = sPrefix + Literals[index];
    else
      var sName = sPrefix + index;

    var Aux = Data[index];
    if (typeof Aux == "object") {
      sText = translate(sText, Aux, sName + DOT);
    }
    else {
      Expression = new RegExp(TEMPLATE_SEPARATOR + sName + TEMPLATE_SEPARATOR, "g");
      sText = sText.replace(Expression, Aux);
    }
  }
  return sText;
};

function addLayer(sContent, sContainer) {
  var Layer = new Insertion.Bottom($(sContainer), sContent).element.immediateDescendants().last();
  return Layer;
};

//--------------------------------------------------------------------------------

function createLayer(Id, sContent, DOMContainer) {
  var Layer = new Insertion.Bottom(DOMContainer, "<div id='" + Id + "'>" + sContent + "</div>").element.immediateDescendants().last();
  return Layer;
};

//--------------------------------------------------------------------------------

function getCreateLayerHTMLContent(Id) {
  return "<div id='" + Id + "'></div>";
};

//--------------------------------------------------------------------------------

function removeLayer(Id) {
  $(Id).remove();
};

//--------------------------------------------------------------------------------

function setIdToElementContent(Id, sElementContent) {
  var iPos = 0;
  var sLeftContent, sRightContent;

  while ((sElementContent.charAt(iPos) != BLANK) && (iPos < sElementContent.length)) iPos++;
  if (iPos >= sElementContent.length) return false;

  sLeftContent = sElementContent.substr(0, iPos);
  sRightContent = sElementContent.substr(iPos);

  sElementContent = sLeftContent + BLANK + "id=" + QUOTE + Id + QUOTE + sRightContent;

  return sElementContent;
};

//--------------------------------------------------------------------------------

function cleanContentIds(sContent) {
  sContent = sContent.replace(/ id=\"([^\"]*)\"/g, "");
  sContent = sContent.replace(/ id=\'([^\']*)\'/g, "");
  sContent = sContent.replace(/ id=([^ ]*)/g, "");
  return sContent;
};

//--------------------------------------------------------------------------------

function replaceDOMElement(DOMElement, sContent) {

  Result = sContent.match(/^<[^>]*id=\"([^\"]*)\"[^>]*>/);
  if (!Result) Result = sContent.match(/^<[^>]*id=\'([^\']*)\'[^>]*>/);
  if (!Result) Result = sContent.match(/^<[^>]*id=([^ ]*) [^>]*>/);

  if (Result) {
    Id = Result[1];
  }
  else {
    Id = DOMElement.id;
    if (!Id) Id = Ext.id();
    if (sContent != "") sContent = setIdToElementContent(Id, sContent);
  }

  if (Ext.isIE) {
    try {
      DOMElement.outerHTML = sContent;
    } catch (e) {
      Ext.MessageBox.alert("HTML Exception", "Check your HTML template. Perhaps you have '<form>' tags. HTML doesn't allow including forms into forms.");
    }
  }
  else {
    try {
      if (DOMElement.replace) DOMElement = DOMElement.replace(sContent);
    }
    catch (e) {
    }
  }

  DOMElement = $(Id);

  return DOMElement;
};

//--------------------------------------------------------------------------------

function utf8Encode(sData) {
  return unescape(encodeURIComponent(sData));
};

//--------------------------------------------------------------------------------

function utf8Decode(sData) {
  return decodeURIComponent(escape(sData));
};

//--------------------------------------------------------------------------------

function select(InputList, Type) {
  var aResult = new Array();
  InputList.each(function (Field) {
    if (Field.dom.type != "checkbox") return;
    Field.dom.checked = (Type != null) ? Type : !Field.dom.checked;
    Field.dom.select();
    aResult.push(Field.dom);
  });
  return aResult;
};

//--------------------------------------------------------------------------------

function selectAll(InputList) {
  return select(InputList, true);
};

//--------------------------------------------------------------------------------

function selectNone(InputList) {
  return select(InputList, false);
};

//--------------------------------------------------------------------------------

function selectInvert(InputList) {
  return select(InputList, null);
};

//--------------------------------------------------------------------------------

function selectHighlighted(HighlightedList) {
  var aResult = new Array();
  HighlightedList.each(function (Field) {
    if (Field.dom.type != "checkbox") return;
    Field.dom.checked = true;
    Field.dom.select();
    aResult.push(Field.dom);
  });
  return aResult;
};

//--------------------------------------------------------------------------------

function readData(Data, extData) {
  var extDataList = extData.select(HTML_DIV);
  extDataList.each(function (extData) {
    eval("Data." + extData.dom.id + "= '" + Ext.util.Format.htmlDecode(extData.dom.innerHTML) + "';");
  }, this);
};

//--------------------------------------------------------------------------------
function getFileExtension(sFilename) {
  var iPos = sFilename.lastIndexOf('.');
  if (iPos == -1) return "";
  return sFilename.substring(iPos + 1);
};

//--------------------------------------------------------------------------------
function getFileName(sFilename) {
  var iPos = sFilename.lastIndexOf('/');
  if (iPos == -1) return sFilename;
  return sFilename.substring(iPos + 1);
};

//--------------------------------------------------------------------------------
function parseXml(sContent) {
  var Document = null;

  if (document.implementation && document.implementation.createDocument) {
    var Parser = new DOMParser();
    Document = Parser.parseFromString(sContent, "text/xml");
  }
  else if (window.ActiveXObject) {
    Document = new ActiveXObject("Microsoft.XMLDOM");
    Document.async = false;
    Document.loadXML(sContent);
  }

  return Document;
};

//--------------------------------------------------------------------------------
function isArray(oObject) {
  return Object.prototype.toString.call(oObject) === '[object Array]';
};

//--------------------------------------------------------------------------------
function readServerResponse(mode, sData) {
  if (mode) return Base64.decode(sData);
  return HtmlUtil.decode(sData);
};

//--------------------------------------------------------------------------------
function writeServerRequest(mode, sData) {
  var sResult = (mode) ? "r=" + Base64.encode(sData) : sData;
  return "?" + sResult;
};

//--------------------------------------------------------------------------------
function serializeParameters(aParameters) {
  var sResult = "";
  for (var index in aParameters) {
    if (isFunction(aParameters[index])) continue;
    sResult += "&" + index + "=" + aParameters[index];
  }
  return sResult;
};

//--------------------------------------------------------------------------------
function getPreviousElement(extElement, sClassname) {
  var extElement = Ext.get(extElement.getPrevSibling());
  while ((extElement != null) && (!extElement.hasClass(sClassname))) {
    extElement = Ext.get(extElement.getPrevSibling());
  }
  return extElement;
};

//--------------------------------------------------------------------------------
function getNextElement(extElement, sClassname) {
  var extElement = Ext.get(extElement.getNextSibling());
  while ((extElement != null) && (!extElement.hasClass(sClassname))) {
    extElement = Ext.get(extElement.getNextSibling());
  }
  return extElement;
};

//--------------------------------------------------------------------------------
function addSelectOption(DOMSelect, sValue, sText, selected) {
  var DOMOption = document.createElement('option');
  DOMOption.value = sValue;
  DOMOption.text = sText;
  DOMOption.selected = (selected != null) ? selected : false;
  try {
    DOMSelect.add(DOMOption, null);
  } catch (e) {
    DOMSelect.add(DOMOption); // IE only version.
  }
};

//--------------------------------------------------------------------------------
function trim(s) {
  if (s == null) return "";
  return s.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
};

//--------------------------------------------------------------------------------
function getStackTrace(exception) {
  var callstack = [];
  var isCallstackPopulated = false;

  if (exception.stack) { //Firefox
    callstack.push(exception.stack);
    isCallstackPopulated = true;
  }
  else if (window.opera && exception.message) { //Opera
    callstack.push(exception.message);
    isCallstackPopulated = true;
  }

  if (!isCallstackPopulated) { //IE and Safari
    var currentFunction = arguments.callee.caller;
    var limit = 0;
    while (currentFunction && limit < 50) {
      var fn = currentFunction.toString();
      var fname = fn.substring(fn.indexOf("function") + 8, fn.indexOf('')) || 'anonymous';
      callstack.push(fname);
      currentFunction = currentFunction.caller;
      limit++;
    }
  }

  return callstack.join('\n\n');
};

//--------------------------------------------------------------------------------

function getMonetLinkAction(sMonetLink) {
  try {
    var Expression = new RegExp(MONET_LINK_PATTERN, "g");
    var aResult = Expression.exec(sMonetLink);

    var type = aResult[1];
    var entityId = aResult[2].split(".")[0];
    var editMode = aResult.length == 3;
    var viewId = aResult[2].indexOf(".")!=-1?aResult[2].substring(aResult[2].lastIndexOf(".") + 1):null;

    if (type == "node") {
      var command = "shownode(" + entityId;
      // if (viewId != null) command += "," + viewId;
      if (editMode) command += ",edit.html?mode=page";
      return command + ")";
    }
    else if (type == "task") {
      if (viewId != null) return "showtaskview(" + entityId + "," + viewId + ")";
      else return "showtask(" + entityId + ")";
    }
    else if (type == "news") return "shownews()";
  } catch (ex) {
  }
  return null;
};

//--------------------------------------------------------------------------------
function htmlDecode(input) {
  if (input == null) return null;
  var e = document.createElement('div');
  e.innerHTML = input;
  if (e.childNodes.length <= 0) return input;
  return e.childNodes[0].nodeValue;
};

//--------------------------------------------------------------------------------
function getColor(iPos) {
  var aColors = ["#A52A2A", "#4169E1", "#DC143C", "#008B8B", "#696969", "#006400", "#8B008B", "#FF8C00", "#E8653A", "#6F916F", "#483D8B", "#1E90FF", "#DAA520", "#BA55D3", "#F7E120", "#8B4513"];

  while (iPos > aColors.length) iPos = iPos - aColors.length;
  if (iPos < 0) pos = 0;
  if (iPos == aColors.length) iPos = aColors.length - 1;

  return aColors[iPos];
}

//--------------------------------------------------------------------------------
// FIXS BUG on IE9
//--------------------------------------------------------------------------------
if ((typeof Range !== "undefined") && !Range.prototype.createContextualFragment) {
  Range.prototype.createContextualFragment = function (html) {
    var frag = document.createDocumentFragment(),
        div = document.createElement("div");
    frag.appendChild(div);
    div.outerHTML = html;
    return frag;
  };
}

function clone(Object) {
  var newObj = (Object instanceof Array) ? [] : {};
  for (i in Object) {
    if (i == 'clone') continue;
    if (Object[i] && typeof Object[i] == "object") {
      newObj[i] = clone(Object[i]);
    } else newObj[i] = Object[i];
  }
  return newObj;
}

function shortValue(sValue, size, leftSize, rightSize) {
  if (sValue == null) return;
  if (!sValue.length) return;
  if (size == null) size = 100;
  if (leftSize == null) leftSize = 40;
  if (rightSize == null) rightSize = 40;
  if (sValue.length <= size) return sValue;
  var iLength = sValue.length;
  var sLeftValue = sValue.substring(0, leftSize);
  var sRightValue = sValue.substring(iLength - rightSize, iLength);
  return sLeftValue + "..." + sRightValue;
}

function capitalizeSentence(content) {

  content = content.toLowerCase();
  content = content.replace(/\.\n/g, ".[-<br>-]. ");
  content = content.replace(/\.\s\n/g, ". [-<br>-]. ");

  var wordSplit = '. ';
  var wordArray = content.split(wordSplit);
  var numWords = wordArray.length;

  for (var x = 0; x < numWords; x++) {
    wordArray[x] = wordArray[x].replace(wordArray[x].charAt(0), wordArray[x].charAt(0).toUpperCase());
    if (x == 0) {
      content = wordArray[x] + ". ";
    } else if (x != numWords - 1) {
      content = content + wordArray[x] + ". ";
    } else if (x == numWords - 1) {
      content = content + wordArray[x];
    }
  }

  content = content.replace(/\[-<br>-\]\.\s/g, "\n");
  content = content.replace(/\si\s/g, " I ");

  return content;
}

function capitalizeTitle(content) {

  content = content.toLowerCase();
  content = content.replace(/\n/g, ". [-<br>-] ");

  var wordSplit = ' ';
  var wordArray = content.split(wordSplit);
  var numWords = wordArray.length;

  for (var x = 0; x < numWords; x++) {
    wordArray[x] = wordArray[x].replace(wordArray[x].charAt(0), wordArray[x].charAt(0).toUpperCase());
    if (x == 0) {
      content = wordArray[x] + " ";
    } else if (x != numWords - 1) {
      content = content + wordArray[x] + " ";
    } else if (x == numWords - 1) {
      content = content + wordArray[x];
    }
  }

  content = content.replace(/\.\s\[-<br>-\]\s/g, "\n");
  content = content.replace(/\.\s\[-<br>-\]/g, "\n");
  content = content.replace(/\si\s/g, " I ");

  return content;
}

function resolveParametrizedUrl(url, object) {
  var result = url;

  if (object == null) return result;

  var expression = new RegExp("::([^\:\:]*)::");
  var codeArray = expression.exec(result);

  while (codeArray != null) {
    var code = codeArray[1];
    var value = null;

    eval("value = object." + code);

    if (value != null) result = result.replace(codeArray[0], value);
    else result = result.replace(codeArray[0], "");

    codeArray = expression.exec(result);
  }

  return result;
};

function reload(location) {
  window.location = location + (location.indexOf("?") != -1 ? "&" : "?") + "m=" + Math.random();
};

function generateIdForKey(key) {
  var result = 0;
  for (var i = 0; i < key.length; i++)
    result += parseInt(key.charCodeAt(i));
}

function containsObjectInList(obj, list) {
  var i;
  for (i = 0; i < list.length; i++) {
    if (objectEquals(list[i], obj)) {
      return true;
    }
  }

  return false;
}

function objectEquals(obj, x) {
  var p = 0;

  for (p in obj) {
    if (typeof(x[p]) == 'undefined') {
      return false;
    }
  }

  for (p in obj) {
    if (obj[p]) {
      switch (typeof(obj[p])) {
        case 'object':
          if (!objectEquals(obj[p], x[p])) {
            return false;
          }
          break;
        case 'function':
          if (typeof(x[p]) == 'undefined' ||
              (p != 'equals' && obj[p].toString() != x[p].toString()))
            return false;
          break;
        default:
          if (obj[p] != x[p]) {
            return false;
          }
      }
    } else {
      if (x[p])
        return false;
    }
  }

  for (p in x) {
    if (typeof(obj[p]) == 'undefined') {
      return false;
    }
  }

  return true;
};

function arrayToMap(array) {
  var result = new Object();
  if (array == null) return result;
  for (var i = 0; i < array.length; i++) {
    var value = array[i];
    result[value] = value;
  }
  return result;
}

function cleanNonAsciiCharacters(data) {
	if (data == null)
		return null;

	data = data.replace(/\n/g, "#crlf#");
	data = data.replace(/\t/g, "#tab#");
	data = data.replace(/[\u0000-\u001f]/g, "");
	data = data.replace(/#crlf#/g, "\n");
	data = data.replace(/#tab#/g, "\t");

	return data;
}

function getCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0;i < ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
};

function setCookie(name,value,days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime()+(days*24*60*60*1000));
        expires = "; expires="+date.toGMTString();
    }
    document.cookie = name+"="+value+expires+"; path=/";
};

//--------------------------------------------------------------------------------

function parseServerDate(date) {
  return Date.parseDate(date, SERVER_DATE_FORMAT);
};

//--------------------------------------------------------------------------------

function toServerDate(date) {
  if (date == null) return "";
  return date.format(SERVER_DATE_FORMAT);
};

//--------------------------------------------------------------------------------

function getFormattedDate(date, Language, useFullDate, useWeekDay) {

  if (date == null) return "";

  var currentDate = new Date();
  var isCurrentYear = (date.getFullYear() == currentDate.getFullYear());
  var isCurrentMonth = ((date.getMonth() == currentDate.getMonth()) && (isCurrentYear));
  var isToday = ((date.getDate() == currentDate.getDate()) && (isCurrentMonth));
  var isYesterday = ((date.getDate() == (currentDate.getDate() - 1)) && (isCurrentMonth));
  var format;

  Date.dayNames = eval("aDays." + Language);
  Date.monthNames = eval("aMonths." + Language);

  if ((isToday) && (!useFullDate)) return (Lang && Lang.Dates && Lang.Dates.Today) ? Lang.Dates.Today : "Today";
  if ((isYesterday) && (!useFullDate)) return (Lang && Lang.Dates && Lang.Dates.Yesterday) ? Lang.Dates.Yesterday : "Yesterday";

  if (useWeekDay && useFullDate) format = "l, ";
  else format = "";

  switch (Language) {
    case "es" :
      if ((isCurrentYear) && (!useFullDate)) format += "j \\d\\e F";
      else format += "j \\d\\e F \\d\\e Y";
      break;
    case "en" :
      if ((isCurrentYear) && (!useFullDate)) format += "d F";
      else format += "F d, Y";
      break;
    default:
      if ((isCurrentYear) && (!useFullDate)) format += "d F";
      else format += "F d, Y";
  }

  return date.format(format);
};

function getFormattedDateTime(date, Language, useFullDate, useWeekDay, hideArticle) {

  if (date == null) return "";

  var currentDate = new Date();
  var isCurrentYear = (date.getFullYear() == currentDate.getFullYear());
  var isCurrentMonth = ((date.getMonth() == currentDate.getMonth()) && (isCurrentYear));
  var isToday = ((date.getDate() == currentDate.getDate()) && (isCurrentMonth));
  var isYesterday = ((date.getDate() == (currentDate.getDate() - 1)) && (isCurrentMonth));
  var format;

  Date.dayNames = eval("aDays." + Language);
  Date.monthNames = eval("aMonths." + Language);

  if ((isToday) && (!useFullDate)) return Lang.Dates.Today + " " + Lang.Dates.At + " " + date.format("H:i:s");
  if ((isYesterday) && (!useFullDate)) return Lang.Dates.Yesterday + " " + Lang.Dates.At + " " + date.format("H:i:s");

  if (useWeekDay && useFullDate) format = "l, ";
  else format = "";

  switch (Language) {
    case "es" :
      if ((isCurrentYear) && (!useFullDate)) format += (!hideArticle ? "\\e\\l " : "") + "j \\d\\e F \\a \\l\\a\\s H:i:s";
      else format += (!hideArticle ? "\\e\\l " : "") + "j \\d\\e F \\d\\e Y \\a \\l\\a\\s H:i:s";
      break;
    case "en" :
      if ((isCurrentYear) && (!useFullDate)) format += (!hideArticle ? "\\o\\n " : "") + "d F \\a\\t H:i:s";
      else format += (!hideArticle ? "\\o\\n " : "") + "F d, Y \\a\\t H:i:s";
      break;
    default:
      if ((isCurrentYear) && (!useFullDate)) format += "d F \\a\\t H:i:s";
      else format += (!hideArticle ? "\\o\\n " : "") + "F d, Y \\a\\t H:i:s";
  }

  return date.format(format);
};

//--------------------------------------------------------------------------------

function getMonthDays(date) {
  var iYear = date.getFullYear();
  var iMonth = date.getMonth();
  if (!Date.monthDays) {
    Date.monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  }

  if (Date.isLeapYear(iYear)) Date.monthDays[1] = 29;
  else Date.monthDays[1] = 28;

  return Date.monthDays[iMonth];
};

//--------------------------------------------------------------------------------

Date.isLeapYear = function (iYear) {
  return ((iYear % 4 == 0) && (iYear % 100 || !(iYear % 400))) ? true : false;
};

Date.getPattern = function (Type) {
  var lowerType = Type.toLowerCase();
  return (this.patterns[lowerType]) ? Date.patterns[lowerType] : Type;
};

Date.getCurrentTimeZone = function() {
  return new Date().getTimezoneOffset()/60;
}



var DECIMAL_SEPERATOR = ',';
var GROUP_SEPERATOR = '.';

function DecimalFormat(formatStr) {
  
  this.prefix = '';
  
  this.suffix = '';
  
  this.comma = 0;
  
  this.minInt = 1;
  
  this.minFrac = 0;
  
  this.maxFrac = 0;

  // get prefix
  for (var i = 0; i < formatStr.length; i++) {
    if (formatStr.charAt(i) == '#' || formatStr.charAt(i) == '0') {
      this.prefix = formatStr.substring(0, i);
      formatStr = formatStr.substring(i);
      break;
    }
  }

  // get suffix
  this.suffix = formatStr.replace(/[#]|[0]|[,]|[.]/g, '');

  // get number as string
  var numberStr = formatStr.replace(/[^0#,.]/g, '');

  var intStr = '';
  var fracStr = '';
  var point = numberStr.indexOf('.');
  if (point != -1) {
    intStr = numberStr.substring(0, point);
    fracStr = numberStr.substring(point + 1);
  }
  else {
    intStr = numberStr;
  }

  var commaPos = intStr.lastIndexOf(',');
  if (commaPos != -1) {
    this.comma = intStr.length - 1 - commaPos;
  }

  intStr = intStr.replace(/[,]/g, ''); // remove commas

  fracStr = fracStr.replace(/[,]|[.]+/g, '');

  this.maxFrac = fracStr.length;
  var tmp = intStr.replace(/[^0]/g, ''); // remove all except zero
  if (tmp.length > this.minInt)
    this.minInt = tmp.length;
  tmp = fracStr.replace(/[^0]/g, '');
  this.minFrac = tmp.length;
}


DecimalFormat.prototype.format = function (numStr) { // 1223.06 --> $1,223.06
  // remove prefix, suffix and commas
  var numberStr = this.formatBack(numStr).toLowerCase();

  // do not format if not a number
  if (isNaN(numberStr) || numberStr.length == 0)
    return numStr;

  //scientific numbers
  if (i = numberStr.indexOf("e") != -1) {
    var n = Number(numberStr);
    if (n == "Infinity" || n == "-Infinity") return numberStr;
    numberStr = n + "";
    if (numberStr.indexOf('e') != -1) return numberStr;
  }

  var negative = false;
  // remove sign
  if (numberStr.charAt(0) == '-') {
    negative = true;
    numberStr = numberStr.substring(1);
  }
  else if (numberStr.charAt(0) == '+') {
    numberStr = numberStr.substring(1);
  }

  var point = numberStr.indexOf('.'); // position of point character
  var intStr = '';
  var fracStr = '';
  if (point != -1) {
    intStr = numberStr.substring(0, point);
    fracStr = numberStr.substring(point + 1);
  }
  else {
    intStr = numberStr;
  }
  fracStr = fracStr.replace(/[.]/, ''); // remove other point characters

  var isPercentage = this.suffix && this.suffix.charAt(0) === '%';
  // if percentage, number will be multiplied by 100.
  var minInt = this.minInt, minFrac = this.minFrac, maxFrac = this.maxFrac;
  if (isPercentage) {
    minInt -= 2;
    minFrac += 2;
    maxFrac += 2;
  }

  if (fracStr.length > maxFrac) { // round
    //case 6143
    var num = new Number('0.' + fracStr);
    num = (maxFrac == 0) ? Math.round(num) : num.toFixed(maxFrac);
    // toFixed method has bugs on IE (0.7 --> 0)
    fracStr = num.toString(10).substr(2);
    var c = (num >= 1) ? 1 : 0; //carry
    var x, i = intStr.length - 1;
    while (c) { //increment intStr
      if (i == -1) {
        intStr = '1' + intStr;
        break;
      }
      else {
        x = intStr.charAt(i);
        if (x == 9) {
          x = '0';
          c = 1;
        }
        else {
          x = (++x) + '';
          c = 0;
        }
        intStr = intStr.substring(0, i) + x + intStr.substring(i + 1, intStr.length);
        i--;
      }
    }
  }
  for (var i = fracStr.length; i < minFrac; i++) { // if minFrac=4 then 1.12 --> 1.1200
    fracStr = fracStr + '0';
  }
  while (fracStr.length > minFrac && fracStr.charAt(fracStr.length - 1) == '0') { // if minInt=4 then 00034 --> 0034)
    fracStr = fracStr.substring(0, fracStr.length - 1);
  }

  for (var i = intStr.length; i < minInt; i++) { // if minInt=4 then 034 --> 0034
    intStr = '0' + intStr;
  }
  while (intStr.length > minInt && intStr.charAt(0) == '0') { // if minInt=4 then 00034 --> 0034)
    intStr = intStr.substring(1);
  }

  if (isPercentage) { // multiply by 100
    intStr += fracStr.substring(0, 2);
    fracStr = fracStr.substring(2);
  }

  var j = 0;
  for (var i = intStr.length; i > 0; i--) { // add commas
    if (j != 0 && j % this.comma == 0) {
      intStr = intStr.substring(0, i) + GROUP_SEPERATOR + intStr.substring(i);
      j = 0;
    }
    j++;
  }

  var formattedValue;
  if (fracStr.length > 0)
    formattedValue = this.prefix + intStr + DECIMAL_SEPERATOR + fracStr + this.suffix;
  else
    formattedValue = this.prefix + intStr + this.suffix;

  if (negative) {
    formattedValue = '-' + formattedValue;
  }

  return formattedValue;
};



DecimalFormat.prototype.formatBack = function (fNumStr) { // $1,223.06 --> 1223.06
  fNumStr += ''; //ensure it is string
  if (!fNumStr) return ''; //do not return undefined or null
  if (!isNaN(fNumStr)) return this.getNumericString(fNumStr);
  var fNumberStr = fNumStr;
  var negative = false;
  if (fNumStr.charAt(0) == '-') {
    fNumberStr = fNumberStr.substr(1);
    negative = true;
  }
  var pIndex = fNumberStr.indexOf(this.prefix);
  var sIndex = (this.suffix == '') ? fNumberStr.length : fNumberStr.indexOf(trim(this.suffix), this.prefix.length + 1);
  if (pIndex == 0 && sIndex > 0) {
    // remove suffix
    fNumberStr = fNumberStr.substr(0, sIndex);
    // remove prefix
    fNumberStr = fNumberStr.substr(this.prefix.length);
    // remove commas
    fNumberStr = fNumberStr.replace(new RegExp("\\" + GROUP_SEPERATOR, "g"), '');
    // clean blank spaces
    fNumberStr = trim(fNumberStr);
  }
  fNumberStr = fNumberStr.replace(new RegExp("\\" + DECIMAL_SEPERATOR, "g"), '.');
  if (negative)
    fNumberStr = '-' + fNumberStr;
  if (!isNaN(fNumberStr))
    return this.getNumericString(fNumberStr);
  return fNumStr;
};


DecimalFormat.prototype.getNumericString = function (str) {
  //first convert to number
  var num = new Number(str);
  //check if there is a missing dot
  var numStr = num + '';
  if (str.indexOf('.') > -1 && numStr.indexOf('.') < 0) {
    //check if original string has all zeros after dot or not
    for (var i = str.indexOf('.') + 1; i < str.length; i++) {
      //if not, this means we lost precision
      if (str.charAt(i) !== '0') return str;
    }
    return numStr;
  }
  return str;
};

var SELECTED = "selected";
var LOADED = "THUMB_LOADED";
var PAGE = "PAGE";
var TIME = "TIME";
var COUNT = "COUNT";
var CLEAR = "CLEAR";
var ACCEPT = "ACCEPT";
var PAGE_ITEM_DIV = ".pageItemImage";
var PAGE_ITEM_IMAGE = "";
var THUMB_ITEMS = "THUMB_ITEMS";
var THUMB_ITEM_IMAGE = ".thumbItemImage";

var DocumentViewerTemplates = {
	"THUMBS_VIEW": "<div class=\"thumbsView\"></div>",
	"THUMB_ITEM": "<div class=\"thumbItem\"><div class=\"thumbItemImage\">::PAGE::</div></div>",
	"PAGES_VIEW": "<div class=\"pagesView\"/>",
	"PAGE_ITEM": "<div class=\"pageItem\"><div class=\"pageItemImage\"></div></div>",
	"LABEL": "<div class=\"pagesLabel\"><div class=\"dialog title\"></div></div>",
	"LABEL_EDITABLE": "<div class=\"pagesLabel\"><div class=\"dialog\"><input type=\"text\" class=\"title\"/><a class=\"behaviour accept\" style=\"display:none;\">::ACCEPT::</a><a class=\"behaviour clear\" alt=\"::CLEAR::\"></a></div></div>"
};

var DocumentViewerLang = {
	es: {
		DocumentInProgress: "<span>El documento se está procesando, tiempo estimado para terminar ::TIME:: segundos.</span>",
		MorePages: "<div style='margin:0 auto;width:calc(100% - 20px);text-align:center;font-size:12pt;background:#ff6601;color:white;padding:5px 10px;border-radius:4px;'>El documento tiene ::COUNT:: páginas. Descargue el documento para ver las páginas restantes.</div>",
		Accept: "aceptar",
		Clear: "borrar"
	},
	en: {
		DocumentInProgress: "<span>Document generation is in progress, estimated time to finish is ::TIME:: seconds.</span>",
		MorePages: "<div style='margin:0 auto;width:calc(100% - 20px);text-align:center;font-size:12pt;background:#ff6601;color:white;padding:5px 10px;border-radius:4px;'>Document has ::COUNT:: pages. Download document to see all pages.</div>",
		Accept: "accept",
		Clear: "delete"
	}
};

var DocumentViewerMaxPages = 15;

var ThumbViewer = function (eThumb, item, sBaseUrl) {
	this.item = item;
	this.eControl = eThumb;
	this.selectedHandler = null;
	this.sBaseUrl = sBaseUrl;

	this.eThumbItemImage = this.eControl.child(THUMB_ITEM_IMAGE, false);
};
ThumbViewer.prototype = {

	getId: function () {
		return this.item.id;
	},
	isLoaded: function () {
		return this.eControl.hasClass(LOADED);
	},

	load: function () {
		if (!this.isLoaded()) {
			var img = this.eThumbItemImage.createChild({tag: "img", src: this.sBaseUrl + "&thumb=" + this.item.id + "&r=" + Math.random()});
			this.eThumbItemImage.appendChild(img.dom);
			img.on('click', this.onClick, this);
			this.eControl.addClass(LOADED);
		}
	},

	onClick: function () {
		if (this.selectedHandler != null)
			this.selectedHandler(this);
	},

	setSelected: function (selected) {
		if (selected) {
			this.eControl.addClass(SELECTED);
			if (this.outOfViewportHandler != null) this.outOfViewportHandler(this.eControl);
		}
		else
			this.eControl.removeClass(SELECTED);
	},

	setClickHandler: function (delegate) {
		this.selectedHandler = delegate;
	},

	setOutOfViewportHandler: function (delegate) {
		this.outOfViewportHandler = delegate;
	},

	dispose: function () {
		this.eControl = null;
	}
};

var PageViewer = function (eThumb, item, sBaseUrl) {
	this.item = item;
	this.label = null;
	this.labelEditable = false;
	this.eControl = eThumb;
	this.selectedHandler = null;
	this.fZoomFactor = 0.75;
	this.ePageItemImage = this.eControl.child(PAGE_ITEM_DIV, false);
	this.ePageItemImage.setStyle({ width: item.width * this.fZoomFactor + PX, height: item.height * this.fZoomFactor + PX});
	this.sBaseUrl = sBaseUrl;
};

PageViewer.prototype = {

	getId: function () {
		return this.item.id;
	},
	isLoaded: function () {
		return this.eControl.hasClass(LOADED);
	},

	load: function () {
		if (!this.isLoaded()) {
			var img = this.ePageItemImage.createChild({tag: "img", src: this.sBaseUrl + "&page=" + this.item.id + "&r=" + Math.random()});
			img.setStyle({ width: this.item.width * this.fZoomFactor + PX,
				height: this.item.height * this.fZoomFactor + PX});
			this.ePageImage = img;
			this.ePageImage.on("click", this.atPageClick, this);
			this.eControl.addClass(LOADED);
		}
	},

	setZoom: function (zoomFactor) {
		this.fZoomFactor = zoomFactor;
		this.ePageItemImage.setStyle({ width: this.item.width * this.fZoomFactor + PX,
			height: this.item.height * this.fZoomFactor + PX});
		if (this.ePageImage) {
			this.ePageImage.setStyle({ width: this.item.width * this.fZoomFactor + PX,
				height: this.item.height * this.fZoomFactor + PX});
		}
	},

	getWidth: function () {
		return this.item.width;
	},

	select: function (extContainer) {
		extContainer.scrollTo("t", extContainer.getScroll().top + this.eControl.getTop() - 5 - extContainer.getTop());
		this.load();
	},

	setClickHandler: function (delegate) {
		this.selectedHandler = delegate;
	},

	dispose: function () {
		this.eControl = this.ePageItemImage = this.ePageImage = null;
	},

	getPageTop: function () {
		return this.eControl.getTop();
	},

	getPageBottom: function () {
		return this.eControl.getBottom();
	},

	atPageClick: function () {
		if (this.onClick) this.onClick(this);
	}
};

var DocumentViewer = function (thumbsContainer, pagesContainer, buttonsContainer, sLang) {
	this.sLang = sLang ? sLang : "en";
	this.aThumbViewers = new Array();
	this.aPageViewers = new Array();
	this.extThumbContainer = null;
	this.extPageContainer = null;
	this.iSelectedPage = -1;
	this.bInitialized = false;

	this.thumbsContainer = thumbsContainer;
	this.pagesContainer = pagesContainer;
	this.buttonsContainer = buttonsContainer;

	this.fZoomFactor = 0.75;
	this.fZoomFactorIncr = 0.25;
};
DocumentViewer.prototype = {
	dispose: function () {
		for (var i = 0; i < this.aThumbViewers.length; i++)
			this.aThumbViewers[i].dispose();
		for (var i = 0; i < this.aPageViewers.length; i++)
			this.aPageViewers[i].dispose();
	},

	setDocumentId: function (sDocumentId) {
		this.sDocumentId = sDocumentId;
	},

	setDocumentLabel: function (label, editable) {
		this.label = label;
		this.labelEditable = editable;
	},

	showDocumentLabel: function () {
		this.labelVisible = true;
	},

	hideDocumentLabel: function () {
		this.labelVisible = false;
	},

	setBaseUrl: function (sBaseUrl) {
		this.sBaseUrl = sBaseUrl;
	},

	init: function () {

		if (!this.extCurrentPage) {
			this.extCurrentPage = new Ext.form.TextField({cls: "page"});
			this.extCurrentPage.on('change', this.onCurrentPageChanged, this);
			this.extCurrentPage.on('specialkey', this.onCurrentPageKeyPress, this);
			this.extToolbar = new Ext.Toolbar(this.buttonsContainer,
				[
					{ iconCls: "previous", handler: this.onGoToPrevious.createDelegate(this) },
					this.extCurrentPage,
					{ iconCls: "next", handler: this.onGoToNext.createDelegate(this) },
					'-',
					{ iconCls: "zoomIn", handler: this.onZoomIn.createDelegate(this) },
					{ iconCls: "zoomOut", handler: this.onZoomOut.createDelegate(this) }
				]
			);
		}
	},

	setViewport: function (extViewport) {
		this.extPageViewPort = extViewport;
	},

	onCurrentPageKeyPress: function (extTextField, event) {
		if (event.getKey() == Ext.EventObject.ENTER) {
			this.onCurrentPageChanged(extTextField, extTextField.getValue());
		}
	},

	onCurrentPageChanged: function (extTextField, newValue, oldValue) {
		var iValue = parseInt(newValue) - 1;
		if (iValue >= 0 && iValue < (this.aThumbViewers.length)) {
			this.changePage(iValue, true);
		}
	},

	updateLabel: function () {
		if (this.label != null) {
			var extPagesContainer = Ext.get(this.pagesContainer);
			var eDialog = extPagesContainer.select(".dialog").first();
			eDialog.setWidth(this.aPageViewers[0].getWidth() * this.fZoomFactor);
		}
	},

	updateAllPages: function () {
		var totalPages = this.aPageViewers.length;
		var iMaxWidth = -1;

		for (var i = 0; i < totalPages; i++) {
			this.aPageViewers[i].setZoom(this.fZoomFactor);
			var iCurrentWidth = this.aPageViewers[i].getWidth();
			if (iCurrentWidth > iMaxWidth) iMaxWidth = iCurrentWidth;
		}

		if ((totalPages > 0) && (this.fZoomFactor >= 1)) this.extPageContainer.setWidth((iMaxWidth * this.fZoomFactor) + this.extPageContainer.dom.style.paddingRight);

		this.aPageViewers[this.iSelectedPage].select(this.extPageContainer);
		this.checkPageLoad();
	},

	onZoomIn: function () {
		if (this.bInitialized) {
			this.fZoomFactor += this.fZoomFactorIncr;
			this.updateLabel();
			this.updateAllPages();
		}
	},

	onZoomOut: function () {
		if (this.bInitialized) {
			if (this.fZoomFactor - this.fZoomFactorIncr >= (this.fZoomFactorIncr * 2))
				this.fZoomFactor -= this.fZoomFactorIncr;
			this.updateLabel();
			this.updateAllPages();
		}
	},

	onGoToPrevious: function () {
		if (this.bInitialized)
			this.changePage(this.iSelectedPage - 1, true);
	},

	onGoToNext: function () {
		if (this.bInitialized)
			this.changePage(this.iSelectedPage + 1, true);
	},

	load: function () {
		this.init();

		Ext.Ajax.request({
			"url": this.sBaseUrl,
			"scope": this,
			"params": {
				"id": this.sDocumentId,
				"type": "JSON"
			},
			"method": "GET",
			"success": function (response, options) {
				this.onMetadataReceived(Ext.util.JSON.decode(response.responseText));
			},
			"failure": function (response, options) {
				alert(response.responseText);
			}
		});
	},

	onMetadataReceived: function (metadata) {
		var extPagesContainer = Ext.get(this.pagesContainer);

		extPagesContainer.dom.innerHTML = "";

		if (!metadata.hasPendingOperations) {
			var numberOfPages = metadata.numberOfPages;
			var numberOfPagesToRender = numberOfPages <= DocumentViewerMaxPages ? numberOfPages : DocumentViewerMaxPages;
			var sUrlSeparator = this.sBaseUrl.indexOf("?") ? "&" : "?";
			var sUrl = this.sBaseUrl + sUrlSeparator + "id=" + this.sDocumentId;

			this.extThumbContainer = Ext.get(this.thumbsContainer).insertHtml("beforeEnd", DocumentViewerTemplates.THUMBS_VIEW, true);
			this.extPageContainer = Ext.get(this.pagesContainer);

			for (var i = 1; i <= numberOfPagesToRender; i++) {
				var ePageControl = this.extPageContainer.insertHtml("beforeEnd", DocumentViewerTemplates.PAGE_ITEM, true);
				var oPageViewer = new PageViewer(ePageControl, metadata.pages[i], sUrl);

				oPageViewer.onClick = this.atPageClick.bind(this);
				this.aPageViewers.push(oPageViewer);

				var eThumbControl = this.extThumbContainer.insertHtml("beforeEnd",
					DocumentViewerTemplates.THUMB_ITEM.replace(TEMPLATE_SEPARATOR + PAGE + TEMPLATE_SEPARATOR, i),
					true);
				var oThumbViewer = new ThumbViewer(eThumbControl, metadata.pages[i], sUrl);
				oThumbViewer.setClickHandler(this.onThumbSelected.createDelegate(this));
				oThumbViewer.setOutOfViewportHandler(this.onThumbOutOfViewport.createDelegate(this));
				oThumbViewer.load();
				this.aThumbViewers.push(oThumbViewer);

				var width = 0;
				if (i != 1) width = this.extThumbContainer.getWidth();
				this.extThumbContainer.setWidth(width + eThumbControl.getWidth() + 20);

				if (i == 1) {
					this.setSelectedPage(0);
					this.aThumbViewers[this.iSelectedPage].setSelected(true);
					this.aPageViewers[this.iSelectedPage].load();
				}
			}

			this.bInitialized = numberOfPages > 0;

			if (this.label != null) {
				var template = this.labelEditable ? DocumentViewerTemplates.LABEL_EDITABLE : DocumentViewerTemplates.LABEL;
				var eLabel = extPagesContainer.insertHtml("afterBegin", template.replace(TEMPLATE_SEPARATOR + CLEAR + TEMPLATE_SEPARATOR, DocumentViewerLang[this.sLang].Clear).replace(TEMPLATE_SEPARATOR + ACCEPT + TEMPLATE_SEPARATOR, DocumentViewerLang[this.sLang].Accept), true);
				var ePagesLabel = extPagesContainer.select(".pagesLabel").first();
				var eDialog = eLabel.select(".dialog").first();
				eDialog.setWidth(metadata.pages[1].width * this.fZoomFactor);
				var eTitle = eLabel.select(".title").first();

				if (this.labelEditable) {
					eTitle.dom.value = this.label;
					eTitle.on("keyup", this.atLabelKeyUp, this);
					eTitle.on("focus", this.atLabelFocus, this);
					eTitle.on("blur", this.atLabelBlur, this);
					var eClear = eDialog.select(".clear").first();
					eClear.on("click", this.atClear, this);
					var eAccept = eDialog.select(".accept").first();
					eAccept.on("click", this.renameLabel, this);
				}
				else {
					//eTitle.dom.innerHTML = this.label;
					eTitle.dom.style.display = "none";
				}

				if (this.labelVisible)
					ePagesLabel.dom.style.display = "block";
				else
					ePagesLabel.dom.style.display = "none";
			}

			this.renderMorePagesMessage(numberOfPages, extPagesContainer);

		} else {
			extPagesContainer.insertHtml("beforeEnd",
				DocumentViewerLang[this.sLang].DocumentInProgress
					.replace(TEMPLATE_SEPARATOR + TIME + TEMPLATE_SEPARATOR,
						metadata.estimatedTimeToFinish));
			setTimeout(this.load.bind(this), metadata.estimatedTimeToFinish / 2 * 1000);
		}

	},

	renderMorePagesMessage : function(numberOfPages, extPagesContainer) {
		if (numberOfPages <= DocumentViewerMaxPages) return;
		extPagesContainer.insertHtml("beforeEnd", DocumentViewerLang[this.sLang].MorePages.replace(TEMPLATE_SEPARATOR + COUNT + TEMPLATE_SEPARATOR, numberOfPages));
	},

	renameLabel: function (event) {
		var extPagesContainer = Ext.get(this.pagesContainer);
		var eTitle = extPagesContainer.select(".dialog .title").first();
		if (eTitle.dom.value == "") {
			window.clearTimeout(this.blurTimeout);
			return;
		}
		if (this.onDocumentLabelChange) this.onDocumentLabelChange(eTitle.dom.value);
	},

	atLabelKeyUp: function (event) {
		var codeKey = event.getKey();
		if (codeKey == event.ENTER) this.renameLabel();

		var extPagesContainer = Ext.get(this.pagesContainer);
		var eTitle = extPagesContainer.select(".dialog .title").first();
		var eClear = extPagesContainer.select(".dialog .clear").first();
		eClear.dom.style.display = (eTitle.dom.value != "") ? "block" : "none";
	},

	atLabelFocus: function (event) {
		var extPagesContainer = Ext.get(this.pagesContainer);
		var eTitle = extPagesContainer.select(".dialog .title").first();
		var eAccept = extPagesContainer.select(".dialog .accept").first();
		eTitle.addClass("active");
		eAccept.dom.style.display = "block";
	},

	atPageClick: function (pageViewer) {
		if (this.onDocumentClick) this.onDocumentClick();
	},

	blurLabel: function () {
		var extPagesContainer = Ext.get(this.pagesContainer);
		var eTitle = extPagesContainer.select(".dialog .title").first();
		var eAccept = extPagesContainer.select(".dialog .accept").first();
		eTitle.removeClass("active");
		eAccept.dom.style.display = "none";
	},

	atLabelBlur: function (event) {
		this.blurTimeout = window.setTimeout(this.blurLabel.bind(this), 100);
	},

	atClear: function () {
		var extPagesContainer = Ext.get(this.pagesContainer);
		var eTitle = extPagesContainer.select(".dialog .title").first();
		var eClear = extPagesContainer.select(".dialog .clear").first();
		eTitle.dom.value = "";
		eClear.dom.style.display = "none";
	},

	onScrollPageView: function (event, obj) {
		var viewer = this.aPageViewers[this.iSelectedPage];
		var iTop = viewer.getPageTop() - 10;
		var iBottom = viewer.getPageBottom();

		var viewport = this.extPageViewPort.getHeight();
		var halfViewport = viewport / 2;
		var dif = 0;

		if (iTop > halfViewport)
			dif = -1;
		else if (iBottom < halfViewport)
			dif = 1;

		if (dif != 0) {
			this.changePage(this.iSelectedPage + dif);
		} else {
			this.checkPageLoad();
		}
	},

	checkPageLoad: function () {
		var viewport = this.extPageViewPort.getHeight();
		var viewer;
		if (this.iSelectedPage > 0) {
			viewer = this.aPageViewers[this.iSelectedPage - 1];
			if (viewer.getPageBottom() > this.extPageViewPort.getTop())
				viewer.load();
		}

		if (this.iSelectedPage < this.aPageViewers.length - 1) {
			viewer = this.aPageViewers[this.iSelectedPage + 1];
			if (viewer.getPageTop() < viewport + this.extPageViewPort.getTop())
				viewer.load();
		}
	},

	changePage: function (newPage, bSelectPageView) {
		if (newPage >= 0 && newPage < (this.aThumbViewers.length) && this.iSelectedPage != newPage) {
			this.aThumbViewers[this.iSelectedPage].setSelected(false);
			this.setSelectedPage(newPage);
			var viewer = this.aPageViewers[this.iSelectedPage];
			viewer.load();
			if (bSelectPageView)
				viewer.select(this.extPageViewPort);
			this.aThumbViewers[this.iSelectedPage].setSelected(true);
		}
	},

	setSelectedPage: function (iNewValue) {
		this.iSelectedPage = iNewValue;
		this.extCurrentPage.setValue(this.iSelectedPage + 1);
	},

	onThumbSelected: function (thumbViewer) {
		var iNewPage = thumbViewer.getId() - 1;
		if (this.iSelectedPage != iNewPage) {
			thumbViewer.setSelected(true);
			this.aThumbViewers[this.iSelectedPage].setSelected(false);
			this.setSelectedPage(iNewPage);
		}

		this.aPageViewers[this.iSelectedPage].select(this.extPageViewPort, false);
	},

	onThumbOutOfViewport: function (thumbViewer) {
		this.extThumbContainer.dom.scrollLeft = thumbViewer.dom.offsetLeft;
	}
};

//--------------------------------------------------------------------------------

function isFunction(item) {
  return (typeof item == "function");
};

//--------------------------------------------------------------------------------

function generateTagAttributes(hAttributes) {
  if (!hAttributes) return EMPTY;

  var sResult = EMPTY;

  for (var key in hAttributes) {
    if (isFunction(hAttributes[key])) continue;

    sResult += BLANK + ((key.charAt(0) == "_") ? key.substr(1) : key );
    sResult += EQUAL + DOUBLE_QUOTE + hAttributes[key] + DOUBLE_QUOTE;
  }

  return sResult;
};

String.prototype.toTag = function (name, hAttributes) {
  var sResult = EMPTY;
  sResult = "<" + name + BLANK + generateTagAttributes(hAttributes) + ">";
  sResult += this;
  sResult += "</" + name + ">";
  return sResult;
};

String.prototype.toA = function (hAttributes) {
  return this.toTag("a", hAttributes);
};

String.prototype.toLi = function (hAttributes) {
  return this.toTag("li", hAttributes);
};

String.prototype.toImg = function (hAttributes) {
  return "<img " + generateTagAttributes(hAttributes) + " src='" + this + "'>";
};

String.prototype.toShort = function (iLength) {
  if (this.length <= iLength) return this;
  return this.substr(0, iLength) + DOT + DOT + DOT;
};

//--------------------------------------------------------------------------------
Array.prototype.getIndex = function (data, key) {
  if (!data && data != 0 && data != EMPTY) return -1;

  for (var i = 0; i < this.length; i++) {
    var item = this[i];
    var value = (key) ? item[key] : item;

    if (data == value) return i;
  }

  return -1;
};

Array.prototype.has = function (data) {
  return (this.getIndex(data) >= 0);
};

Array.prototype.tail = function (data) {
  this[this.length] = data;
};

Array.prototype.head = function () {
  if (this.length <= 0) return null;
  value = this[0];

  for (var i = 0; i < this.length - 1; i++)
    this[i] = this[i + 1];

  this.length--;
  return value;
};

Array.prototype.remove = function (data, key) {
  var i = this.getIndex(data, key);
  if (i < 0) return;

  for (; i < this.length - 1; i++)
    this[i] = this[i + 1];

  delete(this[i]);
  this.length--;
};

Array.prototype.copy = function (aData) {
  for (var i in aData) {
    this[i] = aData[i];
  }
};

Array.prototype.toString = function (separator) {
  if (separator == null) separator = COMMA;

  sResult = new String();
  for (iPos in this) {
    if (isFunction(this[iPos])) continue;
    sResult += this[iPos] + separator;
  }

  sResult = sResult.substr(0, sResult.length - 1);

  return sResult;
};

Array.prototype.size = function () {
  var iLength = 0;
  for (var index in this) {
    if (isFunction(this[index])) continue;
    iLength++;
  }
  return iLength;
};

//--------------------------------------------------------------------------------

function extractFilename(sFullPath) {
  var iLast45 = sFullPath.lastIndexOf("/");
  var iLast135 = sFullPath.lastIndexOf("\\");
  var iLast = iLast45;

  if (iLast135 > iLast) iLast = iLast135;

  var sFileName = sFullPath.substring(iLast + 1, sFullPath.length);

  return sFileName;
};

function extractFileExtension(sFileName) {
  sFileName = String(sFileName).toUpperCase();
  return sFileName.substring(sFileName.lastIndexOf(DOT) + 1);
};

var AT_IMAGE = "IMG";
var AT_EDC = "EDC";
var AT_HTML = "HTM";
var AT_DOC = "DOC";
var AT_COMPRESSED = "CMP";
var AT_SPREADSHEET = "SPS";
var AT_PRESENTATION = "PRE";
var AT_DATABASE = "DBA";
var AT_OTHER = "OTHER";

function getFileType(sFileName) {
  var sAux = extractFileExtension(sFileName);
  if (["PNG", "BMP", "JPG", "JPEG", "GIF"].has(sAux)) return AT_IMAGE;
  else if (["PDF", "LIT"].has(sAux)) return AT_EDC;
  else if (["HTML", "HTML"].has(sAux)) return AT_HTML;
  else if (["DOC", "TXT", "RTF", "WRI", "SGL", "SVW", "STW", "SXW", "ODT", "SDW"].has(sAux)) return AT_DOC;
  else if (["ZIP", "RAR", "TAR", "GZ", "TGZ", "LZH", "LHA", "ARJ"].has(sAux)) return AT_COMPRESSED;
  else if (["XLS", "SXC", "ODS"].has(sAux)) return AT_SPREADSHEET;
  else if (["PPT", "PPS", "SDD"].has(sAux)) return AT_PRESENTATION;
  else if (["MDB", "ODB"].has(sAux)) return AT_DATABASE;
  else return AT_OTHER;
};

GetFileClass = function (FileName) {
  var sFileType = getFileType(FileName);
  var aClasses = [AT_IMAGE, AT_EDC, AT_HTML, AT_DOC, AT_COMPRESSED, AT_SPREADSHEET, AT_PRESENTATION, AT_DATABASE, AT_OTHER];
  var aStyles = ["FILEIMAGE", "FILEEDOCUMENT", "FILEWEBPAGE", "FILEDOCUMENT", "FILECOMPRESSED", "FILESPREADSHEET", "FILEPRESENTATION", "FILEDATABASE", "FILEDEFAULT"];
  var i = aClasses.getIndex(sFileType);

  if (i < 0) return "FILEDEFAULT";

  return aStyles[i];
};

//------------------------------------------------------------------
TToolHandler = function (eElement, sName) {
  this.eElement = eElement;
  this.sName = sName;
  this.Mode = null;
  this.bSelect = false;
};

//------------------------------------------------------------------
TToolHandler.prototype.SetAction = function (Action, sEvent) {
  if (!sEvent) sEvent = "onclick";
  if (this.bSelect) sEvent = "onchange";

  this.Action = Action;
  this.eElement.Handler = this;
  this.eElement[sEvent] = function (e) {
    if (this.Handler.bSelect)
      this.Handler.aParams = this.options[this.selectedIndex].value;
    if (this.nextSibling) this.nextSibling.focus();

    this.Handler.Execute();

    if (!e) var e = window.event;
    e.cancelBubble = true;
  };
};

//------------------------------------------------------------------
TToolHandler.prototype.SetEvent = function (Function, sEvent) {
  if (!sEvent) sEvent = "onclick";
  if (this.bSelect) sEvent = "onchange";

  this.eElement.Handler = this;
  this.eElement[sEvent] = Function;
};

//------------------------------------------------------------------
TToolHandler.prototype.SetParams = function (aParams) {
  this.aParams = aParams;
};

//------------------------------------------------------------------
TToolHandler.prototype.AddMode = function (value, sStyle) {
  if (!this.aModes) this.aModes = new Array;

  this.aModes[value] = sStyle;
};

//------------------------------------------------------------------
TToolHandler.prototype.SetMode = function (value) {
  var sCurrentClass = (this.aModes) ? this.aModes[this.Mode] : aModes[this.Mode];
  this.Mode = value;
  var sClass = (this.aModes) ? this.aModes[value] : aModes[value];
  var bHasClass = this.eElement.className.indexOf(sCurrentClass);

  if (bHasClass > -1) {
    this.eElement.className = this.eElement.className.replace(new RegExp(sCurrentClass), sClass);
  }
  else {
    this.eElement.className += BLANK + sClass;
  }

  if (typeof(this.eElement.disabled) == typeof(value)) this.eElement.disabled = !value;
};

//------------------------------------------------------------------
TToolHandler.prototype.Execute = function () {
  if (this.Mode) this.Action.Execute(this.aParams);
};

//------------------------------------------------------------------
TToolbarHandler = function (eElement) {
  this.eElement = eElement;
  this.aToolHandlers = new Array;
};

//------------------------------------------------------------------
TToolbarHandler.prototype.GenerateHTML = function (ToolbarDef) {
  var sHTML = EMPTY;
  var sAux = EMPTY;

  for (var key in ToolbarDef) {
    if (isFunction(ToolbarDef[key])) continue;

    var Data = ToolbarDef[key];

    if (!Data) {
      sAux = EMPTY.toLi({_class: "SEPARATOR"});
    }
    else if (Data.values) {
      var sOptions = EMPTY;

      for (var i = 0; i < Data.values.length; i++) {
        var Option = Data.values[i];
        sOptions += '<option value="' + Option.code + '">' + Option.label + '</option>';
      }

      sAux = String('<select id="::name::::key::" style="width:100%;">::options::</select>').toLi({_class: "SELECT", style: "width:::width::"});
      sAux = sAux.replace('::name::', name);
      sAux = sAux.replace('::key::', key);
      sAux = sAux.replace('::options::', sOptions);
      sAux = sAux.replace('::hint::', Data.hint);
      sAux = sAux.replace('::width::', Data.width);
    }
    else {
      sAux = String("::button::").toA({_class: "command", id: "::name::::key::", title: "::hint::", href: "::action::"}).toLi();
      var sButton = EMPTY;

      if (Data.icon) sButton = String("::icon::").replace('::icon::', Data.icon).toImg() + BLANK;
      if (Data.caption && Data.showCaption) sButton += ((sButton != EMPTY) ? BLANK : EMPTY) + Data.caption;
      if (Data.separator) sAux += String(Data.separator).toTag("span", new Object()).toLi();

      sAux = sAux.replace('::name::', name);
      sAux = sAux.replace('::key::', key);
      sAux = sAux.replace('::button::', sButton);
      sAux = sAux.replace('::hint::', Data.hint);
      sAux = sAux.replace('::action::', Data.action);
    }

    sHTML += sAux;
  }

  return sHTML;
};

//------------------------------------------------------------------
TToolbarHandler.prototype.CreateToolHandlers = function (ToolbarDef) {
  for (var key in ToolbarDef) {
    if (isFunction(ToolbarDef[key])) continue;

    var Data = ToolbarDef[key];

    if (!Data) continue;

    var eTool = $(name + key);
    var ToolHandler = new TToolHandler(eTool, key);

    if (Data.values) ToolHandler.bSelect = true;
    if (ToolbarDef[key]["params"])
      ToolHandler.SetParams(ToolbarDef[key]["params"]);

    this.aToolHandlers[key] = ToolHandler;
  }
};


//------------------------------------------------------------------
TToolbarHandler.prototype.AddDefinition = function (ToolbarDef) {
  var sHTML = '';

  sHTML += UL;
  sHTML += this.GenerateHTML(ToolbarDef);
  sHTML += _UL;

  this.eElement.innerHTML = sHTML;
  this.CreateToolHandlers(ToolbarDef);
};

//------------------------------------------------------------------
TToolbarHandler.prototype.AddDefinitions = function (aToolbarDefinition) {
  var sHTML = UL;

  for (var ToolbarDef in aToolbarDefinition) {
    if (!ToolbarDef) return;
    if (isFunction(ToolbarDef)) continue;

    sHTML += this.GenerateHTML(aToolbarDefinition[ToolbarDef]);
  }

  sHTML += _UL;
  this.eElement.innerHTML = sHTML;

  for (var ToolbarDef in aToolbarDefinition) {

    if (!ToolbarDef) return;
    if (isFunction(ToolbarDef)) continue;

    this.CreateToolHandlers(aToolbarDefinition[ToolbarDef]);
  }
};

//==================================================================
var aModes = new Array();
aModes[true] = "ENABLED";
aModes[false] = "DISABLED";

function RequestException(conn, response, options) {
  var extDialog, extTemplate;

  Desktop.hideReports();
  if (Ext.MessageBox.isVisible()) Ext.MessageBox.hide();

  if (!Context.Debugging) {
 	SendMail(Lang.Exceptions.Request.Title, extDialog.body.dom.innerHTML, extDialog);
	return;
  }

  extDialog = new Ext.BasicDialog(Literals.Dialogs.Exception, {width: 500, height: 400, resizable: false});
  extTemplate = new Ext.Template(Lang.Exceptions.Request.Description + 'url: {url}<br/>' + 'params: {params}<br/>' + 'status: {status}<br/>' + 'response: {response}');
  extDialog.body.dom.innerHTML = extTemplate.applyTemplate({url: options.url ? options.url : Ext.Ajax.url, params: options.params, status: response.status + " " + response.statusText, response: response.responseText});
  extDialog.setTitle(Lang.Exceptions.Request.Title);
  extDialog.addButton(Lang.Buttons.Close, CloseException.bind(this, extDialog));
  extDialog.addButton(Lang.Buttons.SendMail, SendMail.bind(this, Lang.Exceptions.Request.Title, extDialog.body.dom.innerHTML, extDialog));
  extDialog.center();
  extDialog.show();
};

function InternalException(e, dOp, dState) {
  var extDialog, extTemplate;

  Desktop.hideReports();
  if (Ext.MessageBox.isVisible()) Ext.MessageBox.hide();

  extDialog = new Ext.BasicDialog(Literals.Dialogs.Exception, {width: 500, height: 400, resizable: false});
  extTemplate = new Ext.Template(Lang.Exceptions.Internal.Description + 'operation: {op}<br/>' + 'state: {state}<br/>' + 'name: {name}<br/>' + 'message: {message}<br/>');

  extDialog.body.dom.innerHTML = extTemplate.applyTemplate({op: dOp, state: dState, name: e.name, message: e.message});

  if (!Context.Debugging) {
	SendMail(Lang.Exceptions.Request.Title, extDialog.body.dom.innerHTML, extDialog);
	return;
  }

  extDialog.setTitle(Lang.Exceptions.Internal.Title);
  extDialog.addButton(Lang.Buttons.Close, CloseException.bind(this, extDialog));
  extDialog.addButton(Lang.Buttons.SendMail, SendMail.bind(this, Lang.Exceptions.Internal.Title, extDialog.body.dom.innerHTML, extDialog));
  extDialog.center();
  extDialog.show();
};

function RequestExceptionWithMessage(message, stack) {
  var extDialog, extTemplate;

  Desktop.hideReports();
  if (Ext.MessageBox.isVisible()) Ext.MessageBox.hide();

  extDialog = new Ext.BasicDialog(Literals.Dialogs.Exception, {width: 500, height: 400, resizable: false});
  extTemplate = new Ext.Template(Lang.Exceptions.Request.Description + '<b>message:</b><br> {message}<br><br><b>stack:</b><br> {stack}');

  extDialog.body.dom.innerHTML = extTemplate.applyTemplate({message: message, stack: stack});

  if (!Context.Debugging) {
	SendMail(Lang.Exceptions.Request.Title, extDialog.body.dom.innerHTML, extDialog);
	return;
  }

  extDialog.setTitle(Lang.Exceptions.Request.Title);
  extDialog.addButton(Lang.Buttons.Close, CloseException.bind(this, extDialog));
  extDialog.addButton(Lang.Buttons.SendMail, SendMail.bind(this, Lang.Exceptions.Request.Title, extDialog.body.dom.innerHTML, extDialog));
  extDialog.center();
  extDialog.show();
};

function CloseException(extDialog) {
  if (!extDialog) return;
  if (Desktop) Desktop.hideReports();
  extDialog.hide();
  extDialog.destroy();
};


function SendMail(sSubject, sBody, extDialog) {
  if (!extDialog) return;

  CloseException(extDialog);
  Kernel.sendMail(sSubject, sBody);
};

CommandDispatcher = new Object();
CommandDispatcher.History = new Object();

CommandDispatcher.mainTitle = " - " + parent.document.title;

CommandDispatcher.dispatch = function (sCommand, DOMItem) {
  var CommandInfo = new CGCommandInfo(sCommand);
  var sOperation = CommandInfo.getOperation();
  var aParameters = CommandInfo.getParameters();
  var bUseHistory = true;

  if (DOMItem && (DOMItem.id == null || DOMItem.id == "")) DOMItem.id = Ext.id();

  if ((sOperation == "shownode" && State.LastCommand.Name == "shownode" && aParameters[0] == State.LastCommand.Id) ||
      (sOperation == "showchildfield" && State.LastCommand.Name == "showchildfield" && aParameters[0] == State.LastCommand.Id) ||
      (sOperation == "showfield" && State.LastCommand.Name == "showfield" && aParameters[0] == State.LastCommand.Id)) {
    bUseHistory = false;
  }

  State.LastCommand.Name = sOperation;
  State.LastCommand.Id = aParameters[0];

  if (bUseHistory && CommandFactory.useHistory(sCommand))
    this.History.addCommand(sCommand, DOMItem);
  else
    this.execute(sCommand, DOMItem);
};

CommandDispatcher.execute = function (sCommand, DOMItem, args) {

  try {
    var Action = CommandFactory.getAction(sCommand);
    if (Action == null) return;
    Action.DOMItem = DOMItem;
    if (args) {
      for (var index in args)
        Action[index] = args[index];
    }
    Action.onTerminate = function () {
      parent.document.title = Desktop.Main.Center.Body.PageControl.getActivePage().title + CommandDispatcher.mainTitle;
    };
    Action.execute();
  }
  catch (e) {
    InternalException(e, Object.inspect(this));
    Desktop.hideProgress();
    Desktop.hideReports();
  }
};

CommandDispatcher.History.addCommand = function (sCommand, DOMItem) {
  var DOMFrame = $(Literals.Frames.History);
  var sCommand = Context.Pages.History + "?command=" + sCommand + "&item=" + ((DOMItem) ? DOMItem.id : null);
  DOMFrame.monetCommand = sCommand;
  frames[Literals.Frames.History].location = sCommand;
};

CommandDispatcher.History.executeCommand = function () {
  if (!Application.isRunning) return;
  var DOMFrame = $(Literals.Frames.History);
  var sLink = frames[Literals.Frames.History].location.href;
  var DOMItem, aLink;
  var iPos;

  if (sLink == null) sLink = DOMFrame.monetCommand;

  iPos = sLink.indexOf("?command=");
  if (iPos == -1) return;

  sLink = sLink.substring(iPos + String("?command=").length);
  aLink = sLink.split("&item=");
  DOMItem = $(aLink[1]);
  CommandDispatcher.execute(aLink[0], DOMItem);
};

function executeMonetCommand(sCommand) {
  CommandDispatcher.execute(sCommand, null);
};

CommandFactory = new Object;
CommandFactory.aList = new Array();

CommandFactory.register = function (ClassAction, aParameters, bUseHistory) {
  if (!ClassAction) return;
  if (!ClassAction.prototype.constructor) return;
  var sClassName = this.getClassName(ClassAction);
  var sOperation = String(sClassName.substring(String("GGAction").length)).toLowerCase();
  if (aParameters == null) aParameters = new Object;
  this.aList[sOperation] = {
    ClassAction: ClassAction,
    aParameters: aParameters,
    bUseHistory: bUseHistory
  };
};

CommandFactory.getClassName = function (ClassAction) {
  var data = ClassAction.constructor.toString().match(/function\s*(\w+)/);
  if (data && data.length == 2) return data[1];
};

CommandFactory.getAction = function (sCommand) {
  var Command = this.parseCommand(sCommand);
  var Item = this.aList[Command.sOperation];
  if (Item == null) return null;
  var Action = new Item.ClassAction;
  Action.ClassName = this.getClassName(Item.ClassAction);
  for (var index in Command.aParameters) Action[index] = Command.aParameters[index];
  Action.OptionalParameters = Command.aOptionalParameters;
  return Action;
};

CommandFactory.useHistory = function (sCommand) {
  var Command = this.parseCommand(sCommand);
  var Item = this.aList[Command.sOperation];
  if (Item == null) return;
  return Item.bUseHistory;
};

CommandFactory.parseCommand = function (sCommand) {
  var Command = new Object;

  sCommand = sCommand.replace(/%28/g, LEFT_BRACKET);
  sCommand = sCommand.replace(/%29/g, RIGHT_BRACKET);

  while ((iPos = sCommand.indexOf(SLASH)) != -1) {
    var iBracketPos = sCommand.indexOf(LEFT_BRACKET);
    if (iPos < iBracketPos) sCommand = sCommand.substring(iPos + 1, sCommand.length);
    else sCommand = sCommand.substring(0, iPos, sCommand.length) + "#@@@@#" + sCommand.substring(iPos + 1, sCommand.length);
  }
  sCommand = sCommand.replace(/#@@@@#/g, "/");

  if ((iPos = sCommand.indexOf(LEFT_BRACKET)) == -1) {
    Command.sOperation = sCommand;
    return Command;
  }

  if (sCommand.substring(sCommand.length - 1, sCommand.length) != RIGHT_BRACKET) return false;

  Command.sOperation = sCommand.substring(0, iPos);

  sCommand = sCommand.substring(iPos + 1, sCommand.length - 1);
  aResult = sCommand.split(',');
  var Item = this.aList[Command.sOperation];
  var aRequiredParameters = new Array();
  Command.aParameters = new Object;
  Command.aOptionalParameters = new Array();
  for (var key in Item.aParameters) {
    var index = Item.aParameters[key];
    if (aResult[index] == null) continue;
    Command.aParameters[key] = unescape(aResult[index]);
    aRequiredParameters[index] = index;
  }
  for (var index in aResult) {
    if (aRequiredParameters[index] != null) continue;
    Command.aOptionalParameters.push(unescape(aResult[index]));
  }
  return Command;
};

CGRefreshTask = function (Type, Target) {
  this.Type = Type;
  this.Target = Target;
  this.Sender = null;
};

CGRefreshTask.prototype.setSender = function (Sender) {
  this.Sender = Sender;
};

CGRefreshTaskList = function () {
  this.aItems = new Array;
};

CGRefreshTaskList.prototype.getAll = function () {
  return this.aItems;
};

CGRefreshTaskList.prototype.addRefreshTask = function (RefreshTask) {
  this.aItems.push(RefreshTask);
};

CGRefreshTaskList.prototype.deleteRefreshTask = function (iPos) {
  delete this.aItems[iPos];
};

CGRefreshTaskList.prototype.clearAll = function () {
  this.aItems = new Array();
};

function CGProcess(iNumStates) {
  this.iState = 0;
  this.iNumStates = iNumStates;
  this.bTerminated = false;
  this.bSuccess = false;
  this.sFailure = "";
  this.RefreshTaskList = null;
};

CGProcess.prototype.checkOption = function (ButtonResult) {
  if (ButtonResult == BUTTON_RESULT_YES) {
    this.execute();
  }
  else this.terminate();
};

CGProcess.prototype.isFirstStep = function () {
  return this.iState == 0;
};

CGProcess.prototype.isLastStep = function () {
  return this.iState == this.iNumStates;
};

CGProcess.prototype.gotoStep = function (iState) {
  if (iState > this.iNumStates) return;
  this.iState = iState - 1;
  this.execute();
};

CGProcess.prototype.resetState = function () {
  this.iState = 0;
};

CGProcess.prototype.restart = function () {
  this.iState = 0;
  this.execute();
};

CGProcess.prototype.terminate = function () {
  this.iState = this.iNumStates;
  this.execute();
};

CGProcess.prototype.terminateOnSuccess = function () {
  this.bSuccess = true;
  this.terminate();
};

CGProcess.prototype.terminateOnFailure = function (sFailure) {
  if (sFailure != null) this.sFailure = sFailure;
  this.bSuccess = false;
  this.terminate();
};

CGProcess.prototype.getFailure = function () {
  return this.sFailure;
};

CGProcess.prototype.success = function () {
  return this.bSuccess;
};

CGProcess.prototype.addRefreshTask = function (Type, Target, Sender) {
  if (this.RefreshTaskList == null) this.RefreshTaskList = new CGRefreshTaskList();
  RefreshTask = new CGRefreshTask(Type, Target);
  if (Sender != null) RefreshTask.setSender(Sender);
  this.RefreshTaskList.addRefreshTask(RefreshTask);
};

CGProcess.prototype.doRefreshTaskList = function () {
  if (this.RefreshProcessClass == null) return true;
  if (this.RefreshTaskList == null) return true;
  this.RefreshProcess = new this.RefreshProcessClass;
  this.RefreshProcess.RefreshTaskList = this.RefreshTaskList;
  this.RefreshProcess.execute();
};

CGProcess.prototype.execute = function () {
  if (this.bTerminated) return;

  if (this.isLastStep()) {
    this.bTerminated = true;
    this.doRefreshTaskList();
    if (this.ReturnProcess) this.ReturnProcess.execute();
    return;
  }

  var State = this.getNextState();
  try {
    this.method = State.NextMethod;
    this.method();
  }
  catch (e) {
    Kernel.registerException(e);
  }

};

CGProcess.prototype.getNextState = function () {
  if (this.iState > this.iNumStates) return false;

  var iState = this.sState;
  this.iState++;


  var State = {
    iProgress: Math.round((iState / this.iNumStates) * 100) / 100,
    NextMethod: this["step_" + this.iState]
  };

  return State;
};

CGProcess.prototype.onSuccess = function () {
  this.execute();
};

CGProcess.prototype.generateMessage = function (sMessage, Variables) {
  var template = new Template(sMessage);
  return template.evaluate(Variables);
};

CGProcess.prototype.getErrorMessage = function (sMessage, sFailure) {
  sFailure = (sFailure != null) ? sFailure.substr(sFailure.indexOf(":") + 1) : "";
  return sMessage.replace("#response#", sFailure);
};

CGProcess.prototype.onFailure = function (sFailure) {
  alert(sFailure);
  this.terminate();
};

CGProcess.prototype.setActiveFurniture = function (type, id) {
  State.ActiveFurniture = { type: type, id: id };
  this.refreshFurnitureSet(false);
};

CGProcess.prototype.refreshFurnitureSet = function (banner) {
  ViewFurnitureSet.setTarget({ account: Account, banner: banner});
  ViewFurnitureSet.refresh();
};

CGProcess.prototype.loadMainNode = function (id) {
  if (State.MainNodes[id] != null) {
    this.data = State.MainNodes[id];
    this.execute();
  }
  else Kernel.loadMainNode(this, id);
};

CGProcess.prototype.setMainNode = function (id, mainNode) {
  State.MainNodes[id] = mainNode;
};

function CGAction(iNumStates) {
  this.base = CGProcess;
  this.iState = 0;
  this.iNumStates = iNumStates;
  this.sLoadingMessage = "";
  this.bExecuted = false;
  this.AvailableProcessClass = null;
};

CGAction.prototype = new CGProcess;
CGAction.constructor = CGAction;

CGAction.prototype.checkOption = function (ButtonResult) {
  if (ButtonResult == BUTTON_RESULT_YES) {
    this.execute();
  }
  else this.terminate();
};

CGAction.prototype.resetState = function () {
  this.iState = 0;
  Desktop.hideReports();
};

CGAction.prototype.terminate = function () {
  this.iState = this.iNumStates;
  this.execute();
};

CGAction.prototype.available = function () {
  if (this.AvailableProcessClass == null) return true;

  if (this.AvailableProcess) {
    if (this.AvailableProcess.success()) {
      return true;
    }
    else {
      this.terminate();
      return false;
    }
  }

  this.AvailableProcess = new this.AvailableProcessClass;
  this.AvailableProcess.ReturnProcess = this;
  this.AvailableProcess.execute();

  return false;
};

CGAction.prototype.execute = function () {
  if (this.bTerminated) return;

  if (this.isFirstStep()) {
    if (!this.available()) return;
  }

  if (this.isLastStep()) {
    this.bTerminated = true;
    this.doRefreshTaskList();
    if (this.ReturnProcess) this.ReturnProcess.execute();
    if (this.onTerminate) this.onTerminate();
    return;
  }

  var State = this.getNextState();
  try {
    this.method = State.NextMethod;
    this.method();
  }
  catch (e) {
    Kernel.registerException(e);
  }

};

CGAction.prototype.onFailure = function (sResponse) {
  sResponse = sResponse.substring(sResponse.indexOf(":") + 1);

  if (this.ReturnProcess) {
    this.ReturnProcess.onFailure(sResponse);
    this.terminate();
  }
  else Desktop.reportError(sResponse);

  this.terminate();
};

CGAction.prototype.getAttributeSerialization = function (attribute, path) {
  var pathArray = path.split(Context.Config.AttributePathSeparator);
  var result = null;

  if (pathArray.length <= 1) result = attribute;
  else {
    result = new CGAttribute();
    result.setCode(pathArray[0]);
    var parentAttribute = result;
    for (var i = 1; i < pathArray.length - 1; i++) {
      var childAttribute = new CGAttribute();
      childAttribute.setCode(pathArray[i]);
      parentAttribute.getAttributeList().addAttribute(childAttribute);
      parentAttribute = childAttribute;
    }
    parentAttribute.getAttributeList().addAttribute(attribute);
  }

  return result.serialize();
};

CGAction.prototype.locateAttribute = function (attribute, path) {
  var pathArray = path.split(Context.Config.AttributePathSeparator);

  if (pathArray.length == 1) return attribute;

  var currentAttribute = attribute;
  var childAttribute = null;
  for (var i = 1; i < pathArray.length; i++) {
    var attributeList = currentAttribute.getAttributeList();

    childAttribute = attributeList.getAttribute(pathArray[i]);
    if (childAttribute == null) {
      childAttribute = new CGAttribute();
      childAttribute.setCode(pathArray[i]);
      attributeList.addAttribute(childAttribute);
    }

    currentAttribute = childAttribute;
  }

  return childAttribute;
};

var PushClient = {
  DELIMITER: "/--push--/",
  END_DELIMITER: "/--end--/",
  ON_FAILED_RETRY_TIME: 5000,

  index: 0,

  init: function (instanceId) {
    if (Context.Config.PushEnabled == "false") return;

    this.instanceId = instanceId;
    if (Ext.isIE) {
      $('pushClientHolder').innerHTML = "<iframe id='pushClient'></iframe>";
      $('pushClient').onload = this.onFrameLoad.bind(this);
      window.setTimeout(this.checkChannel.bind(this), 500);
    }
    else
      window.setTimeout(this.poll.bind(this), 500);
  },

  poll: function () {
    this.ajaxRequest = new Ajax.Request(Context.Config.Push, {
      method: 'POST',
      parameters: "i=" + this.instanceId + "&t=" + Math.random(),
      asynchronous: true,
      onComplete: this.onComplete.bind(this),
      onInteractive: this.onPartial.bind(this)
    });
    this.channelOpen = true;
  },

  doProcess: function (xmlHttpRequest) {
    var i;
    while ((i = xmlHttpRequest.responseText.indexOf(PushClient.DELIMITER, PushClient.index)) >= PushClient.index) {

      var j = xmlHttpRequest.responseText.indexOf(PushClient.END_DELIMITER, i);
      if (j < i) return;

      var currentMsgStart = i + PushClient.DELIMITER.length;
      var newMsg = xmlHttpRequest.responseText.substr(currentMsgStart, j - currentMsgStart);

      PushClient.index = j;

      try {
        this.onPushReceived(Ext.util.JSON.decode(newMsg));
      } catch (err) {
        alert(err);
      }
    }
  },

  onPartial: function (xmlHttpRequest, responseHeader) {
    this.doProcess(xmlHttpRequest);
  },

  onComplete: function (xmlHttpRequest, responseHeader) {
    if (xmlHttpRequest.status >= 200 && xmlHttpRequest.status < 400) {
      if (xmlHttpRequest.responseText.indexOf("ERR_USER_NOT_LOGGED") > -1) {
        window.location = location;
        return;
      }
      this.doProcess(xmlHttpRequest);
      PushClient.index = 0;
      window.setTimeout(this.poll.bind(this), 0);
    } else {
      PushClient.index = 0;
      window.setTimeout(this.poll.bind(this), this.ON_FAILED_RETRY_TIME);
    }
    this.channelOpen = false;
  },

  onPushReceived: function (pushMsg) {
    CommandDispatcher.execute(pushMsg.op, null, pushMsg.data);
  },

  onFrameLoad: function (evt) {
    this.channelRefreshStarted();
  },

  checkChannel: function () {
    if (!this.channelOpen) {
      window.setTimeout(this.checkChannel.bind(this), this.ON_FAILED_RETRY_TIME);
      $('pushClient').src = Context.Config.Push + "?c=1&i=" + this.instanceId + "&t=" + Math.random();
    }
  },

  channelRefreshStarted: function () {
    this.channelOpen = false;
    this.checkChannel();
  },

  isChannelOpen: function () {
    return this.channelOpen;
  }
};

function goPush(newNotification) {
  PushClient.onPushReceived(newNotification);
};

function openChannel() {
  PushClient.channelOpen = true;
};

PushListener = new Object;

PushListener.nodeFieldFocused = function (Sender) {
  var Process = new CGProcessFocusNodeField();
  Process.Node = Sender.Node;
  Process.DOMField = Sender.DOMField;
  Process.execute();
};

PushListener.nodeFieldCompositeChanged = function (Sender) {
  PushListener.resetObserverFields(Sender.DOMNode, Sender.DOMField);
};

PushListener.nodeFieldChanged = function (Sender) {

  var Process = new CGProcessSaveNodeAttribute();
  Process.Node = Sender.Node;
  Process.DOMNode = Sender.DOMNode;
  Process.Data = Sender.DOMField.getContent();
  Process.execute();

  PushListener.resetObserverFields(Sender.DOMNode, Sender.DOMField);
};

PushListener.resetObserverFields = function (DOMElement, DOMSender) {
  var DOMChildren = DOMElement.getFields();
  var fieldCode = DOMSender.getCode();
  for (var i = 0; i < DOMChildren.length; i++) {
    var DOMChild = DOMChildren[i];
    var DOMBrother = DOMChild.getBrother(fieldCode);
    var childBrotherId = DOMBrother ? DOMBrother.id : null;
    var sameParent = childBrotherId !== DOMChild.id && childBrotherId === DOMSender.id && DOMElement.isComposite();
    if (sameParent && DOMChild.isObserver(fieldCode))
      DOMChild.reset();
    if (DOMChild.isComposite())
      PushListener.resetObserverFields(DOMChild, DOMSender);
  }
};

PushListener.nodeFocused = function (Sender) {
  
};

PushListener.nodeViewFocused = function (Sender) {
  var Process = new CGProcessFocusNodeView();
  Process.Node = Sender.Node;
  Process.DOMNode = Sender.DOMNode;
  Process.RefreshNodeView = false;
  Process.execute();
};

PushListener.nodeBlur = function (Sender) {
  var Process = new CGProcessBlurNodeView();
  Process.Node = Sender.Node;
  Process.DOMNode = Sender.DOMNode;
  Process.execute();
};

//----------------------------------------------------------------------
// Action init
//----------------------------------------------------------------------
function CGActionInit() {
  this.base = CGAction;
  this.base(4);
};

CGActionInit.prototype = new CGAction;
CGActionInit.constructor = CGActionInit;
CommandFactory.register(CGActionInit, null, false);

//PUBLIC
CGActionInit.prototype.onFailure = function (sResponse) {
  var Action = new CGActionLogout();
  Action.execute();

  Ext.MessageBox.hide();
  Desktop.hideLoading();
  alert(Lang.Exceptions.InitApplication);

  this.terminate();
};

CGActionInit.prototype.atBeforeUnload = function () {
  if ((State.LastView == null) || (!Desktop.Main.Center.Body.isContainerView(State.LastView))) {
    return "";
  }

  var DOMNode = State.LastView.getDOM();
  if ((DOMNode.isDirty) && (DOMNode.isDirty())) {
    return Lang.ViewNode.DialogUnload.Description;
  }
};

CGActionInit.prototype.atUnload = function () {
  Kernel.exiting(Account.getInstanceId());
};

CGActionInit.prototype.step_1 = function () {
  var Process = new CGProcessLoadAccount();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionInit.prototype.step_2 = function () {
  Kernel.loadPartners(this);
};

CGActionInit.prototype.step_3 = function () {
  var DefinitionView;

  Desktop.hideLoading();
  Desktop.Main.Right.loadStateFromCookies();
  Desktop.refresh();

  State.PartnerList = Ext.util.JSON.decode(this.data);

  CommandListener.onBeforeUnload = CGActionInit.prototype.atBeforeUnload.bind(this);
  CommandListener.onUnload = CGActionInit.prototype.atUnload.bind(this);

  var initializerTask = Account.getUser().getInitializerTask();
  if (initializerTask != null) {
    CommandDispatcher.dispatch("showtask(" + initializerTask.id + ")");
    this.setActiveFurniture(Furniture.TASKBOARD);
  }
  else {
    if (Account.Links.length == 0) return;

    var link = Account.Links[0];
    var user = Account.getUser();
    var rootNode = user.getRootNode();

    if (link.type == Furniture.DESKTOP) {
      DefinitionView = Extension.getDefinitionDefaultView(rootNode.code, BUSINESS_MODEL_BROWSE);
      State.View = DefinitionView.Name;
      this.setActiveFurniture(Furniture.DESKTOP, rootNode.id);
      CommandDispatcher.dispatch("shownode(" + rootNode.id + "," + State.View + ")");
    }
    else {
      this.setActiveFurniture(link.type, link.id);
      CommandDispatcher.dispatch(ViewFurnitureSet.getCommand(link));
    }
  }

  this.execute();
};

CGActionInit.prototype.step_4 = function () {
  PushClient.init(Account.getInstanceId());
  this.terminate();
};

//----------------------------------------------------------------------
// Add observer
//----------------------------------------------------------------------
function CGActionAddObserver() {
  this.base = CGAction;
  this.base(1);
};

CGActionAddObserver.prototype = new CGAction;
CGActionAddObserver.constructor = CGActionAddObserver;
CommandFactory.register(CGActionAddObserver, {id: 0, fullname: 1, field: 2}, false);

CGActionAddObserver.prototype.step_1 = function () {
  var helper = ViewerSidebar.getHelper(Helper.OBSERVERS);
  var Observers = helper.getTarget(this.Observers);
  var DOMNode;
  var Observer = new Object();
  var bFound = false;

  if (State.CurrentView == null) {
    this.terminate();
    return;
  }

  DOMNode = State.CurrentView.getDOM();
  Observer.id = this.id;
  Observer.fullname = this.fullname;
  Observer.field = this.field;

  for (var i = 0; i < Observers.length; i++) {
    if (Observers[i].id == this.id) {
      bFound = true;
      break;
    }
  }

  if (!bFound) {
    Observers.push(Observer);
    DOMNode.addObserver(Observer, Observers.length - 1);

    var Process = new CGProcessRefreshHelperObservers();
    Process.Observers = Observers;
    Process.execute();
  }

  this.terminate();
};

//----------------------------------------------------------------------
// Refresh observer
//----------------------------------------------------------------------
function CGActionRefreshObserver() {
  this.base = CGAction;
  this.base(1);
};

CGActionRefreshObserver.prototype = new CGAction;
CGActionRefreshObserver.constructor = CGActionRefreshObserver;
CommandFactory.register(CGActionRefreshObserver, {id: 0, fullname: 1, field: 2}, false);

CGActionRefreshObserver.prototype.step_1 = function () {
  var helper = ViewerSidebar.getHelper(Helper.OBSERVERS);
  var Observers = helper.getTarget(this.Observers);
  var DOMNode;
  var Observer = new Object();
  var bFound = false;

  if (State.CurrentView == null) {
    this.terminate();
    return;
  }

  DOMNode = State.CurrentView.getDOM();
  Observer.id = this.id;
  Observer.fullname = this.fullname;
  Observer.field = this.field;

  for (var i = 0; i < Observers.length; i++) {
    if (Observers[i].id == this.id) {
      bFound = true;
      break;
    }
  }

  if (bFound) {
    DOMNode.removeObserver(Observers[i].field);
    DOMNode.addObserver(Observer, i);
    Observers[i] = Observer;
  }

  var Process = new CGProcessRefreshHelperObservers();
  Process.Observers = Observers;
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// Remove observer
//----------------------------------------------------------------------
function CGActionRemoveObserver() {
  this.base = CGAction;
  this.base(1);
};

CGActionRemoveObserver.prototype = new CGAction;
CGActionRemoveObserver.constructor = CGActionRemoveObserver;
CommandFactory.register(CGActionRemoveObserver, {id: 0, fullname: 1, field: 2}, false);

CGActionRemoveObserver.prototype.step_1 = function () {
  var helper = ViewerSidebar.getHelper(Helper.OBSERVERS);
  var Observers = helper.getTarget(this.Observers);
  var HelperObservers = new Array();
  var DOMNode;

  if (State.CurrentView == null) {
    this.terminate();
    return;
  }

  DOMNode = State.CurrentView.getDOM();
  DOMNode.removeObserver(this.field);

  for (var i = 0; i < Observers.length; i++) {
    if (Observers[i].id == this.id) continue;
    HelperObservers.push(Observers[i]);
  }

  var Process = new CGProcessRefreshHelperObservers();
  Process.Observers = HelperObservers;
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// Refresh view
//----------------------------------------------------------------------
function CGActionUpdateView() {
  this.base = CGAction;
  this.base(1);
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionUpdateView.prototype = new CGAction;
CGActionUpdateView.constructor = CGActionUpdateView;
CommandFactory.register(CGActionUpdateView, {type: 0, targetId: 1, data: 2, message: 3}, false);

CGActionUpdateView.prototype.step_1 = function () {
  var aViews = new Array();

  if (this.type == "node") aViews = Desktop.Main.Center.Body.getViews(VIEW_NODE, VIEW_NODE_TYPE_NODE, this.targetId);
  else aViews = Desktop.Main.Center.Body.getViews(VIEW_TASK, VIEW_TASK_TYPE_TASK, this.targetId);

  for (var i = 0; i < aViews.length; i++) {
    var DOMView = aViews[i].getDOM();
    var ControlInfo = DOMView.getControlInfo();
    var bUpdated = DOMView.update(this.data) || (this.data == null && Desktop.Main.Center.Body.isContainerView(aViews[i]));

    if (!bUpdated) {
      if (this.type == "node") {
        var Process = new CGProcessShowNode();
        Process.Id = ControlInfo.IdNode;
        Process.Mode = ControlInfo.Templates.Refresh;
        Process.ViewNode = aViews[i];
        Process.ActivateNode = true;
        Process.execute();
      }
    }

    if (this.type == "node") {
      var Node = new CGNode();
      Node.setId(ControlInfo.IdNode);
      Node.setCode(ControlInfo.Code);
      this.addRefreshTask(RefreshTaskType.References, Node);
    }
  }

  if (this.message != null)
    Desktop.reportWarning(this.message);

  this.terminate();
};

//----------------------------------------------------------------------
// Blur node
//----------------------------------------------------------------------
function CGActionBlurNode() {
  this.base = CGAction;
  this.base(1);
};

CGActionBlurNode.prototype = new CGAction;
CGActionBlurNode.constructor = CGActionBlurNode;
CommandFactory.register(CGActionBlurNode, {id: 0, fullname: 1}, false);

CGActionBlurNode.prototype.step_1 = function () {
  this.terminate();
};

//----------------------------------------------------------------------
// Blur node field
//----------------------------------------------------------------------
function CGActionBlurNodeField() {
  this.base = CGAction;
  this.base(1);
};

CGActionBlurNodeField.prototype = new CGAction;
CGActionBlurNodeField.constructor = CGActionBlurNodeField;
CommandFactory.register(CGActionBlurNodeField, {id: 0, fullname: 1, field: 2}, false);

CGActionBlurNodeField.prototype.step_1 = function () {
  var DOMNode;

  if (State.CurrentView == null) {
    this.terminate();
    return;
  }

  DOMNode = State.CurrentView.getDOM();
  DOMNode.blurField(this.field);

  this.terminate();
};

//----------------------------------------------------------------------
// Update node state
//----------------------------------------------------------------------
function CGActionUpdateNodeState() {
  this.base = CGAction;
  this.base(1);
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionUpdateNodeState.prototype = new CGAction;
CGActionUpdateNodeState.constructor = CGActionUpdateNodeState;
CommandFactory.register(CGActionUpdateNodeState, null, false);

CGActionUpdateNodeState.prototype.step_1 = function () {
  var process = new CGProcessRefreshNodeState();
  process.nodeId = this.node;
  process.state = this.state;
  process.execute();
};

//----------------------------------------------------------------------
// Update task state
//----------------------------------------------------------------------
function CGActionUpdateTaskState() {
  this.base = CGAction;
  this.base(1);
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionUpdateTaskState.prototype = new CGAction;
CGActionUpdateTaskState.constructor = CGActionUpdateTaskState;
CommandFactory.register(CGActionUpdateTaskState, null, false);

CGActionUpdateTaskState.prototype.step_1 = function () {
  var process = new CGProcessRefreshTaskState();
  process.taskId = this.task;
  process.execute();

  new CGProcessRefreshAccountPendingTasks().execute();
};

//----------------------------------------------------------------------
// Update task owner
//----------------------------------------------------------------------
function CGActionUpdateTaskOwner() {
	this.base = CGAction;
	this.base(1);
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionUpdateTaskOwner.prototype = new CGAction;
CGActionUpdateTaskOwner.constructor = CGActionUpdateTaskOwner;
CommandFactory.register(CGActionUpdateTaskOwner, null, false);

CGActionUpdateTaskOwner.prototype.step_1 = function () {
	new CGProcessRefreshAccountPendingTasks().execute();
};

//----------------------------------------------------------------------
// Refresh task order chat
//----------------------------------------------------------------------
function CGActionRefreshTaskOrderChat() {
  this.base = CGAction;
  this.base(2);
};

CGActionRefreshTaskOrderChat.prototype = new CGAction;
CGActionRefreshTaskOrderChat.constructor = CGActionRefreshTaskOrderChat;
CommandFactory.register(CGActionRefreshTaskOrderChat, null, false);

CGActionRefreshTaskOrderChat.prototype.step_1 = function () {
  var CurrentViewer = State.TaskOrderListViewer;

  if (CurrentViewer == null) {
    this.terminate();
    return;
  }

  this.activeItem = CurrentViewer.getActiveItem();
  CurrentViewer.onRefresh = window.setTimeout(CGActionRefreshTaskOrderChat.prototype.execute.bind(this), 400);
  CurrentViewer.refresh();
};

CGActionRefreshTaskOrderChat.prototype.step_2 = function () {

  if (this.activeItem == null) {
    this.terminate();
    return;
  }

  var CurrentViewer = State.TaskOrderListViewer;
  CurrentViewer.activateItem(this.activeItem.id);
  this.terminate();
};

//----------------------------------------------------------------------
// Refresh Tasks
//----------------------------------------------------------------------
function CGProcessRefreshTasks() {
  this.base = CGProcess;
  this.base(1);
};

CGProcessRefreshTasks.prototype = new CGProcess;
CGProcessRefreshTasks.constructor = CGProcessRefreshTasks;

CGProcessRefreshTasks.prototype.step_1 = function () {
  var aTasks = TasksCache.getAll();

  for (var iPos = 0; iPos < aTasks.length; iPos++) {
    var Process = new CGProcessRefreshTask();
    Process.Id = aTasks[iPos].getId();
    Process.execute();
  }

  this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Refresh account pending tasks
//----------------------------------------------------------------------
function CGProcessRefreshAccountPendingTasks() {
    this.base = CGProcess;
    this.base(2);
};

CGProcessRefreshAccountPendingTasks.prototype = new CGProcess;
CGProcessRefreshAccountPendingTasks.constructor = CGProcessRefreshAccountPendingTasks;

CGProcessRefreshAccountPendingTasks.prototype.step_1 = function () {
    Kernel.loadAccountPendingTasks(this);
}

CGProcessRefreshAccountPendingTasks.prototype.step_2 = function () {
    var jsonData = Ext.util.JSON.decode(this.data);
    Account.PendingTasks = jsonData;
    this.refreshFurnitureSet(false);
}

//----------------------------------------------------------------------
// RefreshDOM
//----------------------------------------------------------------------
function CGProcessRefreshDOM() {
};

CGProcessRefreshDOM.prototype = new CGProcess;
CGProcessRefreshDOM.constructor = CGProcessRefreshDOM;
CommandFactory.register(CGProcessRefreshDOM, { Event: 0, Target: 1 }, false);

CGProcessRefreshDOM.prototype.isCollectionMagnetized = function (DOMCollection, aNodes) {
  var bIsMagnetized = false;
  var iPos = 0;

  while ((iPos < aNodes.length) && (!bIsMagnetized)) {
    if (DOMCollection.isMagnetized(aNodes[iPos].Type)) bIsMagnetized = true;
    iPos++;
  }

  return bIsMagnetized;
};

CGProcessRefreshDOM.prototype.getDOMNodeCollections = function (aNodes) {
  var aResult = new Array();
  var aViews = Desktop.Main.Center.Body.getViews(VIEW_NODE, VIEW_NODE_TYPE_COLLECTION);
  var CurrentNode = NodesCache.getCurrent();
  var DOMNodeCollection;
  var ControlInfo;

  if (!aNodes) return aResult;

  for (var iPos = 0; iPos < aViews.length; iPos++) {
    DOMNodeCollection = aViews[iPos].getDOM();
    if ((!DOMNodeCollection.isMagnetized) || (!DOMNodeCollection.isEditionMode) || (!DOMNodeCollection.isRefreshable) || (!DOMNodeCollection.getControlInfo)) continue;

    if (!DOMNodeCollection.isEditionMode()) continue;
    if (!DOMNodeCollection.isRefreshable()) continue;
    if (!this.isCollectionMagnetized(DOMNodeCollection, aNodes)) continue;

    ControlInfo = DOMNodeCollection.getControlInfo();
    if (!CurrentNode.getId() == ControlInfo.IdNode) continue;

    aResult.push(DOMNodeCollection);
  }

  return aResult;
};

CGProcessRefreshDOM.prototype.step_1 = function () {
  var aRefreshTasks = this.RefreshTaskList.getAll();
  var aViews, aDummyViews, IdNode;

  for (var iPos = 0; iPos < aRefreshTasks.length; iPos++) {
    var RefreshTask = aRefreshTasks[iPos];

    switch (RefreshTask.Type) {
      case RefreshTaskType.TaskList:
        break;

      case RefreshTaskType.Forms:
        IdNode = RefreshTask.Target.getId();

        aViews = new Array();
        aDummyViews = new Array();

        aDummyViews = Desktop.Main.Center.Body.getViews(VIEW_NODE, VIEW_NODE_TYPE_NODE, IdNode);
        for (var jPos = 0; jPos < aDummyViews.length; jPos++) {
          if ((RefreshTask.Sender != null) && (RefreshTask.Sender.getId() == aDummyViews[jPos].getId())) continue;
          Desktop.Main.Center.Body.deleteViewsOfContainer(VIEW_NODE, aDummyViews[jPos].getId());
          aViews.push(aDummyViews[jPos]);
        }

        aDummyViews = Desktop.Main.Center.Body.getViews(VIEW_NODE, VIEW_NODE_TYPE_FORM, IdNode);
        for (var jPos = 0; jPos < aDummyViews.length; jPos++) {
          if ((RefreshTask.Sender != null) && (RefreshTask.Sender.getId() == aDummyViews[jPos].getId())) continue;
          if (aDummyViews[jPos].getContainer().getTarget().getId() == IdNode) continue;
          aViews.push(aDummyViews[jPos]);
        }

        var ProcessNode = new CGProcessRefreshDOMNode();
        ProcessNode.Id = IdNode;
        ProcessNode.Views = aViews;
        ProcessNode.execute();

        var ProcessReferences = new CGProcessRefreshDOMNodeReferences();
        ProcessReferences.IdNode = IdNode;
        ProcessReferences.execute();

        break;

      case RefreshTaskType.Descriptors:
        IdNode = RefreshTask.Target.getId();

        aViews = Desktop.Main.Center.Body.getViews(VIEW_NODE, VIEW_NODE_TYPE_NODE, IdNode);
        for (var jPos = 0; jPos < aViews.length; jPos++) {
          Desktop.Main.Center.Body.deleteViewsOfContainer(VIEW_NODE, aViews[jPos].getId());
        }

        var ProcessNode = new CGProcessRefreshDOMNode();
        ProcessNode.Id = IdNode;
        ProcessNode.Views = aViews;
        ProcessNode.execute();

        var ProcessReferences = new CGProcessRefreshDOMNodeReferences();
        ProcessReferences.IdNode = IdNode;
        ProcessReferences.execute();

        break;

      case RefreshTaskType.References:
        IdNode = RefreshTask.Target.getId();

        var ProcessDescriptor = new CGProcessRefreshDOMNodeDescriptor();
        ProcessDescriptor.execute();

        var ProcessReferences = new CGProcessRefreshDOMNodeReferences();
        ProcessReferences.IdNode = IdNode;
        ProcessReferences.execute();

        break;

      case RefreshTaskType.RecoveredFromTrash:
      case RefreshTaskType.Added:
      case RefreshTaskType.Copied:
        var ProcessCollections = new CGProcessRefreshDOMNodesCollections();
        ProcessCollections.Nodes = RefreshTask.Target;
        ProcessCollections.Collections = this.getDOMNodeCollections(RefreshTask.Target);
        ProcessCollections.execute();

        if (Desktop.Main.Center.Body.isTabActive(VIEW_NODE, ID_NODE_SEARCH)) {
          var ActionSearchNodes = new CGActionSearchNodes();
          ActionSearchNodes.execute();
        }

        break;

      case RefreshTaskType.Deleted:
      case RefreshTaskType.Discarted:
        var ProcessNodes = new CGProcessRefreshDOMNodesDeleted();
        ProcessNodes.Nodes = RefreshTask.Target;
        ProcessNodes.Views = Desktop.Main.Center.Body.getViews(VIEW_NODE, VIEW_NODE_TYPE_COLLECTION);
        ProcessNodes.execute();

        if (Desktop.Main.Center.Body.isTabActive(VIEW_NODE, ID_NODE_SEARCH)) {
          var ActionSearchNodes = new CGActionSearchNodes();
          ActionSearchNodes.execute();
        }

        break;

    }
  }

  this.terminate();
};

//----------------------------------------------------------------------
// RefreshDOM Node
//----------------------------------------------------------------------
function CGProcessRefreshDOMNode() {
  this.ActivateNode = false;
};

CGProcessRefreshDOMNode.prototype = new CGProcess;
CGProcessRefreshDOMNode.constructor = CGProcessRefreshDOMNode;
CommandFactory.register(CGProcessRefreshDOMNode, { Id: 0, Views: 1 }, false);

CGProcessRefreshDOMNode.prototype.execute = function () {
  var aViews, View;
  var DOMNode;

  var Process = new CGProcessRefreshDOMNodeDescriptor();
  Process.execute();

  aViews = this.Views;

  for (var iPos = 0; iPos < aViews.length; iPos++) {
    View = aViews[iPos];
    DOMNode = View.getDOM();

    if (!DOMNode) continue;
    if (!DOMNode.getControlInfo) continue;

    var Process = new CGProcessShowNode();
    Process.Id = this.Id;
    Process.Mode = DOMNode.getControlInfo().Templates.Refresh;
    Process.ViewNode = View;
    Process.ActivateNode = this.ActivateNode;
    Process.execute();
  }

};

//----------------------------------------------------------------------
//RefreshDOM Node
//----------------------------------------------------------------------
function CGProcessRefreshDOMNodeDescriptor() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessRefreshDOMNodeDescriptor.prototype = new CGProcess;
CGProcessRefreshDOMNodeDescriptor.constructor = CGProcessRefreshDOMNode;
CommandFactory.register(CGProcessRefreshDOMNodeDescriptor, { Id: 0 }, false);

CGProcessRefreshDOMNodeDescriptor.prototype.step_1 = function () {
  var Node = NodesCache.getCurrent();

  if (Node == null) {
    this.terminate();
    return;
  }

  Kernel.loadNodeDescriptor(this, Node.getId());
};

CGProcessRefreshDOMNodeDescriptor.prototype.step_2 = function () {
  var Node = NodesCache.getCurrent();

  if (Node == null) {
    this.terminate();
    return;
  }

  var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());
  if (ViewNode == null) {
    this.terminate();
    return;
  }

  var AttributeList = new CGAttributeList();
  var Attribute, Indicator;
  AttributeList.unserialize(this.data);

  Attribute = AttributeList.getAttribute(DESCRIPTOR_LABEL);
  if (Attribute == null) {
    this.terminateOnFailure();
    return;
  }

  Indicator = Attribute.getIndicator(CGIndicator.VALUE);
  if (Indicator == null) {
    this.terminateOnFailure();
    return;
  }

  ViewNode.getDOM().setTitle(Indicator.getValue());

  this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// RefreshDOM Node references
//----------------------------------------------------------------------
function CGProcessRefreshDOMNodeReferences() {
  this.base = CGProcess;
  this.base(1);
  this.IndexReference = 0;
  this.aModesContent = new Array();
};

CGProcessRefreshDOMNodeReferences.prototype = new CGProcess;
CGProcessRefreshDOMNodeReferences.constructor = CGProcessRefreshDOMNodeReferences;
CommandFactory.register(CGProcessRefreshDOMNodeReferences, { IdNode: 0, References: 1 }, false);

//PUBLIC
CGProcessRefreshDOMNodeReferences.prototype.step_1 = function () {
  if (State.NodeListViewer) State.NodeListViewer.refreshBackground();
  if (State.SetListViewer) State.SetListViewer.refreshBackground();
  this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// RefreshDOM Node collections
//----------------------------------------------------------------------
function CGProcessRefreshDOMNodesCollections() {
};

CGProcessRefreshDOMNodesCollections.prototype = new CGProcess;
CGProcessRefreshDOMNodesCollections.constructor = CGProcessRefreshDOMNodesCollections;
CommandFactory.register(CGProcessRefreshDOMNodesCollections, { Nodes: 0, Collections: 1 }, false);

//PUBLIC
CGProcessRefreshDOMNodesCollections.prototype.execute = function () {
  var DOMNodeCollection;
  var ControlInfo;
  var ViewCollection;

  if (this.Collections == null) return;

  if (State.NodeListViewer) State.NodeListViewer.refreshBackground();
  if (State.TrashListViewer) State.TrashListViewer.refreshBackground();

  for (var iPos = 0; iPos < this.Collections.length; iPos++) {
    DOMNodeCollection = this.Collections[iPos];

    if (!DOMNodeCollection.getControlInfo) continue;
    if (!DOMNodeCollection.IdView) continue;

    ControlInfo = DOMNodeCollection.getControlInfo();
    if ((ViewCollection = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMNodeCollection.IdView)) == null) continue;

    var Process = new CGProcessShowNode();
    Process.Id = ControlInfo.IdNode;
    Process.Mode = ControlInfo.Templates.Refresh;
    Process.ViewNode = ViewCollection;
    Process.ActivateNode = false;
    Process.execute();
  }
};

//----------------------------------------------------------------------
// RefreshDOM Node deleted
//----------------------------------------------------------------------
function CGProcessRefreshDOMNodesDeleted() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessRefreshDOMNodesDeleted.prototype = new CGProcess;
CGProcessRefreshDOMNodesDeleted.constructor = CGProcessRefreshDOMNodesDeleted;
CommandFactory.register(CGProcessRefreshDOMNodesDeleted, { IdNode: 0, Views: 1 }, false);

CGProcessRefreshDOMNodesDeleted.prototype.existCollectionReferencesToNodes = function (DOMCollection) {
  for (var iPos = 0; iPos < this.Nodes.length; iPos++) {
    if (DOMCollection.getNodeReferencesCount(this.Nodes[iPos].getId()) > 0) return true;
  }
  return false;
};

CGProcessRefreshDOMNodesDeleted.prototype.step_1 = function () {
  var aDOMCollectionsToRefresh = new Array();

  if (State.NodeListViewer) State.NodeListViewer.refreshBackground();
  else if (State.SetListViewer) State.SetListViewer.refreshBackground();

  for (var iPos = 0; iPos < this.Views.length; iPos++) {

    if (this.Views[iPos].getTarget() != null) {
      if (this.Views[iPos].getTarget().getId() == ID_NODE_SEARCH) continue;
    }

    var DOMNodeCollection = this.Views[iPos].getDOM();
    if (!DOMNodeCollection) continue;
    if (!DOMNodeCollection.getNodeReferencesCount) continue;
    if (!DOMNodeCollection.isEditionMode) continue;
    if (!DOMNodeCollection.isRefreshable) continue;

    if ((DOMNodeCollection.isEditionMode()) && (DOMNodeCollection.isRefreshable()) && (this.existCollectionReferencesToNodes(DOMNodeCollection))) {
      aDOMCollectionsToRefresh.push(DOMNodeCollection);
    }
  }

  var Action = new CGProcessRefreshDOMNodesCollections();
  Action.Nodes = this.Nodes;
  Action.Collections = aDOMCollectionsToRefresh;
  Action.ReturnProcess = this;
  Action.execute();
};

CGProcessRefreshDOMNodesDeleted.prototype.step_2 = function () {
  var CurrentNode = NodesCache.getCurrent();
  var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, CurrentNode.getId());

  if (ViewNode == null) {
    this.terminate();
    return;
  }

  for (var iPos = 0; iPos < this.Nodes.length; iPos++) {
    var Node = this.Nodes[iPos];
    var ViewContainer = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());

    if (ViewContainer != null) {
      Desktop.Main.Center.Body.deleteView(VIEW_NODE, ViewContainer.getId());
      Desktop.Main.Center.Body.deleteTab(VIEW_NODE, Node.getId());
    }

    if (NodesCache.exists(Node.getId())) {
      NodesCache.unregister(Node.getId());
    }

    if (CurrentNode.getId() == Node.getId()) {
      var Process = new CGProcessShowLastView();
      Process.execute();
    }
    else {
      DOMNode = ViewNode.getDOM();
      if (DOMNode.getNodesReferencesCount) {
        CurrentNode.NodeList.setCount(DOMNode.getNodesReferencesCount());
      }
    }
  }

  this.terminate();
};

ViewPageNews = new Object;
ViewPageNews.sLayerName = null;

//PUBLIC
ViewPageNews.init = function (sLayerName) {
  ViewPageNews.DOMLayer = $(sLayerName);
};

ViewPageNews.getDOM = function () {
  return ViewPageNews.DOMLayer;
};

ViewPageNews.show = function () {
  ViewPageNews.DOMLayer.show();
};

ViewPageNews.hide = function () {
  ViewPageNews.DOMLayer.hide();
};

ViewPageNews.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewPageNews.refresh = function () {
  var Constructor;

  if (ViewPageNews.sContent == null) return;

  ViewPageNews.DOMLayer.innerHTML = ViewPageNews.sContent;
  ViewPageNews.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewPageNews.DOMLayer);
  CommandListener.capture(ViewPageNews.DOMLayer);

  EventManager.disableNotifications();
  ViewPageNews.DOMLayer.init();
  EventManager.enableNotifications();
};

var NEWS_PAGE_SIZE = 10;

ViewNews = new Object;

ViewNews.sLayerName = null;

//PUBLIC
ViewNews.init = function (sLayerName) {
  this.loaded = 0;
  this.initialized = true;

  this.DOMLayer = $(sLayerName);

  this.extNewsLayer = Ext.get(this.DOMLayer);
  this.extScrollParent = this.extNewsLayer.up(".content");
  this.extScrollParent.addListener("scroll", this.onScroll.bind(this));

  this.extNewNewsTicket = this.extNewsLayer.down(".update");
  this.extNewNewsTicket.enableDisplayMode();
  this.extNewNewsTicket.hide();

  this.refreshHandlers();
  var newPostBtn = this.extNewsLayer.down(".newpost textarea");
  newPostBtn.addKeyListener(27, this.onBlurNewPost, newPostBtn);
  newPostBtn.addListener("focus", this.onFocusNewPost.bind(newPostBtn));
  newPostBtn.addListener("blur", this.onNewPostBlurLuncher.bind(newPostBtn));
};

ViewNews.getDOM = function () {
  return this.DOMLayer;
};

ViewNews.show = function () {
  this.DOMLayer.show();
};

ViewNews.hide = function () {
  this.DOMLayer.hide();
};

ViewNews.setContent = function (sContent) {
};

ViewNews.refreshHandlers = function () {
  var buttons = this.extNewsLayer.query(".newcomment textarea");
  this.loaded = buttons.length;
  for (var i = 0; i < buttons.length; i++) {
    var button = Ext.get(buttons[i]);
    if (button.hasClass("active"))
      continue;
    button.addClass("active");
    button.addListener("focus", this.onFocus.bind(button));
    button.addListener("blur", this.onBlurLuncher.bind(button));
    button.addKeyListener(27, this.ViewNewsCommentAtBlur, button);
  }

  var contexts = this.extNewsLayer.query(".postlist .contextual");
  for (var i = 0; i < contexts.length; i++) {
    var contextBtn = Ext.get(contexts[i]);
    contextBtn.on("click", this.atContextBtnClick.bind(contextBtn));
    contextBtn.on("blur", this.atContextBtnBlur.bind(contextBtn));
  }

  CommandListener.capture(this.DOMLayer);
};

ViewNews.getNewPostAndDisable = function (newPostTextArea) {
  var eTxtArea = $(newPostTextArea);
  var newpost = eTxtArea.up(".newpost");
  if (newpost.hasClassName("disable"))
    return;

  var text = eTxtArea.value;
  eTxtArea.value = eTxtArea.title;
  eTxtArea.blur();
  newpost.addClassName("disable");

  return text;
};

ViewNews.addPost = function (data) {
  var ePostList = this.DOMLayer.down("ul");
  new Insertion.Top(ePostList, data);
};

ViewNews.addNewsPage = function (data, clean) {
  var ePostList = this.DOMLayer.down("ul");
  if (clean)
    ePostList.innerHTML = EMPTY;

  if (data && data != EMPTY) {
    new Insertion.Bottom(ePostList, data);

    this.refreshHandlers();
    this.endLoading();
  }
  this.extNewNewsTicket.hide();
};

ViewNews.atContextBtnClick = function () {
  this.down("ul").toggle();
};

ViewNews.atContextBtnBlur = function () {
  this.down("ul").hide();
};


ViewNews.endLoading = function () {
  this.loading = false;
};

ViewNews.invalidate = function () {
  if (!this.initialized) return;
  this.extNewNewsTicket.show();
};

ViewNews.refresh = function () {
  this.loading = true;
  var Action = new CGActionLoadNewsPage();
  Action.Start = 0;
  Action.Limit = NEWS_PAGE_SIZE;
  Action.Clean = true;
  Action.execute();
};

ViewNews.onScroll = function () {
  if (this.extScrollParent.dom.scrollHeight - this.extScrollParent.dom.clientHeight - this.extScrollParent.dom.scrollTop < 200 && !this.loading) {
    this.loading = true;
    var Action = new CGActionLoadNewsPage();
    Action.Start = this.loaded + 1;
    Action.Limit = NEWS_PAGE_SIZE;
    Action.execute();
  }
};

ViewNews.onFocus = function () {
  var txtArea = this;
  txtArea.dom.value = "";
  txtArea.up("li").removeClass("disable");
};

ViewNews.onFocusNewPost = function () {
  var txtArea = this;
  txtArea.dom.value = "";
  txtArea.up(".newpost").removeClass("disable");
};

ViewNews.onBlurLuncher = function () {
  setTimeout(ViewNewsCommentAtBlur.bind(this), 150);
};

ViewNews.onNewPostBlurLuncher = function () {
  setTimeout(ViewNewsNewPostAtBlur.bind(this), 150);
};

ViewNewsCommentAtBlur = function () {
  var eTxtArea = this;
  var comment = eTxtArea.up("li");
  if (comment.hasClass("disable"))
    return;
  eTxtArea.dom.value = eTxtArea.dom.title;
  comment.addClass("disable");
  eTxtArea.blur();
};

ViewNewsNewPostAtBlur = function () {
  var eTxtArea = this;
  var post = eTxtArea.up(".newpost");
  if (post.hasClass("disable"))
    return;
  eTxtArea.dom.value = eTxtArea.dom.title;
  post.addClass("disable");
  eTxtArea.blur();
};

//----------------------------------------------------------------------
// Show News
//----------------------------------------------------------------------
function CGActionShowNews() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShowNews.prototype = new CGAction;
CGActionShowNews.constructor = CGActionShowNews;
CommandFactory.register(CGActionShowNews, null, true);

CGActionShowNews.prototype.step_1 = function () {

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  Kernel.loadSystemTemplate(this, "news");
};

CGActionShowNews.prototype.step_2 = function () {

  Desktop.Main.Center.Body.activateNews();

  ViewPageNews.setContent(this.data);
  ViewPageNews.refresh();
  ViewPageNews.show();

  this.setActiveFurniture(Furniture.NEWS);

  var Action = new CGActionNotificationsReadAll();
  Action.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// Render News
//----------------------------------------------------------------------
function CGActionRenderNews() {
  this.base = CGAction;
  this.base(1);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderNews.prototype = new CGAction;
CGActionRenderNews.constructor = CGActionRenderNews;
CommandFactory.register(CGActionRenderNews, { IdDOMViewerLayer: 0 }, false);

CGActionRenderNews.prototype.step_1 = function () {
  ViewNews.init(this.IdDOMViewerLayer);
  ViewNews.refresh();
};

//----------------------------------------------------------------------
// Refresh News
//----------------------------------------------------------------------
function CGActionRefreshNews() {
  this.base = CGAction;
  this.base(1);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRefreshNews.prototype = new CGAction;
CGActionRefreshNews.constructor = CGActionRefreshNews;
CommandFactory.register(CGActionRefreshNews, null, false);

CGActionRefreshNews.prototype.step_1 = function () {
  ViewNews.refresh();
};

//----------------------------------------------------------------------
// Add Comment To News
//----------------------------------------------------------------------
function CGActionAddCommentToPost() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionAddCommentToPost.prototype = new CGAction;
CGActionAddCommentToPost.constructor = CGActionAddCommentToPost;
CommandFactory.register(CGActionAddCommentToPost, { PostId: 0 }, false);

CGActionAddCommentToPost.prototype.step_1 = function () {
  if (this.PostId == null) {
    this.terminate();
    return;
  }

  this.DOMCommentTextArea = Ext.get(this.DOMItem).getPrevSibling();
  var comment = this.DOMCommentTextArea.up("li");
  if (comment.hasClassName("disable")) {
    this.terminate();
    return;
  }

  var text = this.DOMCommentTextArea.value;
  if (text == EMPTY) {
    this.terminate();
    return;
  }
  this.DOMCommentTextArea.value = this.DOMCommentTextArea.title;
  this.DOMCommentTextArea.blur();
  comment.addClassName("disable");

  Kernel.addCommentToPost(this, this.PostId, text);
};

CGActionAddCommentToPost.prototype.step_2 = function () {
  var eComment = this.DOMCommentTextArea.up("li");
  var tmpDivHolder = document.createElement('div');
  tmpDivHolder.innerHTML = this.data;
  var html = Ext.get(tmpDivHolder).query(".comment")[0].parentNode.innerHTML;
  new Insertion.Before(eComment, html);
};


//----------------------------------------------------------------------
// Add Post To News
//----------------------------------------------------------------------
function CGActionAddPost() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionAddPost.prototype = new CGAction;
CGActionAddPost.constructor = CGActionAddPost;
CommandFactory.register(CGActionAddPost, { PostTextArea: 0, IdDOMLayer: 1}, false);

CGActionAddPost.prototype.step_1 = function () {
  if ((this.PostTextArea == null) || (this.IdDOMLayer == null)) {
    this.terminate();
    return;
  }

  var sNewText = ViewNews.getNewPostAndDisable(this.PostTextArea);
  if (!sNewText || sNewText == EMPTY) {
    this.terminate();
    return;
  }

  Kernel.addPost(this, sNewText);
};

CGActionAddPost.prototype.step_2 = function () {
  ViewNews.addPost(this.data);
  ViewNews.refreshHandlers();
};

//----------------------------------------------------------------------
//Load News Next Page
//----------------------------------------------------------------------
function CGActionLoadNewsPage() {
  this.base = CGAction;
  this.base(2);
};

CGActionLoadNewsPage.prototype = new CGAction;
CGActionLoadNewsPage.constructor = CGActionLoadNewsPage;
CommandFactory.register(CGActionLoadNewsPage, { Start: 0, Limit: 1}, false);

CGActionLoadNewsPage.prototype.step_1 = function () {
  if ((this.Start == null) || (this.Limit == null)) {
    this.terminate();
    return;
  }

  Kernel.loadNewsNextPage(this, this.Start, this.Limit);
};

CGActionLoadNewsPage.prototype.step_2 = function () {
  ViewNews.addNewsPage(this.data, this.Clean);
};

//----------------------------------------------------------------------
// Add Filter To News
//----------------------------------------------------------------------
function CGActionAddFilter() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionAddFilter.prototype = new CGAction;
CGActionAddFilter.constructor = CGActionAddFilter;
CommandFactory.register(CGActionAddFilter, { IdPostDOMLayer: 0, PostId: 1, Filter: 2}, false);

CGActionAddFilter.prototype.step_1 = function () {
  if ((this.IdPostDOMLayer == null) || (this.PostId == null) || (this.Filter == null)) {
    this.terminate();
    return;
  }

  Kernel.addFilter(this, this.PostId, this.Filter);
};

CGActionAddFilter.prototype.step_2 = function () {

};

//----------------------------------------------------------------------
// Update news
//----------------------------------------------------------------------
function CGActionUpdateNews() {
  this.base = CGAction;
  this.base(1);
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionUpdateNews.prototype = new CGAction;
CGActionUpdateNews.constructor = CGActionUpdateNews;
CommandFactory.register(CGActionUpdateNews, { }, false);

CGActionUpdateNews.prototype.step_1 = function () {
  ViewNews.invalidate();

  this.terminate();
};

function CGActionShowBase(iNumStates) {
  this.base = CGAction;
  this.base(iNumStates);
  this.bActivate = false;
  this.Mode = "default";
};

CGActionShowBase.prototype = new CGAction;
CGActionShowBase.constructor = CGActionShowBase;
CommandFactory.register(CGActionShowBase, { Id: 0 }, true);

CGActionShowBase.prototype.onFailure = function (sResponse) {
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionShowBase.prototype.getDOMElement = function (Type, Object) {
  return null;
};

CGActionShowBase.prototype.getContainerView = function (Type, Object) {
  var View = Desktop.Main.Center.Body.getContainerView(Type, Object.getId());
  var IdTab = null;

  if (View != null && !View.NodeDependant) {
    Desktop.Main.Center.Body.deleteView(Type, View.getId());
    IdTab = Desktop.Main.Center.Body.getTabId(Type, Object.getId());
  }
  else {
    IdTab = Desktop.Main.Center.Body.addTab(Type, {Id: Object.getId()});
    this.bActivate = true;
  }

  View = Desktop.createView($(IdTab), Object, null, this.Mode, true);

  return View;
};

CGActionShowBase.prototype.getView = function (Type, Object, DOMElement) {
  var View, ViewContainer, Mode;

  if (this.DOMItem != null) DOMElement = this.getDOMElement();

  if ((!DOMElement) || (!DOMElement.IdView)) return this.getContainerView(Type, Object);

  if (!Desktop.Main.Center.Body.existsView(DOMElement.IdView)) {
    this.terminate();
    return;
  }

  View = Desktop.Main.Center.Body.getView(Type, DOMElement.IdView);
  ViewContainer = View.getContainer();
  if ((ViewContainer == null) || (ViewContainer.getTarget().getId() != this.Id)) return this.getContainerView(Type, Object);

  Mode = View.getMode();
  Type = View.getType();
  Desktop.Main.Center.Body.deleteView(Type, View.getId());
  View = Desktop.createView(DOMElement, Object, ViewContainer, this.Mode, true);
  View.setMode(Mode);
  View.setType(Type);

  return View;
};

CGActionShowBase.prototype.createView = function (Type, Object, DOMElement, ContainerView) {
  var View = Desktop.createView(DOMElement, Object, ContainerView, this.Mode, false);
  View.setMode(this.Mode);
  return View;
};

//----------------------------------------------------------------------
// Process Show Last View
//----------------------------------------------------------------------
function CGProcessShowLastView() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessShowLastView.prototype = new CGProcess;
CGProcessShowLastView.constructor = CGProcessShowLastView;

CGProcessShowLastView.prototype.step_1 = function () {
	window.history.back();
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Process Clean dirty
//----------------------------------------------------------------------
function CGProcessCleanDirty() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessCleanDirty.prototype = new CGProcess;
CGProcessCleanDirty.constructor = CGProcessCleanDirty;

CGProcessCleanDirty.prototype.onFailure = function (sResponse) {
	this.terminateOnFailure(sResponse);
};

CGProcessCleanDirty.prototype.saveNode = function (ButtonResult) {
	if (ButtonResult == BUTTON_RESULT_CANCEL) {
		this.terminateOnFailure();
	}
	else if (ButtonResult == BUTTON_RESULT_YES) {
		State.discardNode = false;
		var ActionSaveNode = new CGActionSaveNode();
		ActionSaveNode.Id = State.LastView.getTarget().getId();
		ActionSaveNode.ReturnProcess = this;
		ActionSaveNode.execute();
	}
	else {
		if (State.discardNode) {
			this.discardNode();
		}
		else {
			this.terminateOnSuccess();
		}
	}
};

CGProcessCleanDirty.prototype.discardNode = function () {
	var ActionDiscardNode = new CGActionDiscardNode();
	var Node = State.LastView.getTarget();
	ActionDiscardNode.Id = Node.getId();
	ActionDiscardNode.ReturnProcess = this;
	ActionDiscardNode.execute();
	State.discardNode = false;
};

CGProcessCleanDirty.prototype.step_1 = function () {
	ViewerSidebar.hide();
	this.terminateOnSuccess();
	return; // mario disabled.
};

//----------------------------------------------------------------------
// Show node
//----------------------------------------------------------------------
function CGProcessShowNode() {
	this.base = CGProcess;
	this.base(5);
	this.ActivateNode = true;
	this.Code = null;
	this.DOMViewActiveTab = null;
	this.IdRevision = null;
};

CGProcessShowNode.prototype = new CGProcess;
CGProcessShowNode.constructor = CGProcessShowNode;

CGProcessShowNode.prototype.step_1 = function () {
	var IdNode = (this.Node) ? this.Node.getId() : this.Id;

	this.Id = IdNode;
	EventManager.notify(EventManager.BEFORE_OPEN_NODE, {"IdNode": IdNode});

	if (this.Mode) {
		this.gotoStep(3);
		return;
	}

	if ((this.Node) && (this.Node.Code != null)) {
		this.Code = this.Node.Code;
		this.execute();
		return;
	}

	Kernel.loadNodeType(this, IdNode);
};

CGProcessShowNode.prototype.step_2 = function () {
	if (this.Code == null) this.Code = this.data;

	var Behaviour = Extension.getDefinitionBehaviour(this.Code);

	if ((!Behaviour) || (!Behaviour.ShowNode) || (!Behaviour.ShowNode.Templates) || (!Behaviour.ShowNode.Templates.Edit)) {
		Desktop.hideReports();
		this.terminate();
		return;
	}

	this.Mode = Behaviour.ShowNode.Templates.Edit;
	this.execute();
};

CGProcessShowNode.prototype.step_3 = function () {

	if (this.ViewNode == null) {
		var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Id);
		if (ViewNode != null) {
			if (((this.Mode == null) || (ViewNode.getMode() == this.Mode)) && (this.ActivateNode)) {
				var Process = new CGProcessActivateNode();
				Process.Id = this.Id;
				Process.execute();
				this.terminate();
				return;
			}
			else {
				ViewNode.destroy();
				ViewNode = null;
			}
		}
		if (ViewNode == null) {
			var IdTab = Desktop.Main.Center.Body.addTab(VIEW_NODE, {Id: this.Id, Background: !this.ActivateNode});
			var Node = null;
			if (!this.Node) {
				Node = new CGNode();
				Node.setId(this.Id);
			}
			else Node = this.Node;
			this.ViewNode = Desktop.createView($(IdTab), Node, null, this.Mode, true);
		}
	}
	else {
		if ((!this.DOMViewActiveTab) && (this.ViewNode) && (this.ViewNode.getDOM) && (this.ViewNode.getDOM().getActiveTab)) this.DOMViewActiveTab = this.ViewNode.getDOM().getActiveTab();
		this.ViewNode.setMode(this.Mode);
	}

	if (!this.Node) {
		if (this.IdRevision == null || this.IdRevision == "-1") Kernel.loadNode(this, this.Id, this.Mode);
		else Kernel.loadNodeRevision(this, this.IdRevision, this.Id, this.Mode, null);
	}
	else this.gotoStep(5);
};

CGProcessShowNode.prototype.step_4 = function () {

	this.Node = new CGNode();
	this.Node.unserialize(this.data);
	NodesCache.register(this.Node);

	this.ViewNode.setTarget(this.Node);
	this.ViewNode.refresh();

	this.execute();
};

CGProcessShowNode.prototype.step_5 = function () {

	Desktop.Main.Center.Header.refresh();
	if (Desktop.Main.Center.Body.existsTab(VIEW_NODE, this.Node.getId())) {
		Desktop.Main.Center.Body.updateTab(VIEW_NODE, this.Node.getId(), this.Node.getLabel());
		if (this.ActivateNode) Desktop.Main.Center.Body.activateTab(VIEW_NODE, this.Node.getId());
	}

	Desktop.markNodesReferences(this.ViewNode);

	if (this.ActivateNode) {
		if (this.DOMViewActiveTab) this.ViewNode.getDOM().activateTab(this.DOMViewActiveTab);
		else this.ViewNode.getDOM().activateDefaultTab();
	}

	EventManager.notify(EventManager.OPEN_NODE, {"Node": this.Node, "DOMNode": this.ViewNode.getDOM()});

	this.setActiveFurniture(Furniture.DESKTOP, Account.getUser().getRootNode().id);
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Load embedded node
//----------------------------------------------------------------------
function CGProcessLoadEmbeddedNode() {
	this.base = CGProcess;
	this.base(3);
	this.ViewNode = null;
	this.LoadHelperPage = false;
};

CGProcessLoadEmbeddedNode.prototype = new CGProcess;
CGProcessLoadEmbeddedNode.constructor = CGProcessLoadEmbeddedNode;

CGProcessLoadEmbeddedNode.prototype.step_1 = function () {
	var ControlInfo;
	var Node = null;
	var DOMNode = this.DOMNode;

	if (DOMNode == null) DOMNode = this.DOMItem;

	if (!DOMNode.getControlInfo) {
		this.gotoStep(3);
		return;
	}

	ControlInfo = DOMNode.getControlInfo();
	this.ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMNode.IdView);

	if (this.ViewContainer == null) {
		Node = NodesCache.getCurrent();

		if (Node == null) {
			this.gotoStep(3);
			return;
		}

		this.ViewContainer = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());
	}

	if (!this.ViewNode) {
		Node = new CGNode();
		Node.setId(ControlInfo.IdNode);
		this.ViewNode = Desktop.createView(DOMNode, Node, this.ViewContainer, ControlInfo.Templates.Refresh, true);
	}

	if (this.ViewNode.getDOM().isLoaded()) {
		this.execute();
		return;
	}

	var Process = new CGProcessShowNode();
	Process.Id = Node.getId();
	Process.IdRevision = ControlInfo.IdRevision;
	Process.Mode = ControlInfo.Templates.Refresh;
	Process.ViewNode = this.ViewNode;
	Process.ActivateNode = false;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessLoadEmbeddedNode.prototype.step_2 = function () {
	var Process = new CGProcessLoadEmbeddedNodes();
	Process.ViewContainer = this.ViewNode;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessLoadEmbeddedNode.prototype.step_3 = function () {
	var DOMNode = this.DOMNode;

	if (this.onFinish) this.onFinish();

	if (DOMNode == null) DOMNode = this.DOMItem;

	if (DOMNode.getControlInfo() && this.LoadHelperPage)
		CommandListener.throwCommand("loadnodehelperpage(" + DOMNode.getControlInfo().Code + ")");

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Load embedded nodes
//----------------------------------------------------------------------
function CGProcessLoadEmbeddedNodes() {
	this.base = CGProcess;
	this.base(3);
	this.aDOMEmbeddedNodes = null;
	this.Index = 0;
	this.LoadHelperPage = false;
};

CGProcessLoadEmbeddedNodes.prototype = new CGProcess;
CGProcessLoadEmbeddedNodes.constructor = CGProcessLoadEmbeddedNodes;

CGProcessLoadEmbeddedNodes.prototype.step_1 = function () {
	var DOMContainer;

	if (!this.ViewContainer) return;

	DOMContainer = this.ViewContainer.getDOM();

	if (!DOMContainer) {
		this.terminateOnFailure();
		return;
	}

	if (!DOMContainer.getEmbeddedNodes) {
		this.terminateOnSuccess();
		return;
	}

	this.aDOMEmbeddedNodes = DOMContainer.getEmbeddedNodes();
	this.Index = 0;
	this.execute();
};

CGProcessLoadEmbeddedNodes.prototype.step_2 = function () {
	if (this.aDOMEmbeddedNodes[this.Index]) {
		var Process = new CGProcessLoadEmbeddedNode();
		Process.ViewContainer = this.ViewContainer;
		Process.DOMNode = this.aDOMEmbeddedNodes[this.Index];
		Process.LoadHelperPage = this.LoadHelperPage;
		Process.ReturnProcess = this;
		Process.execute();
	}
	else this.terminateOnSuccess();
};

CGProcessLoadEmbeddedNodes.prototype.step_3 = function () {
	this.Index++;
	if (this.Index < this.aDOMEmbeddedNodes.length) this.gotoStep(2);
	else this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Save node
//----------------------------------------------------------------------
function CGProcessSaveNode() {
	this.base = CGProcess;
	this.base(4);
	this.AttributeList = new CGAttributeList();
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGProcessSaveNode.prototype = new CGProcess;
CGProcessSaveNode.constructor = CGProcessSaveNode;

CGProcessSaveNode.prototype.onFailure = function (sResponse) {
	this.terminateOnFailure(sResponse);
};

CGProcessSaveNode.prototype.step_1 = function () {
	var ViewNode;
	var Node;

	if ((Node = NodesCache.get(this.Id)) == false) {
		this.terminate();
		return;
	}

	ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());
	if (ViewNode == null) {
		this.terminate();
		return;
	}

	var Process = new CGProcessSaveEmbeddedNodes();
	Process.ViewContainer = ViewNode;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessSaveNode.prototype.step_2 = function () {
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Id);
	var Process = new CGProcessSaveFieldNodes();
	Process.ViewContainer = ViewNode;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessSaveNode.prototype.step_3 = function () {
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Id);
	var DOMNode = ViewNode.getDOM();
	var sContent;

	if (!DOMNode.getContent) {
		this.terminate();
		return;
	}

	sContent = DOMNode.getContent();

	if (sContent == "") this.execute();
	else Kernel.saveNode(this, this.Id, sContent, null);
};

CGProcessSaveNode.prototype.step_4 = function () {
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Id);
	var Node = NodesCache.get(this.Id);

	if (ViewNode.getDOM().setDirty) ViewNode.getDOM().setDirty(false);

	var aDOMNodesReferencesInfo = ViewNode.getDOM().getNodesReferencesInfo();
	for (var iPos = 0; iPos < aDOMNodesReferencesInfo.length; iPos++) {
		var DOMNodeReferenceInfo = aDOMNodesReferencesInfo[iPos];
		var NodeReference = NodesCache.get(DOMNodeReferenceInfo.idNode);
		if (NodeReference) this.addRefreshTask(RefreshTaskType.Descriptors, NodeReference);
	}

	this.addRefreshTask(RefreshTaskType.Forms, Node, ViewNode);

	IdParent = Node.getIdParent();
	while ((IdParent != null) && (IdParent != "-1") && (IdParent != "")) {
		var ParentNode = new CGNode();
		ParentNode.setId(IdParent);
		this.addRefreshTask(RefreshTaskType.References, ParentNode);
		ParentNode = NodesCache.get(IdParent);
		IdParent = (ParentNode) ? ParentNode.getIdParent() : null;
	}

	EventManager.notify(EventManager.SAVE_NODE, {"Node": Node, "DOMNode": ViewNode.getDOM()});

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Save embedded nodes
//----------------------------------------------------------------------
function CGProcessSaveEmbeddedNodes() {
	this.base = CGProcess;
	this.base(3);
	this.Index = 0;
	this.aDOMEmbeddedNodes = null;
	this.CurrentNode = null;
};

CGProcessSaveEmbeddedNodes.prototype = new CGProcess;
CGProcessSaveEmbeddedNodes.constructor = CGProcessSaveEmbeddedNodes;

CGProcessSaveEmbeddedNodes.prototype.step_1 = function () {
	var DOMNode;

	if (!this.ViewContainer) {
		this.terminateOnFailure();
		return;
	}

	DOMNode = this.ViewContainer.getDOM();
	if ((!DOMNode) || (!DOMNode.getEmbeddedNodes)) {
		this.terminateOnSuccess();
		return;
	}

	if (DOMNode.getEditableEmbeddedNodes)
		this.aDOMEmbeddedNodes = DOMNode.getEditableEmbeddedNodes();
	else
		this.aDOMEmbeddedNodes = DOMNode.getEmbeddedNodes();

	if (this.aDOMEmbeddedNodes.length == 0) this.terminate();
	else this.execute();
};

CGProcessSaveEmbeddedNodes.prototype.step_2 = function () {

	var DOMEmbeddedNode = this.aDOMEmbeddedNodes[this.Index];
	if ((!DOMEmbeddedNode.getControlInfo) || (DOMEmbeddedNode.IdView == null)) this.gotoStep(3);
	if (!DOMEmbeddedNode.isEditable()) this.gotoStep(3);

	var ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMEmbeddedNode.IdView);
	if (!ViewNode.getDOM().getContent) this.gotoStep(3);

	this.CurrentNode = ViewNode.getTarget();

	Kernel.saveEmbeddedNode(this, this.CurrentNode.getId(), ViewNode.getDOM().getContent(), null);
};

CGProcessSaveEmbeddedNodes.prototype.step_3 = function () {
	this.Index++;
	if (this.Index < this.aDOMEmbeddedNodes.length) this.gotoStep(2);
	else this.terminate();
};

//----------------------------------------------------------------------
// Save Field nodes
//----------------------------------------------------------------------
function CGProcessSaveFieldNodes() {
	this.base = CGProcess;
	this.base(3);
	this.Index = 0;
	this.aDOMFieldNodes = null;
};

CGProcessSaveFieldNodes.prototype = new CGProcess;
CGProcessSaveFieldNodes.constructor = CGProcessSaveFieldNodes;

CGProcessSaveFieldNodes.prototype.step_1 = function () {
	var DOMNode;

	if (!this.ViewContainer) {
		this.terminateOnFailure();
		return;
	}

	DOMNode = this.ViewContainer.getDOM();
	if ((!DOMNode) || (!DOMNode.getFieldNodes)) {
		this.terminateOnSuccess();
		return;
	}

	this.aDOMFieldNodes = DOMNode.getFieldNodes();

	if (this.aDOMFieldNodes.length == 0) this.terminate();
	else this.execute();
};

CGProcessSaveFieldNodes.prototype.step_2 = function () {
	var ControlInfo;

	DOMFieldNode = this.aDOMFieldNodes[this.Index];
	if (!DOMFieldNode.getControlInfo) this.gotoStep(3);

	ControlInfo = DOMFieldNode.getControlInfo();

	Kernel.saveEmbeddedNode(this, ControlInfo.IdNode, DOMFieldNode.getContent(), null);
};

CGProcessSaveFieldNodes.prototype.step_3 = function () {
	this.Index++;
	if (this.Index < this.aDOMFieldNodes.length) this.gotoStep(2);
	else this.terminate();
};

//----------------------------------------------------------------------
// Activate node
//----------------------------------------------------------------------
function CGProcessActivateNode() {
	this.base = CGProcess;
	this.base(1);
	this.NotifyFocus = true;
};

CGProcessActivateNode.prototype = new CGProcess;
CGProcessActivateNode.constructor = CGProcessActivateNode;

CGProcessActivateNode.prototype.step_1 = function () {
	var CurrentNode, Node = null;
	var CurrentViewNode, ViewNode, DOMNode;
	var bRememberTab = false;

	if (!(Node = NodesCache.get(this.Id))) {
		this.terminateOnFailure();
		return;
	}

	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null) {
		this.terminateOnFailure();
		return;
	}

	if (Node.isPrototype()) {
		Desktop.showBanner();
		State.isShowingPrototype = true;
	}
	else {
		if (State.isShowingPrototype) {
			Desktop.hideBanner();
			State.isShowingPrototype = false;
		}
	}

	if (NodesCache.getCurrent() != null) {
		CurrentNode = NodesCache.getCurrent();
		CurrentViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, CurrentNode.getId());
		if (CurrentViewNode != null) {
			var Definition = Extension.getDefinition(Node.Code);
			var CurrentDOMNode = CurrentViewNode.getDOM();
			bRememberTab = (Definition.isEnvironment() || (CurrentDOMNode.getId() == this.Id) || CurrentDOMNode.isAncestor(this.Id));
		}
		else bRememberTab = true;
	}

	NodesCache.setCurrent(this.Id);

	Desktop.Main.Center.Header.refresh();
	Desktop.Footer.refresh();

	Desktop.Main.Center.Body.disableNotifications();
	Desktop.Main.Center.Body.activateTab(VIEW_NODE, this.Id);
	Desktop.Main.Center.Body.enableNotifications();

	DOMNode = ViewNode.getDOM();

	if (DOMNode.getCollections) {
		aDOMCollections = DOMNode.getCollections();
		for (var iPos = 0; iPos < aDOMCollections.length; iPos++) {
			aDOMCollections[iPos].style.visibility = "";
		}
	}

	if (DOMNode.getNodesReferencesCount) Node.NodeList.setCount(DOMNode.getNodesReferencesCount());

	Desktop.markNodesReferences(ViewNode);

	this.setActiveFurniture(Furniture.DESKTOP, Account.getUser().getRootNode().id);

	ViewNode.show();
	DOMNode = ViewNode.getDOM();

	var ActiveTabId = this.DOMViewActiveTab ? this.DOMViewActiveTab : DOMNode.getActiveTab();
	if (ActiveTabId && bRememberTab) DOMNode.activateTab(ActiveTabId);
	else DOMNode.activateDefaultTab();

	EventManager.notify(EventManager.OPEN_NODE, {"Node": Node, "DOMNode": ViewNode.getDOM()});
	if (!DOMNode.hasTabs() || (DOMNode.hasTabs() && ViewNode.getContainer() == null)) EventManager.notify(EventManager.FOCUS_NODE, {"Node": Node, "DOMNode": ViewNode.getDOM()});

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Close node
//----------------------------------------------------------------------
function CGProcessCloseNode() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessCloseNode.prototype = new CGProcess;
CGProcessCloseNode.constructor = CGProcessCloseNode;

CGProcessCloseNode.prototype.step_1 = function () {
	var IdNode = null;
	var Node = NodesCache.get(this.Id);

	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Id)) == null) {
		this.terminateOnSuccess();
		return;
	}

	EventManager.notify(EventManager.CLOSE_NODE, {"Node": Node, "DOMNode": ViewNode.getDOM()});
	if (ViewNode.getContainer() == null) EventManager.notify(EventManager.BLUR_NODE, {"Node": Node, "DOMNode": ViewNode.getDOM()});

	ViewNode.destroy();
	Desktop.Main.Center.Body.deleteView(VIEW_NODE, ViewNode.getId());
	Desktop.Main.Center.Body.deleteTab(VIEW_NODE, this.Id);
	NodesCache.unregister(this.Id);

	State.deleteSelectedNodesReferences(IdNode);

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Refresh node type dialog
//----------------------------------------------------------------------
function CGProcessRefreshNodeTypeDialog() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessRefreshNodeTypeDialog.prototype = new CGProcess;
CGProcessRefreshNodeTypeDialog.constructor = CGProcessRefreshNodeTypeDialog;

CGProcessRefreshNodeTypeDialog.prototype.step_1 = function () {
	var Node = NodesCache.getCurrent();
	var Behaviour;

	if (!this.Dialog) {
		this.terminateOnFailure();
		return;
	}

	if (Node.getId() == ID_NODE_SEARCH) Node = NodesCache.get(State.LastObject.Id);

	Behaviour = Extension.getDefinitionBehaviour(Node.Code);
	if ((!Behaviour) || (!Behaviour.ShowNode) || (!Behaviour.ShowNode.Templates) || (!Behaviour.ShowNode.Templates.Edit)) return false;

	Kernel.loadNodeTemplate(this, this.Dialog.NodeType.Code, Behaviour.ShowNode.Templates.Edit);
};

CGProcessRefreshNodeTypeDialog.prototype.step_2 = function () {
	var IdDummyView = Ext.id();
	var Node, Behaviour;

	Node = new CGNode();
	Node.unserialize(this.data);

	Behaviour = Extension.getDefinitionBehaviour(Node.Code);
	createLayer(IdDummyView, EMPTY, $(Literals.NodesContainer));
	DummyView = Desktop.createView($(IdDummyView), Node, null, Behaviour.ShowNode.Templates.Edit, true);

	this.Dialog.Target.Definition = DummyView.getDOM().getDefinition();
	this.Dialog.refresh();

	$(IdDummyView).remove();
	Desktop.Main.Center.Body.deleteView(VIEW_NODE, DummyView.getId());
};

//----------------------------------------------------------------------
// Add node blank
//----------------------------------------------------------------------
function CGProcessAddNodeBlank() {
	this.base = CGProcess;
	this.base(3);
	this.ActivateNode = true;
	this.IsPrototype = false;
	this.IdParent = null;
	this.Shared = false;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGProcessAddNodeBlank.prototype = new CGProcess;
CGProcessAddNodeBlank.constructor = CGProcessAddNodeBlank;

CGProcessAddNodeBlank.prototype.onFailure = function (sResponse) {
	if (this.ActivateNode) Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessAddNodeBlank.prototype.step_1 = function () {
	var sCaption = Extension.getDefinition(this.Code).Caption;

	if (this.IdParent == null) {
		this.IdParent = NodesCache.getCurrent().getId();
	}
	if (this.IdParent == ID_NODE_SEARCH) {
		this.IdParent = NodesCache.get(State.LastObject.Id).getId();
	}

	if (this.ActivateNode) Desktop.reportProgress(this.generateMessage(Lang.Process.AddNodeBlank.Waiting, {caption: sCaption}), true);

	if (!this.Mode) {
		var Behaviour = Extension.getDefinitionBehaviour(this.Code);

		if ((!Behaviour) || (!Behaviour.AddNode) || (!Behaviour.AddNode.Templates) || (!Behaviour.AddNode.Templates.Edit)) {
			this.terminateOnFailure();
			return;
		}

		this.Mode = Behaviour.AddNode.Templates.Edit;
	}

	if (this.IsPrototype) Kernel.addPrototype(this, this.Code, this.Shared ? null : this.IdParent, this.Mode);
	else Kernel.addNode(this, this.Code, this.IdParent, this.Mode);
};

CGProcessAddNodeBlank.prototype.step_2 = function () {
	this.Result = new CGNode();
	this.Result.unserialize(this.data);
	NodesCache.register(this.Result);

	State.aMarkedNodesReferences = [this.Result.getId()];
	State.NodeReferenceMarkType = MarkType.Added;

	if (this.ActivateNode) {
		var ActionShowNode = new CGActionShowNode();
		ActionShowNode.Id = this.Result.getId();
		ActionShowNode.Mode = this.Mode;
		ActionShowNode.ReturnProcess = this;
		ActionShowNode.execute();
	}
	else {
		this.execute();
	}
};

CGProcessAddNodeBlank.prototype.step_3 = function () {
	this.addRefreshTask(RefreshTaskType.Added, [this.Result]);
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Generate report
//----------------------------------------------------------------------
function CGProcessGenerateReport() {
	this.base = CGProcess;
	this.base(3);
	this.ActivateNode = true;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGProcessGenerateReport.prototype = new CGProcess;
CGProcessGenerateReport.constructor = CGProcessGenerateReport;

CGProcessGenerateReport.prototype.onFailure = function (sResponse) {
	Desktop.hideReports();
	this.terminateOnFailure(sResponse);
};

CGProcessGenerateReport.prototype.step_1 = function () {
	if (this.Target == TARGET_ENVIRONMENT) this.IdTarget = Account.getUser().getRootNode().id;

	if (this.IdParent == null) this.IdParent = NodesCache.getCurrent().getId();
	if (this.IdParent == ID_NODE_SEARCH) {
		this.IdParent = NodesCache.get(State.LastObject.Id).getId();
	}

	var sCaption = Extension.getDefinition(this.Code).Caption;

	if (this.ActivateNode) Desktop.reportProgress(this.generateMessage(Lang.Process.GenerateReport.Waiting, {caption: sCaption}), true);

	if (!this.Mode) {
		var Behaviour = Extension.getDefinitionBehaviour(this.Code);

		if ((!Behaviour) || (!Behaviour.AddNode) || (!Behaviour.AddNode.Templates) || (!Behaviour.AddNode.Templates.View)) {
			this.terminateOnFailure();
			return;
		}

		this.Mode = Behaviour.AddNode.Templates.View;
	}

	Kernel.generateReport(this, this.Code, this.IdParent, this.Mode, this.DataSourceTemplate, this.sNodes, this.sNodeTypes, this.sFromDate, this.sToDate);
};

CGProcessGenerateReport.prototype.step_2 = function () {
	this.Result = new CGNode();
	this.Result.unserialize(this.data);
	NodesCache.register(this.Result);

	State.aMarkedNodesReferences = [this.Result.getId()];
	State.NodeReferenceMarkType = MarkType.Added;

	if (this.ActivateNode) {
		var ActionShowNode = new CGActionShowNode();
		ActionShowNode.Id = this.Result.getId();
		ActionShowNode.Mode = this.Mode;
		ActionShowNode.ReturnProcess = this;
		ActionShowNode.execute();
	}
	else {
		this.execute();
	}
};

CGProcessGenerateReport.prototype.step_3 = function () {
	this.addRefreshTask(RefreshTaskType.Added, [this.Result]);
	Desktop.hideReports();
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Add node from file
//----------------------------------------------------------------------
function CGProcessAddNodeFromFile() {
	this.base = CGProcess;
	this.base(3);
};

CGProcessAddNodeFromFile.prototype = new CGProcess;
CGProcessAddNodeFromFile.constructor = CGProcessAddNodeFromFile;

CGProcessAddNodeFromFile.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessAddNodeFromFile.prototype.step_1 = function () {
	Desktop.reportProgress(Lang.Process.AddNodeFromFile.Waiting, true);
	Kernel.uploadNodeContent(this, this.FileForm);
};

CGProcessAddNodeFromFile.prototype.step_2 = function () {
	var Node = NodesCache.getCurrent();
	if (Node.getId() == ID_NODE_SEARCH) Node = NodesCache.get(State.LastObject.Id);
	Kernel.importNode(this, Node.getId(), null, this.Option, this.Description);
};

CGProcessAddNodeFromFile.prototype.step_3 = function () {
	State.aMarkedNodesReferences = (this.data == "") ? new Array() : this.data.split(COMMA);
	State.NodeReferenceMarkType = MarkType.Added;
	Desktop.hideReports();
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Add node from clipboard
//----------------------------------------------------------------------
function CGProcessAddNodeFromClipboard() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessAddNodeFromClipboard.prototype = new CGProcess;
CGProcessAddNodeFromClipboard.constructor = CGProcessAddNodeFromClipboard;

CGProcessAddNodeFromClipboard.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessAddNodeFromClipboard.prototype.step_1 = function () {
	var NodeResult = new CGNode();
	var Node = NodesCache.getCurrent();

	Desktop.reportProgress(Lang.Process.AddNodeFromClipboard.Waiting, true);

	if (Node.getId() == ID_NODE_SEARCH) Node = NodesCache.get(State.LastObject.Id);

	for (var iPos = 0; iPos < this.Data.length; iPos++) {
		var CurrentNode = new CGNode();
		CurrentNode.Code = this.Code;
		CurrentNode.copyFromFields(this.Data[iPos]);
		NodeResult.NodeList.addNode(CurrentNode);
	}

	Kernel.importNode(this, Node.getId(), NodeResult.serialize(), ADD_NODE_OPTION_REPLACE, this.Description);
};

CGProcessAddNodeFromClipboard.prototype.step_2 = function () {
	State.aMarkedNodesReferences = (this.data == "") ? new Array() : this.data.split(COMMA);
	State.NodeReferenceMarkType = MarkType.Added;
	Desktop.hideReports();
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Delete nodes
//----------------------------------------------------------------------
function CGProcessDeleteNodes() {
	this.base = CGProcess;
	this.base(2);
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGProcessDeleteNodes.prototype = new CGProcess;
CGProcessDeleteNodes.constructor = CGProcessDeleteNodes;

CGProcessDeleteNodes.prototype.onFailure = function (sResponse) {
	this.terminateOnFailure(sResponse);
};

CGProcessDeleteNodes.prototype.step_1 = function () {
	Kernel.deleteNodes(this, this.Nodes.toString());
};

CGProcessDeleteNodes.prototype.step_2 = function () {
	var aNodes = new Array();

	for (var index in this.Nodes) {
		if (isFunction(this.Nodes[index])) continue;
		var Node = new CGNode();
		Node.setId(this.Nodes[index]);
		aNodes.push(Node);
	}

	this.addRefreshTask(RefreshTaskType.Deleted, aNodes);

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Load field node
//----------------------------------------------------------------------
function CGProcessLoadFieldNode() {
	this.base = CGProcess;
	this.base(2);
	this.ViewNode = null;
};

CGProcessLoadFieldNode.prototype = new CGProcess;
CGProcessLoadFieldNode.constructor = CGProcessLoadFieldNode;

CGProcessLoadFieldNode.prototype.step_1 = function () {
	var IdLayer = Ext.id(), Node;
	var CurrentNode;
	var CurrentViewNode;
	var DOMLayer;

	if ((CurrentNode = NodesCache.getCurrent()) == null) {
		this.terminateOnFailure();
		return;
	}

	if ((CurrentViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, CurrentNode.getId())) == null) {
		this.terminateOnFailure();
		return;
	}

	EventManager.notify(EventManager.BEFORE_OPEN_NODE, {"IdNode": this.Id});

	Node = new CGNode();
	Node.setId(this.Id);

	DOMLayer = createLayer(IdLayer, EMPTY, this.Container);
	this.ViewNode = Desktop.createView(DOMLayer, Node, CurrentViewNode, this.Mode, true);

	var Process = new CGProcessShowNode();
	Process.Id = Node.getId();
	Process.Mode = this.Mode;
	Process.ViewNode = this.ViewNode;
	Process.ActivateNode = false;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessLoadFieldNode.prototype.step_2 = function () {
	var Node = NodesCache.get(this.Id);
	if (this.onComplete) this.onComplete();
	EventManager.notify(EventManager.OPEN_NODE, {"Node": Node, "DOMNode": this.ViewNode.getDOM()});
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Save field node
//----------------------------------------------------------------------
function CGProcessSaveFieldNode() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessSaveFieldNode.prototype = new CGProcess;
CGProcessSaveFieldNode.constructor = CGProcessSaveFieldNode;

CGProcessSaveFieldNode.prototype.step_1 = function () {
	var ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, this.DOMNode.IdView);

	if (ViewNode == null) {
		this.terminateOnFailure();
		return;
	}

	var Process = new CGProcessSaveNodeAttribute();
	Process.Node = ViewNode.getTarget();
	Process.DOMNode = ViewNode.getDOM();
	Process.Data = this.DOMField.getContent();
	Process.execute();

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Add field node
//----------------------------------------------------------------------
function CGProcessAddFieldNode() {
	this.base = CGProcess;
	this.base(4);
	this.Node = null;
};

CGProcessAddFieldNode.prototype = new CGProcess;
CGProcessAddFieldNode.constructor = CGProcessAddFieldNode;

CGProcessAddFieldNode.prototype.onFailure = function (sResponse) {
	Desktop.reportError(this.generateMessage(Lang.Process.AddFieldNode.Failure, {caption: Extension.getDefinition(this.Code).Caption}));
	this.terminate();
};

CGProcessAddFieldNode.prototype.step_1 = function () {
	var CurrentNode;

	if ((CurrentNode = NodesCache.getCurrent()) == null) {
		this.terminateOnFailure();
		return;
	}

	Kernel.addNode(this, this.Code, CurrentNode.getId(), this.Mode, null);
};

CGProcessAddFieldNode.prototype.step_2 = function () {
	this.Node = new CGNode();
	this.Node.unserialize(this.data);
	NodesCache.register(this.Node);

	Kernel.saveNode(this, this.Node.getId(), "", null);
};

CGProcessAddFieldNode.prototype.step_3 = function () {
	this.Process = new CGProcessLoadFieldNode();
	this.Process.Id = this.Node.getId();
	this.Process.Mode = this.Mode;
	this.Process.Container = this.Container;
	this.Process.ReturnProcess = this;
	this.Process.execute();
};

CGProcessAddFieldNode.prototype.step_4 = function () {
	if (this.onComplete) this.onComplete(this.Node.getId());
	EventManager.notify(EventManager.CREATE_NODE, {"Node": this.Node, "DOMNode": this.Process.ViewNode.getDOM()});
	this.terminate();
};

//----------------------------------------------------------------------
// Load field node link
//----------------------------------------------------------------------
function CGProcessLoadFieldNodeLink() {
	this.base = CGProcess;
	this.base(2);
	this.ViewNode = null;
};

CGProcessLoadFieldNodeLink.prototype = new CGProcess;
CGProcessLoadFieldNodeLink.constructor = CGProcessLoadFieldNodeLink;

CGProcessLoadFieldNodeLink.prototype.step_1 = function () {
	var IdLayer = Ext.id(), Node;
	var CurrentNode;
	var CurrentViewNode;
	var DOMLayer;

	if ((CurrentNode = NodesCache.getCurrent()) == null) {
		this.terminateOnFailure();
		return;
	}

	if ((CurrentViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, CurrentNode.getId())) == null) {
		this.terminateOnFailure();
		return;
	}

	EventManager.notify(EventManager.BEFORE_OPEN_NODE, {"IdNode": this.Id});

	Node = new CGNode();
	Node.setId(this.Id);

	DOMLayer = createLayer(IdLayer, EMPTY, this.Container);
	this.ViewNode = Desktop.createView(DOMLayer, Node, CurrentViewNode, this.Mode, true);

	var Process = new CGProcessShowNode();
	Process.Id = Node.getId();
	Process.Mode = this.Mode;
	Process.ViewNode = this.ViewNode;
	Process.ActivateNode = false;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessLoadFieldNodeLink.prototype.step_2 = function () {
	var Node = NodesCache.get(this.Id);
	if (this.onComplete) this.onComplete();
	EventManager.notify(EventManager.OPEN_NODE, {"Node": Node, "DOMNode": this.ViewNode.getDOM()});
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Add field node link
//----------------------------------------------------------------------
function CGProcessAddFieldNodeLink() {
	this.base = CGProcess;
	this.base(3);
	this.Node = null;
};

CGProcessAddFieldNodeLink.prototype = new CGProcess;
CGProcessAddFieldNodeLink.constructor = CGProcessAddFieldNodeLink;

CGProcessAddFieldNodeLink.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	Desktop.reportError(this.generateMessage(Lang.Process.AddFieldNodeLink.Failure, {caption: Extension.getDefinition(this.Code).Caption}));
	this.terminate();
};

CGProcessAddFieldNodeLink.prototype.step_1 = function () {
	var IdParent = this.IdParent;
	if (IdParent == null) IdParent = Account.getUser().getRootNode().id;
	Desktop.reportProgress(this.generateMessage(Lang.Process.AddFieldNodeLink.Waiting, {caption: Extension.getDefinition(this.CodeType).Caption}), true);
	Kernel.addNode(this, this.Code, IdParent, this.Mode, null);
};

CGProcessAddFieldNodeLink.prototype.step_2 = function () {

	this.Node = new CGNode();
	this.Node.unserialize(this.data);
	NodesCache.register(this.Node);

	if (this.onComplete) this.onComplete(this.Node.getId());

	this.Process = new CGProcessShowLinkNode();
	this.Process.IdLink = this.Node.getId();
	this.Process.IdNode = NodesCache.getCurrent().getId();
	this.Process.Mode = this.Mode;
	this.Process.ReturnProcess = this;
	this.Process.execute();
};

CGProcessAddFieldNodeLink.prototype.step_3 = function () {
	Desktop.hideProgress();
	this.terminate();
};

//----------------------------------------------------------------------
// Load default value
//----------------------------------------------------------------------
function CGProcessLoadDefaultValue() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessLoadDefaultValue.prototype = new CGProcess;
CGProcessLoadDefaultValue.constructor = CGProcessLoadDefaultValue;

CGProcessLoadDefaultValue.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Process.LoadDefaultValue.Failure);
};

CGProcessLoadDefaultValue.prototype.step_1 = function () {
	if ((!this.NodeType) || (!this.Property) || (!this.DOMField)) return;
	Kernel.loadDefaultValue(this, this.NodeType, this.Property);
};

CGProcessLoadDefaultValue.prototype.step_2 = function () {
	if (this.data != "") this.DOMField.setData(this.data);
	else this.DOMField.fillWithDefaultData();
	this.terminate();
};

//----------------------------------------------------------------------
// Add default value
//----------------------------------------------------------------------
function CGProcessAddDefaultValue() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessAddDefaultValue.prototype = new CGProcess;
CGProcessAddDefaultValue.constructor = CGProcessAddDefaultValue;

CGProcessAddDefaultValue.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Process.AddDefaultValue.Failure);
};

CGProcessAddDefaultValue.prototype.step_1 = function () {
	if ((!this.NodeType) || (!this.Property) || (!this.Data)) return;
	Kernel.addDefaultValue(this, this.NodeType, this.Property, this.Data);
};

CGProcessAddDefaultValue.prototype.step_2 = function () {
	Desktop.reportSuccess(Lang.Process.AddDefaultValue.Done);
	this.terminate();
};

//----------------------------------------------------------------------
// Goto Field
//----------------------------------------------------------------------
function CGProcessGotoField() {
	this.base = CGAction;
	this.base(1);
};

CGProcessGotoField.prototype = new CGProcess;
CGProcessGotoField.constructor = CGProcessGotoField;

CGProcessGotoField.prototype.step_1 = function () {

	if ((!this.Path) || (!this.ViewNode)) {
		this.terminateOnFailure();
		return;
	}

	if (!this.ViewNode.getDOM().gotoField) return false;
	this.ViewNode.getDOM().gotoField(this.Path);

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Load node notes
//----------------------------------------------------------------------
function CGProcessLoadNodeNotes() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessLoadNodeNotes.prototype = new CGProcess;
CGProcessLoadNodeNotes.constructor = CGProcessLoadNodeNotes;

CGProcessLoadNodeNotes.prototype.step_1 = function () {

	if (this.Node == null) {
		this.terminateOnFailure();
		return;
	}

	Kernel.loadNodeNotes(this, this.Node.getId());
};

CGProcessLoadNodeNotes.prototype.step_2 = function () {
	this.Node.Notes = Ext.util.JSON.decode(this.data);
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Focus node view
//----------------------------------------------------------------------
function CGProcessFocusNodeView() {
	this.base = CGProcess;
	this.base(3);
	this.RefreshNodeView = true;
};

CGProcessFocusNodeView.prototype = new CGProcess;
CGProcessFocusNodeView.constructor = CGProcessFocusNodeView;

CGProcessFocusNodeView.prototype.step_1 = function () {

	if (this.DOMNode.getControlInfo == null) {
		this.terminate();
		return;
	}

	var TimeStamp = this.DOMNode.getControlInfo().TimeStamp;
	this.ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, this.DOMNode.IdView);

	if (!this.ViewNode) {
		this.terminateOnFailure();
		return;
	}

	Kernel.focusNodeView(this, Account.getInstanceId(), this.Node.getId(), TimeStamp);
};

CGProcessFocusNodeView.prototype.step_2 = function () {
	var jsonData = Ext.util.JSON.decode(this.data);

	if (jsonData.node != null && this.RefreshNodeView) {
		var Process = new CGProcessShowNode();
		Process.Id = this.ViewNode.getTarget().getId();
		Process.Mode = this.ViewNode.getDOM().getControlInfo().Templates.Refresh;
		Process.ViewNode = this.ViewNode;
		Process.ActivateNode = false;
		Process.ReturnProcess = this;
		Process.execute();
		return;
	}

	this.execute();
};

CGProcessFocusNodeView.prototype.step_3 = function () {
	var jsonData = Ext.util.JSON.decode(this.data);
	var DOMNode = this.ViewNode.getDOM();

	DOMNode.setObservers(jsonData.observers);

	var Process = new CGProcessRefreshHelperObservers();
	Process.Observers = jsonData.observers;
	Process.execute();

	State.CurrentView = this.ViewNode;

	this.terminate();
};

//----------------------------------------------------------------------
// Blur node view
//----------------------------------------------------------------------
function CGProcessBlurNodeView() {
	this.base = CGProcess;
	this.base(2);
	this.RefreshNodeView = true;
};

CGProcessBlurNodeView.prototype = new CGProcess;
CGProcessBlurNodeView.constructor = CGProcessBlurNodeView;

CGProcessBlurNodeView.prototype.step_1 = function () {
	var TimeStamp = this.DOMNode.getControlInfo().TimeStamp;

	this.ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, this.DOMNode.IdView);

	if (!this.ViewNode) {
		this.terminateOnFailure();
		return;
	}

	Kernel.blurNodeView(this, Account.getInstanceId(), this.Node.getId(), TimeStamp);
};

CGProcessBlurNodeView.prototype.step_2 = function () {
	var jsonData = Ext.util.JSON.decode(this.data);
	var DOMNode = this.ViewNode.getDOM();
	DOMNode.setObservers(jsonData.observers);
	this.terminate();
};

//----------------------------------------------------------------------
// Focus node field
//----------------------------------------------------------------------
function CGProcessFocusNodeField() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessFocusNodeField.prototype = new CGAction;
CGProcessFocusNodeField.constructor = CGProcessFocusNodeField;

CGProcessFocusNodeField.prototype.step_1 = function () {
	var DOMNode = this.DOMField.up(CSS_NODE);
	var ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMNode.IdView);

	if (ViewNode != State.CurrentView) {
		var Process = new CGProcessFocusNodeView();
		Process.Node = this.Node;
		Process.DOMNode = DOMNode;
		Process.ReturnProcess = this;
		Process.RefreshNodeView = false;
		Process.execute();
	}
	else this.execute();
};

CGProcessFocusNodeField.prototype.step_2 = function () {
	Kernel.focusNodeField(this, Account.getInstanceId(), this.Node.getId(), this.DOMField.getPath(true));
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Save node attribute
//----------------------------------------------------------------------
function CGProcessSaveNodeAttribute() {
	this.base = CGProcess;
	this.base(2);
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGProcessSaveNodeAttribute.prototype = new CGAction;
CGProcessSaveNodeAttribute.constructor = CGProcessSaveNodeAttribute;

CGProcessSaveNodeAttribute.prototype.step_1 = function () {
	Kernel.saveNodeAttribute(this, Account.getInstanceId(), this.Node.getId(), this.Data);
};

CGProcessSaveNodeAttribute.prototype.step_2 = function () {
	var ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, this.DOMNode.IdView);

	if (!ViewNode) {
		this.terminateOnSuccess();
		return;
	}

	var DOMNode = ViewNode.getDOM();
	if (DOMNode.setDirty) DOMNode.setDirty(false);
	// Disabled to reduce number of collection refresh -> this.addRefreshTask(RefreshTaskType.References, this.Node);
	EventManager.notify(EventManager.SAVE_NODE, {"Node": this.Node, "DOMNode": DOMNode});

	var process = new CGProcessRefreshNodeState();
	process.nodeId = this.Node.getId();
	process.execute();

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Show link node
//----------------------------------------------------------------------
function CGProcessShowLinkNode() {
	this.base = CGProcess;
	this.base(3);
};

CGProcessShowLinkNode.prototype = new CGProcess;
CGProcessShowLinkNode.constructor = CGProcessShowLinkNode;

CGProcessShowLinkNode.prototype.step_1 = function () {
	var ActionShowNode = new CGActionShowNode();
	ActionShowNode.Id = this.IdLink;
	ActionShowNode.ReturnProcess = this;
	ActionShowNode.Mode = this.Mode;
	ActionShowNode.execute();
};

CGProcessShowLinkNode.prototype.step_2 = function () {
	window.setTimeout(this.execute.bind(this), 250);
};

CGProcessShowLinkNode.prototype.step_3 = function () {
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.IdLink);
	var Node = NodesCache.get(this.IdNode);

	if (Node) {
		State.LinkNode = {IdLink: this.IdLink, IdNode: this.IdNode};
		ViewNode.getDOM().showBackLinkCommand(this.IdNode);
	}

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Update Node Location
//----------------------------------------------------------------------
function CGProcessUpdateNodeLocation() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessUpdateNodeLocation.prototype = new CGProcess;
CGProcessUpdateNodeLocation.constructor = CGProcessUpdateNodeLocation;

CGProcessUpdateNodeLocation.prototype.step_1 = function () {
	if (this.Id == null || this.Location == null)
		this.terminate();

	Kernel.updateNodeLocation(this, this.Id, this.Location);
};

//----------------------------------------------------------------------
// Clean Node Location
//----------------------------------------------------------------------
function CGProcessCleanNodeLocation() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessCleanNodeLocation.prototype = new CGProcess;
CGProcessCleanNodeLocation.constructor = CGProcessCleanNodeLocation;

CGProcessCleanNodeLocation.prototype.step_1 = function () {
	if (this.Id == null)
		this.terminate();

	Kernel.cleanNodeLocation(this, this.Id);
};


//----------------------------------------------------------------------
// Show node revisions
//----------------------------------------------------------------------
function CGProcessShowNodeRevisions() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessShowNodeRevisions.prototype = new CGProcess;
CGProcessShowNodeRevisions.constructor = CGProcessShowNodeRevisions;

CGProcessShowNodeRevisions.prototype.atShowItem = function (ListViewer, Item) {
	var ActiveTab = null;
	var ListState = ListViewer.getState();
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Item.idNode);

	if (ViewNode) ActiveTab = ViewNode.getDOM().getActiveTab();

	if (ListState.CurrentPage == 1 && Item.position == 0) CommandListener.dispatchCommand("shownoderevision(," + Item.idNode + "," + this.Template + (ActiveTab ? "," + ActiveTab : "") + ")");
	else CommandListener.dispatchCommand("shownoderevision(" + Item.id + "," + Item.idNode + "," + this.Template + (ActiveTab ? "," + ActiveTab : "") + ")");
};

CGProcessShowNodeRevisions.prototype.atBoundItem = function (ListViewer, Item) {
	var ListState = ListViewer.getState();
	var label = "";

	if (ListState.CurrentPage == 1 && Item.position == 0) label = Lang.ViewerHelperRevisionList.CurrentRevision;
	else label = Lang.ViewerHelperRevisionList.RevisionAt + getFormattedDateTime(parseServerDate(Item.label), Context.Config.Language, false, false);

	Item.label = label;
};

CGProcessShowNodeRevisions.prototype.step_1 = function () {
	var Process = new CGProcessLoadHelperRevisionListViewer();
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessShowNodeRevisions.prototype.step_2 = function () {
	var Options = new Object();
	var helper = ViewerSidebar.getHelper(Helper.REVISIONLIST);
	var DOMLayer = helper.getListViewerLayer();

	Options.Editable = false;
	Options.itemsPerPage = 8;
	Options.selfScroller = true;
	Options.DataSource = new Object();
	Options.DataSource.Remote = true;
	Options.Templates = new Object();
	Options.Templates.Item = HtmlUtil.encode(AppTemplate.ViewerHelperRevisionListItem);
	Options.Templates.NoItems = "&lt;div class='noitems'&gt;" + Lang.ViewerHelperRevisionList.NoRevisions + "&lt;/div&gt;";
	Options.Templates.CountItems = "\#\{count\} " + Lang.ViewerHelperRevisionList.Revisions;

	var ListViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
	ListViewer.setDataSourceUrls(Kernel.getNodeRevisionItemsLink(this.Id), null);
	ListViewer.setWizardLayer(null);
	ListViewer.onShowItem = CGProcessShowNodeRevisions.prototype.atShowItem.bind(this);
	ListViewer.onBoundItem = CGProcessShowNodeRevisions.prototype.atBoundItem.bind(this);
	ListViewer.render(DOMLayer.id);

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Show node revision
//----------------------------------------------------------------------
function CGProcessShowNodeRevision() {
	this.base = CGProcess;
	this.base(3);
};

CGProcessShowNodeRevision.prototype = new CGProcess;
CGProcessShowNodeRevision.constructor = CGProcessShowNodeRevision;

CGProcessShowNodeRevision.prototype.atTabActivated = function () {
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.IdNode);
	var Process = new CGProcessShowNodeRevision();
	Process.Id = this.Id;
	Process.IdNode = this.IdNode;
	Process.Template = this.Template;
	Process.ActiveTab = ViewNode.getDOM().getActiveTab();
	Process.execute();
};

CGProcessShowNodeRevision.prototype.step_1 = function () {
	if (this.Id == null || this.Id == "") Kernel.loadCurrentNodeRevision(this, this.IdNode, this.Template, this.ActiveTab);
	else Kernel.loadNodeRevision(this, this.Id, this.IdNode, this.Template, this.ActiveTab);
};

CGProcessShowNodeRevision.prototype.step_2 = function () {
	var Node = new CGNode();
	Node.unserialize(this.data);

	var Process = new CGProcessShowNode();
	Process.ActivateNode = true;
	Process.Node = Node;
	Process.RevisionId = this.Id;
	Process.Mode = this.Template + "&revision=" + this.Id;
	Process.DOMViewActiveTab = this.ActiveTab ? this.ActiveTab : null;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessShowNodeRevision.prototype.step_3 = function () {
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.IdNode);
	var DOMNode = ViewNode.getDOM();

	DOMNode.onTabActivated = CGProcessShowNodeRevision.prototype.atTabActivated.bind(this);

	var Process = new CGProcessLoadHelperRevisionListViewer();
	Process.ReturnProcess = this;
	Process.execute();
	this.terminate();
};

//----------------------------------------------------------------------
// Sign node document
//----------------------------------------------------------------------
function CGProcessSignNodeDocument() {
	this.base = CGProcess;
	this.base(5);
	this.undoSignature = false;
};

CGProcessSignNodeDocument.prototype = new CGProcess;
CGProcessSignNodeDocument.constructor = CGProcessSignNodeDocument;

CGProcessSignNodeDocument.prototype.onFailure = function (sResponse) {
	this.terminateOnFailure(sResponse);
};

CGProcessSignNodeDocument.prototype.step_1 = function () {
	var reason = "", location = "";
	var signer = Desktop.getDigitalSignatureApplication();
	var process = this;

	signer.signText("getcertificate_" + Math.random(), function(signature) {
		Kernel.prepareNodeDocumentSignature(process, process.Id, process.CodeSignature, signature, reason, location);
	}, function(code, message) {
		Desktop.reportError(message);
	});
};

CGProcessSignNodeDocument.prototype.checkOption = function (ButtonResult) {
	if (ButtonResult == BUTTON_RESULT_YES) {
		this.execute();
		return;
	}

	this.undoSignature = true;
	this.gotoStep(4);
};

CGProcessSignNodeDocument.prototype.step_2 = function () {
	this.signatureField = Ext.util.JSON.decode(this.data);
	Ext.MessageBox.confirm(Lang.ViewNode.DialogSignNode.Title, Lang.ViewNode.DialogSignNode.Description, CGProcessSignNodeDocument.prototype.checkOption.bind(this));
};

CGProcessSignNodeDocument.prototype.step_3 = function () {
	var signer = Desktop.getDigitalSignatureApplication();
	var process = this;

	signer.signTextWithCertificate(this.signatureField.hash, this.signatureField.certificateSN, function(signature, certificate) {
		Kernel.stampNodeDocumentSignature(process, process.Id, process.CodeSignature, process.signatureField.id, signature);
	}, function(code, message) {
		Desktop.reportError(message);
	});
};

CGProcessSignNodeDocument.prototype.step_4 = function () {
	if (this.undoSignature)
		Kernel.deleteNodeDocumentSignature(this, this.Id, this.CodeSignature);
	else
		this.execute();
};

CGProcessSignNodeDocument.prototype.step_5 = function () {
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Show node attachment
//----------------------------------------------------------------------
function CGProcessShowNodeAttachment() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessShowNodeAttachment.prototype = new CGProcess;
CGProcessShowNodeAttachment.constructor = CGProcessReplaceNodeAttachment;

CGProcessShowNodeAttachment.prototype.step_1 = function () {
	Kernel.loadNodeType(this, this.Id);
};

CGProcessShowNodeAttachment.prototype.step_2 = function () {
	var Behaviour = Extension.getDefinitionBehaviour(this.data);

	if ((!Behaviour) || (!Behaviour.ShowNode) || (!Behaviour.ShowNode.Templates) || (!Behaviour.ShowNode.Templates.View)) {
		Desktop.hideReports();
		this.terminate();
		return;
	}

	CommandListener.dispatchCommand("shownode(" + this.Id + "," + Behaviour.ShowNode.Templates.View + ")");

	this.terminate();
};

//----------------------------------------------------------------------
// Replace node attachment
//----------------------------------------------------------------------
function CGProcessReplaceNodeAttachment() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessReplaceNodeAttachment.prototype = new CGProcess;
CGProcessReplaceNodeAttachment.constructor = CGProcessReplaceNodeAttachment;

CGProcessReplaceNodeAttachment.prototype.step_1 = function () {
	Kernel.loadNodeType(this, this.Id);
};

CGProcessReplaceNodeAttachment.prototype.step_2 = function () {
	var Behaviour = Extension.getDefinitionBehaviour(this.data);

	if ((!Behaviour) || (!Behaviour.ShowNode) || (!Behaviour.ShowNode.Templates) || (!Behaviour.ShowNode.Templates.Edit)) {
		Desktop.hideReports();
		this.terminate();
		return;
	}

	CommandListener.dispatchCommand("shownode(" + this.Id + "," + Behaviour.ShowNode.Templates.Edit + ")");

	this.terminate();
};

//----------------------------------------------------------------------
// Refresh node state
//----------------------------------------------------------------------
function CGProcessRefreshNodeState() {
	this.base = CGProcess;
	this.base(4);
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGProcessRefreshNodeState.prototype = new CGAction;
CGProcessRefreshNodeState.constructor = CGProcessRefreshNodeState;

CGProcessRefreshNodeState.prototype.applyNodeFlags = function (DOMView, aFlags) {
	for (var i = 0; i < aFlags.length; i++) {
		var flag = aFlags[i];
		if (flag == "READ_ONLY") ;
		else if (flag == "INVALID") ;
	}
};

CGProcessRefreshNodeState.prototype.resetState = function (DOMView) {
	this.resetFieldsState(DOMView);
	this.resetViewsState(DOMView);
	this.resetLinksState(DOMView);
	this.resetOperationsState(DOMView);
};

CGProcessRefreshNodeState.prototype.resetFieldsState = function (DOMView) {
	var DOMFields = State.NodesStates[this.nodeId].fields;
	for (var code in DOMFields) {
		if (isFunction(DOMFields[code])) continue;
		var DOMField = DOMView.getField(code);
		if (DOMField != null) {
			DOMField.unLock();
			DOMField.show();
		}
	}
};

CGProcessRefreshNodeState.prototype.resetViewsState = function (DOMView) {
	var DOMViews = State.NodesStates[this.nodeId].views;
	for (var code in DOMViews) {
		if (isFunction(DOMViews[code])) continue;
		DOMView.showTab(code);
	}
};

CGProcessRefreshNodeState.prototype.resetLinksState = function (DOMView) {
	var DOMLinks = State.NodesStates[this.nodeId].links;
	for (var code in DOMLinks) {
		if (isFunction(DOMLinks[code])) continue;
		DOMView.showLink(code);
	}
};

CGProcessRefreshNodeState.prototype.resetOperationsState = function (DOMView) {
	var DOMOperations = State.NodesStates[this.nodeId].operations;
	for (var code in DOMOperations) {
		if (isFunction(DOMOperations[code])) continue;
		DOMView.showOperation(code);
		DOMView.enableOperation(code);
	}
};

CGProcessRefreshNodeState.prototype.applyFlags = function (DOMView) {
	this.applyNodeFlags(DOMView, this.state.flags);
	this.applyNodeFieldsFlags(DOMView, this.state.fieldsFlags);
	this.applyNodeViewsFlags(DOMView, this.state.viewsFlags);
	this.applyNodeLinkFlags(DOMView, this.state.linksFlags);
	this.applyNodeOperationsFlags(DOMView, this.state.operationsFlags);
};

CGProcessRefreshNodeState.prototype.applyNodeFieldsFlags = function (DOMView, aFlags) {

	if (!DOMView.getField) return;

	for (var code in aFlags) {
		if (isFunction(aFlags[code])) continue;
		var aFieldFlags = aFlags[code];
		var DOMField = DOMView.getField(code);

		State.NodesStates[this.nodeId].fields[code] = code;

		if (DOMField != null) {
			for (var j = 0; j < aFieldFlags.length; j++) {
				var flag = aFieldFlags[j];
				if (flag == "REQUIRED") ;
				else if (flag == "READ_ONLY") DOMField.lock();
				else if (flag == "INVALID") ;
				else if (flag == "HIDDEN") DOMField.hide();
			}
		}
	}
};

CGProcessRefreshNodeState.prototype.applyNodeViewsFlags = function (DOMView, aFlags) {
	var tabsCodes = DOMView.getTabsCodes();

	for (var i=0; i<tabsCodes.length; i++) {
		var tabCode = tabsCodes[i];

		if (aFlags[tabCode] != null) {
			State.NodesStates[this.nodeId].views[tabCode] = tabCode;

			for (var j = 0; j < aFlags[tabCode].length; j++) {
				var flag = aFlags[tabCode][j];
				if (flag == "HIDDEN") DOMView.hideTab(tabCode);
				else DOMView.showTab(tabCode);
			}
		}
		else DOMView.showTab(tabCode);
	}
	
};

CGProcessRefreshNodeState.prototype.applyNodeLinkFlags = function (DOMView, aFlags) {
	for (var code in aFlags) {
		if (isFunction(aFlags[code])) continue;
		var aLinkFlags = aFlags[code];

		State.NodesStates[this.nodeId].links[code] = code;

		for (var j = 0; j < aLinkFlags.length; j++) {
			var flag = aLinkFlags[j];
			if (flag == "HIDDEN") DOMView.hideLink(code);
		}
	}
};

CGProcessRefreshNodeState.prototype.applyNodeOperationsFlags = function (DOMView, aFlags) {
	for (var code in aFlags) {
		if (isFunction(aFlags[code])) continue;
		var aOperationFlags = aFlags[code];

		State.NodesStates[this.nodeId].operations[code] = code;

		for (var j = 0; j < aOperationFlags.length; j++) {
			var flag = aOperationFlags[j];
			if (flag == "HIDDEN") DOMView.hideOperation(code);
			else if (flag == "DISABLED") DOMView.disableOperation(code);
		}
	}
};

CGProcessRefreshNodeState.prototype.step_1 = function () {

	if (this.state != null) {
		this.gotoStep(3);
		return;
	}

	Kernel.loadNodeState(this, this.nodeId);
};

CGProcessRefreshNodeState.prototype.step_2 = function () {
	this.state = Ext.util.JSON.decode(this.data);
	this.execute();
};

CGProcessRefreshNodeState.prototype.step_3 = function () {
	var aViews = Desktop.Main.Center.Body.getViews(VIEW_NODE, VIEW_NODE_TYPE_NODE, this.nodeId);

	if (State.NodesStates[this.nodeId] == null)
		State.NodesStates[this.nodeId] = { fields: new Array(), views: new Array(), operations: new Array(), links: new Array(), date: this.state.date };

	for (var i = 0; i < aViews.length; i++) {
		var DOMView = aViews[i].getDOM();
		this.resetState(DOMView);
		this.applyFlags(DOMView);
	}

	this.loadMainNode(this.nodeId);
};

CGProcessRefreshNodeState.prototype.step_4 = function () {

	if (this.data == "null") {
		this.setMainNode(this.nodeId, this.data);
		this.terminateOnSuccess();
		return;
	}

	var mainNode = new CGNode();
	mainNode.unserialize(this.data);
	this.setMainNode(this.nodeId, this.data);

	var process = new CGProcessRefreshNodeState();
	process.nodeId = mainNode.getId();
	process.execute();

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Load node context
//----------------------------------------------------------------------
function CGProcessLoadNodeContext() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessLoadNodeContext.prototype = new CGProcess;
CGProcessLoadNodeContext.constructor = CGProcessLoadNodeContext;

CGProcessLoadNodeContext.prototype.step_1 = function () {
	Kernel.loadNodeContext(this, this.Id);
};

CGProcessLoadNodeContext.prototype.step_2 = function () {
	if (this.onComplete) this.onComplete(this.data);
	this.terminate();
};

CGDialog = function (sName) {
  this.sName = sName;
  this.layer = null;
  this.dialog = null;
  this.onAccept = null;
  this.onCancel = null;
};

//------------------------------------------------------------------
CGDialog.prototype.initRequiredFields = function () {
  var extRequiredFieldList, extLayer;

  if (!this.layer) return;

  extLayer = Ext.get(this.layer);
  extRequiredFieldList = extLayer.select('.outfield.required .outtitle');
  extRequiredFieldList.each(function (extRequiredField) {
    extRequiredField.dom.innerHTML = "<div>" + extRequiredField.dom.innerHTML + "<span class='required'>&nbsp;</span></div>";
  });
};

//------------------------------------------------------------------
CGDialog.prototype.initDialog = function () {
  if (!this.layer) return;

  this.dialog = new Ext.LayoutDialog(this.layer, {
    modal: true, shadow: true, minWidth: 300, minHeight: 300, closable: false,
    center: { autoScroll: true }
  });

  this.dialog.addKeyListener(27, this.atCancel, this);
  this.dialog.addButton(Lang.Buttons.Accept, this.atAccept, this);
  this.dialog.addButton(Lang.Buttons.Cancel, this.atCancel, this);

  var layout = this.dialog.getLayout();
  layout.beginUpdate();
  layout.add('center', new Ext.ContentPanel(this.sName + ".center"));
  layout.endUpdate();
};

//------------------------------------------------------------------
CGDialog.prototype.show = function () {
  var DOMStatus = $(this.sName + ".status");
  var extLayout = Ext.get(this.sName);
  var extInput;

  if (this.dialog == null) return;
  if (!DOMStatus) return;
  if (!extLayout) return;

  DOMStatus.style.display = "none";
  this.dialog.show();

  extInput = extLayout.select(HTML_INPUT).first();
  if (extInput) extInput.dom.focus();
};

//------------------------------------------------------------------
CGDialog.prototype.hide = function () {
  if (this.dialog == null) return;
  this.dialog.hide();
};

//------------------------------------------------------------------
CGDialog.prototype.destroy = function () {
  if (this.dialog && this.dialog.destroy) this.dialog.destroy(true);
};

//------------------------------------------------------------------
CGDialog.prototype.check = function () {
  var sMessage = EMPTY;
  return (sMessage == EMPTY);
};

//------------------------------------------------------------------
CGDialog.prototype.showStatus = function (sMessage) {
  var extStatus = Ext.get(this.sName + ".status");
  var extLayout = Ext.get(this.sName);

  if (!extStatus) return;

  var extTop = extStatus.select(".x-box-tc").first();
  var extMiddle = extStatus.select(".x-box-mc").first();
  var extBottom = extStatus.select(".x-box-bc").first();
  var extTitle = extStatus.select(".title").first();
  var extSummary = extStatus.select(".summary").first();

  extTitle.dom.innerHTML = Lang.Dialog.Required;
  extSummary.dom.innerHTML = sMessage;

  extStatus.dom.style.display = "block";
  if (extLayout) extStatus.dom.style.left = (extLayout.getWidth() / 2) - (extStatus.getWidth() / 2) + "px";

  if (Ext.isIE || Ext.isIE7) {
    extTop.setWidth(extMiddle.getWidth() - 9);
    extBottom.setWidth(extMiddle.getWidth() - 9);
  }

  if (extLayout) {
    extStatus.slideIn('t');
    window.setTimeout(CGDialog.prototype.hideStatus.bind(this), 3000);
  }
  else extStatus.show();
};

//------------------------------------------------------------------
CGDialog.prototype.hideStatus = function () {
  var extStatus = Ext.get(this.sName + ".status");
  if (!extStatus) return;
  extStatus.dom.style.display = "none";
};

//------------------------------------------------------------------
CGDialog.prototype.showReport = function (sReport) {
  var extReport = Ext.get(this.sName + ".report");
  if (!extReport) return;
  extReport.dom.style.display = "block";
  extReport.dom.innerHTML = sReport;
};

//==================================================================
CGDialog.prototype.atAccept = function () {
  if (!this.check()) return;
  this.hide();
  if (this.onAccept) this.onAccept();
};

//==================================================================
CGDialog.prototype.atCancel = function () {
  this.hide();
  this.destroy();
  if (this.onCancel) this.onCancel();
};

CGDialogNodeViewList = function () {
  this.base = CGDialog;
  this.base("dlgNodeViewList");
};

CGDialogNodeViewList.prototype = new CGDialog;

CGDialogNodeViewList.prototype.init = function () {
};

//------------------------------------------------------------------
CGDialogNodeViewList.prototype.show = function () {
};

//------------------------------------------------------------------
CGDialogNodeViewList.prototype.hide = function () {
};

//------------------------------------------------------------------
CGDialogNodeViewList.prototype.destroy = function () {
};

//------------------------------------------------------------------
CGDialogNodeViewList.prototype.refresh = function () {
  if (!this.Target.NodeViews) return false;
  if (!this.Target.Node) return false;
  if (!this.Target.Menu) return false;

  this.Target.Menu.removeAll();

  var sCheckedNodeView = (State.View) ? State.View : this.Target.NodeViews[DEFAULT].Name;
  for (var Index in this.Target.NodeViews) {
    if (isFunction(this.Target.NodeViews[Index])) continue;
    var NodeView = this.Target.NodeViews[Index];
    var oCheckItem = new Ext.menu.CheckItem({
      name: NodeView.Name,
      text: NodeView.Caption,
      checked: (NodeView.Name == sCheckedNodeView) ? true : false,
      group: 'viewmenugroup',
      handler: CGDialogNodeViewList.prototype.atItemClick.bind(this)
    });
    oCheckItem.command = "setnodeview(" + this.Target.Node.getId() + "," + NodeView.Name + ")";
    this.Target.Menu.add(oCheckItem);
  }
};

//------------------------------------------------------------------
CGDialogNodeViewList.prototype.check = function () {
};

//==================================================================
CGDialogNodeViewList.prototype.atItemClick = function (Item, EventLaunched) {
  CommandListener.dispatchCommand(Item.command);
  if (EventLaunched) Event.stop(EventLaunched);
};

//==================================================================
CGDialogNodeViewList.prototype.atAccept = function () {
  if (this.onAccept) this.onAccept();
};

//==================================================================
CGDialogNodeViewList.prototype.atCancel = function () {
  if (this.onCancel) this.onCancel();
};

CGDialogSortNodesBy = function () {
  this.base = CGDialog;
  this.base("dlgSortNodesBy");
};

//------------------------------------------------------------------
CGDialogSortNodesBy.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogSortNodesBy.prototype.init = function () {
};

//------------------------------------------------------------------
CGDialogSortNodesBy.prototype.show = function () {
};

//------------------------------------------------------------------
CGDialogSortNodesBy.prototype.hide = function () {
};

//------------------------------------------------------------------
CGDialogSortNodesBy.prototype.destroy = function () {
};

//------------------------------------------------------------------
CGDialogSortNodesBy.prototype.refresh = function () {
  if (!this.Target.Descriptors) return false;
  if (!this.Target.Node) return false;
  if (!this.Target.Menu) return false;

  this.Target.Menu.removeAll();

  var sCheckedDescriptor = this.Target.Descriptors[DEFAULT].Name;
  for (var Index in this.Target.Descriptors) {
    if (isFunction(this.Target.Descriptors[Index])) continue;
    var Descriptor = this.Target.Descriptors[Index];
    var oCheckItem = new Ext.menu.CheckItem({
      name: Descriptor.Name,
      text: Descriptor.Caption,
      checked: (Descriptor.Name == sCheckedDescriptor) ? true : false,
      group: 'sortbygroup',
      handler: CGDialogSortNodesBy.prototype.atItemClick.bind(this)
    });
    sCommand = "sortnodesby(" + Descriptor.Name + ")";
    oCheckItem.command = sCommand;
    this.Target.Menu.add(oCheckItem);
  }

};

//------------------------------------------------------------------
CGDialogSortNodesBy.prototype.check = function () {
};

//==================================================================
CGDialogSortNodesBy.prototype.atItemClick = function (Item, EventLaunched) {
  CommandListener.dispatchCommand(Item.command);
  if (EventLaunched) Event.stop(EventLaunched);
};

//==================================================================
CGDialogSortNodesBy.prototype.atAccept = function () {
  if (this.onAccept) this.onAccept();
};

//==================================================================
CGDialogSortNodesBy.prototype.atCancel = function () {
  if (this.onCancel) this.onCancel();
};

var aListViewerTemplates = new Array();
aListViewerTemplates["es"] = new Array();
aListViewerTemplates["es"]["MAIN"] = "<div class='label'></div><div class='summary'><ul class='filters'></ul><div style='float:right;'><div class='count'></div><div class='folder list'><div class='selector'><select style='width:200px;margin-top:-2px;'></select></div></div></div></div><table class='toolbar' width='100%'><tr><td class='edition' width='18px'><input type='checkbox' class='selectall'/></td><td width='100%'><div class='add list'><div class='edition selector'>Añadir&nbsp;<select style='width:200px;margin-top:-2px;font-size:14px;'></select><a href='javascript:void(null)'></a></div><a class='edition delete' style='display:none;'>Eliminar elementos seleccionados</a></div></td></tr></table><div class='layer'><ul class='items'></ul><ul class='operations'></ul><div class='lwloading'><p>Cargando...</p></div></div><div class='paging'><a class='first'>primero</a><a class='previous'>anterior</a><a class='next'>siguiente</a><a class='last'>último</a></div>";
aListViewerTemplates["es"]["ITEM"] = "<li class='item'><table width='100%'><tr><td width='18px' class='edition'><input type='checkbox' class='selector'/></td><td width='100%'><a class='content' href='javascript:void(null)'>#{content}</a></td><td><img class='locked' src='#{imagesPath}/s.gif' title='el objeto no se puede eliminar'/><a class='delete edition' href='javascript:void(null)'></a></td></tr></table></li>";
aListViewerTemplates["es"]["GROUP_ITEM"] = "<li class='itemgroup'><table width='100%'><tr><td width='18px' class='edition'></td><td width='100%'><div class='label'>#{label}</div></td><td></td></tr></table></li>";
aListViewerTemplates["es"]["OPERATION"] = "<li class='operation visible_#{visible}'><a href='javascript:void(null)'>#{label}</a></li>";
aListViewerTemplates["es"]["DEFAULT_ITEM_CONTENT"] = "<div class='item' style='display:none;'><div class='label'>#{label}</div><div class='description'>#{description}</div></div></div>";
aListViewerTemplates["es"]["DEFAULT_NO_ITEMS"] = "<div style='margin: 10px 0px;'>No existen elementos</div>";
aListViewerTemplates["es"]["DEFAULT_COUNT_ITEMS"] = "#{count} elementos";
aListViewerTemplates["es"]["FILTERS_MESSAGE"] = "<li style='margin-right:5px;'>Filtrando:&nbsp;</li>";
aListViewerTemplates["es"]["FILTER"] = "<li class='filter #{code}'><span>#{label}</span>&nbsp;<a class='unselect' href='javascript:void(null)' alt='quitar'></a></li>";
aListViewerTemplates["es"]["WIZARD"] = "<div class='separator'><div class='group groupby'><label>Mostrar</label><table class='filter'><tr><td class='content'><input type='text' class='value'/></td></tr><tr><td class='filtertitle'><input id='listviewerwizardbyTitle' type='checkbox'/><label for='listviewerwizardbyTitle'>filtrar solo por título</label></td></tr></table><ul class='groupby list'></ul></div><div class='group sortby'><label>Ordenar por</label><ul class='sortby list'></ul><ul class='toolbar'><li><a class='more' href='javascript:void(null)'>más</a></li></ul></div><div class='group add edition'><label>Añadir</label><ul class='add list'></ul></div></div>";
aListViewerTemplates["es"]["WIZARD_FILTER_EMPTY"] = "<span class='empty'>Introduzca el texto que desee encontrar</span>";
aListViewerTemplates["es"]["WIZARD_SORTBYLIST_SECTION"] = "<ul class='section'></ul>";
aListViewerTemplates["es"]["WIZARD_SORTBYLIST_SECTION_OPTIONS"] = "<div class='sortby options'>&nbsp;<a class='unselect' href='javascript:void(null)' alt='quitar'></a></div>";
aListViewerTemplates["es"]["WIZARD_GROUPBYLIST_ITEM"] = "<li class='#{code}'><div class='label'>#{label}</div><div class='content'><select class='selector'><option value='all'></option></select></div></li>";
aListViewerTemplates["es"]["WIZARD_SORTBYLIST_ITEM"] = "<li class='#{code}'><a class='label' href='javascript:void(null)'>#{label}</a></li>";
aListViewerTemplates["es"]["WIZARD_ADDLIST_ITEM"] = "<li><a class='#{code}' href='#{command}'>#{label}</a><div class='description'>#{description}</div></li>";
aListViewerTemplates["en"] = new Array();
aListViewerTemplates["en"]["MAIN"] = "<div class='label'></div><div class='summary'><ul class='filters'></ul><div style='float:right;'><div class='count'></div><div class='folder list'><div class='selector'><select style='width:200px;margin-top:-2px;'></select></div></div></div></div><table class='toolbar' width='100%'><tr><td class='edition' width='18px'><input type='checkbox' class='selectall'/></td><td width='100%'><div class='add list'><div class='edition selector'>Add&nbsp;<select style='width:200px;margin-top:-2px;font-size:14px;'></select><a href='javascript:void(null)'></a></div><a class='edition delete' style='display:none;'>Delete selected elements</a></div></td></tr></table><div class='layer'><ul class='items'></ul><ul class='operations'></ul><div class='lwloading'><p>Loading…</p></div></div><div class='paging'><a class='first'>first</a><a class='previous'>previous</a><a class='next'>next</a><a class='last'>last</a></div>";
aListViewerTemplates["en"]["ITEM"] = "<li class='item'><table width='100%'><tr><td width='18px' class='edition'><input type='checkbox' class='selector'/></td><td width='100%'><a class='content' href='javascript:void(null)'>#{content}</a></td><td><img class='locked' src='#{imagesPath}/s.gif' title='could not delete this object'/><a class='delete edition' href='javascript:void(null)'></a></td></tr></table></li>";
aListViewerTemplates["en"]["GROUP_ITEM"] = "<li class='itemgroup'><table width='100%'><tr><td width='18px' class='edition'></td><td width='100%'><div class='label'>#{label}</div></td><td></td></tr></table></li>";
aListViewerTemplates["en"]["OPERATION"] = "<li class='operation visible_#{visible}'><a href='javascript:void(null)'>#{label}</a></li>";
aListViewerTemplates["en"]["DEFAULT_ITEM_CONTENT"] = "<div class='item' style='display:none;'><div class='label'>#{label}</div><div class='description'>#{description}</div></div></div>";
aListViewerTemplates["en"]["DEFAULT_NO_ITEMS"] = "<div style='margin: 10px 0px;'>No elements</div>";
aListViewerTemplates["en"]["DEFAULT_COUNT_ITEMS"] = "#{count} elements";
aListViewerTemplates["en"]["FILTERS_MESSAGE"] = "<li style='margin-right:5px;'>Filtering:&nbsp;</li>";
aListViewerTemplates["en"]["FILTER"] = "<li class='filter #{code}'><span>#{label}</span>&nbsp;<a class='unselect' href='javascript:void(null)' alt='delete'></a></li>";
aListViewerTemplates["en"]["WIZARD"] = "<div class='separator'><div class='group groupby'><label>Show</label><table class='filter'><tr><td class='content'><input type='text' class='value'/></td></tr><tr><td class='filtertitle'><input id='listviewerwizardbyTitle' type='checkbox'/><label for='listviewerwizardbyTitle'>filter only by title</label></td></tr></table><ul class='groupby list'></ul></div><div class='group sortby'><label>Sort by</label><ul class='sortby list'></ul><ul class='toolbar'><li><a class='more' href='javascript:void(null)'>more</a></li></ul></div><div class='group add edition'><label>Add</label><ul class='add list'></ul></div></div>";
aListViewerTemplates["en"]["WIZARD_FILTER_EMPTY"] = "<span class='empty'>Enter the text you are looking for</span>";
aListViewerTemplates["en"]["WIZARD_SORTBYLIST_SECTION"] = "<ul class='section'></ul>";
aListViewerTemplates["en"]["WIZARD_SORTBYLIST_SECTION_OPTIONS"] = "<div class='sortby options'>&nbsp;<a class='unselect' href='javascript:void(null)' alt='delete'></a></div>";
aListViewerTemplates["en"]["WIZARD_GROUPBYLIST_ITEM"] = "<li class='#{code}'><div class='label'>#{label}</div><div class='content'><select class='selector'><option value='all'></option></select></div></li>";
aListViewerTemplates["en"]["WIZARD_SORTBYLIST_ITEM"] = "<li class='#{code}'><a class='label' href='javascript:void(null)'>#{label}</a></li>";
aListViewerTemplates["en"]["WIZARD_ADDLIST_ITEM"] = "<li><a class='#{code}' href='#{command}'>#{label}</a><div class='description'>#{description}</div></li>";

// IMPORTANT: escape and utf8Encode functions are needed by this library

var LIST_VIEWER_QUERY_SEPARATOR = ":";
var LIST_VIEWER_QUERIES_SEPARATOR = "_f_";
var MODE_ASCENDANT = "asc";
var MODE_DESCENDANT = "desc";
var CLASS_ASCENDANT = "ascendant";
var CLASS_DESCENDANT = "descendant";
var CLASS_SELECTED = "selected";
var CLASS_LISTVIEWER = "listviewer";
var CLASS_LISTVIEWER_WIZARD = "listviewer wizard";
var CLASS_DISABLED = "disabled";
var CLASS_VISIBLE = "visible";
var CLASS_EDITABLE = 'editable';
var CLASS_READONLY = "readonly";
var CLASS_ACTIVE = "active";
var LIST_ADD = "add";
var LIST_FOLDER = "folder";
var LIST_SORTBY = "sortby";
var LIST_GROUPBY = "groupby";
var CSS_SELECTED = ".selected";
var CSS_SELECT_ALL = ".selectall";
var CSS_DELETE = ".delete";
var CSS_LOCKED = ".locked";
var CSS_MORE = ".more";
var CSS_FILTER = ".filter input.value";
var CSS_FILTER_EMPTY = ".filter .empty";
var CSS_FILTER_BY_TITLE = ".filter .filtertitle input";
var CSS_ADDLIST = ".add.list";
var CSS_FOLDERLIST = ".folder.list";
var CSS_SORTBYLIST = ".sortby.list";
var CSS_SORTBYOPTIONS = ".sortby.options";
var CSS_GROUPBYLIST = ".groupby.list";
var CSS_SELECTOR = ".selector";
var CSS_UNSELECT = ".unselect";
var CSS_LIST_SECTION = ".section";
var CSS_ITEMS = ".items";
var CSS_OPERATIONS = ".operations";
var CSS_ITEM = ".item";
var CSS_ITEM_SELECTOR = ".items .item .selector";
var CSS_LOADING = ".lwloading";
var CSS_PAGING = ".paging";
var CSS_PAGING_FIRST = ".first";
var CSS_PAGING_PREVIOUS = ".previous";
var CSS_PAGING_NEXT = ".next";
var CSS_PAGING_LAST = ".last";
var CSS_CONTENT = ".content";
var CSS_GROUP = ".group";
var CSS_LABEL = ".label";
var CSS_VISIBLE = ".visible";
var CSS_SUMMARY = ".summary";
var CSS_FILTERS = ".filters";
var CSS_COUNT = ".count";
var CSS_LAYER = ".layer";
var ITEMS_PER_PAGE = 40;
var CODE_WORDS_FILTER = "__words";
var KEY_UP = 38;
var KEY_DOWN = 40;
var KEY_ENTER = 13;
var KEY_LEFT = 37;
var KEY_RIGHT = 39;
var KEY_SHIFT = 16;
var KEY_CONTROL = 17;

function isFunction(item) {
  return (typeof item == "function");
};

function listViewerHtmlDecode(input) {
  if (input == null) return null;
  var e = document.createElement('div');
  e.innerHTML = input;
  if (e.childNodes.length <= 0) return input;
  return e.childNodes[0].nodeValue;
};

function CGListViewer(Options, language, imagesPath) {
  this.Options = Options;
  this.aParameters = new Object();
  this.extFilter = null;
  this.extFilterEmpty = null;
  this.extFilterByTitle = null;
  this.iNumPages = 0;
  this.itemsPerPage = (Options.itemsPerPage) ? Options.itemsPerPage : ITEMS_PER_PAGE;
  this.initState();
  this.loading = false;
  this.initialized = false;
  this.sWizardLayer = null;
  this.sName = "";
  this.sLabel = "";
  this.language = language;
  if (aListViewerTemplates[this.language] == null) this.language = "es";
  this.items = new Array();
  this.imagesPath = imagesPath;
  this.groupByWidgets = new Array();
};

CGListViewer.prototype.setWizardLayer = function (sWizardLayer) {
  this.sWizardLayer = sWizardLayer;
};

CGListViewer.prototype.getName = function () {
  return this.sName;
};

CGListViewer.prototype.setName = function (sName) {
  this.sName = sName;
};

CGListViewer.prototype.getLabel = function () {
  return this.sLabel;
};

CGListViewer.prototype.setLabel = function (sLabel) {
  this.sLabel = sLabel;
};

CGListViewer.prototype.init = function (sViewerLayer) {

  if (this.initialized) return;
  if (sViewerLayer == null) return;

  this.extViewerLayer = Ext.get(sViewerLayer);
  this.extViewerLayer.dom.innerHTML = aListViewerTemplates[this.language]["MAIN"];
  this.extViewerLayer.addClass(CLASS_LISTVIEWER);

  if (this.sWizardLayer == null) {
    var extSummary = this.extViewerLayer.select(CSS_SUMMARY).first();
    this.sWizardLayer = Ext.id();
    new Insertion.Before(extSummary.dom, "<div id='" + this.sWizardLayer + "'></div>");
  }

  this.extWizardLayer = Ext.get(this.sWizardLayer);

  if (this.extWizardLayer != null) {
    this.extWizardLayer.dom.innerHTML = aListViewerTemplates[this.language]["WIZARD"];
    this.extWizardLayer.addClass(CLASS_LISTVIEWER_WIZARD);
  }

  this.loading = false;
  this.initialized = true;

  this.extScrollParent = null;
  if (this.Options.selfScroller) this.extScrollParent = this.extViewerLayer.down(CSS_LAYER);

  if (this.extScrollParent == null) this.extScrollParent = this.extViewerLayer.up(".x-tabs-item-body");
  if (this.extScrollParent) this.extScrollParent.addListener("scroll", this.atScroll.bind(this));
};

CGListViewer.prototype.showLoading = function () {
  if (this.extViewerLayer == null) return;
  this.extViewerLayer.select(CSS_LOADING).first().dom.style.display = "block";
  this.loading = true;
  //this.extViewerLayer.select(CSS_ITEMS).first().dom.style.display = "none";
};

CGListViewer.prototype.hideLoading = function () {
  if (this.extViewerLayer == null) return;
  this.extViewerLayer.select(CSS_LOADING).first().dom.style.display = "none";
  this.loading = false;
  //this.extViewerLayer.select(CSS_ITEMS).first().dom.style.display = "block";
};

CGListViewer.prototype.addItemsToDOMSelector = function (DOMSelector, Options) {
  for (var index in Options) {
    if (isFunction(Options[index])) continue;
    var Option = Options[index];
    var DOMOption = document.createElement('option');

    DOMOption.value = listViewerHtmlDecode(Option.Code);
    DOMOption.text = listViewerHtmlDecode(Option.Label);
    DOMOption.name = listViewerHtmlDecode(Option.Command);

    try {
      DOMSelector.add(DOMOption, null);
    }
    catch (ex) {
      DOMSelector.add(DOMOption);
    }
  }
};

CGListViewer.prototype.isItemOnSelection = function (CodeList, CodeItem) {
  if (CodeList == LIST_ADD) return false;
  return (this.State.Lists[CodeList].Items[CodeItem] != null);
};

CGListViewer.prototype.addItemOnSelection = function (CodeList, Item) {
  var AuxItem = this.State.Lists[CodeList].Items[Item.Code];

  if (AuxItem) {
    Item.Order = AuxItem.Order;
    this.State.Lists[CodeList].Items[Item.Code] = Item;
  }
  else {
    this.State.Lists[CodeList].Orders.push(Item.Code);
    Item.Order = this.State.Lists[CodeList].Orders.length - 1;
    this.State.Lists[CodeList].Items[Item.Code] = Item;
  }
};

CGListViewer.prototype.removeItemOnSelection = function (CodeList, CodeItem) {
  var sResult = this.State.Lists[CodeList].Orders.join(",");
  var iPos = sResult.indexOf(CodeItem);
  var aItems = new Array();

  if (iPos != -1) {
    if (iPos > 0) iPos = iPos - 1;
    sResult = sResult.substring(0, iPos) + sResult.substring(iPos + CodeItem.length + 1);
  }

  this.State.Lists[CodeList].Orders = (sResult.length > 0) ? sResult.split(",") : new Array();
  for (var i = 0; i < this.State.Lists[CodeList].Orders.length; i++) {
    var CodeItem = this.State.Lists[CodeList].Orders[i];
    aItems[CodeItem] = this.State.Lists[CodeList].Items[CodeItem];
    aItems[CodeItem].Order = i;
  }

  this.State.Lists[CodeList].Items = aItems;
};

CGListViewer.prototype.renderList = function (List, CodeList, ListStyle) {
  var extGroup = this.extWizardLayer.select(CSS_GROUP + "." + CodeList).first();

  if (List == null) {

    if (CodeList == LIST_FOLDER) {
      this.extFolderListSelector.dom.style.display = "none";
      return;
    }

    var extElement = extGroup;
    if (CodeList == LIST_GROUPBY) extElement = this.extWizardLayer.select(ListStyle).first();
    extElement.dom.style.display = "none";

    return;
  }

  List.bUpdate = true;
  this.updateList(List, CodeList, ListStyle, (CodeList == LIST_ADD) ? "" : ",&nbsp;");
};

CGListViewer.prototype.renderFilter = function () {
  this.extFilter = this.extWizardLayer.select(CSS_FILTER).first();
  Event.observe(this.extFilter.dom, "keyup", CGListViewer.prototype.atFilterKeyUp.bind(this));
  Event.observe(this.extFilter.dom, "change", CGListViewer.prototype.atFilterChange.bind(this));
  Event.observe(this.extFilter.dom, "focus", CGListViewer.prototype.atFilterFocus.bind(this));
  Event.observe(this.extFilter.dom, "blur", CGListViewer.prototype.atFilterBlur.bind(this));
  this.extFilterEmpty = this.extWizardLayer.select(CSS_FILTER_EMPTY).first();
  if (this.extFilterEmpty == null) {
    new Insertion.After(this.extFilter.dom, aListViewerTemplates[this.language]["WIZARD_FILTER_EMPTY"]);
    this.extFilterEmpty = this.extWizardLayer.select(CSS_FILTER_EMPTY).first();
  }
  Event.observe(this.extFilterEmpty.dom, "click", CGListViewer.prototype.atFilterEmptyClick.bind(this));
  this.extFilterByTitle = this.extWizardLayer.select(CSS_FILTER_BY_TITLE).first();
  Event.observe(this.extFilterByTitle.dom, "change", CGListViewer.prototype.atFilterByTitleChange.bind(this));
};

CGListViewer.prototype.renderPaging = function () {

  this.extPaging = this.extViewerLayer.select(CSS_PAGING).first();
  this.extFirst = this.extPaging.select(CSS_PAGING_FIRST).first();
  this.extPrevious = this.extPaging.select(CSS_PAGING_PREVIOUS).first();
  this.extNext = this.extPaging.select(CSS_PAGING_NEXT).first();
  this.extLast = this.extPaging.select(CSS_PAGING_LAST).first();

  Event.observe(this.extFirst.dom, "click", CGListViewer.prototype.atPagingFirstClick.bind(this, this.extFirst.dom));
  Event.observe(this.extPrevious.dom, "click", CGListViewer.prototype.atPagingPreviousClick.bind(this, this.extPrevious.dom));
  Event.observe(this.extNext.dom, "click", CGListViewer.prototype.atPagingNextClick.bind(this, this.extNext.dom));
  Event.observe(this.extLast.dom, "click", CGListViewer.prototype.atPagingLastClick.bind(this, this.extLast.dom));
};

CGListViewer.prototype.render = function (sViewerLayer) {

  this.init(sViewerLayer);

  if (this.Options.Editable) {
    this.extViewerLayer.addClass(CLASS_EDITABLE);
    this.extWizardLayer.addClass(CLASS_EDITABLE);
  }
  else {
    this.extViewerLayer.removeClass(CLASS_EDITABLE);
    this.extWizardLayer.removeClass(CLASS_EDITABLE);
  }

  this.extAddListSelector = this.extViewerLayer.select(CSS_ADDLIST + " " + CSS_SELECTOR + " select").first();
  Event.observe(this.extAddListSelector.dom, "change", CGListViewer.prototype.atAddItem.bind(this, this.extAddListSelector.dom));

  this.extAddListLink = this.extViewerLayer.select(CSS_ADDLIST + " " + CSS_SELECTOR + " a").first();
  Event.observe(this.extAddListLink.dom, "click", CGListViewer.prototype.atAddItem.bind(this, this.extAddListLink.dom));

  this.extFolderListSelector = this.extViewerLayer.select(CSS_FOLDERLIST + " " + CSS_SELECTOR + " select").first();
  Event.observe(this.extFolderListSelector.dom, "change", CGListViewer.prototype.atFolderClick.bind(this, this.extFolderListSelector.dom));

  this.extDeleteItems = this.extViewerLayer.select(CSS_DELETE).first();
  if (this.extDeleteItems != null) Event.observe(this.extDeleteItems.dom, "click", CGListViewer.prototype.atDeleteItems.bind(this, this.extDeleteItems.dom));

  this.extSelectAll = this.extViewerLayer.select(CSS_SELECT_ALL).first();
  if (this.extSelectAll != null) Event.observe(this.extSelectAll.dom, "click", CGListViewer.prototype.atSelectAll.bind(this, this.extSelectAll.dom));

  this.extMoreSortByList = this.extWizardLayer.select(CSS_MORE).first();
  if (this.extMoreSortByList != null) {
    Event.observe(this.extMoreSortByList.dom, "click", CGListViewer.prototype.atMoreSortByList.bind(this, this.extMoreSortByList.dom));
    this.extMoreSortByList.dom.style.display = "none";
  }

  this.renderList(this.Options.AddList, LIST_ADD, CSS_ADDLIST);
  this.renderList(this.Options.FolderList, LIST_FOLDER, CSS_FOLDERLIST);
  this.renderList(this.Options.SortByList, LIST_SORTBY, CSS_SORTBYLIST);
  this.renderList(this.Options.GroupByList, LIST_GROUPBY, CSS_GROUPBYLIST);
  this.renderFilter();
  this.renderPaging();

  CommandListener.capture(this.extViewerLayer.dom);
  if (this.extWizardLayer != null) CommandListener.capture(this.extWizardLayer.dom);

  this.applyState();
  this.load(true);
};

CGListViewer.prototype.initState = function () {
  var i;

  this.State = new Object();
  this.State.CurrentPage = 1;
  this.State.Filter = "";
  this.State.FilterTag = "";
  this.State.Lists = new Object();
  this.State.Lists[LIST_SORTBY] = new Object();
  this.State.Lists[LIST_SORTBY].Orders = new Array();
  this.State.Lists[LIST_SORTBY].Items = new Array();
  this.State.Lists[LIST_GROUPBY] = new Object();
  this.State.Lists[LIST_GROUPBY].Orders = new Array();
  this.State.Lists[LIST_GROUPBY].Items = new Array();
  this.State.Folder = (this.Options.FolderList != null && this.Options.FolderList.Selection != null) ? this.Options.FolderList.Selection : null;
  this.State.Selection = new Array();

  if (this.Options.SortByList && this.Options.SortByList.Selection) {
    for (i = 0; i < this.Options.SortByList.Selection.length; i++) {
      var CodeItem = this.Options.SortByList.Selection[i];
      this.State.Lists[LIST_SORTBY].Items[CodeItem] = {Code: CodeItem, Mode: MODE_ASCENDANT, Order: i};
    }
    this.State.Lists[LIST_SORTBY].Orders = this.Options.SortByList.Selection;

    for (i in this.Options.SortByList.Items) {
      if (isFunction(this.Options.SortByList.Items[i])) continue;
      var ItemOption = this.Options.SortByList.Items[i];
      if (this.State.Lists[LIST_SORTBY].Items[ItemOption.Code] == null) continue;
      if (ItemOption.DefaultMode) this.State.Lists[LIST_SORTBY].Items[ItemOption.Code].Mode = (ItemOption.DefaultMode.toLowerCase() == "descendant") ? MODE_DESCENDANT : MODE_ASCENDANT;
    }
  }

  if (this.Options.GroupByList && this.Options.GroupByList.Selection) {
    for (i = 0; i < this.Options.GroupByList.Selection.length; i++) {
      var aItem = this.Options.GroupByList.Selection[i];
      this.State.Lists[LIST_GROUPBY].Items[aItem[0]] = {Code: aItem[0], Value: aItem[1]};
      this.State.Lists[LIST_GROUPBY].Orders.push(aItem[0]);
    }
  }
};

CGListViewer.prototype.getState = function () {
  var extFilter;
  var Result = new Object();

  extFilter = this.extWizardLayer.select(CSS_FILTER).first();

  if (extFilter == null)
    return;

  Result.Filter = extFilter.dom.value;
  Result.FilterTag = this.State.FilterTag;
  Result.CurrentPage = this.State.CurrentPage;
  Result.Limit = this.itemsPerPage;

  Result.Sorts = new Array();
  for (var i = 0; i < this.State.Lists[LIST_SORTBY].Orders.length; i++) {
    var CodeSort = this.State.Lists[LIST_SORTBY].Orders[i];
    Result.Sorts.push(this.State.Lists[LIST_SORTBY].Items[CodeSort]);
  }

  Result.Groups = new Array();
  for (var i = 0; i < this.State.Lists[LIST_GROUPBY].Orders.length; i++) {
    var CodeGroup = this.State.Lists[LIST_GROUPBY].Orders[i];
    Result.Groups.push(this.State.Lists[LIST_GROUPBY].Items[CodeGroup]);
  }

  Result.Folder = this.State.Folder;
  Result.Selection = this.State.Selection;

  Result.toEscapeUrl = function() {
    var sorts = "";
    for (var i = 0; i < this.Sorts.length; i++) {
      var Sort = this.Sorts[i];
      if (i != 0) sorts += LIST_VIEWER_QUERIES_SEPARATOR;
      sorts += Sort.Code + LIST_VIEWER_QUERY_SEPARATOR + Sort.Mode;
    }

    var groups = "";
    for (var i = 0; i < this.Groups.length; i++) {
      var Group = this.Groups[i];
      if (i != 0) groups += LIST_VIEWER_QUERIES_SEPARATOR;
      groups += Group.Code + LIST_VIEWER_QUERY_SEPARATOR + escape(encodeURIComponent(Group.Value));
    }

    var start = (this.CurrentPage * this.Limit) - this.Limit;

    var result = "&query=" + this.Filter + "&sortsby=" + sorts + "&groupsby=" + groups + ((this.Folder != null) ? "&folder=" + this.Folder : "");
    if (this.FilterTag != null && this.FilterTag != "") result += "&tag=" + this.FilterTag;

    return result + "&start=" + start + "&limit=" + this.Limit;
  };

  return Result;
};

CGListViewer.prototype.setState = function (NewState) {
  if (NewState == null) return;

  //this.State.CurrentPage = NewState.CurrentPage;
  this.State.Filter = NewState.Filter;
  this.State.FilterTag = NewState.FilterTag;

  this.State.Lists[LIST_SORTBY].Items = new Array();
  this.State.Lists[LIST_SORTBY].Orders = new Array();
  for (var i = 0; i < NewState.Sorts.length; i++) {
    var Sort = NewState.Sorts[i];
    Sort.Order = i;
    this.State.Lists[LIST_SORTBY].Items[Sort.Code] = Sort;
    this.State.Lists[LIST_SORTBY].Orders[i] = Sort.Code;
  }
  
  this.State.Lists[LIST_GROUPBY].Items = new Array();
  this.State.Lists[LIST_GROUPBY].Orders = new Array();
  for (var i = 0; i < NewState.Groups.length; i++) {
    var Group = NewState.Groups[i];
    Group.Order = this.State.Lists[LIST_GROUPBY].Orders.length;
    this.State.Lists[LIST_GROUPBY].Items[Group.Code] = Group;
    this.State.Lists[LIST_GROUPBY].Orders[i] = Group.Code;
  }

  this.State.Folder = NewState.Folder;
  this.State.Selection = NewState.Selection;
};

CGListViewer.prototype.applyState = function () {

  this.extFilter.dom.value = this.State.Filter;
  this.extFilterEmpty.dom.style.display = (this.State.Filter.length <= 0) ? "block" : "none";
  this.extFilterByTitle.dom.checked = this.State.FilterTag != null && this.State.FilterTag == "title";

  if (this.State.Folder != null) {
    for (var i = 0; i < this.extFolderListSelector.dom.options.length; i++) {
      var DOMOption = this.extFolderListSelector.dom.options[i];
      if (DOMOption.value == this.State.Folder) DOMOption.selected = true;
    }
  }

  var extSortByList = this.extWizardLayer.select(CSS_SORTBYLIST + " li");
  extSortByList.each(function (extSortByItem) {
    this.unselectSortByItem(extSortByItem);
  }, this);

  for (var i = 0; i < this.State.Lists[LIST_SORTBY].Orders.length; i++) {
    var CodeSort = this.State.Lists[LIST_SORTBY].Orders[i];
    var Sort = this.State.Lists[LIST_SORTBY].Items[CodeSort];
    var extItem;

    if (i == 0) extItem = this.extWizardLayer.select(CSS_SORTBYLIST + " ." + Sort.Code).first();
    else {
      var extSection = this.createSortByListSection();
      extItem = extSection.select("." + Sort.Code).first();
    }

    if (extItem == null) continue;

    this.selectSortByItem(extItem);
    if (Sort.Mode == MODE_ASCENDANT) {
      extItem.addClass(CLASS_ASCENDANT);
      extItem.removeClass(CLASS_DESCENDANT);
    }
    else {
      extItem.removeClass(CLASS_ASCENDANT);
      extItem.addClass(CLASS_DESCENDANT);
    }
  }

  var extGroupByList = this.extWizardLayer.select(CSS_GROUPBYLIST + " li");
  extGroupByList.each(function (extGroupByItem) {
    this.unselectGroupByItem(extGroupByItem);
  }, this);

  var aDummyGroupsByItems = new Object();
  var aDummyGroupsByOrders = new Array();
  for (var i = 0; i < this.State.Lists[LIST_GROUPBY].Orders.length; i++) {
    var CodeGroup = this.State.Lists[LIST_GROUPBY].Orders[i];
    var Group = this.State.Lists[LIST_GROUPBY].Items[CodeGroup];
    var extItem = this.extWizardLayer.select(CSS_GROUPBYLIST + " ." + Group.Code).first();
    if (extItem == null) continue;
    this.selectGroupByItem(extItem, Group.Label);
    aDummyGroupsByItems[CodeGroup] = Group;
    aDummyGroupsByOrders.push(CodeGroup);
  }
  this.State.Lists[LIST_GROUPBY].Orders = aDummyGroupsByOrders;
  this.State.Lists[LIST_GROUPBY].Items = aDummyGroupsByItems;

  this.extDeleteItems.dom.style.display = "none";
};

CGListViewer.prototype.loadDelayed = function(bClearItems, delay) {
    var component = this;
    this.loadTimeout = window.setTimeout(function() {
        component.load(bClearItems);
    }, delay != null ? delay : 1000);
};

CGListViewer.prototype.clearDelayedTimeout = function() {
    if (this.loadTimeout == null) return;
    window.clearTimeout(this.loadTimeout);
    this.loadTimeout = null;
};

CGListViewer.prototype.load = function (bClearItems) {
  var extItems = this.extViewerLayer.select(CSS_ITEMS).first();
  var sRequestUrl = this.Options.DataSource.RequestUrl;

  if (this.onUpdateState) this.onUpdateState(this.getState());
  if (extItems == null) return;

  if (bClearItems) {
    if (this.loading) return;
    extItems.dom.innerHTML = "";
  }

  this.showLoading();

  var stateData = this.getState().toEscapeUrl();

  if (this.Options.DataSource.Remote) {
    Ext.Ajax.request({
      url: sRequestUrl,
      params: stateData,
      method: "GET",
      callback: function (sOptions, bSuccess, Response) {
        eval("var data = " + Response.responseText.replace(/\n/g, ""));
        this.loading = false;
        this.hideLoading();
        this.update(data, bClearItems);
      },
      scope: this
    });
  }
  else {
    this.loading = false;
    this.hideLoading();
    this.update(this.Options.DataSource.Items, bClearItems);
  }
};

CGListViewer.prototype.loadGroupByOptions = function (GroupBy, DOMSelectorWidget) {
	var sRequestUrl = this.Options.DataSource.RequestGroupByOptionsUrl;

	if (this.Options.DataSource.Remote) {
		Ext.Ajax.request({
			url: sRequestUrl,
			params: "query=" + this.State.Filter + "&code=" + GroupBy.Code,
			method: "GET",
			callback: function (sOptions, bSuccess, Response) {
                var Options = new Array();
				eval(Response.responseText.replace(/\n/g, ""));
				GroupBy.Options = Options;
				this.renderGroupByOptions(GroupBy, DOMSelectorWidget);
			},
			scope: this
		});
	}
};

CGListViewer.prototype.renderGroupByOptions = function(GroupBy, DOMGroupBySelectorWidget) {
	var RecordDefinition = new Ext.data.Record.create({value: 'value'}, {text: 'text'});
	var Store = DOMGroupBySelectorWidget.store;
	var Options = GroupBy.Options;
	var RecordAll = Store.getAt(0);

	Store.removeAll();
	Store.add(RecordAll);
	for (var index in Options) {
		if (isFunction(Options[index])) continue;
		var Option = Options[index];

		Store.add(new RecordDefinition({value: Option.Code, text: Option.Label}));
	}

	var height = 23*(Options.length+1);
    DOMGroupBySelectorWidget.list.setHeight(height > 305 ? 305 : height);
    DOMGroupBySelectorWidget.list.dom.style.overflowY = "auto";
};

CGListViewer.prototype.updateListItem = function (CodeList, Item, DOMItem, width) {

  if (DOMItem != null)
    Event.observe(DOMItem, "click", CGListViewer.prototype.atListItemClick.bind(this, CodeList, DOMItem));

  if (CodeList == LIST_FOLDER)
    this.addItemsToDOMSelector(this.extFolderListSelector.dom, [Item]);
  else if (CodeList == LIST_ADD) {
    this.addItemsToDOMSelector(this.extAddListSelector.dom, [Item]);
    this.extAddListLink.dom.innerHTML = Item.Label;
    this.extAddListLink.dom.CodeItem = Item.Code;
    this.extAddListLink.dom.href = Item.Command;
  }
  else if (CodeList == LIST_GROUPBY) {
    var DOMGroupBySelector = Ext.get(DOMItem).select(CSS_SELECTOR).first().dom;
	var height = DOMGroupBySelector.offsetHeight;

	var DOMGroupBySelectorWidget = new Ext.form.ComboBox({
	  typeAhead: false,
	  triggerAction: 'all',
	  transform: DOMGroupBySelector,
	  width:135,
	  forceSelection:true
	});
	//DOMGroupBySelectorWidget.applyTo(DOMGroupBySelector);

	this.groupByWidgets[Item.Code] = DOMGroupBySelectorWidget;
	DOMGroupBySelectorWidget.setSize(width, height);
	DOMGroupBySelectorWidget.doQuery = CGListViewer.prototype.queryGroupByOptions.bind(DOMGroupBySelectorWidget);

	DOMGroupBySelector.Code = Item.Code;
    DOMGroupBySelectorWidget.Code = Item.Code;
	DOMGroupBySelectorWidget.on("focus", CGListViewer.prototype.atGroupByItemLoadOptions.bind(this, Item, DOMGroupBySelectorWidget));
    DOMGroupBySelectorWidget.on("expand", CGListViewer.prototype.atGroupByItemLoadOptions.bind(this, Item, DOMGroupBySelectorWidget));
	DOMGroupBySelectorWidget.on("beforeselect", CGListViewer.prototype.atGroupByItemOptionBeforeSelect.bind(this));

    //this.updateGroupByOptions(Item, DOMGroupBySelectorWidget, true);
  }
};

CGListViewer.prototype.queryGroupByOptions = function (C, B) {
	if (C === undefined || C === null) {
		C = ""
	}
	var A = {query: C, forceAll: B, combo: this, cancel: false};
	if (this.fireEvent("beforequery", A) === false || A.cancel) {
		return false
	}
	C = A.query;
	B = A.forceAll;
	if (B === true || (C.length >= this.minChars)) {
		if (this.lastQuery != C) {
			this.lastQuery = C;
			if (this.mode == "local") {
				this.selectedIndex = -1;
				if (B) {
					this.store.clearFilter()
				} else {
					this.store.filter(this.displayField, C, true);
				}
				this.onLoad()
			} else {
				this.store.baseParams[this.queryParam] = C;
				this.store.load({params: this.getParams(C)});
				this.expand()
			}
		} else {
			this.selectedIndex = -1;
			this.onLoad()
		}
	}
};

CGListViewer.prototype.updateGroupByOptions = function (GroupBy, DOMSelectorWidget, loadRemote) {
    if (DOMSelectorWidget.store.getCount() > 1)
		return;

    if (GroupBy.Options.length > 0)
        this.renderGroupByOptions(GroupBy, DOMSelectorWidget);
    else if (loadRemote)
        this.loadGroupByOptions(GroupBy, DOMSelectorWidget);
};

CGListViewer.prototype.updateList = function (List, CodeList, ListStyle, sSeparator) {
  var ListItemTemplate = null;
  var extGroup;
  var DOMLayer = null;
  var extList;

  if (this.extWizardLayer == null) return;

  extGroup = this.extWizardLayer.select(CSS_GROUP + "." + CodeList).first();
  if (List == null) {

    if (CodeList == LIST_FOLDER) {
      this.extFolderListSelector.dom.style.display = "none";
      return;
    }

    var extElement = extGroup;
    if (CodeList == LIST_GROUPBY) extElement = this.extWizardLayer.select(ListStyle).first();
    extElement.dom.style.display = "none";
    return;
  }

  if (this.extWizardLayer == null) return;
  if (!List.bUpdate) return;

  extList = this.extWizardLayer.select(ListStyle).first();
  List.Code = CodeList;

  if (CodeList == LIST_GROUPBY) ListItemTemplate = new Template(aListViewerTemplates[this.language]["WIZARD_GROUPBYLIST_ITEM"]);
  else if (CodeList == LIST_SORTBY) ListItemTemplate = new Template(aListViewerTemplates[this.language]["WIZARD_SORTBYLIST_ITEM"]);
  else if (CodeList == LIST_ADD) {
    ListItemTemplate = new Template(aListViewerTemplates[this.language]["WIZARD_ADDLIST_ITEM"]);
    this.extAddListSelector.dom.innerHTML = "<option value='-1'>&nbsp;</option>";
    this.extAddListLink.dom.innerHTML = "";
  }
  else if (CodeList == LIST_FOLDER)
    ListItemTemplate = null;

  if (ListItemTemplate != null) {
    var DOMList = extList.dom;
    DOMList.innerHTML = "";
    DOMLayer = DOMList;
    if (List.Code == LIST_SORTBY) DOMLayer = new Insertion.Bottom(DOMList, aListViewerTemplates[this.language]["WIZARD_SORTBYLIST_SECTION"]).element.immediateDescendants().last();
  }

  List.CountItems = 0;
  var itemWidth = 0;
  for (var Code in List.Items) {
    if (isFunction(List.Items[Code])) continue;
    var Item = List.Items[Code];
    var DOMItem = null;

    if (ListItemTemplate != null) {
      DOMItem = new Insertion.Bottom(DOMLayer, ListItemTemplate.evaluate({"code": Item.Code, "label": Item.Label, "description": Item.Description, "command": Item.Command ? Item.Command : "#"})).element.immediateDescendants().last();
      DOMItem.Code = Item.Code;
    }

    if (itemWidth == 0 && DOMItem != null) itemWidth = DOMItem.offsetWidth-20;
    this.updateListItem(List.Code, Item, DOMItem, itemWidth);
    List.CountItems++;
  }

  if (CodeList == LIST_ADD) {
    if (List.CountItems > 1) {
      this.extAddListSelector.dom.style.display = "inline";
      this.extAddListLink.dom.style.display = "none";
      this.extDeleteItems.dom.addClassName("top");
    }
    else {
      this.extAddListSelector.dom.style.display = "none";
      this.extAddListLink.dom.style.display = "inline";
      this.extDeleteItems.dom.removeClassName("top");
    }
  }
  else if (CodeList == LIST_FOLDER)
    this.extFolderListSelector.dom.style.display = (List.CountItems > 1) ? "inline" : "none";

  if (extGroup != null)
    extGroup.dom.style.display = ((List.CountItems > 0) || (CodeList == LIST_GROUPBY)) ? "block" : "none";

  List.bUpdate = false;
};

CGListViewer.prototype.updateLabel = function () {
  var extLabel = this.extViewerLayer.select(CSS_LABEL).first();
  extLabel.dom.style.display = (this.sLabel != null && this.sLabel != "") ? "block" : "none";
  extLabel.dom.innerHTML = this.sLabel;
};

CGListViewer.prototype.updateSummary = function () {
  var CountTemplate = new Template(this.Options.Templates.CountItems ? this.Options.Templates.CountItems : aListViewerTemplates[this.language]["DEFAULT_COUNT_ITEMS"]);
  var extCount = this.extViewerLayer.select(CSS_SUMMARY + " " + CSS_COUNT).first();
  extCount.dom.innerHTML = CountTemplate.evaluate({"count": this.data.nrows});
  extCount.dom.style.display = this.data.nrows == 0 && this.extFolderListSelector.dom.options.length <= 1 ? "none" : "block";
};

CGListViewer.prototype.updateFilters = function () {
  var extFilter = this.extWizardLayer.select(CSS_FILTER).first();
  var extFilters = this.extViewerLayer.select(CSS_FILTERS).first();
  var FilterTemplate = new Template(aListViewerTemplates[this.language]["FILTER"]);
  var extUnselectList, DOMFilter;

  extFilters.dom.innerHTML = "";

  if (extFilter.dom.value != "") {
    DOMFilter = new Insertion.Bottom(extFilters.dom, FilterTemplate.evaluate({"code": CODE_WORDS_FILTER, "label": extFilter.dom.value})).element.immediateDescendants().last();
    DOMFilter.Code = CODE_WORDS_FILTER;
  }

  for (var i = 0; i < this.State.Lists[LIST_GROUPBY].Orders.length; i++) {
    var CodeGroup = this.State.Lists[LIST_GROUPBY].Orders[i];
    var Group = this.State.Lists[LIST_GROUPBY].Items[CodeGroup];
	var Widget = this.groupByWidgets[CodeGroup];

	if (Widget == null) continue;
    if (Widget.getValue() == null) continue;
    if (Widget.getValue() == "all") continue;

    if (extFilters.dom.innerHTML == "") extFilters.dom.innerHTML = aListViewerTemplates[this.language]["FILTERS_MESSAGE"];
    DOMFilter = new Insertion.Bottom(extFilters.dom, FilterTemplate.evaluate({"code": CodeGroup, "label": Group.Label})).element.immediateDescendants().last();
    DOMFilter.Code = CodeGroup;
  }

  extUnselectList = extFilters.select(CSS_UNSELECT);
  extUnselectList.each(function (extUnselect) {
    var extFilter = extUnselect.up(".filter");
    extUnselect.dom.Code = extFilter.dom.Code;
    Event.observe(extUnselect.dom, "click", CGListViewer.prototype.atUnselectFilter.bind(this, extUnselect.dom));
  }, this);
};

CGListViewer.prototype.addItemsGroup = function (extContainer, group) {
  var ContentTemplate = new Template(aListViewerTemplates[this.language]["GROUP_ITEM"]);
  var sContent = ContentTemplate.evaluate(this.Options.DataSource.Groups[group]);
  new Insertion.Bottom(extContainer.dom, sContent);
};

CGListViewer.prototype.updateItems = function (bClearItems) {
  var extItems = this.extViewerLayer.select(CSS_ITEMS).first();
  var ItemTemplate = new Template(aListViewerTemplates[this.language]["ITEM"]);
  var sContentTemplate = this.Options.Templates.Item ? listViewerHtmlDecode(this.Options.Templates.Item) : null;
  var sNoItemsTemplate = this.Options.Templates.NoItems ? listViewerHtmlDecode(this.Options.Templates.NoItems) : null;
  var ContentTemplate, NoItemsTemplate;

  if (this.data == null) return;

  if (sContentTemplate == null) sContentTemplate = aListViewerTemplates[this.language]["DEFAULT_ITEM_CONTENT"];
  ContentTemplate = new Template(sContentTemplate);

  if (sNoItemsTemplate == null) sNoItemsTemplate = aListViewerTemplates[this.language]["DEFAULT_NO_ITEMS"];
  NoItemsTemplate = new Template(sNoItemsTemplate);

  this.extSelectAll.dom.style.visibility = (this.data.nrows > 0) ? "visible" : "hidden";
  this.iNumPages = (this.data.nrows <= this.itemsPerPage) ? 0 : Math.floor(this.data.nrows / this.itemsPerPage);
  if ((this.data.nrows % this.itemsPerPage) != 0) this.iNumPages++;

  if (this.data.nrows == 0) {
    extItems.dom.innerHTML = NoItemsTemplate.evaluate();
    return;
  }

  if ((this.data.rows.length == 0) && (this.State.CurrentPage >= 2)) {
    this.State.CurrentPage--;
    this.load(bClearItems);
    return;
  }

  var IdActiveItem = (this.State.ActiveItemId != null) ? this.State.ActiveItemId : null;
  if (IdActiveItem == null) IdActiveItem = (this.DOMActiveItem != null) ? this.DOMActiveItem.Id : null;

  var currentGroup = null;
  for (var i = 0; i < this.data.rows.length; i++) {
    var Item = this.data.rows[i];
    Item.position = i;

    if (this.onBoundItem) this.onBoundItem(this, Item);

    if (Item.group != null && currentGroup != Item.group) {
      this.addItemsGroup(extItems, Item.group);
      currentGroup = Item.group;
    }

    var sContent = ContentTemplate.evaluate(Item);
    var extItem = Ext.get(new Insertion.Bottom(extItems.dom, ItemTemplate.evaluate({"content": sContent, "imagesPath": this.imagesPath})).element.immediateDescendants().last());
    var extContent = extItem.select(CSS_CONTENT).first();
    var extSelector = extItem.select(CSS_SELECTOR).first();
    var extDelete = extItem.select(CSS_DELETE).first();
    var extLocked = extItem.select(CSS_LOCKED).first();

    Item.id = (Item.id != null) ? Item.id : i;
    extItem.dom.Id = Item.id;
    extItem.dom.addClassName(Item.id);

    Event.observe(extContent.dom, "click", CGListViewer.prototype.atItemContentClick.bind(this, extItem.dom, extContent.dom, i, this.data.nrows));
    Event.observe(extSelector.dom, "click", CGListViewer.prototype.atItemSelectorClick.bind(this, extItem.dom, extSelector.dom));
    Event.observe(extDelete.dom, "click", CGListViewer.prototype.atItemDeleteClick.bind(this, extItem.dom, extDelete.dom));

    if (Item.locked) {
      extLocked.dom.style.display = "block";
      extDelete.dom.style.display = "none";
      extSelector.dom.disabled = true;
    }

    if (Item.css)
      extContent.dom.addClassName(Item.css);

    if (IdActiveItem != null && Item.id == IdActiveItem) {
      this.activateItem(IdActiveItem);
    }

    if (this.State.Selection[Item.id]) {
      extSelector.dom.checked = true;
      extItem.dom.addClassName(CLASS_SELECTED);
      if (this.extViewerLayer.hasClass(CLASS_EDITABLE)) this.extDeleteItems.dom.style.display = "block";
      if (this.onSelectItem) this.onSelectItem(this, Item.id);
    }

    if (this.onRenderItem) this.onRenderItem(this, Item, extItem.dom);
  }

};

CGListViewer.prototype.updateOperations = function (bClearItems) {

  if (this.Options.Operations == null)
    return;

  var OperationTemplate = new Template(aListViewerTemplates[this.language]["OPERATION"]);
  var extOperations = this.extViewerLayer.select(CSS_OPERATIONS).first();
  extOperations.dom.innerHTML = "";
  for (var i = 0; i < this.Options.Operations.length; i++) {
    var operation = this.Options.Operations[i];

    if (this.onBoundOperation) this.onBoundOperation(this, operation);

    var extOperation = Ext.get(new Insertion.Bottom(extOperations.dom, OperationTemplate.evaluate({"label": operation.label, "visible": operation.visible})).element.immediateDescendants().last());
    var extLink = extOperation.down("a");

    extLink.dom.name = operation.name;
    Event.observe(extLink.dom, "click", CGListViewer.prototype.atOperationClick.bind(this, extOperation.dom, extLink.dom));
  }
};

CGListViewer.prototype.updatePaging = function () {

  this.extPaging.dom.style.display = "none";
  return;

  if (this.iNumPages == 0) {
    this.extPaging.hide();
    return;
  }

  if (this.State.CurrentPage == 1 && this.iNumPages == 1) {
    this.extPaging.hide();
    return;
  }

  this.extPaging.show();

  if (this.State.CurrentPage == 1) {
    this.extFirst.dom.addClassName(CLASS_DISABLED);
    this.extPrevious.dom.addClassName(CLASS_DISABLED);
  }
  else {
    this.extFirst.dom.removeClassName(CLASS_DISABLED);
    this.extPrevious.dom.removeClassName(CLASS_DISABLED);
  }

  if (this.State.CurrentPage == this.iNumPages) {
    this.extLast.dom.addClassName(CLASS_DISABLED);
    this.extNext.dom.addClassName(CLASS_DISABLED);
  }
  else {
    this.extLast.dom.removeClassName(CLASS_DISABLED);
    this.extNext.dom.removeClassName(CLASS_DISABLED);
  }
};

CGListViewer.prototype.update = function (data, bClearItems) {
  if (this.extViewerLayer == null) return;
  if (this.extWizardLayer == null) return;

  this.data = data;
  if (bClearItems) this.items = new Array();

  for (var i = 0; i < this.data.rows.length; i++)
    this.items[this.data.rows[i].id] = this.data.rows[i];

  this.updateList(this.Options.AddList, LIST_ADD, CSS_ADDLIST, "");
  this.updateList(this.Options.FolderList, LIST_FOLDER, CSS_FOLDERLIST, "");
  this.updateList(this.Options.SortByList, LIST_SORTBY, CSS_SORTBYLIST, ",&nbsp;");
  this.updateList(this.Options.GroupByList, LIST_GROUPBY, CSS_GROUPBYLIST, ",&nbsp;");
  this.updateLabel();
  this.updateSummary();
  this.updateFilters();
  this.updateItems(bClearItems);
  this.updateOperations();
  this.updatePaging();

  this.isRefreshing = false;
  if (this.onRefresh) this.onRefresh(this);

  this.background = false;
};

CGListViewer.prototype.refresh = function () {
  if (this.isRefreshing) return;
  this.isRefreshing = true;
  this.applyState();
  this.load(true);
};

CGListViewer.prototype.refreshBackground = function () {
  this.background = true;
  this.refresh();
};

CGListViewer.prototype.unselectSortByItem = function (extItem) {
  var extSortByOptions = extItem.select(CSS_SORTBYOPTIONS).first();
  extItem.removeClass(CLASS_SELECTED);
  extItem.removeClass(CLASS_ASCENDANT);
  extItem.removeClass(CLASS_DESCENDANT);
  extItem.addClass(CLASS_ASCENDANT);
  if (extSortByOptions != null) extSortByOptions.dom.style.display = "none";
};

CGListViewer.prototype.removeSortByListSectionsFromItem = function (extItem) {
  var extSections = this.extWizardLayer.select(CSS_LIST_SECTION);
  var extLastSection;

  for (var i = 0; i < extSections.getCount(); i++) {
    var CodeSort = this.State.Lists[LIST_SORTBY].Orders[i];
    if (CodeSort == null) {
      var extSection = extSections.elements[i];
      if (extSection) extSection.remove();
    }
  }

  extSections = this.extWizardLayer.select(CSS_LIST_SECTION);
  extLastSection = extSections.last();
  if (extLastSection) extLastSection.removeClass(CLASS_READONLY);
  this.extMoreSortByList.dom.style.display = (extSections.getCount() == this.Options.SortByList.CountItems) ? "none" : "block";
};

CGListViewer.prototype.createSortByListSection = function () {
  var DOMList = this.extWizardLayer.select(CSS_SORTBYLIST).first().dom;
  var extSections = Ext.get(DOMList).select(CSS_LIST_SECTION);
  var iNumSections = extSections.getCount();
  var extLastSection = extSections.last();
  var extLayer = Ext.get(new Insertion.Bottom(DOMList, aListViewerTemplates[this.language]["WIZARD_SORTBYLIST_SECTION"]).element.immediateDescendants().last());
  var ListItemTemplate = new Template(aListViewerTemplates[this.language]["WIZARD_SORTBYLIST_ITEM"]);

  if (extLastSection) extLastSection.addClass(CLASS_READONLY);
  this.extMoreSortByList.dom.style.display = "none";

  var extSortByOptions = extLayer.select(CSS_SORTBYOPTIONS).first();
  if (extSortByOptions == null) {
    new Insertion.Bottom(extLayer.dom, new Template(aListViewerTemplates[this.language]["WIZARD_SORTBYLIST_SECTION_OPTIONS"]).evaluate());
    extSortByOptions = extLayer.select(CSS_SORTBYOPTIONS).first();
    var extSortByOptionsUnselect = extLayer.select(CSS_SORTBYOPTIONS + " " + CSS_UNSELECT).first();
    Event.observe(extSortByOptionsUnselect.dom, "click", CGListViewer.prototype.atSortBySectionUnselectClick.bind(this, extLayer.dom));
  }
  extSortByOptions.show();

  var i = 0;
  for (var Code in this.Options.SortByList.Items) {
    if (isFunction(this.Options.SortByList.Items[Code])) continue;
    var Item = this.Options.SortByList.Items[Code];
    var StateItem = this.State.Lists[LIST_SORTBY].Items[Code];
    var DOMItem = new Insertion.Bottom(extLayer.dom, ListItemTemplate.evaluate({"code": Item.Code, "label": Item.Label, "description": Item.Description})).element.immediateDescendants().last();
    DOMItem.Code = Item.Code;
    DOMItem.addClassName(CLASS_ASCENDANT);
    if (StateItem != null && StateItem.Order <= iNumSections) DOMItem.addClassName(CLASS_READONLY);
    Event.observe(DOMItem, "click", CGListViewer.prototype.atListItemClick.bind(this, LIST_SORTBY, DOMItem));
    i++;
  }

  return extLayer;
};

CGListViewer.prototype.removeSortByListSection = function (DOMSection) {
  DOMSection.remove();

  var extLastSection = this.extWizardLayer.select(CSS_LIST_SECTION).last();
  if (extLastSection) {
    extLastSection.removeClass(CLASS_READONLY);
    var extSelectedItem = extLastSection.select(CSS_SELECTED).first();
    this.extMoreSortByList.dom.style.display = (extSelectedItem != null) ? "block" : "none";
  }
  else this.extMoreSortByList.dom.style.display = "block";
};

CGListViewer.prototype.selectSortByItem = function (extItem) {
  this.removeSortByListSectionsFromItem(extItem);
  if (!extItem.hasClass(CLASS_SELECTED)) extItem.addClass(CLASS_SELECTED);
  if (extItem.hasClass(CLASS_READONLY)) extItem.removeClass(CLASS_READONLY);
};

CGListViewer.prototype.toggleSortByItemMode = function (extItem) {
  var DOMItem = extItem.dom;
  var Sort = this.State.Lists[LIST_SORTBY].Items[DOMItem.Code];

  DOMItem.toggleClassName(CLASS_ASCENDANT);
  DOMItem.toggleClassName(CLASS_DESCENDANT);
  Sort.Mode = DOMItem.hasClassName(CLASS_ASCENDANT) ? MODE_ASCENDANT : MODE_DESCENDANT;
};

CGListViewer.prototype.unselectGroupByItem = function (extItem) {
  var Widget = this.groupByWidgets[extItem.dom.Code];
  if (Widget != null)
    Widget.setValue("all");
};

CGListViewer.prototype.selectGroupByItem = function (extItem, sValue) {
  var Widget = this.groupByWidgets[extItem.dom.Code];
  if (Widget != null)
    Widget.setValue(sValue);
};

CGListViewer.prototype.clearFilter = function () {
  this.State.Filter = "";
  this.extFilter.dom.value = "";
  this.extFilterEmpty.dom.style.display = "block";
  this.load(true);
};

CGListViewer.prototype.filter = function() {
    this.extFilterEmpty.dom.style.display = (this.extFilter.dom.value.length <= 0) ? "block" : "none";
  if (this.State.Filter != null && this.State.Filter == this.extFilter.dom.value) return;
  this.State.Filter = this.extFilter.dom.value;
  this.load(true);
};

CGListViewer.prototype.addItem = function (Item) {
  if (this.onAddItem) this.onAddItem(this, Item);
};

CGListViewer.prototype.sortByItem = function (DOMItem) {
  var DOMSection = DOMItem.up(CSS_LIST_SECTION);
  var extSelected = Ext.get(DOMSection).select(CSS_SELECTED).first();

  this.State.CurrentPage = 1;

  if (DOMItem.hasClassName(CLASS_SELECTED)) {
    this.toggleSortByItemMode(Ext.get(DOMItem));
    this.load(true);
    return;
  }

  if (extSelected != null) {
    this.removeSortByListSectionsFromItem(extSelected);
    this.removeItemOnSelection(LIST_SORTBY, extSelected.dom.Code);
    this.unselectSortByItem(extSelected);
  }

  this.addItemOnSelection(LIST_SORTBY, {Code: DOMItem.Code, Mode: DOMItem.hasClassName(CLASS_ASCENDANT) ? MODE_ASCENDANT : MODE_DESCENDANT});
  this.selectSortByItem(Ext.get(DOMItem));
  this.load(true);
};

CGListViewer.prototype.clearSelection = function () {
  this.unselectAll();
};

CGListViewer.prototype.getSelectedItems = function () {
  var aExtSelectorItems = this.extViewerLayer.select(CSS_ITEM_SELECTOR);
  var aResult = new Array();

  aExtSelectorItems.each(function (extItemSelector) {
    if (!extItemSelector.dom.checked) return;
    var DOMItem = extItemSelector.dom.up(CSS_ITEM);
    aResult[DOMItem.Id] = DOMItem.Id;
  }, this);

  return aResult;
};

CGListViewer.prototype.getItem = function (Id) {
  for (var i in this.items) {
    if (isFunction(this.items[i])) continue;
    if (this.items[i].id == Id) {
      return this.items[i];
    }
    ;
  }
  return null;
};

CGListViewer.prototype.updateItem = function (Item) {
  var sContentTemplate = this.Options.Templates.Item ? listViewerHtmlDecode(this.Options.Templates.Item) : null;
  var ContentTemplate = null;
  var DOMItem = this.getDOMItem(Item.id);

  for (var i in this.items) {
    if (isFunction(this.items[i])) continue;
    if (this.items[i].id == Item.id) {
      this.items[i] = Item;
      break;
    }
    ;
  }

  if (this.onBoundItem) this.onBoundItem(this, Item);

  if (sContentTemplate == null) sContentTemplate = aListViewerTemplates[this.language]["DEFAULT_ITEM_CONTENT"];
  ContentTemplate = new Template(sContentTemplate);

  var extItem = Ext.get(DOMItem);
  var sContent = ContentTemplate.evaluate(Item);
  var extContent = extItem.select(CSS_CONTENT).first();
  extContent.dom.innerHTML = sContent;

  if (Item.css)
    extContent.dom.addClassName(Item.css);
};

CGListViewer.prototype.getDOMItem = function (Id) {
  var extItems = this.extViewerLayer.select(CSS_ITEMS).first();
  var extItemList = extItems.select(CSS_ITEM);
  var DOMResult = null;

  extItemList.each(function (extItem) {
    if (extItem.dom.Id == Id) DOMResult = extItem.dom;
  }, this);

  return DOMResult;
};

CGListViewer.prototype.getActiveItem = function () {
  if (this.DOMActiveItem == null) return null;

  return this.getItem(this.DOMActiveItem.Id);
};

CGListViewer.prototype.setActiveItem = function (Id) {
  this.State.ActiveItemId = Id;
};

CGListViewer.prototype.activateItem = function (Id) {
  var DOMItem = this.getDOMItem(Id);

  if (DOMItem == null) return;

  var extItem = Ext.get(DOMItem);
  var extContent = extItem.select(CSS_CONTENT).first();
  extContent.dom.click();
};

CGListViewer.prototype.selectAll = function () {
  var aExtSelectorItems = this.extViewerLayer.select(CSS_ITEM_SELECTOR);
  var aItems = new Array();
  aExtSelectorItems.each(function (extItemSelector) {
    if (extItemSelector.dom.disabled) return;
    if (extItemSelector.dom.checked) return;
    extItemSelector.dom.checked = true;
    var DOMItem = extItemSelector.dom.up(CSS_ITEM);
    DOMItem.addClassName(CLASS_SELECTED);
    aItems[DOMItem.Id] = DOMItem.Id;
  }, this);
  this.extDeleteItems.dom.style.display = "block";
  this.State.Selection = this.getSelectedItems();
  if (this.onSelectAllItems) this.onSelectAllItems(this, aItems);
};

CGListViewer.prototype.unselectAll = function () {
  var aExtSelectorItems = this.extViewerLayer.select(CSS_ITEM_SELECTOR);
  var aItems = new Array();
  aExtSelectorItems.each(function (extItemSelector) {
    if (extItemSelector.dom.disabled) return;
    if (!extItemSelector.dom.checked) return;
    extItemSelector.dom.checked = false;
    var DOMItem = extItemSelector.dom.up(CSS_ITEM);
    DOMItem.removeClassName(CLASS_SELECTED);
    aItems[DOMItem.Id] = DOMItem.Id;
  }, this);
  this.extDeleteItems.dom.style.display = "none";
  this.State.Selection = this.getSelectedItems();
  if (this.onUnselectAllItems) this.onUnselectAllItems(this, aItems);
};

CGListViewer.prototype.firstPage = function () {
  this.State.CurrentPage = 1;
  this.load(false);
};

CGListViewer.prototype.previousPage = function () {
  this.State.CurrentPage--;
  if (this.State.CurrentPage < 1) this.State.CurrentPage = 1;
  this.load(false);
};

CGListViewer.prototype.nextPage = function () {
  this.State.CurrentPage++;

  if (this.State.CurrentPage > this.iNumPages) {
    this.State.CurrentPage = this.iNumPages;
    return;
  }

  this.load(false);
};

CGListViewer.prototype.lastPage = function () {
  this.State.CurrentPage = this.iNumPages;
  this.load(false);
};

CGListViewer.prototype.setAddList = function (AddList) {
  this.Options.AddList = AddList;
  this.Options.AddList.bUpdate = true;
};

CGListViewer.prototype.setSortByList = function (SortByList) {
  this.Options.SortByList = SortByList;
  this.Options.SortByList.bUpdate = true;
};

CGListViewer.prototype.setGroupByList = function (GroupByList) {
  this.Options.GroupByList = GroupByList;
  this.Options.GroupByList.bUpdate = true;
};

CGListViewer.prototype.setDataSourceUrls = function (itemsUrl, groupByOptionsUrl) {
  this.Options.DataSource.Remote = true;
  this.Options.DataSource.RequestUrl = itemsUrl;
  this.Options.DataSource.RequestGroupByOptionsUrl = groupByOptionsUrl;
};

CGListViewer.prototype.dispose = function () {
  if (this.extFilter.dom == null || this.extFirst.dom == null ||
      this.extPrevious.dom == null || this.extNext.dom == null ||
      this.extLast.dom == null)
    return;

  Event.stopObserving(this.extFilter.dom, "keyup", CGListViewer.prototype.atFilterKeyUp.bind(this));
  Event.stopObserving(this.extFilter.dom, "change", CGListViewer.prototype.atFilterChange.bind(this));
  Event.stopObserving(this.extFilter.dom, "focus", CGListViewer.prototype.atFilterFocus.bind(this));
  Event.stopObserving(this.extFilter.dom, "blur", CGListViewer.prototype.atFilterBlur.bind(this));
  Event.stopObserving(this.extFirst.dom, "click", CGListViewer.prototype.atPagingFirstClick.bind(this, this.extFirst.dom));
  Event.stopObserving(this.extPrevious.dom, "click", CGListViewer.prototype.atPagingPreviousClick.bind(this, this.extPrevious.dom));
  Event.stopObserving(this.extNext.dom, "click", CGListViewer.prototype.atPagingNextClick.bind(this, this.extNext.dom));
  Event.stopObserving(this.extLast.dom, "click", CGListViewer.prototype.atPagingLastClick.bind(this, this.extLast.dom));

  if (this.extViewerLayer) {
    var extSelectAll = this.extViewerLayer.select(CSS_SELECT_ALL).first();
    if (extSelectAll != null) Event.stopObserving(extSelectAll.dom, "click", CGListViewer.prototype.atSelectAll.bind(this, extSelectAll.dom));
  }

  this.extWizardLayer = null;
  this.extViewerLayer = null;
};

CGListViewer.prototype.atAddItem = function (DOMElement, EventLaunched) {
  var tagName = DOMElement.tagName.toLowerCase();
  if (tagName == "select") {
    if (DOMElement.selectedIndex == 0) return false;
    var DOMOption = DOMElement.options[DOMElement.selectedIndex];
    this.addItem({Code: DOMOption.value, Command: DOMOption.name});
  }
  else if (tagName == "a") {
    this.addItem({Code: DOMElement.CodeItem, Command: DOMElement.href});
  }
  Event.stop(EventLaunched);
  return false;
};

CGListViewer.prototype.atFolderClick = function (DOMElement, EventLaunched) {
  var DOMOption = DOMElement.options[DOMElement.selectedIndex];

  this.State.Folder = DOMOption.value;
  this.load(true);

  Event.stop(EventLaunched);
  return false;
};

CGListViewer.prototype.atDeleteItems = function () {
  if (this.onDeleteItems) this.onDeleteItems(this, this.getSelectedItems());
  this.extSelectAll.dom.checked = false;
};

CGListViewer.prototype.atListItemClick = function (CodeList, DOMItem, EventLaunched) {
  var href = DOMItem.href;

  if (!href) {
    var DOMAnchor = DOMItem.down("a");
    if (!DOMAnchor) return;
    href = DOMAnchor.href;
  }

  if (CodeList == LIST_ADD) this.addItem({Code: DOMItem.Code, Command: href});
  else if (CodeList == LIST_SORTBY) this.sortByItem(DOMItem);

  Event.stop(EventLaunched);
  return false;
};

CGListViewer.prototype.atGroupByItemLoadOptions = function (GroupBy, DOMSelectorWidget) {
    if (this.loadTimeout != null) {
        this.clearDelayedTimeout();
        this.loadDelayed(true, 5000);
    }
    this.updateGroupByOptions(GroupBy, DOMSelectorWidget, true);
};

CGListViewer.prototype.atGroupByItemOptionBeforeSelect = function (DOMSelectorWidget, Record, index) {
  this.State.CurrentPage = 1;

  var value = Record.data.value;
  var label = Record.data.text;
  if (value == "all") this.removeItemOnSelection(LIST_GROUPBY, DOMSelectorWidget.Code);
  else this.addItemOnSelection(LIST_GROUPBY, {Code: DOMSelectorWidget.Code, Value: value, Label: label});

  this.clearDelayedTimeout();
  this.loadDelayed(true);

  return true;
};

CGListViewer.prototype.atSortBySectionUnselectClick = function (DOMSection, EventLaunched) {
  var extSection = Ext.get(DOMSection);
  var extSelectedItem = extSection.select(CSS_SELECTED).first();

  if (extSelectedItem != null) {
    extSelectedItem.removeClass(CLASS_SELECTED);
    this.removeItemOnSelection(LIST_SORTBY, extSelectedItem.dom.Code);
    this.removeSortByListSectionsFromItem(extSelectedItem);
  }
  else this.removeSortByListSection(DOMSection);

  this.load(true);

  Event.stop(EventLaunched);
};

CGListViewer.prototype.atFilterKeyUp = function (oEvent) {
    var codeKey = oEvent.keyCode;
    var sFilter = this.extFilter.dom.value;

    this.extFilterEmpty.dom.style.display = (sFilter.length <= 0) ? "block" : "none";

    if ((codeKey == KEY_UP) || (codeKey == KEY_DOWN) || (codeKey == KEY_ENTER) || (codeKey == KEY_LEFT) || (codeKey == KEY_RIGHT) || (codeKey == KEY_CONTROL) || (codeKey == KEY_SHIFT)) return;
    if (sFilter != "" && sFilter.length < 3) return;

    window.clearTimeout(this.idTimeoutFilter);
    this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 500);
};

CGListViewer.prototype.atFilterChange = function (oEvent) {
    var sFilter = this.extFilter.dom.value;
    if (sFilter != "" && sFilter.length < 3) return;
    this.filter();
};

CGListViewer.prototype.atFilterByTitleChange = function (oEvent) {
    var checked = this.extFilterByTitle.dom.checked;
    this.State.FilterTag = checked ? "title" : "";
    if (this.State.Filter == "") return;
    this.load(true);
};

CGListViewer.prototype.atFilterFocus = function () {
  this.extFilterEmpty.dom.style.display = "none";
  this.extFilter.dom.select();
};

CGListViewer.prototype.atFilterBlur = function () {
  var sValue = this.extFilter.dom.value;
  this.extFilterEmpty.dom.style.display = (sValue.length <= 0) ? "block" : "none";
};

CGListViewer.prototype.atFilterEmptyClick = function () {
  this.extFilter.focus();
};

CGListViewer.prototype.atSelectAll = function (DOMSelectAll) {
  if (DOMSelectAll.checked) this.selectAll();
  else this.unselectAll();
};

CGListViewer.prototype.atPagingFirstClick = function (DOMPagingItem) {
  if (DOMPagingItem.hasClassName(CLASS_DISABLED)) return true;
  this.firstPage();
};

CGListViewer.prototype.atPagingPreviousClick = function (DOMPagingItem) {
  if (DOMPagingItem.hasClassName(CLASS_DISABLED)) return true;
  this.previousPage();
};

CGListViewer.prototype.atPagingNextClick = function (DOMPagingItem) {
  if (DOMPagingItem.hasClassName(CLASS_DISABLED)) return true;
  this.nextPage();
};

CGListViewer.prototype.atPagingLastClick = function (DOMPagingItem) {
  if (DOMPagingItem.hasClassName(CLASS_DISABLED)) return true;
  this.lastPage();
};

CGListViewer.prototype.atItemContentClick = function (DOMItem, DOMContent, index, nrows, EventLaunched) {

  if (this.DOMActiveItem != null) this.DOMActiveItem.removeClassName(CLASS_ACTIVE);

  this.DOMActiveItem = DOMItem;
  this.DOMActiveItem.addClassName(CLASS_ACTIVE);

  if (this.Options.Templates.ShowItemCommand != null && !this.background) {
    var CommandTemplate = new Template(this.Options.Templates.ShowItemCommand);
    CommandListener.dispatchCommand(CommandTemplate.evaluate({"id": DOMItem.Id,"index":index,"count":nrows}));
    return false;
  }

  var Item = null;
  for (var i in this.items) {
    if (isFunction(this.items[i])) continue;
    if (this.items[i].id == DOMItem.Id) {
      Item = this.items[i];
      break;
    }
  }

  if (this.onShowItem) this.onShowItem(this, Item);
};

CGListViewer.prototype.atItemSelectorClick = function (DOMItem, DOMSelector, EventLaunched) {
  if (DOMSelector.checked) {
    DOMItem.addClassName(CLASS_SELECTED);
    if (this.onSelectItem) this.onSelectItem(this, DOMItem.Id);
  }
  else {
    DOMItem.removeClassName(CLASS_SELECTED);
    if (this.onUnselectItem) this.onUnselectItem(this, DOMItem.Id);
  }
  this.State.Selection = this.getSelectedItems();
  this.extDeleteItems.dom.style.display = (this.State.Selection.size() > 0) ? "block" : "none";
};

CGListViewer.prototype.atItemDeleteClick = function (DOMItem, DOMDelete, EventLaunched) {
  if (this.onDeleteItem) this.onDeleteItem(this, DOMItem.Id);
  Event.stop(EventLaunched);
};

CGListViewer.prototype.atOperationClick = function (DOMOperation, DOMLink, EventLaunched) {
  if (this.onOperationClick) this.onOperationClick(this, DOMLink.name);
};

CGListViewer.prototype.atUnselectFilter = function (DOMUnselect) {
  if (DOMUnselect.Code == CODE_WORDS_FILTER) {
    this.clearFilter();
  }
  else {
    var extItem = this.extWizardLayer.select(CSS_GROUPBYLIST + " ." + DOMUnselect.Code).first();
    this.removeItemOnSelection(LIST_GROUPBY, extItem.dom.Code);
    this.unselectGroupByItem(extItem);
    this.load(true);
  }
};

CGListViewer.prototype.atMoreSortByList = function () {
  this.createSortByListSection();
};

CGListViewer.prototype.atScroll = function () {
  if (this.extScrollParent.dom.scrollHeight - this.extScrollParent.dom.clientHeight - this.extScrollParent.dom.scrollTop < 200 && !this.loading)
    this.nextPage();
};

var aFiltersWizardTemplates = new Array();
aFiltersWizardTemplates["es"] = new Array();
aFiltersWizardTemplates["es"]["MAIN"] = "<div class='separator'><div class='group groupby'><label>Mostrar</label><table class='filter'><tr><td class='content'><input type='text' class='value'/></td></tr></table><ul class='groupby list'></ul></div><div class='group sortby'><label>Ordenar por</label><ul class='sortby list'></ul><ul class='toolbar'><li><a class='more' href='javascript:void(null)'>más</a></li></ul></div><div class='group add edition'><label>Añadir</label><ul class='add list'></ul></div></div>";
aFiltersWizardTemplates["es"]["FILTER_EMPTY"] = "<span class='empty'>Introduzca el texto que desee encontrar</span>";
aFiltersWizardTemplates["es"]["SORTBYLIST_SECTION"] = "<ul class='section'></ul>";
aFiltersWizardTemplates["es"]["SORTBYLIST_SECTION_OPTIONS"] = "<div class='sortby options'>&nbsp;<a class='unselect' href='javascript:void(null)' alt='quitar'></a></div>";
aFiltersWizardTemplates["es"]["GROUPBYLIST_ITEM"] = "<li class='#{code}'><div class='label'>#{label}</div><div class='content'><select class='selector'><option value='all'>Todos</option></select></div></li>";
aFiltersWizardTemplates["es"]["SORTBYLIST_ITEM"] = "<li class='#{code}'><a class='label' href='javascript:void(null)'>#{label}</a></li>";
aFiltersWizardTemplates["es"]["ADDLIST_ITEM"] = "<li><a class='#{code}' href='#{command}'>#{label}</a><div class='description'>#{description}</div></li>";
aFiltersWizardTemplates["en"] = new Array();
aFiltersWizardTemplates["en"]["MAIN"] = "<div class='separator'><div class='group groupby'><label>Show</label><table class='filter'><tr><td class='content'><input type='text' class='value'/></td></tr></table><ul class='groupby list'></ul></div><div class='group sortby'><label>Sort by</label><ul class='sortby list'></ul><ul class='toolbar'><li><a class='more' href='javascript:void(null)'>more</a></li></ul></div><div class='group add edition'><label>Add</label><ul class='add list'></ul></div></div>";
aFiltersWizardTemplates["en"]["FILTER_EMPTY"] = "<span class='empty'>Enter the text you are looking for</span>";
aFiltersWizardTemplates["en"]["SORTBYLIST_SECTION"] = "<ul class='section'></ul>";
aFiltersWizardTemplates["en"]["SORTBYLIST_SECTION_OPTIONS"] = "<div class='sortby options'>&nbsp;<a class='unselect' href='javascript:void(null)' alt='delete'></a></div>";
aFiltersWizardTemplates["en"]["GROUPBYLIST_ITEM"] = "<li class='#{code}'><div class='label'>#{label}</div><div class='content'><select class='selector'><option value='all'>All</option></select></div></li>";
aFiltersWizardTemplates["en"]["SORTBYLIST_ITEM"] = "<li class='#{code}'><a class='label' href='javascript:void(null)'>#{label}</a></li>";
aFiltersWizardTemplates["en"]["ADDLIST_ITEM"] = "<li><a class='#{code}' href='#{command}'>#{label}</a><div class='description'>#{description}</div></li>";

// IMPORTANT: escape and utf8Encode functions are needed by this library

var CODE_WORDS_FILTER = "__words";
var LIST_VIEWER_QUERY_SEPARATOR = ":";
var LIST_VIEWER_QUERIES_SEPARATOR = "_f_";
var MODE_ASCENDANT = "asc";
var MODE_DESCENDANT = "desc";
var CLASS_ASCENDANT = "ascendant";
var CLASS_DESCENDANT = "descendant";
var CLASS_SELECTED = "selected";
var CLASS_LISTVIEWER_WIZARD = "listviewer wizard";
var CLASS_EDITABLE = 'editable';
var CLASS_READONLY = "readonly";
var LIST_SORTBY = "sortby";
var LIST_GROUPBY = "groupby";
var CSS_SELECTOR = ".selector";
var CSS_SELECTED = ".selected";
var CSS_MORE = ".more";
var CSS_FILTER = ".filter input.value";
var CSS_FILTER_EMPTY = ".filter .empty";
var CSS_SORTBYLIST = ".sortby.list";
var CSS_SORTBYOPTIONS = ".sortby.options";
var CSS_GROUPBYLIST = ".groupby.list";
var CSS_UNSELECT = ".unselect";
var CSS_LIST_SECTION = ".section";
var CSS_GROUP = ".group";
var CSS_SUMMARY = ".summary";
var KEY_UP = 38;
var KEY_DOWN = 40;
var KEY_ENTER = 13;
var KEY_LEFT = 37;
var KEY_RIGHT = 39;
var KEY_SHIFT = 16;
var KEY_CONTROL = 17;

function isFunction(item) {
  return (typeof item == "function");
};

function filtersWizardHtmlDecode(input) {
  if (input == null) return null;
  var e = document.createElement('div');
  e.innerHTML = input;
  if (e.childNodes.length <= 0) return input;
  return e.childNodes[0].nodeValue;
};

function CGFiltersWizard(Options, language, imagesPath) {
  this.Options = Options;
  this.aParameters = new Object();
  this.extFilter = null;
  this.extFilterEmpty = null;
  this.initState();
  this.wizardLayer = null;
  this.language = language;
  if (aFiltersWizardTemplates[this.language] == null) this.language = "es";
  this.imagesPath = imagesPath;
  this.groupByWidgets = new Array();
};

CGFiltersWizard.prototype.setWizardLayer = function (wizardLayer) {
  this.wizardLayer = wizardLayer;
};

CGFiltersWizard.prototype.init = function () {
  this.extWizardLayer = Ext.get(this.wizardLayer);
  this.extWizardLayer.dom.innerHTML = aFiltersWizardTemplates[this.language]["MAIN"];
  this.extWizardLayer.addClass(CLASS_LISTVIEWER_WIZARD);
};

CGFiltersWizard.prototype.render = function () {
  this.init();

  if (this.Options.Editable)
    this.extWizardLayer.addClass(CLASS_EDITABLE);
  else
    this.extWizardLayer.removeClass(CLASS_EDITABLE);

  this.extMoreSortByList = this.extWizardLayer.select(CSS_MORE).first();
  if (this.extMoreSortByList != null) {
    Event.observe(this.extMoreSortByList.dom, "click", CGFiltersWizard.prototype.atMoreSortByList.bind(this, this.extMoreSortByList.dom));
    this.extMoreSortByList.dom.style.display = "none";
  }

  this.renderList(this.Options.SortByList, LIST_SORTBY, CSS_SORTBYLIST);
  this.renderList(this.Options.GroupByList, LIST_GROUPBY, CSS_GROUPBYLIST);
  this.renderFilter();

  CommandListener.capture(this.extWizardLayer.dom);

  this.applyState();
  this.update();
};

CGFiltersWizard.prototype.renderList = function (List, CodeList, ListStyle) {
  var extGroup = this.extWizardLayer.select(CSS_GROUP + "." + CodeList).first();

  if (List == null) {
    var extElement = extGroup;
    if (CodeList == LIST_GROUPBY) extElement = this.extWizardLayer.select(ListStyle).first();
    extElement.dom.style.display = "none";
    return;
  }

  List.bUpdate = true;
  this.updateList(List, CodeList, ListStyle, ",&nbsp;");
};

CGFiltersWizard.prototype.renderFilter = function () {
  this.extFilter = this.extWizardLayer.select(CSS_FILTER).first();
  Event.observe(this.extFilter.dom, "keyup", CGFiltersWizard.prototype.atFilterKeyUp.bind(this));
  Event.observe(this.extFilter.dom, "focus", CGFiltersWizard.prototype.atFilterFocus.bind(this));
  Event.observe(this.extFilter.dom, "blur", CGFiltersWizard.prototype.atFilterBlur.bind(this));
  this.extFilterEmpty = this.extWizardLayer.select(CSS_FILTER_EMPTY).first();
  if (this.extFilterEmpty == null) {
    new Insertion.After(this.extFilter.dom, aFiltersWizardTemplates[this.language]["FILTER_EMPTY"]);
    this.extFilterEmpty = this.extWizardLayer.select(CSS_FILTER_EMPTY).first();
  }
  Event.observe(this.extFilterEmpty.dom, "click", CGFiltersWizard.prototype.atFilterEmptyClick.bind(this));
};

CGFiltersWizard.prototype.update = function (data, bClearItems) {
  this.updateList(this.Options.SortByList, LIST_SORTBY, CSS_SORTBYLIST, ",&nbsp;");
  this.updateList(this.Options.GroupByList, LIST_GROUPBY, CSS_GROUPBYLIST, ",&nbsp;");
};

CGFiltersWizard.prototype.updateList = function (List, CodeList, ListStyle, sSeparator) {
  var ListItemTemplate = null;
  var DOMLayer = null;

  if (this.extWizardLayer == null) return;

  var extGroup = this.extWizardLayer.select(CSS_GROUP + "." + CodeList).first();
  if (List == null) {
    var extElement = extGroup;
    if (CodeList == LIST_GROUPBY) extElement = this.extWizardLayer.select(ListStyle).first();
    extElement.dom.style.display = "none";
    return;
  }

  if (this.extWizardLayer == null) return;
  if (!List.bUpdate) return;

  var extList = this.extWizardLayer.select(ListStyle).first();
  List.Code = CodeList;

  if (CodeList == LIST_GROUPBY) ListItemTemplate = new Template(aFiltersWizardTemplates[this.language]["GROUPBYLIST_ITEM"]);
  else if (CodeList == LIST_SORTBY) ListItemTemplate = new Template(aFiltersWizardTemplates[this.language]["SORTBYLIST_ITEM"]);

  if (ListItemTemplate != null) {
    var DOMList = extList.dom;
    DOMList.innerHTML = "";
    DOMLayer = DOMList;
    if (List.Code == LIST_SORTBY) DOMLayer = new Insertion.Bottom(DOMList, aFiltersWizardTemplates[this.language]["SORTBYLIST_SECTION"]).element.immediateDescendants().last();
  }

  List.CountItems = 0;
  for (var Code in List.Items) {
    if (isFunction(List.Items[Code])) continue;
    var Item = List.Items[Code];
    var DOMItem = null;

    if (ListItemTemplate != null) {
      DOMItem = new Insertion.Bottom(DOMLayer, ListItemTemplate.evaluate({"code": Item.Code, "label": Item.Label, "description": Item.Description, "command": Item.Command ? Item.Command : "#"})).element.immediateDescendants().last();
      DOMItem.Code = Item.Code;
    }

    this.updateListItem(List.Code, Item, DOMItem);
    List.CountItems++;
  }

  if (extGroup != null)
    extGroup.dom.style.display = ((List.CountItems > 0) || (CodeList == LIST_GROUPBY)) ? "block" : "none";

  List.bUpdate = false;
};

CGFiltersWizard.prototype.updateListItem = function (CodeList, Item, DOMItem) {

  if (DOMItem != null)
    Event.observe(DOMItem, "click", CGFiltersWizard.prototype.atListItemClick.bind(this, CodeList, DOMItem));

  if (CodeList != LIST_GROUPBY)
    return;

  var DOMGroupBySelector = Ext.get(DOMItem).select(CSS_SELECTOR).first().dom;
  var width = DOMGroupBySelector.offsetWidth;
  var height = DOMGroupBySelector.offsetHeight;

  var DOMGroupBySelectorWidget = new Ext.form.ComboBox({
    typeAhead: false,
    triggerAction: 'all',
    transform: DOMGroupBySelector,
    width: 135,
    forceSelection: true
  });
  //DOMGroupBySelectorWidget.applyTo(DOMGroupBySelector);

  this.groupByWidgets[Item.Code] = DOMGroupBySelectorWidget;
  DOMGroupBySelectorWidget.setSize(width, height);
  DOMGroupBySelectorWidget.doQuery = CGFiltersWizard.prototype.queryGroupByOptions.bind(DOMGroupBySelectorWidget);

  DOMGroupBySelector.Code = Item.Code;
  DOMGroupBySelectorWidget.Code = Item.Code;
  DOMGroupBySelectorWidget.on("focus", CGFiltersWizard.prototype.atGroupByItemLoadOptions.bind(this, Item, DOMGroupBySelectorWidget));
  DOMGroupBySelectorWidget.on("expand", CGFiltersWizard.prototype.atGroupByItemLoadOptions.bind(this, Item, DOMGroupBySelectorWidget));
  DOMGroupBySelectorWidget.on("beforeselect", CGFiltersWizard.prototype.atGroupByItemOptionBeforeSelect.bind(this));

  //this.updateGroupByOptions(Item, DOMGroupBySelectorWidget, true);
};

CGFiltersWizard.prototype.addItemsToDOMSelector = function (DOMSelector, Options) {
  for (var index in Options) {
    if (isFunction(Options[index])) continue;
    var Option = Options[index];
    var DOMOption = document.createElement('option');

    DOMOption.value = filtersWizardHtmlDecode(Option.Code);
    DOMOption.text = filtersWizardHtmlDecode(Option.Label);
    DOMOption.name = filtersWizardHtmlDecode(Option.Command);

    try {
      DOMSelector.add(DOMOption, null);
    }
    catch (ex) {
      DOMSelector.add(DOMOption);
    }
  }
};

CGFiltersWizard.prototype.initState = function () {
  var i;

  this.State = new Object();
  this.State.CurrentPage = 1;
  this.State.Filter = "";
  this.State.Lists = new Object();
  this.State.Lists[LIST_SORTBY] = new Object();
  this.State.Lists[LIST_SORTBY].Orders = new Array();
  this.State.Lists[LIST_SORTBY].Items = new Array();
  this.State.Lists[LIST_GROUPBY] = new Object();
  this.State.Lists[LIST_GROUPBY].Orders = new Array();
  this.State.Lists[LIST_GROUPBY].Items = new Array();

  if (this.Options.SortByList && this.Options.SortByList.Selection) {
    for (i = 0; i < this.Options.SortByList.Selection.length; i++) {
      var CodeItem = this.Options.SortByList.Selection[i];
      this.State.Lists[LIST_SORTBY].Items[CodeItem] = {Code: CodeItem, Mode: MODE_ASCENDANT, Order: i};
    }
    this.State.Lists[LIST_SORTBY].Orders = this.Options.SortByList.Selection;

    for (i in this.Options.SortByList.Items) {
      if (isFunction(this.Options.SortByList.Items[i])) continue;
      var ItemOption = this.Options.SortByList.Items[i];
      if (this.State.Lists[LIST_SORTBY].Items[ItemOption.Code] == null) continue;
      if (ItemOption.DefaultMode) this.State.Lists[LIST_SORTBY].Items[ItemOption.Code].Mode = (ItemOption.DefaultMode.toLowerCase() == "descendant") ? MODE_DESCENDANT : MODE_ASCENDANT;
    }
  }

  if (this.Options.GroupByList && this.Options.GroupByList.Selection) {
    for (i = 0; i < this.Options.GroupByList.Selection.length; i++) {
      var aItem = this.Options.GroupByList.Selection[i];
      this.State.Lists[LIST_GROUPBY].Items[aItem[0]] = {Code: aItem[0], Value: aItem[1]};
      this.State.Lists[LIST_GROUPBY].Orders.push(aItem[0]);
    }
  }
};

CGFiltersWizard.prototype.getState = function () {
  var extFilter;
  var Result = new Object();

  extFilter = this.extWizardLayer.select(CSS_FILTER).first();

  if (extFilter == null)
    return;

  Result.Filter = extFilter.dom.value;

  Result.Sorts = new Array();
  for (var i = 0; i < this.State.Lists[LIST_SORTBY].Orders.length; i++) {
    var CodeSort = this.State.Lists[LIST_SORTBY].Orders[i];
    Result.Sorts.push(this.State.Lists[LIST_SORTBY].Items[CodeSort]);
  }

  Result.Groups = new Array();
  for (var i = 0; i < this.State.Lists[LIST_GROUPBY].Orders.length; i++) {
    var CodeGroup = this.State.Lists[LIST_GROUPBY].Orders[i];
    Result.Groups.push(this.State.Lists[LIST_GROUPBY].Items[CodeGroup]);
  }

  Result.Folder = this.State.Folder;
  Result.Selection = this.State.Selection;

  Result.toEscapeUrl = function() {
    var sorts = "";
    for (var i = 0; i < this.Sorts.length; i++) {
      var Sort = this.Sorts[i];
      if (i != 0) sorts += LIST_VIEWER_QUERIES_SEPARATOR;
      sorts += Sort.Code + LIST_VIEWER_QUERY_SEPARATOR + Sort.Mode;
    }

    var groups = "";
    for (var i = 0; i < this.Groups.length; i++) {
      var Group = this.Groups[i];
      if (i != 0) groups += LIST_VIEWER_QUERIES_SEPARATOR;
      groups += Group.Code + LIST_VIEWER_QUERY_SEPARATOR + escape(encodeURIComponent(Group.Value));
    }

    return "&query=" + this.Filter + "&sortsby=" + sorts + "&groupsby=" + groups;
  };

  return Result;
};

CGFiltersWizard.prototype.setState = function (NewState) {
  if (NewState == null) return;

  this.State.Filter = NewState.Filter;

  this.State.Lists[LIST_SORTBY].Items = new Array();
  this.State.Lists[LIST_SORTBY].Orders = new Array();
  for (var i = 0; i < NewState.Sorts.length; i++) {
    var Sort = NewState.Sorts[i];
    Sort.Order = i;
    this.State.Lists[LIST_SORTBY].Items[Sort.Code] = Sort;
    this.State.Lists[LIST_SORTBY].Orders[i] = Sort.Code;
  }

  this.State.Lists[LIST_GROUPBY].Items = new Array();
  this.State.Lists[LIST_GROUPBY].Orders = new Array();
  for (var i = 0; i < NewState.Groups.length; i++) {
    var Group = NewState.Groups[i];
    Group.Order = this.State.Lists[LIST_GROUPBY].Orders.length;
    this.State.Lists[LIST_GROUPBY].Items[Group.Code] = Group;
    this.State.Lists[LIST_GROUPBY].Orders[i] = Group.Code;
  }
};

CGFiltersWizard.prototype.applyState = function () {

  this.extFilter.dom.value = this.State.Filter;
  this.extFilterEmpty.dom.style.display = (this.State.Filter <= 0) ? "block" : "none";

  var extSortByList = this.extWizardLayer.select(CSS_SORTBYLIST + " li");
  extSortByList.each(function (extSortByItem) {
    this.unselectSortByItem(extSortByItem);
  }, this);

  for (var i = 0; i < this.State.Lists[LIST_SORTBY].Orders.length; i++) {
    var CodeSort = this.State.Lists[LIST_SORTBY].Orders[i];
    var Sort = this.State.Lists[LIST_SORTBY].Items[CodeSort];
    var extItem;

    if (i == 0) extItem = this.extWizardLayer.select(CSS_SORTBYLIST + " ." + Sort.Code).first();
    else {
      var extSection = this.createSortByListSection();
      extItem = extSection.select("." + Sort.Code).first();
    }

    if (extItem == null) continue;

    this.selectSortByItem(extItem);
    if (Sort.Mode == MODE_ASCENDANT) {
      extItem.addClass(CLASS_ASCENDANT);
      extItem.removeClass(CLASS_DESCENDANT);
    }
    else {
      extItem.removeClass(CLASS_ASCENDANT);
      extItem.addClass(CLASS_DESCENDANT);
    }
  }

  var extGroupByList = this.extWizardLayer.select(CSS_GROUPBYLIST + " li");
  extGroupByList.each(function (extGroupByItem) {
    this.unselectGroupByItem(extGroupByItem);
  }, this);

  var aDummyGroupsByItems = new Object();
  var aDummyGroupsByOrders = new Array();
  for (var i = 0; i < this.State.Lists[LIST_GROUPBY].Orders.length; i++) {
    var CodeGroup = this.State.Lists[LIST_GROUPBY].Orders[i];
    var Group = this.State.Lists[LIST_GROUPBY].Items[CodeGroup];
    var extItem = this.extWizardLayer.select(CSS_GROUPBYLIST + " ." + Group.Code).first();
    if (extItem == null) continue;
    this.selectGroupByItem(extItem, Group.Value);
    aDummyGroupsByItems[CodeGroup] = Group;
    aDummyGroupsByOrders.push(CodeGroup);
  }
  this.State.Lists[LIST_GROUPBY].Orders = aDummyGroupsByOrders;
  this.State.Lists[LIST_GROUPBY].Items = aDummyGroupsByItems;
};

CGFiltersWizard.prototype.loadGroupByOptions = function (GroupBy, DOMSelectorWidget) {
	var sRequestUrl = this.Options.DataSource.RequestGroupByOptionsUrl;

	if (this.Options.DataSource.Remote) {
		Ext.Ajax.request({
			url: sRequestUrl,
			params: "query=" + this.State.Filter + "&code=" + GroupBy.Code,
			method: "GET",
			callback: function (sOptions, bSuccess, Response) {
                var Options = new Array();
				eval(Response.responseText.replace(/\n/g, ""));
				GroupBy.Options = Options;
				this.renderGroupByOptions(GroupBy, DOMSelectorWidget);
			},
			scope: this
		});
	}
};

CGFiltersWizard.prototype.renderGroupByOptions = function(GroupBy, DOMGroupBySelectorWidget) {
	var RecordDefinition = new Ext.data.Record.create({value: 'value'}, {text: 'text'});
	var Store = DOMGroupBySelectorWidget.store;
	var Options = GroupBy.Options;
	var RecordAll = Store.getAt(0);

	Store.removeAll();
	Store.add(RecordAll);
	for (var index in Options) {
		if (isFunction(Options[index])) continue;
		var Option = Options[index];

		Store.add(new RecordDefinition({value: Option.Code, text: Option.Label}));
	}

    DOMGroupBySelectorWidget.list.setHeight(305);
};

CGFiltersWizard.prototype.queryGroupByOptions = function (C, B) {
	if (C === undefined || C === null) {
		C = ""
	}
	var A = {query: C, forceAll: B, combo: this, cancel: false};
	if (this.fireEvent("beforequery", A) === false || A.cancel) {
		return false
	}
	C = A.query;
	B = A.forceAll;
	if (B === true || (C.length >= this.minChars)) {
		if (this.lastQuery != C) {
			this.lastQuery = C;
			if (this.mode == "local") {
				this.selectedIndex = -1;
				if (B) {
					this.store.clearFilter()
				} else {
					this.store.filter(this.displayField, C, true);
				}
				this.onLoad()
			} else {
				this.store.baseParams[this.queryParam] = C;
				this.store.load({params: this.getParams(C)});
				this.expand()
			}
		} else {
			this.selectedIndex = -1;
			this.onLoad()
		}
	}
};

CGFiltersWizard.prototype.updateGroupByOptions = function (GroupBy, DOMSelectorWidget, loadRemote) {
    if (DOMSelectorWidget.store.getCount() > 1)
		return;

    if (GroupBy.Options.length > 0)
        this.renderGroupByOptions(GroupBy, DOMSelectorWidget);
    else if (loadRemote)
        this.loadGroupByOptions(GroupBy, DOMSelectorWidget);
};

CGFiltersWizard.prototype.addItemsGroup = function (extContainer, group) {
  var ContentTemplate = new Template(aFiltersWizardTemplates[this.language]["LIST_VIEWER_GROUP_ITEM_TEMPLATE"]);
  var sContent = ContentTemplate.evaluate(this.Options.DataSource.Groups[group]);
  new Insertion.Bottom(extContainer.dom, sContent);
};

CGFiltersWizard.prototype.refresh = function () {
  if (this.isRefreshing) return;
  this.isRefreshing = true;
  this.applyState();
  this.update();
};

CGFiltersWizard.prototype.unselectSortByItem = function (extItem) {
  var extSortByOptions = extItem.select(CSS_SORTBYOPTIONS).first();
  extItem.removeClass(CLASS_SELECTED);
  extItem.removeClass(CLASS_ASCENDANT);
  extItem.removeClass(CLASS_DESCENDANT);
  extItem.addClass(CLASS_ASCENDANT);
  if (extSortByOptions != null) extSortByOptions.dom.style.display = "none";
};

CGFiltersWizard.prototype.removeSortByListSectionsFromItem = function (extItem) {
  var extSections = this.extWizardLayer.select(CSS_LIST_SECTION);
  var extLastSection;

  for (var i = 0; i < extSections.getCount(); i++) {
    var CodeSort = this.State.Lists[LIST_SORTBY].Orders[i];
    if (CodeSort == null) {
      var extSection = extSections.elements[i];
      if (extSection) extSection.remove();
    }
  }

  extSections = this.extWizardLayer.select(CSS_LIST_SECTION);
  extLastSection = extSections.last();
  if (extLastSection) extLastSection.removeClass(CLASS_READONLY);
  this.extMoreSortByList.dom.style.display = (extSections.getCount() == this.Options.SortByList.CountItems) ? "none" : "block";
};

CGFiltersWizard.prototype.createSortByListSection = function () {
  var DOMList = this.extWizardLayer.select(CSS_SORTBYLIST).first().dom;
  var extSections = Ext.get(DOMList).select(CSS_LIST_SECTION);
  var iNumSections = extSections.getCount();
  var extLastSection = extSections.last();
  var extLayer = Ext.get(new Insertion.Bottom(DOMList, aFiltersWizardTemplates[this.language]["SORTBYLIST_SECTION"]).element.immediateDescendants().last());
  var ListItemTemplate = new Template(aFiltersWizardTemplates[this.language]["SORTBYLIST_ITEM"]);

  if (extLastSection) extLastSection.addClass(CLASS_READONLY);
  this.extMoreSortByList.dom.style.display = "none";

  var extSortByOptions = extLayer.select(CSS_SORTBYOPTIONS).first();
  if (extSortByOptions == null) {
    new Insertion.Bottom(extLayer.dom, new Template(aFiltersWizardTemplates[this.language]["SORTBYLIST_SECTION_OPTIONS"]).evaluate());
    extSortByOptions = extLayer.select(CSS_SORTBYOPTIONS).first();
    var extSortByOptionsUnselect = extLayer.select(CSS_SORTBYOPTIONS + " " + CSS_UNSELECT).first();
    Event.observe(extSortByOptionsUnselect.dom, "click", CGFiltersWizard.prototype.atSortBySectionUnselectClick.bind(this, extLayer.dom));
  }
  extSortByOptions.show();

  var i = 0;
  for (var Code in this.Options.SortByList.Items) {
    if (isFunction(this.Options.SortByList.Items[Code])) continue;
    var Item = this.Options.SortByList.Items[Code];
    var StateItem = this.State.Lists[LIST_SORTBY].Items[Code];
    var DOMItem = new Insertion.Bottom(extLayer.dom, ListItemTemplate.evaluate({"code": Item.Code, "label": Item.Label, "description": Item.Description})).element.immediateDescendants().last();
    DOMItem.Code = Item.Code;
    DOMItem.addClassName(CLASS_ASCENDANT);
    if (StateItem != null && StateItem.Order <= iNumSections) DOMItem.addClassName(CLASS_READONLY);
    Event.observe(DOMItem, "click", CGFiltersWizard.prototype.atListItemClick.bind(this, LIST_SORTBY, DOMItem));
    i++;
  }

  return extLayer;
};

CGFiltersWizard.prototype.removeSortByListSection = function (DOMSection) {
  DOMSection.remove();

  var extLastSection = this.extWizardLayer.select(CSS_LIST_SECTION).last();
  if (extLastSection) {
    extLastSection.removeClass(CLASS_READONLY);
    var extSelectedItem = extLastSection.select(CSS_SELECTED).first();
    this.extMoreSortByList.dom.style.display = (extSelectedItem != null) ? "block" : "none";
  }
  else this.extMoreSortByList.dom.style.display = "block";
};

CGFiltersWizard.prototype.selectSortByItem = function (extItem) {
  this.removeSortByListSectionsFromItem(extItem);
  if (!extItem.hasClass(CLASS_SELECTED)) extItem.addClass(CLASS_SELECTED);
  if (extItem.hasClass(CLASS_READONLY)) extItem.removeClass(CLASS_READONLY);
};

CGFiltersWizard.prototype.toggleSortByItemMode = function (extItem) {
  var DOMItem = extItem.dom;
  var Sort = this.State.Lists[LIST_SORTBY].Items[DOMItem.Code];

  DOMItem.toggleClassName(CLASS_ASCENDANT);
  DOMItem.toggleClassName(CLASS_DESCENDANT);
  Sort.Mode = DOMItem.hasClassName(CLASS_ASCENDANT) ? MODE_ASCENDANT : MODE_DESCENDANT;
};

CGFiltersWizard.prototype.unselectGroupByItem = function (extItem) {
  var Widget = this.groupByWidgets[extItem.dom.Code];
  if (Widget != null)
    Widget.setValue("all");
};

CGFiltersWizard.prototype.selectGroupByItem = function (extItem, sValue) {
  var Widget = this.groupByWidgets[extItem.dom.Code];
  if (Widget != null)
    Widget.setValue(sValue);
};

CGFiltersWizard.prototype.clearFilter = function () {
  this.State.Filter = "";
  this.extFilter.dom.value = "";
  this.extFilterEmpty.dom.style.display = "block";
  if (this.onClearFilter) this.onClearFilter();
  if (this.onUpdateState) this.onUpdateState(this.getState());
};

CGFiltersWizard.prototype.filter = function () {
  this.State.Filter = this.extFilter.dom.value;
  this.extFilterEmpty.dom.style.display = (this.State.Filter.length <= 0) ? "block" : "none";
  if (this.onFilter) this.onFilter(this.State.Filter);
  if (this.onUpdateState) this.onUpdateState(this.getState());
};

CGFiltersWizard.prototype.addItemOnSelection = function (CodeList, Item) {
  var AuxItem = this.State.Lists[CodeList].Items[Item.Code];

  if (AuxItem) {
    Item.Order = AuxItem.Order;
    this.State.Lists[CodeList].Items[Item.Code] = Item;
  }
  else {
    this.State.Lists[CodeList].Orders.push(Item.Code);
    Item.Order = this.State.Lists[CodeList].Orders.length - 1;
    this.State.Lists[CodeList].Items[Item.Code] = Item;
  }
};

CGFiltersWizard.prototype.removeItemOnSelection = function (CodeList, CodeItem) {
  var sResult = this.State.Lists[CodeList].Orders.join(",");
  var iPos = sResult.indexOf(CodeItem);
  var aItems = new Array();

  if (iPos != -1) {
    if (iPos > 0) iPos = iPos - 1;
    sResult = sResult.substring(0, iPos) + sResult.substring(iPos + CodeItem.length + 1);
  }

  this.State.Lists[CodeList].Orders = (sResult.length > 0) ? sResult.split(",") : new Array();
  for (var i = 0; i < this.State.Lists[CodeList].Orders.length; i++) {
    var CodeItem = this.State.Lists[CodeList].Orders[i];
    aItems[CodeItem] = this.State.Lists[CodeList].Items[CodeItem];
    aItems[CodeItem].Order = i;
  }

  this.State.Lists[CodeList].Items = aItems;
};

CGFiltersWizard.prototype.sortByItem = function (DOMItem) {
  var DOMSection = DOMItem.up(CSS_LIST_SECTION);
  var extSelected = Ext.get(DOMSection).select(CSS_SELECTED).first();

  this.State.CurrentPage = 1;

  if (DOMItem.hasClassName(CLASS_SELECTED)) {
    this.toggleSortByItemMode(Ext.get(DOMItem));
    if (this.onSortBy) this.onSortBy();
    if (this.onUpdateState) this.onUpdateState(this.getState());
    return;
  }

  if (extSelected != null) {
    this.removeSortByListSectionsFromItem(extSelected);
    this.removeItemOnSelection(LIST_SORTBY, extSelected.dom.Code);
    this.unselectSortByItem(extSelected);
  }

  this.addItemOnSelection(LIST_SORTBY, {Code: DOMItem.Code, Mode: DOMItem.hasClassName(CLASS_ASCENDANT) ? MODE_ASCENDANT : MODE_DESCENDANT});
  this.selectSortByItem(Ext.get(DOMItem));
  if (this.onSortBy) this.onSortBy();
  if (this.onUpdateState) this.onUpdateState(this.getState());
};

CGFiltersWizard.prototype.setSortByList = function (SortByList) {
  this.Options.SortByList = SortByList;
  this.Options.SortByList.bUpdate = true;
};

CGFiltersWizard.prototype.setGroupByList = function (GroupByList) {
  this.Options.GroupByList = GroupByList;
  this.Options.GroupByList.bUpdate = true;
};

CGFiltersWizard.prototype.setDataSourceUrls = function (itemsUrl, groupByOptionsUrl) {
  this.Options.DataSource.Remote = true;
  this.Options.DataSource.RequestUrl = itemsUrl;
  this.Options.DataSource.RequestGroupByOptionsUrl = groupByOptionsUrl;
};

CGFiltersWizard.prototype.dispose = function () {
  if (this.extFilter.dom == null || this.extFirst.dom == null ||
      this.extPrevious.dom == null || this.extNext.dom == null ||
      this.extLast.dom == null)
    return;

  Event.stopObserving(this.extFilter.dom, "keyup", CGFiltersWizard.prototype.atFilterKeyUp.bind(this));
  Event.stopObserving(this.extFilter.dom, "focus", CGFiltersWizard.prototype.atFilterFocus.bind(this));
  Event.stopObserving(this.extFilter.dom, "blur", CGFiltersWizard.prototype.atFilterBlur.bind(this));

  this.extWizardLayer = null;
};

CGFiltersWizard.prototype.atListItemClick = function (CodeList, DOMItem, EventLaunched) {
  var href = DOMItem.href;

  if (!href) {
    var DOMAnchor = DOMItem.down("a");
    if (!DOMAnchor) return;
    href = DOMAnchor.href;
  }

  if (CodeList == LIST_SORTBY) this.sortByItem(DOMItem);

  Event.stop(EventLaunched);
  return false;
};

CGFiltersWizard.prototype.atGroupByItemLoadOptions = function (GroupBy, DOMSelectorWidget) {
    this.updateGroupByOptions(GroupBy, DOMSelectorWidget, true);
	DOMSelectorWidget.selectText();
};

CGFiltersWizard.prototype.atGroupByItemOptionBeforeSelect = function (DOMSelectorWidget, Record, index) {
  this.State.CurrentPage = 1;

  var value = Record.data.value;
  if (value == "all") this.removeItemOnSelection(LIST_GROUPBY, DOMSelectorWidget.Code);
  else this.addItemOnSelection(LIST_GROUPBY, {Code: DOMSelectorWidget.Code, Value: value});

  if (this.onGroupBy) this.onGroupBy();
  if (this.onUpdateState) this.onUpdateState(this.getState());

  return true;
};

CGFiltersWizard.prototype.atSortBySectionUnselectClick = function (DOMSection, EventLaunched) {
  var extSection = Ext.get(DOMSection);
  var extSelectedItem = extSection.select(CSS_SELECTED).first();

  if (extSelectedItem != null) {
    extSelectedItem.removeClass(CLASS_SELECTED);
    this.removeItemOnSelection(LIST_SORTBY, extSelectedItem.dom.Code);
    this.removeSortByListSectionsFromItem(extSelectedItem);
  }
  else this.removeSortByListSection(DOMSection);

  if (this.onSortBy) this.onSortBy();
  if (this.onUpdateState) this.onUpdateState(this.getState());

  Event.stop(EventLaunched);
};

CGFiltersWizard.prototype.atFilterKeyUp = function (oEvent) {
  var codeKey = oEvent.keyCode;
  var sFilter = this.extFilter.dom.value;

  if ((codeKey == KEY_UP) || (codeKey == KEY_DOWN) || (codeKey == KEY_ENTER) || (codeKey == KEY_LEFT) || (codeKey == KEY_RIGHT) || (codeKey == KEY_CONTROL) || (codeKey == KEY_SHIFT)) return;
  if (sFilter != "" && sFilter.length < 3) return;

  window.clearTimeout(this.idTimeoutFilter);
  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 500);
};

CGFiltersWizard.prototype.atFilterFocus = function () {
  this.extFilterEmpty.dom.style.display = "none";
  this.extFilter.dom.select();
};

CGFiltersWizard.prototype.atFilterBlur = function () {
  var sValue = this.extFilter.dom.value;
  this.extFilterEmpty.dom.style.display = (sValue.length <= 0) ? "block" : "none";
};

CGFiltersWizard.prototype.atFilterEmptyClick = function () {
  this.extFilter.focus();
};

CGFiltersWizard.prototype.atUnselectFilter = function (DOMUnselect) {
  if (DOMUnselect.Code == CODE_WORDS_FILTER) {
    this.clearFilter();
  }
  else {
    var extItem = this.extWizardLayer.select(CSS_GROUPBYLIST + " ." + DOMUnselect.Code).first();
    this.removeItemOnSelection(LIST_GROUPBY, extItem.dom.Code);
    this.unselectGroupByItem(extItem);
    if (this.onGroupBy) this.onGroupBy();
    if (this.onUpdateState) this.onUpdateState(this.getState());
  }
};

CGFiltersWizard.prototype.atMoreSortByList = function () {
  this.createSortByListSection();
};

CGView = function () {
  this.Id = Ext.id();
  this.DOMLayer = null;
  this.Target = null;
  this.Mode = null;
  this.ViewContainer = null;
  this.Type = null;
};

// private
CGView.prototype.getType = function () {
  return this.Type;
};

CGView.prototype.setType = function (Type) {
  this.Type = Type;
};

CGView.prototype.setDOMLayer = function (DOMLayer) {
  if (DOMLayer == null) return;
  this.DOMLayer = DOMLayer;
  this.DOMLayer.IdView = this.Id;
};

// public
CGView.prototype.init = function (DOMLayer) {
  this.setDOMLayer(DOMLayer);
};

CGView.prototype.getId = function () {
  return this.Id;
};

CGView.prototype.getDOM = function () {
  return $(this.DOMLayer);
};

CGView.prototype.getTarget = function () {
  return this.Target;
};

CGView.prototype.setTarget = function (Target) {
  this.Target = Target;
};

CGView.prototype.getMode = function () {
  return this.Mode;
};

CGView.prototype.setMode = function (Mode) {
  this.Mode = Mode;
};

CGView.prototype.getContainer = function () {
  return this.ViewContainer;
};

CGView.prototype.setContainer = function (ViewContainer) {
  this.ViewContainer = ViewContainer;
};

CGView.prototype.show = function () {
  if (!this.DOMLayer) return;
  this.DOMLayer.show();
};

CGView.prototype.hide = function () {
  if (!this.DOMLayer) return;
  this.DOMLayer.hide();
};

CGView.prototype.refresh = function () {
};

CGView.prototype.destroy = function () {
  EventManager.disableNotifications();
  this.DOMLayer.destroy();
  EventManager.enableNotifications();
};

LOCATIONPICKER_CLASS_EDITING = "editing";

var aLocationPickerMessages = new Array();
aLocationPickerMessages["es"] = new Array();
aLocationPickerMessages["es"]["LOCATE"] = "Localiza el elemento en el mapa. Puedes representar el elemento con un punto, una línea o un polígono.";
aLocationPickerMessages["es"]["LOCATED"] = "Si desea volver a representar el elemento en el mapa, haga click en borrar marcador.";
aLocationPickerMessages["es"]["FINISH_EDITION"] = "Ha finalizado la edición correctamente. Para deslocalizar el elemento haga click en Borrar localización.";
aLocationPickerMessages["es"]["SET_POINT"] = "Arrastra el marcador y colócalo en el punto donde desea ubicar el elemento.";
aLocationPickerMessages["es"]["SET_LINE"] = "Haga click en las esquinas de la línea que vaya a construir. Finalize la edición de la línea haciendo click en el botón derecho o pulsando sobre el botón de finalizar edición.";
aLocationPickerMessages["es"]["SET_POLYGON"] = "Haga click en los vértices del polígono que vaya a construir. Finalize la edición del polígono haciendo click en el botón derecho o pulsando sobre el botón de finalizar edición.";
aLocationPickerMessages["es"]["SEARCHING_GPS_POSITION"] = "Buscando posición GPS actual...";
aLocationPickerMessages["es"]["SEARCHING_GPS_POSITION_ERROR"] = "Su navegador no permite obtener la posición, actualize a una versión más reciente.";
aLocationPickerMessages["es"]["PLACE_NOT_FOUND"] = "No se ha encontrado la ubicación indicada.";

function WKTWriter() {
  this.writer;
};

WKTWriter.prototype.writeType = function (type) {
  this.writer = type + " ";
};

WKTWriter.prototype.writeStartArray = function () {
  this.writer += "(";
};

WKTWriter.prototype.writeEndArray = function () {
  if (this.writer.charAt(this.writer.length - 2) == ',')
    this.writer = this.writer.substring(0, this.writer.length - 2);
  this.writer += ")";
};

WKTWriter.prototype.writePoint = function (lat, lng) {
  this.writer += lat + " " + lng + ", ";
};

WKTWriter.prototype.get = function () {
  return this.writer;
};

LocationPicker = function () {
  this.base = CGView;
  this.base();
  this.Type = VIEW_NODE_TYPE_NODE;
  this.aEditors = new Array();
  this.Language = "es";
  this.geocoder = (typeof google != "undefined") ? new google.maps.Geocoder() : null;
};

LocationPicker.prototype = new CGView;

LocationPicker.prototype.init = function (options, mapLayer, infoPanelLayer) {
  this.options = options;

  this.mapLayer = mapLayer;

  if (this.options.language && aLocationPickerMessages[this.options.language]) this.Language = this.options.language;

  this.infoPanelLayer = infoPanelLayer;
  this.infoPanelLayer.dom.innerHTML = aLocationPickerMessages[this.Language]["LOCATE"];

  Ext.EventManager.onWindowResize(this.atResize, this);
};

LocationPicker.prototype.resize = function () {
  if (this.map == null) return;
  google.maps.event.trigger(this.map, "resize");
};

LocationPicker.prototype.atResize = function () {
  this.resize();
};

LocationPicker.prototype.createPolygon = function (polygon) {
  var array = new Array();
  for (var i = 0; i < polygon.length; i++) {
    array.push(this.createLineString(polygon[i]));
  }
  return array;
};

LocationPicker.prototype.createLineString = function (lineString) {
  var array = new Array();
  for (var i = 0; i < lineString.length; i++) {
    var latlng = new google.maps.LatLng(lineString[i][0], lineString[i][1]);
    array.push(latlng);
  }
  return array;
};

LocationPicker.prototype.refresh = function () {
  var located = this.isLocated();

  if (located)
    this.infoPanelLayer.dom.innerHTML = aLocationPickerMessages[this.Language]["LOCATED"];
  else
    this.infoPanelLayer.dom.innerHTML = aLocationPickerMessages[this.Language]["LOCATE"];

  if (this.onRefresh) this.onRefresh();
};

LocationPicker.prototype.setPlace = function (place) {
  if (place == "") return;
  if (this.geocoder) this.geocoder.geocode({address: place, language: this.Language}, LocationPicker.prototype.atSetPlaceInfoArrived.bind(this));
};

LocationPicker.prototype.setLocation = function (location) {
  this.options.zoom = location ? location.zoom : 12;

  var centerLat = 15;
  var centerLng = 15;
  if (location) {
    this.location = location;
    centerLat = location.center[0];
    centerLng = location.center[1];
  } else {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(this.atGPSPositioned.bind(this));
    } else {
      this.options.zoom = 10;
    }
  }
  this.options.center = new google.maps.LatLng(centerLat, centerLng);

  this.map = new google.maps.Map(this.mapLayer.dom, this.options);

  if (location) {
    if (location.type == G_POINT) {
      var latlng = new google.maps.LatLng(location.geometry[0], location.geometry[1]);
      this.marker = new google.maps.Marker({
        draggable: true,
        position: latlng,
        map: this.map
      });
      google.maps.event.addListener(this.marker, 'dragend', this.atMarkerMoved.bind(this));
    } else if (location.type == G_LINESTRING) {
      var polyOptions = {
        path: this.createLineString(location.geometry),
        strokeColor: '#0000FF',
        strokeOpacity: 0.5,
        strokeWeight: 3,
        map: this.map,
        cursor: "help"
      };
      this.polyline = new google.maps.Polyline(polyOptions);
    } else if (location.type == G_POLYGON) {
      var polyOptions = this.polygonOptions(location.geometry);
      this.polygon = new google.maps.Polygon(polyOptions);
    } else if (location.type == G_MULTIPOLYGON) {
        this.multiPolygons = [];
        for (var index in location.geometry) {
          if (isFunction(location.geometry[index])) continue;
          var polyOptions = this.polygonOptions(location.geometry[index]);
          this.multiPolygons.push(new google.maps.Polygon(polyOptions));
        }
    }
  }

  this.refresh();
};

LocationPicker.prototype.polygonOptions = function(geometry) {
    return {
        paths: this.createPolygon(geometry),
        fillColor: '#0000FF',
        fillOpacity: 0.2,
        strokeColor: '#0000FF',
        strokeOpacity: 0.5,
        strokeWeight: 3,
        map: this.map
    };
},

LocationPicker.prototype.clean = function () {
    if (this.marker) {
      this.marker.setMap(null);
      this.marker = null;
    }
    if (this.polyline) {
      this.polyline.setMap(null);
      this.polyline = null;
    }
    if (this.polygon) {
      this.polygon.setMap(null);
      this.polygon = null;
    }
    if (this.multiPolygons) {
        for (var i=0; i<this.multiPolygons.length; i++)
          this.multiPolygons[i].setMap(null);
        this.multiPolygons = null;
    }

  this.atFinishEditing();
};

LocationPicker.prototype.save = function () {
  var writer = new WKTWriter();
  if (this.marker) {
    var pos = this.marker.getPosition();

    writer.writeType(G_POINT);
    writer.writeStartArray();
    writer.writePoint(pos.lat(), pos.lng());
    writer.writeEndArray();
  } else if (this.polyline) {
    writer.writeType(G_LINESTRING);
    writer.writeStartArray();

    var path = this.polyline.getPath();
    var pathLength = path.getLength();

    if (pathLength <= 1) {
      this.polyline.setMap(null);
      this.polyline = null;
      if (this.onCleanLocation) this.onCleanLocation();
      return;
    }

    for (var i = 0; i < pathLength; i++) {
      var pos = path.getAt(i);
      writer.writePoint(pos.lat(), pos.lng());
    }

    writer.writeEndArray();
  } else if (this.polygon) {
    writer.writeType(G_POLYGON);
    writer.writeStartArray();

    var paths = this.polygon.getPaths();
    var pathsLength = paths.getLength();

    if (pathsLength < 1) {
      this.polygon.setMap(null);
      this.polygon = null;
      if (this.onCleanLocation) this.onCleanLocation();
      return;
    }

    for (var j = 0; j < pathsLength; j++) {
      writer.writeStartArray();

      var path = paths.getAt(j);
      var pathLength = path.getLength();
      for (var i = 0; i < pathLength; i++) {
        var pos = path.getAt(i);
        writer.writePoint(pos.lat(), pos.lng());
      }

      if (pathLength > 0) {
        var pos = path.getAt(0);
        writer.writePoint(pos.lat(), pos.lng());
      }
      writer.writeEndArray();
    }

    writer.writeEndArray();
  } else {
    if (this.onCleanLocation) this.onCleanLocation(this);
    return;
  }

  var Location = writer.get();
  if (this.onDrawLocation) this.onDrawLocation(this, Location);
};


LocationPicker.prototype.setMarkerTo = function (position) {
  this.marker = new google.maps.Marker({
    draggable: true,
    position: position,
    map: this.map
  });

  google.maps.event.addListener(this.marker, 'dragend', this.atMarkerMoved.bind(this));
};

LocationPicker.prototype.positionate = function () {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(this.atGPSPositionChange.bind(this),
        this.atGPSPositionChangeError.bind(this),
        { enableHighAccuracy: true });
    this.infoPanelLayer.dom.innerHTML = aLocationPickerMessages[this.Language]["SEARCHING_GPS_POSITION"];
  } else {
    alert(aLocationPickerMessages[this.Language]["SEARCHING_GPS_POSITION_ERROR"]);
  }
};

LocationPicker.prototype.drawPoint = function () {
  this.clean();

  this.infoPanelLayer.dom.innerHTML = aLocationPickerMessages[this.Language]["SET_POINT"];
  this.mapLayer.addClass(LOCATIONPICKER_CLASS_EDITING);
  this.editing = true;
  this.refresh();

  google.maps.event.addListener(this.map, 'click', this.atAddMarker.bind(this));
};

LocationPicker.prototype.drawLine = function () {
  this.clean();

  this.infoPanelLayer.dom.innerHTML = aLocationPickerMessages[this.Language]["SET_LINE"];
  this.mapLayer.addClass(LOCATIONPICKER_CLASS_EDITING);
  this.editing = true;
  this.refresh();

  var polyOptions = {
    strokeColor: '#0000FF',
    strokeOpacity: 0.5,
    strokeWeight: 3,
    map: this.map
  };
  this.polyline = new google.maps.Polyline(polyOptions);

  google.maps.event.addListener(this.map, 'click', this.atAddPoint.bind(this));
  google.maps.event.addListener(this.map, 'rightclick', this.atFinishEditing.bind(this));
};

LocationPicker.prototype.drawPolygon = function () {
  this.clean();

  this.infoPanelLayer.dom.innerHTML = aLocationPickerMessages[this.Language]["SET_POLYGON"];
  this.mapLayer.addClass(LOCATIONPICKER_CLASS_EDITING);
  this.editing = true;
  this.refresh();

  var polyOptions = {
    fillColor: '#0000FF',
    fillOpacity: 0.2,
    strokeColor: '#0000FF',
    strokeOpacity: 0.5,
    strokeWeight: 3,
    map: this.map
  };
  this.polygon = new google.maps.Polygon(polyOptions);

  google.maps.event.addListener(this.map, 'click', this.atAddPoint.bind(this));
  google.maps.event.addListener(this.map, 'rightclick', this.atFinishEditing.bind(this));
};

LocationPicker.prototype.panToCenter = function () {
  if (!this.location) return;

  var pos = new google.maps.LatLng(this.location.center[0], this.location.center[1]);
  this.map.panTo(pos);
};

LocationPicker.prototype.finishDraw = function () {
  this.mapLayer.removeClass(LOCATIONPICKER_CLASS_EDITING);
  this.atFinishEditing();
};

LocationPicker.prototype.cancelDraw = function () {
  this.mapLayer.removeClass(LOCATIONPICKER_CLASS_EDITING);
  this.clean();
};

LocationPicker.prototype.isLocated = function () {
  return (this.marker != null || this.polyline != null || this.polygon != null || this.multiPolygons != null);
};

LocationPicker.prototype.isEditing = function () {
  return this.editing;
};

// #############################################################################################################
LocationPicker.prototype.atGPSPositioned = function (position) {
  var latitude = position.coords.latitude;
  var longitude = position.coords.longitude;

  var pos = new google.maps.LatLng(latitude, longitude);
  this.map.panTo(pos);
};

LocationPicker.prototype.atMarkerMoved = function () {
  this.save();
};

LocationPicker.prototype.atAddMarker = function (event) {

  this.marker = new google.maps.Marker({
    draggable: true,
    position: event.latLng,
    map: this.map
  });

  google.maps.event.addListener(this.marker, 'dragend', this.atMarkerMoved.bind(this));

  this.atFinishEditing();
};

LocationPicker.prototype.atAddPoint = function (event) {
  var path = null;
  if (this.polyline)
    path = this.polyline.getPath();
  else
    path = this.polygon.getPath();
  path.push(event.latLng);
};

LocationPicker.prototype.atFinishEditing = function (event) {
  google.maps.event.clearListeners(this.map, "click");
  google.maps.event.clearListeners(this.map, "rightclick");

  this.save();
  this.infoPanelLayer.dom.innerHTML = aLocationPickerMessages[this.Language]["FINISH_EDITION"];

  this.mapLayer.removeClass(LOCATIONPICKER_CLASS_EDITING);
  this.editing = false;
  this.refresh();

  return false;
};

LocationPicker.prototype.atGPSPositionChange = function (position) {
  var latitude = position.coords.latitude;
  var longitude = position.coords.longitude;

  this.clean();

  var pos = new google.maps.LatLng(latitude, longitude);
  this.setMarkerTo(pos);
  this.map.panTo(pos);
  this.save();
};

LocationPicker.prototype.atGPSPositionChangeError = function (err) {
  this.infoPanelLayer.dom.innerHTML = err.message;
};

LocationPicker.prototype.atSetPlaceInfoArrived = function (geocoderResult) {
  if (!geocoderResult || (geocoderResult.length < 1)) this.infoPanelLayer.dom.innerHTML = aLocationPickerMessages["es"]["PLACE_NOT_FOUND"];
  this.map.panTo(geocoderResult[0].geometry.location);
};

CGViewNodeLocation = function () {
  this.base = CGView;
  this.base();
  this.Type = VIEW_NODE_TYPE_NODE;
  this.aEditors = new Array();
  this.locationPicker = new LocationPicker();
};

CGViewNodeLocation.prototype = new CGView;

CGViewNodeLocation.prototype.initBehaviours = function () {
  var helper = ViewerSidebar.getHelper(Helper.MAP);
  var extEditionToolbar = Ext.get(helper.getEditionToolbarLayer());
  var extNavigationToolbar = Ext.get(helper.getNavigationToolbarLayer());
  var extSearch = Ext.get(helper.getSearchLayer());
  var editionTemplate = AppTemplate.ViewNodeLocationEditionToolbar;
  var navigationTemplate = AppTemplate.ViewNodeLocationNavigationToolbar;
  var searchTemplate = AppTemplate.ViewNodeLocationSearch;

  editionTemplate = translate(editionTemplate, Lang.ViewNodeLocation);
  navigationTemplate = translate(navigationTemplate, Lang.ViewNodeLocation);
  searchTemplate = translate(searchTemplate, Lang.ViewNodeLocation);

  extEditionToolbar.dom.innerHTML = editionTemplate;

  

  this.pointBtn = extEditionToolbar.select('.op.point').first();
  this.pointBtn.on('click', this.atPointClick.bind(this));

  this.lineBtn = extEditionToolbar.select('.op.line').first();
  this.lineBtn.on('click', this.atLineClick.bind(this));

  this.polyBtn = extEditionToolbar.select('.op.poly').first();
  this.polyBtn.on('click', this.atPolygonClick.bind(this));

  this.cleanBtn = extEditionToolbar.select('.op.clean').first();
  this.cleanBtn.on('click', this.atCleanClick.bind(this));

  this.finishBtn = extEditionToolbar.select('.op.finish').first();
  this.finishBtn.on('click', this.atFinishClick.bind(this));

  this.cancelBtn = extEditionToolbar.select('.op.cancel').first();
  this.cancelBtn.on('click', this.atCancelClick.bind(this));

  extNavigationToolbar.dom.innerHTML = navigationTemplate;

  this.panToCenterBtn = extNavigationToolbar.select('.op.center').first();
  this.panToCenterBtn.on('click', this.atPanToCenterClick.bind(this));

  extSearch.dom.innerHTML = searchTemplate;

  this.searchValue = extSearch.select('input').first();
  this.searchValue.on('keyup', this.atSearchKeyUp.bind(this));

  this.searchBtn = extSearch.select('.op.accept').first();
  this.searchBtn.on('click', this.atSearchClick.bind(this));
};

CGViewNodeLocation.prototype.init = function (options, infoPanelLayer) {
  var helper = ViewerSidebar.getHelper(Helper.MAP);
  this.initBehaviours();
  this.locationPicker.init(options, Ext.get(this.DOMLayer), Ext.get(helper.getInfoLayer()));
  this.locationPicker.onDrawLocation = CGViewNodeLocation.prototype.atDrawLocation.bind(this);
  this.locationPicker.onCleanLocation = CGViewNodeLocation.prototype.atCleanLocation.bind(this);
  this.locationPicker.onRefresh = CGViewNodeLocation.prototype.atRefresh.bind(this);
};

CGViewNodeLocation.prototype.setTarget = function (nodeId, location) {
  this.nodeId = nodeId;
  this.locationPicker.setLocation(location);
};

CGViewNodeLocation.prototype.gotoPlace = function (place) {
  this.locationPicker.setPlace(place);
};

CGViewNodeLocation.prototype.resize = function () {
  this.locationPicker.resize();
};

// #############################################################################################################
CGViewNodeLocation.prototype.atDrawLocation = function (locationPicker, location) {
  var Process = new CGProcessUpdateNodeLocation();
  Process.Id = this.nodeId;
  Process.Location = location;
  Process.execute();
};

CGViewNodeLocation.prototype.atCleanLocation = function (locationPicker) {
  var Process = new CGProcessCleanNodeLocation();
  Process.Id = this.nodeId;
  Process.execute();
};

CGViewNodeLocation.prototype.atRefresh = function () {
  var located = this.locationPicker.isLocated();

  if (this.locationPicker.isEditing()) {
    this.pointBtn.dom.style.display = "none";
    this.lineBtn.dom.style.display = "none";
    this.polyBtn.dom.style.display = "none";
    this.finishBtn.dom.style.display = "block";
    this.cancelBtn.dom.style.display = "block";
    return;
  }

  this.finishBtn.dom.style.display = "none";
  this.cancelBtn.dom.style.display = "none";

  if (located) {
    this.pointBtn.dom.style.display = "none";
    this.lineBtn.dom.style.display = "none";
    this.polyBtn.dom.style.display = "none";
    this.cleanBtn.dom.style.display = "block";
  }
  else {
    this.pointBtn.dom.style.display = "block";
    this.lineBtn.dom.style.display = "block";
    this.polyBtn.dom.style.display = "block";
    this.cleanBtn.dom.style.display = "none";
  }

};

CGViewNodeLocation.prototype.atPositionClick = function () {
  this.locationPicker.positionate();
};

CGViewNodeLocation.prototype.atPointClick = function () {
  this.locationPicker.drawPoint();
};

CGViewNodeLocation.prototype.atLineClick = function () {
  this.locationPicker.drawLine();
};

CGViewNodeLocation.prototype.atPolygonClick = function () {
  this.locationPicker.drawPolygon();
};

CGViewNodeLocation.prototype.atPanToCenterClick = function () {
  this.locationPicker.panToCenter();
};

CGViewNodeLocation.prototype.atCleanClick = function () {
  this.locationPicker.clean();
};

CGViewNodeLocation.prototype.atFinishClick = function (LocatioPicker, Location) {
  this.locationPicker.finishDraw();
};

CGViewNodeLocation.prototype.atCancelClick = function () {
  this.locationPicker.cancelDraw();
};

CGViewNodeLocation.prototype.atSearchKeyUp = function (event) {
  var codeKey = event.getKey();
  if (codeKey == event.ENTER) this.gotoPlace(this.searchValue.dom.value);
  return false;
};

CGViewNodeLocation.prototype.atSearchClick = function () {
  this.gotoPlace(this.searchValue.dom.value);
};

var LineStringOptions = {
  strokeColor: '#0000FF',
  strokeOpacity: 0.5,
  strokeWeight: 1
};

var PolygonOptions = {
  clickable: true,
  fillColor: '#0000FF',
  fillOpacity: 0.2,
  strokeColor: '#0000FF',
  strokeOpacity: 0.5,
  strokeWeight: 1
};

CGViewMapLayer = function () {
  this.base = CGView;
  this.base();
  this.Type = VIEW_NODE_TYPE_NODE;
  this.aEditors = new Array();

  this.currentNodeId = null;
  this.executeIdle = true;
  this.geocoder = new google.maps.Geocoder();
  this.condition = null;
  this.lastHeatMap = null;
  this.centerLat = 28;
  this.centerLng = -15;
};

CGViewMapLayer.prototype = new CGView;
CGViewMapLayer.MarkersPerPage = 1500;

CGViewMapLayer.prototype.initBehaviours = function (options) {
  var helper = ViewerSidebar.getHelper(Helper.MAP);
  var extSearch = Ext.get(helper.getSearchLayer());
  var searchTemplate = AppTemplate.ViewMapLayerSearch;
  var extNavigationToolbar = Ext.get(helper.getNavigationToolbarLayer());
  searchTemplate = translate(searchTemplate, Lang.ViewMapLayer);

  extSearch.dom.innerHTML = searchTemplate;
  extNavigationToolbar.dom.innerHTML = "";

  this.searchValue = extSearch.select('input').first();
  this.searchValue.on('keyup', this.atSearchKeyUp.bind(this));

  this.searchBtn = extSearch.select('.op.accept').first();
  this.searchBtn.on('click', this.atSearchClick.bind(this));

  Ext.EventManager.onWindowResize(this.atResize, this);
};

CGViewMapLayer.prototype.init = function (options) {
  this.options = options;
  this.count = 1;
  this.page = 0;
  this.infoWindowTemplate = new Ext.Template(this.options.infoTemplate ? this.options.infoTemplate.unescapeHTML() : AppTemplate.ViewPlacemarkInfoWindow);
  this.infoWindowTemplate.compile();

  this.initBehaviours();
};

CGViewMapLayer.prototype.filter = function (condition) {
  this.condition = condition;
  this.updateLayer();
};

CGViewMapLayer.prototype.setTarget = function (source) {
  this.sourceCountUrl = source.countUrl;
  this.sourceUrl = source.url;
};

CGViewMapLayer.prototype.setCenter = function (latitude, longitude) {
  this.centerLat = latitude;
  this.centerLng = longitude;
};

CGViewMapLayer.prototype.render = function () {
  this.options.zoom = 12;

  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(this.atGPSPositioned.bind(this));
  } else {
    this.options.zoom = 10;
  }

  this.options.center = new google.maps.LatLng(this.centerLat, this.centerLng);
  this.DOMLayer.innerHTML = translate(AppTemplate.ViewMapLayer, Lang.ViewMapLayer);

  var extLayer = Ext.get(this.DOMLayer);
  extLayer.select(".next").first().on("click", this.atNextPage.bind(this));
  extLayer.select(".previous").first().on("click", this.atPreviousPage.bind(this));

  this.extLoading = extLayer.select(".loading-map").first();
  this.extPage = extLayer.select(".page").first();
  this.extCount = extLayer.select(".count").first();

  this.map = new google.maps.Map(extLayer.select(".map").first().dom, this.options);

  this.updateLayer();
  this.addListeners();
};

CGViewMapLayer.prototype.refresh = function (condition) {
  this.updateLayer();
};

CGViewMapLayer.prototype.addListeners = function (place) {
  google.maps.event.addListener(this.map, 'bounds_changed', this.atBoundsChanged.bind(this));
  google.maps.event.addListener(this.map, 'idle', this.atIdle.bind(this));
};

CGViewMapLayer.prototype.gotoPlace = function (place) {
  if (place == "") return;
  this.geocoder.geocode({address: place}, CGViewMapLayer.prototype.atGotoPlaceInfoArrived.bind(this));
};

CGViewMapLayer.prototype.isSameBounds = function (bounds) {

  if (bounds == null) return false;

  var currentBounds = this.map.getBounds();
  var currentNorthEast = currentBounds.getNorthEast();
  var currentSouthWest = currentBounds.getSouthWest();
  var northEast = bounds.getNorthEast();
  var southWest = bounds.getSouthWest();

  return currentNorthEast.lat() == northEast.lat() &&
      currentNorthEast.lng() == northEast.lng() &&
      currentSouthWest.lat() == southWest.lat() &&
      currentSouthWest.lng() == southWest.lng();
};

CGViewMapLayer.prototype.updatePagesToolbar = function () {
    this.countPages = Math.round(this.count / CGViewMapLayer.MarkersPerPage) + (this.count % CGViewMapLayer.MarkersPerPage > 0 ? 1 : 0);
    this.page = 0;
    this.refreshPagesToolbar();
};

CGViewMapLayer.prototype.refreshPagesToolbar = function() {
    this.extCount.dom.innerHTML = this.countPages > 0 ? this.countPages : 1;
    this.extPage.dom.innerHTML = this.page+1;
};

CGViewMapLayer.prototype.atNextPage = function () {
  this.page++;
  if (this.page >= this.countPages) this.page = this.countPages-1;
  this.refreshPagesToolbar();
  this.refreshLayer();
};

CGViewMapLayer.prototype.atPreviousPage = function () {
    this.page--;
    if (this.page <= 0) this.page = 0;
    this.refreshPagesToolbar();
    this.refreshLayer();
};

CGViewMapLayer.prototype.getBoundsQuery = function() {
    var bounds = this.map.getBounds();
    var northEast = bounds.getNorthEast();
    var southWest = bounds.getSouthWest();
    return "&nex=" + northEast.lat() + "&ney=" + northEast.lng() + "&swx=" + southWest.lat() + "&swy=" + southWest.lng();
};

CGViewMapLayer.prototype.getFilterQuery = function() {
    return this.condition != null ? "&query=" + this.condition : "";
};

CGViewMapLayer.prototype.getSourceCountUrl = function() {
    return this.sourceCountUrl + this.getBoundsQuery() + this.getFilterQuery();
};

CGViewMapLayer.prototype.getSourceUrl = function() {
    var boundsQuery = this.getBoundsQuery();
    var filterQuery = this.getFilterQuery();
    var start = this.page*CGViewMapLayer.MarkersPerPage;
    return this.sourceUrl + boundsQuery + filterQuery + "&start=" + start + "&limit=" + CGViewMapLayer.MarkersPerPage;
};

CGViewMapLayer.prototype.updateLayer = function () {
  var bounds = this.map.getBounds();
  if (!bounds)
    return;

  this.loadCount();
};

CGViewMapLayer.prototype.refreshLayer = function() {
    this.loadLayer();
};

CGViewMapLayer.prototype.loadCount = function() {
    Ext.Ajax.request({
        url: this.getSourceCountUrl(),
        method: "POST",
        callback: CGViewMapLayer.prototype.loadCountCallback.bind(this)
    }, this);
};

CGViewMapLayer.prototype.loadCountCallback = function (sOptions, bSuccess, Response) {
    this.count = parseInt(Response.responseText);
    this.updatePagesToolbar();
    this.loadLayer(this.getSourceUrl());
};

CGViewMapLayer.prototype.loadLayer = function () {

  if (this.layer) {
    for (var i = 0; i < this.layer.docs.length; i++) {
        this.layer.hideDocument(this.layer.docs[i]);
    }
  }

  if (this.options.layer == "heat")
    this.loadHeatLayer();
  else
    this.loadKmlLayer();
};

CGViewMapLayer.prototype.loadHeatLayer = function() {
  this.extLoading.dom.style.display = "block";
  Ext.Ajax.request({
    url: this.getSourceUrl(),
    method: "POST",
    callback: CGViewMapLayer.prototype.loadHeatLayerCallback.bind(this)
  }, this);
};

CGViewMapLayer.prototype.loadHeatLayerCallback = function (sOptions, bSuccess, Response) {
  eval("var data = " + Response.responseText);
  var pointArray = new google.maps.MVCArray(data);

  if (this.lastHeatMap != null)
    this.lastHeatMap.setMap(null);

  var heatMap = new google.maps.visualization.HeatmapLayer({data: pointArray});
  heatMap.setMap(this.map);

  this.lastHeatMap = heatMap;
  this.extLoading.dom.style.display = "none";
};

CGViewMapLayer.prototype.loadKmlLayer = function () {
  if (CGViewMapLayer.loadingKml) return;

  CGViewMapLayer.loadingKml = true;
  this.infoWindow = new google.maps.InfoWindow();
  this.oms = new OverlappingMarkerSpiderfier(this.map, {keepSpiderfied: true});

  this.layer = new geoXML3.parser({
      map: this.map,
      overlappingMarkerSpiderfier: this.oms,
      zoom: false,
      processStyles: true,
      polylineOptions: LineStringOptions,
      polygonOptions: PolygonOptions,
      singleInfoWindow: true,
      infoWindow: this.infoWindow,
      pmParseFn: this.atPlacemarkParsed.bind(this),
      afterParse: this.atKmlLoaded.bind(this)
  });

  geoXML3.onInfoWindowOpened = CGViewMapLayer.prototype.atInfoWindowOpened.bind(this);
  geoXML3.onInfoWindowClosed = CGViewMapLayer.prototype.atInfoWindowClosed.bind(this);
  geoXML3.onMarkerCreated = CGViewMapLayer.prototype.atMarkerCreated.bind(this);
  geoXML3.onMarkerClick = CGViewMapLayer.prototype.atMarkerClick.bind(this);
  google.maps.event.addListener(this.infoWindow, 'closeclick', CGViewMapLayer.prototype.atInfoWindowClosed.bind(this));

  this.extLoading.dom.style.display = "block";
  this.layer.parse(this.getSourceUrl());
};

CGViewMapLayer.prototype.atKmlLoaded = function () {
    this.extLoading.dom.style.display = "none";
    CGViewMapLayer.loadingKml = false;
};

CGViewMapLayer.prototype.idle = function () {
  if (this.boundsChanged) {
    this.boundsChanged = false;
    this.updatePagesToolbar();
    this.updateLayer();
  }
};

CGViewMapLayer.prototype.resize = function () {
  google.maps.event.trigger(this.map, "resize");
};

// #############################################################################################################
CGViewMapLayer.prototype.atResize = function () {
  this.resize();
};

CGViewMapLayer.prototype.atPlacemarkParsed = function (xmlNode, placemark) {
  var aExtendedData = xmlNode.getElementsByTagName('ExtendedData');

  if (aExtendedData && (aExtendedData.length > 0)) {
    var extendedData = aExtendedData[0];
    var extendedDataObject = new Object();
    var extraDataValue = "";

    for (var i = 0; i < extendedData.childNodes.length; i++) {
      var dataNode = extendedData.childNodes[i];
      extendedDataObject[dataNode.localName] = dataNode.textContent;
      if (dataNode.localName == "id") {
        placemark.nodeId = dataNode.textContent;
        continue;
      }
      if (dataNode.textContent == "") continue;
      extraDataValue += "<div>" + dataNode.textContent + "</div>";
    }

    extendedDataObject.label = placemark.name;
    extendedDataObject.name = placemark.name;
    extendedDataObject.description = placemark.description;
    extendedDataObject.extraData = extraDataValue;
    placemark.extendedData = extendedDataObject;
  }
};

CGViewMapLayer.prototype.atInfoWindowOpened = function (infoWindow, marker) {
  infoWindow.setContent(this.infoWindowTemplate.applyTemplate(marker.extendedData));
  this.currentNodeId = marker.nodeId;
};

CGViewMapLayer.prototype.atInfoWindowClosed = function () {
  this.currentNodeId = null;
};

CGViewMapLayer.prototype.atMarkerClick = function (marker) {
  if (!this.onLocationClick) return;
  var location = { code: marker.nodeId, value: marker.title};
  this.onLocationClick(location);
};

CGViewMapLayer.prototype.atMarkerCreated = function (marker, placemark) {

  if (this.oms != null)
    this.oms.addMarker(marker);

  if (this.currentNodeId && this.currentNodeId == placemark.nodeId) {
    placemark.marker.infoWindow.setContent(this.infoWindowTemplate.applyTemplate(marker.extendedData));
    placemark.marker.infoWindow.open(this.map, placemark.marker);
  }
};

CGViewMapLayer.prototype.atClickPlace = function (position) {
  alert(this.monetExtData.id);
};

CGViewMapLayer.prototype.atGPSPositioned = function (position) {
  var latitude = position.coords.latitude;
  var longitude = position.coords.longitude;

  var pos = new google.maps.LatLng(latitude, longitude);
  this.map.panTo(pos);
};

CGViewMapLayer.prototype.atBoundsChanged = function () {
  this.boundsChanged = (!this.isSameBounds(this.mapBounds));
  this.mapBounds = this.map.getBounds();
};

CGViewMapLayer.prototype.atIdle = function () {
  this.idle();
};

CGViewMapLayer.prototype.atSearchKeyUp = function (event) {
  var codeKey = event.getKey();
  if (codeKey == event.ENTER) this.gotoPlace(this.searchValue.dom.value);
  return false;
};

CGViewMapLayer.prototype.atSearchClick = function () {
  this.gotoPlace(this.searchValue.dom.value);
};

CGViewMapLayer.prototype.atGotoPlaceInfoArrived = function (geocoderResult) {
  if (!geocoderResult || (geocoderResult.length < 1)) return;
  this.map.setCenter(geocoderResult[0].geometry.location);
  this.updateLayer();
  this.addListeners();
};

function CGField() {
  this.sContent = null;
};

//---------------------------------------------------------------------
CGField.prototype.getContent = function () {
  return this.sContent;
};

//---------------------------------------------------------------------
CGField.prototype.setContent = function (sContent) {
  this.sContent = sContent;
  this.bLoaded = true;
};

//---------------------------------------------------------------------
CGField.prototype.unserializeFromJSON = function (ItemStructure) {
  this.sContent = ItemStructure.content;
};

//---------------------------------------------------------------------
CGField.prototype.unserialize = function (serialized) {
  var jsonData = Ext.util.JSON.decode(serialized);
  this.unserializeFromJSON(jsonData);
};

CGDocumentViewerFactory = function (url, editable) {
  this.url = url;
  this.editable = editable;
};

CGDocumentViewerFactory.prototype.get = function (document, layerId) {
  var url = resolveParametrizedUrl(this.url, document);
  var DOMLayer = $(layerId);

  var documentViewer = new DocumentViewer(Literals.PreviewThumbnails, layerId, Literals.PreviewButtons, Account.getUser().Language);
  documentViewer.setDocumentId(document.id);
  documentViewer.setDocumentLabel(document.label, this.editable);
  documentViewer.setViewport(Desktop.Main.Center.Body.getViewport(DOMLayer));
  documentViewer.setBaseUrl(url);
  documentViewer.onDocumentLabelChange = this.onDocumentLabelChange;
  documentViewer.onDocumentClick = this.onDocumentClick;

  if (this.onBeforeGet) this.onBeforeGet(document, documentViewer);

  Desktop.Main.Center.Body.setScrollListener(Desktop.Main.Center.Body.getActiveTab(VIEW_NODE), documentViewer.onScrollPageView.createDelegate(documentViewer), DOMLayer);

  return documentViewer;
};

function CGViewerDocumentList(documentViewerFactory) {
  this.documentViewerFactory = documentViewerFactory;
  this.baseUrl = null;
  this.loading = false;
  this.initialized = false;
  this.documentPosition = 0;
  this.currentViewer = null;
};

CGViewerDocumentList.prototype.init = function (layerId) {

  if (this.initialized) return;
  if (layerId == null) return;

  this.extLayer = Ext.get(layerId);
  this.extLayer.dom.innerHTML = translate(AppTemplate.ViewerDocumentList, Lang.ViewerDocumentList);
  this.extLayer.addClass("documentlistviewer");

  this.addBehaviours();

  this.loading = false;
  this.initialized = true;
};

CGViewerDocumentList.prototype.addBehaviours = function () {
  var extDocumentsSelector = this.extLayer.select("select.documents").first();
  extDocumentsSelector.on("change", CGViewerDocumentList.prototype.atDocumentsSelectorChange, this);

  var extLabels = this.extLayer.select(".dialog .label");
  extLabels.each(function (extLabel) {
    extLabel.on("keyup", CGViewerDocumentList.prototype.atLabelKeyUp, this);
  }, this);

  var extAddDialogAccept = this.extLayer.select(".dialog.add .accept").first();
  extAddDialogAccept.on("click", CGViewerDocumentList.prototype.atAddDialogAccept, this);

  var extAddDialogCancel = this.extLayer.select(".dialog.add .cancel").first();
  extAddDialogCancel.on("click", CGViewerDocumentList.prototype.atAddDialogCancel, this);

  var extRenameDialogAccept = this.extLayer.select(".dialog.rename .accept").first();
  extRenameDialogAccept.on("click", CGViewerDocumentList.prototype.atRenameDialogAccept, this);

  var extRenameDialogCancel = this.extLayer.select(".dialog.rename .cancel").first();
  extRenameDialogCancel.on("click", CGViewerDocumentList.prototype.atRenameDialogCancel, this);

  var extDialogUpload = this.extLayer.select(".dialog .input.file").first();
  extDialogUpload.on("change", CGViewerDocumentList.prototype.atUploadFile, this);

  var extPrevious = this.extLayer.select(".previous").first();
  extPrevious.on("click", CGViewerDocumentList.prototype.atPreviousClick, this);

  var extNext = this.extLayer.select(".next").first();
  extNext.on("click", CGViewerDocumentList.prototype.atNextClick, this);
};

CGViewerDocumentList.prototype.setBaseUrl = function (baseUrl) {
  this.baseUrl = baseUrl;
};

CGViewerDocumentList.prototype.showLoading = function () {
  if (this.extLayer == null) return;
  this.extLayer.select(".header").first().dom.style.display = "none";
  this.extLayer.select(".loading").first().dom.style.display = "block";
  this.loading = true;
};

CGViewerDocumentList.prototype.hideLoading = function () {
  if (this.extLayer == null) return;
  this.extLayer.select(".header").first().dom.style.display = "block";
  this.extLayer.select(".loading").first().dom.style.display = "none";
  this.loading = false;
};

CGViewerDocumentList.prototype.render = function (layerId) {
  if (this.baseUrl == null) return;

  this.init(layerId);
  this.showLoading();

  Ext.Ajax.request({
    url: this.baseUrl,
    params: "",
    method: "GET",
    callback: function (sOptions, bSuccess, Response) {
      eval("var data = " + Response.responseText);
      this.hideLoading();
      this.update(data);
    },
    scope: this
  });
};

CGViewerDocumentList.prototype.update = function (data) {
  this.data = data;

  this.extLayer.select(".empty").first().dom.style.display = (this.data.documents.length <= 0) ? "block" : "none";
  this.extLayer.select(".header").first().dom.style.display = (this.data.documents.length <= 0) ? "none" : "block";

  if (this.data.documents.length <= 0)
    return;

  if (this.target.idDocument != null) this.gotoDocument(this.target.idDocument);
  else this.first();
};

CGViewerDocumentList.prototype.refresh = function () {

  this.refreshHeader();
  this.refreshContainer();

  if (this.onSelect) this.onSelect(this.data.documents[this.documentPosition].id);
};

CGViewerDocumentList.prototype.refreshHeader = function () {
  var extDocumentsSelector = this.extLayer.select("select.documents").first();
  var extPrevious = this.extLayer.select(".previous").first();
  var extNext = this.extLayer.select(".next").first();

  if (this.documentPosition == 0) extPrevious.addClass("disabled");
  else extPrevious.removeClass("disabled");

  if (this.documentPosition == this.data.documents.length - 1) extNext.addClass("disabled");
  else extNext.removeClass("disabled");

  var selectedDocument = this.data.documents[this.documentPosition];

  extDocumentsSelector.dom.innerHTML = "";
  for (var i = 0; i < this.data.categories.length; i++) {
    var currentCategory = this.data.categories[i];
    var DOMCategoryOption = null;

    if (currentCategory.isMultiple) {
      DOMCategoryOption = document.createElement("option");
      DOMCategoryOption.selected = (selectedDocument.targetCode == currentCategory.code);
      DOMCategoryOption.text = currentCategory.label;
      extDocumentsSelector.dom.appendChild(DOMCategoryOption);
    }

    var firstDocument = null;
    for (var j = 0; j < this.data.documents.length; j++) {
      var currentDocument = this.data.documents[j];
      if (currentDocument.targetCode != currentCategory.code) continue;
      var DOMOption = document.createElement("option");
      DOMOption.value = j;
      DOMOption.selected = (this.documentPosition == j);
      DOMOption.text = ((currentDocument.label != "") ? currentDocument.label : Lang.ViewerDocumentList.NoLabel);
      DOMOption.className = "document";
      extDocumentsSelector.dom.appendChild(DOMOption);
      if (firstDocument == null) firstDocument = j;
    }

    if (DOMCategoryOption != null) DOMCategoryOption.value = firstDocument;
  }

};

CGViewerDocumentList.prototype.refreshContainer = function () {
  var document = this.data.documents[this.documentPosition];
  var extContainer = this.extLayer.select(".container").first();

  extContainer.dom.innerHTML = "";
  $(Literals.PreviewThumbnails).innerHTML = "";
  $(Literals.PreviewButtons).innerHTML = "";

  if (this.currentViewer != null) this.currentViewer.dispose();

  var viewer = this.documentViewerFactory.get(document, extContainer.dom);
  viewer.load();

  this.currentViewer = viewer;
};

CGViewerDocumentList.prototype.getDocument = function () {
  if (this.data.documents.length <= 0) return null;
  var document = this.data.documents[this.documentPosition];
  document.position = this.documentPosition;
  return document;
};

CGViewerDocumentList.prototype.setLabel = function (label) {
  var extLabelList = this.extLayer.select(".dialog .label");
  extLabelList.each(function (extLabel) {
    extLabel.dom.value = label;
  }, this);
};

CGViewerDocumentList.prototype.getLabel = function () {
  var extDialog = this.extLayer.select(".dialog.add").first();
  if (extDialog.dom.style.display == "none") extDialog = this.extLayer.select(".dialog.rename").first();
  var extLabel = extDialog.select(".label").first();
  return extLabel.dom.value;
};

CGViewerDocumentList.prototype.getFilename = function () {
  return this.filename;
};

CGViewerDocumentList.prototype.hasDocuments = function () {
  return this.data.documents.length > 0;
};

CGViewerDocumentList.prototype.getDownloadDocumentUrl = function () {
  var document = this.getDocument();
  if (document == null) return null;
  var url = HtmlUtil.decode(Context.Config.ApplicationFmsFileDownloadUrl).replace("::id::", document.id);
  url = url.replace("::idnode::", this.target.idNode);
  return url;
};

CGViewerDocumentList.prototype.clear = function () {
  var extAddLabel = this.extLayer.select(".dialog.add .label").first();
  var extRenameLabel = this.extLayer.select(".dialog.rename .label").first();
  extAddLabel.dom.value = "";
  extRenameLabel.dom.value = "";
  this.filename = "";
};

CGViewerDocumentList.prototype.first = function () {
  this.documentPosition = 0;
  this.refresh();
};

CGViewerDocumentList.prototype.selectCategory = function (idCategory) {
  var pos = 0;

  for (var i = 0; i < this.data.categories.length; i++) {
    var currentCategory = this.data.categories[i];
    if (currentCategory.code == idCategory) {
      for (var j = 0; j < this.data.documents.length; j++) {
        var currentDocument = this.data.documents[j];
        if (currentDocument.targetCode == currentCategory.code) {
          pos = j;
          break;
        }
      }
      break;
    }
  }

  if (pos >= this.data.documents.length) pos = 0;

  this.documentPosition = pos;
  this.refresh();
};

CGViewerDocumentList.prototype.gotoDocument = function (idDocument) {

  for (var i = 0; i < this.data.documents.length; i++) {
    var currentDocument = this.data.documents[i];
    if (currentDocument.id == idDocument) break;
  }

  if (i >= this.data.documents.length) i = 0;

  this.documentPosition = i;
  this.refresh();
};

CGViewerDocumentList.prototype.previous = function () {
  this.documentPosition--;

  if (this.documentPosition < 0) {
    this.documentPosition = 0;
    return;
  }

  this.refresh();
};

CGViewerDocumentList.prototype.next = function () {
  this.documentPosition++;

  if (this.documentPosition >= this.data.documents.length) {
    this.documentPosition = this.data.documents.length - 1;
    return;
  }

  this.refresh();
};

CGViewerDocumentList.prototype.hideDialogs = function () {
  var extDialogList = this.extLayer.select(".dialog");
  extDialogList.each(function (extDialog) {
    extDialog.dom.style.display = "none";
  }, this);
};

CGViewerDocumentList.prototype.showAddDialog = function (type, acceptCallback, cancelCallback) {
  this.hideDialogs();
  var extDialog = this.extLayer.select(".dialog.add").first();
  extDialog.removeClass("node");
  extDialog.removeClass("file");
  extDialog.addClass(type);
  extDialog.dom.style.display = "block";
  var extLabel = extDialog.select(".label").first();
  extLabel.dom.focus();
  this.acceptCallback = acceptCallback;
  this.cancelCallback = cancelCallback;
};

CGViewerDocumentList.prototype.showRenameDialog = function (acceptCallback, cancelCallback) {
  this.hideDialogs();
  var extDialog = this.extLayer.select(".dialog.rename").first();
  extDialog.dom.style.display = "block";
  var extLabel = extDialog.select(".label").first();
  extLabel.dom.focus();
  this.acceptCallback = acceptCallback;
  this.cancelCallback = cancelCallback;
};

CGViewerDocumentList.prototype.dispose = function () {
  if (this.currentViewer) this.currentViewer.dispose();
};

CGViewerDocumentList.prototype.showUploadError = function () {
  var extError = this.extLayer.select(".dialog .error");
  extError.dom.style.display = "block";
  this.hideUploading();
};

CGViewerDocumentList.prototype.showUploading = function () {
  var extUploading = this.extLayer.select(".dialog .uploading").first();
  extUploading.dom.style.display = "block";
};

CGViewerDocumentList.prototype.hideUploading = function () {
  var extUploading = this.extLayer.select(".dialog .uploading").first();
  extUploading.dom.style.display = "none";
};

CGViewerDocumentList.prototype.atDocumentsSelectorChange = function () {
  var extDocumentsSelector = this.extLayer.select("select.documents").first();
  var index = extDocumentsSelector.dom.options[extDocumentsSelector.dom.selectedIndex].value;
  this.gotoDocument(this.data.documents[index].id);
};

CGViewerDocumentList.prototype.atPreviousClick = function () {
  this.previous();
};

CGViewerDocumentList.prototype.atNextClick = function () {
  this.next();
};

CGViewerDocumentList.prototype.atUploadFile = function () {
  var fileInfo = null;

  this.showUploading();

  var action = HtmlUtil.decode(Context.Config.ApplicationFmsFilesUploadUrl);
  action = action.replace("::idnode::", this.target.idNode);

  var extForm = this.extLayer.select(".form").first();

  Ext.Ajax.request({
    url: action,
    method: "POST",
    success: function (response, options) {
      fileInfo = eval('(' + response.responseText + ')');
      this.hideUploading();
      if (fileInfo.status == 0) this.filename = HtmlUtil.decode(fileInfo.files[0]);
      else {
        this.showUploadError();
      }
    },
    failure: function (response, options) {
      this.showUploadError();
    },
    isUpload: true,
    form: extForm.dom,
    scope: this
  });

};

CGViewerDocumentList.prototype.atAddDialogAccept = function () {
  var extDialog = this.extLayer.select(".dialog.add").first();
  var extLabel = extDialog.select(".label").first();
  if (extLabel.dom.value == "") return;
  if (extDialog.hasClass("file") && this.filename == null) return;
  if (this.acceptCallback) this.acceptCallback();
};

CGViewerDocumentList.prototype.atAddDialogCancel = function () {
  var extDialog = this.extLayer.select(".dialog.add").first();
  extDialog.dom.style.display = "none";
  this.clear();
  if (this.cancelCallback) {
    this.refreshContainer();
    this.cancelCallback();
  }
};

CGViewerDocumentList.prototype.atRenameDialogAccept = function () {
  var extDialog = this.extLayer.select(".dialog.rename").first();
  var extLabel = extDialog.select(".label").first();
  if (extLabel.dom.value == "") return;
  if (this.acceptCallback) this.acceptCallback();
};

CGViewerDocumentList.prototype.atRenameDialogCancel = function () {
  var extDialog = this.extLayer.select(".dialog.rename").first();
  extDialog.dom.style.display = "none";
  this.clear();
  if (this.cancelCallback) {
    this.refreshContainer();
    this.cancelCallback();
  }
};

CGViewerDocumentList.prototype.atLabelKeyUp = function (event) {
  var codeKey = event.getKey();
  if (codeKey == event.ENTER) {
    var extDialog = Ext.get(event.target).up(".dialog");
    if (extDialog.hasClass("add")) this.atAddDialogAccept();
    else if (extDialog.hasClass("rename")) this.atRenameDialogAccept();
  }
};

CGDialogPrintEntity = function () {
	this.base = CGDialog;
	this.base("dlgPrintEntity");
	this.doHide = true;
	this.Reason = "";
	this.Attributes = new Array();
};

//------------------------------------------------------------------
CGDialogPrintEntity.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogPrintEntity.prototype.init = function (sLayerName) {
	if (!sLayerName) return;

	this.Layer = $(sLayerName);

	var html = AppTemplate.DialogPrintEntity;
	html = translate(html, Lang.DialogPrintEntity);

	var attributeTemplate = AppTemplate.DialogPrintEntityAttribute;
	attributeTemplate = translate(attributeTemplate, Lang.DialogPrintEntity);

	var dateAttributeTemplate = AppTemplate.DialogPrintEntityDateAttribute;
	dateAttributeTemplate = translate(dateAttributeTemplate, Lang.DialogPrintEntity);

	this.Layer.innerHTML = html;

	var extLayer = Ext.get(this.Layer);
	extLayer.on("click", this.atLayerClick, this);
	extLayer.select(".dialog.printentity").first().dom.addClassName(this.target.Mode);

	var extAccept = extLayer.select(".dialog.printentity .accept");
	extAccept.on("click", this.atAccept, this);

	this.autoAccept();
	this.initHeader(attributeTemplate);
	this.initRange(dateAttributeTemplate);
	this.update();
	this.checkAcceptEnable();
};

CGDialogPrintEntity.prototype.autoAccept = function (itemTemplate) {
    if (this.target.Mode == "pdf") return;
    if (!this.onAccept) return;
    if (this.existsRange()) return;
	this.onAccept();
};

CGDialogPrintEntity.prototype.initHeader = function (itemTemplate) {
	var extLayer = Ext.get(this.Layer);
	var extColumns = extLayer.select(".dialog.printentity .column");
	var template = new Ext.DomHelper.Template(itemTemplate);
	var attributes = this.target.Attributes;

	for (var i=0; i<extColumns.getCount(); i++) {
		var selected = this.Attributes[i];
		for (var attribute in attributes) {
			if (isFunction(attributes[attribute])) continue;
			attributes[attribute].selected = attributes[attribute].code == selected ? "selected" : "";
			template.append(extColumns.elements[i], attributes[attribute]);
		}
	}

	extColumns.on("change", CGDialogPrintEntity.prototype.atColumnChange.bind(this));
	extColumns.on("focus", this.atColumnFocus, this);
	extColumns.on("click", this.atColumnClick, this);
};

CGDialogPrintEntity.prototype.initRange = function (dateAttributeTemplate) {

	if (!this.existsRange()) {
		this.hideRange();
		return;
	}

	var extRange = Ext.get(this.Layer).select(".dialog.printentity td.range").first();
	if (this.RangeChecked)
		extRange.dom.removeClassName(CLASS_DISABLED);

	//Ext.get("dlgPrintEntity.range").on("change", CGDialogPrintEntity.prototype.atRangeClick.bind(this));

	this.initDateAttributes(dateAttributeTemplate);
	this.initFromDate();
	this.initToDate();
};

CGDialogPrintEntity.prototype.countDateAttributes = function () {
	var count = 0;
	var attributes = this.target.Attributes;
	for (var attribute in attributes) {
		if (isFunction(attributes[attribute])) continue;
		if (this.isDateAttribute(attributes[attribute]))
			count++;
	}
	return count;
};

CGDialogPrintEntity.prototype.hideRange = function () {
	var extLayer = Ext.get(this.Layer);
	var extRange = extLayer.select(".dialog.printentity .range").first();
	extRange.dom.style.display = "none";
};

CGDialogPrintEntity.prototype.initDateAttributes = function (dateAttributeTemplate) {
	var extLayer = Ext.get(this.Layer);
	var extDateAttributes = extLayer.select(".dialog.printentity .date-attributes").first();
	var template = new Ext.DomHelper.Template(dateAttributeTemplate);
	var attributes = this.target.Attributes;

	for (var attribute in attributes) {
		if (isFunction(attributes[attribute])) continue;
		if (!this.isDateAttribute(attributes[attribute])) continue;
		attributes[attribute].selected = attributes[attribute].code == this.DateAttribute ? "selected" : "";
		template.append(extDateAttributes.dom, attributes[attribute]);
	}

	extDateAttributes.on("change", CGDialogPrintEntity.prototype.atDateAttributeChange.bind(this));
};

CGDialogPrintEntity.prototype.isDateAttribute = function (attribute) {
	return attribute.type.toLowerCase() === "date";
};

CGDialogPrintEntity.prototype.initFromDate = function () {
	this.extFromDate = new Ext.form.DateField({
		format: 'd/m/Y',
		altFormats: 'd-m-y|d/m/y|d-m-Y|Y-m-d|Y/m/d|Y-m|Y/m|m-Y|m/Y|Y',
		minLength: 4
	});
	this.extFromDate.applyTo($("dlgPrintEntity.fromDate"));
	this.extFromDate.on('change', this.atFromDateChange, this);
	this.extFromDate.on('focus', this.atDateFocus, this);
	this.extFromDate.on('click', this.atDateFocus, this);

	if (this.FromDate != null)
		this.extFromDate.setValue(this.FromDate);
};

CGDialogPrintEntity.prototype.initToDate = function () {
	this.extToDate = new Ext.form.DateField({
		format: 'd/m/Y',
		altFormats: 'd-m-y|d/m/y|d-m-Y|Y-m-d|Y/m/d|Y-m|Y/m|m-Y|m/Y|Y',
		minLength: 4
	});
	this.extToDate.applyTo($("dlgPrintEntity.toDate"));
	this.extToDate.on('change', this.atToDateChange, this);
	this.extToDate.on('focus', this.atDateFocus, this);
	this.extToDate.on('click', this.atDateFocus, this);

	if (this.ToDate != null)
		this.extToDate.setValue(this.ToDate);
};

CGDialogPrintEntity.prototype.checkAcceptEnable = function () {
	if (this.target.Mode != "pdf") return true;

	var extLayer = Ext.get(this.Layer);
	var extAccept = extLayer.select(".dialog.printentity .accept").first();

	if (this.Attributes.length > 0) extAccept.removeClass("disabled");
	else extAccept.addClass("disabled");

	return !extAccept.hasClass("disabled");
};

CGDialogPrintEntity.prototype.hideDialogOnTimer = function () {
	if (!this.doHide) {
		this.doHide = true;
		return;
	}
	this.hideDialogTimer = window.setTimeout(this.hide.bind(this), 100);
};

CGDialogPrintEntity.prototype.clearHideDialogTimer = function () {
	window.clearTimeout(this.hideDialogTimer);
	return false;
};

CGDialogPrintEntity.prototype.show = function () {
	var extLayer = Ext.get(this.Layer);

	Ext.get(document.body).on("click", this.hideDialogOnTimer, this);
	extLayer.on("click", this.clearHideDialogTimer, this);

	extLayer.show();
};

CGDialogPrintEntity.prototype.hide = function () {
	var extLayer = Ext.get(this.Layer);
	Ext.get(document.body).un("click", this.hideDialogOnTimer, this);
	extLayer.hide();
	if (this.dialog != null)
		this.dialog.hide();
};

CGDialogPrintEntity.prototype.update = function () {
	this.updateHeader();
	this.updateRange();
};

CGDialogPrintEntity.prototype.updateHeader = function () {
	var extLayer = Ext.get(this.Layer);
	var extColumns = extLayer.select(".dialog.printentity .column");

	for (var i = 0; i < extColumns.getCount(); i++) {
		var extColumn = extColumns.elements[i];

		for (var j=0; j<extColumn.options.length; j++) {
			var domOption = extColumn.options[j]
			domOption.disabled = this.isAttributeSelected(domOption.value);
		}
	}
};

CGDialogPrintEntity.prototype.updateRange = function () {
	var extLayer = Ext.get(this.Layer);
	var extRange = extLayer.select(".dialog.printentity td.range").first();
	var extDateAttributes = extLayer.select(".dialog.printentity .date-attributes").first();
	var rangeDisabled = false;//extRange.dom.hasClassName(CLASS_DISABLED);

	//$("dlgPrintEntity.range").checked = !rangeDisabled;
	extDateAttributes.dom.disabled = false;//extRange.dom.hasClassName(CLASS_DISABLED);
	this.DateAttribute = rangeDisabled ? null : extDateAttributes.getValue();
	this.FromDate = rangeDisabled ? null : $("dlgPrintEntity.fromDate").value;
	this.ToDate = rangeDisabled ? null : $("dlgPrintEntity.toDate").value;
	this.RangeChecked = !rangeDisabled;

	if (!this.existsRange())
		return;

	if (rangeDisabled) {
		this.extFromDate.disable();
		this.extToDate.disable();
	}
	else {
		this.extFromDate.enable();
		this.extToDate.enable();
	}
};

CGDialogPrintEntity.prototype.existsRange = function () {
	return this.countDateAttributes() > 0 && !this.target.DisableRange;
};

//==================================================================
CGDialogPrintEntity.prototype.atAccept = function () {
	if (this.checkAcceptEnable() == false) {
		this.doHide = false;
		return;
	}
	if (this.onAccept) this.onAccept();
};

CGDialogPrintEntity.prototype.atCancel = function () {
	if (this.onCancel) this.onCancel();
};

CGDialogPrintEntity.prototype.atRangeClick = function () {
	var extLayer = Ext.get(this.Layer);
	var extRange = extLayer.select(".dialog.printentity td.range").first();
	extRange.dom.toggleClassName(CLASS_DISABLED);

	this.updateRange();
};

CGDialogPrintEntity.prototype.atColumnChange = function () {
	var extLayer = Ext.get(this.Layer);
	var extColumns = extLayer.select(".dialog.printentity .column");

	this.Attributes.clear();
	for (var i = 0; i < extColumns.getCount(); i++) {
		var extColumn = extColumns.elements[i];
		var value = extColumn.value;
		if (value == "_none") continue;
		this.Attributes.push(value);
	}

	this.checkAcceptEnable();
	this.update();

	this.doHide = false;
	return false;
};

CGDialogPrintEntity.prototype.isAttributeSelected = function(attribute) {
	for (var i=0; i<this.Attributes.length; i++)
		if (this.Attributes[i] == attribute)
			return true;
	return false;
}

CGDialogPrintEntity.prototype.atDateAttributeChange = function() {
	var extLayer = Ext.get(this.Layer);
	var extDateAttributes = extLayer.select(".dialog.printentity .date-attributes").first();
	this.DateAttribute = extDateAttributes.getValue();
	this.update();
};

CGDialogPrintEntity.prototype.atColumnFocus = function (event) {
	this.doHide = false;
};

CGDialogPrintEntity.prototype.atColumnClick = function (event) {
	this.doHide = false;
};

CGDialogPrintEntity.prototype.atDateFocus = function (event) {
	this.doHide = false;
};

CGDialogPrintEntity.prototype.atLayerClick = function () {
	this.doHide = false;
};

CGDialogPrintEntity.prototype.atFromDateChange = function (field, newValue, oldValue) {
	if (this.extToDate != null && this.extToDate.getValue() != "" && newValue > this.extToDate.getValue())
		this.extFromDate.setValue(oldValue);

	this.FromDate = $("dlgPrintEntity.fromDate").value;
};

CGDialogPrintEntity.prototype.atToDateChange = function (field, newValue, oldValue) {
	if (this.extFromDate != null && this.extFromDate.getValue() != "" && newValue < this.extFromDate.getValue())
		this.extToDate.setValue(oldValue);

	this.ToDate = $("dlgPrintEntity.toDate").value;
};

//----------------------------------------------------------------------
// Show home
//----------------------------------------------------------------------
function CGActionShowHome() {
	this.base = CGAction;
	this.base(1);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShowHome.prototype = new CGAction;
CGActionShowHome.constructor = CGActionShowHome;
CommandFactory.register(CGActionShowHome, null, true);

CGActionShowHome.prototype.enabled = function () {
	var IdNode = Account.getUser().getRootNode().id;
	return NodesCache.exists(IdNode);
};

CGActionShowHome.prototype.step_1 = function () {

	var initializerTask = Account.getUser().getInitializerTask();
	if (initializerTask != null) {
		CommandDispatcher.dispatch("showtask(" + initializerTask.id + ")");
		this.setActiveFurniture(Furniture.TASKBOARD);
	}
	else {
		if (Account.Links.length == 0) return;

		var link = Account.Links[0];
		var user = Account.getUser();
		var rootNode = user.getRootNode();

		if (link.type == Furniture.DESKTOP) {
			DefinitionView = Extension.getDefinitionDefaultView(rootNode.code, BUSINESS_MODEL_BROWSE);
			State.View = DefinitionView.Name;
			this.setActiveFurniture(Furniture.DESKTOP, rootNode.id);
			CommandDispatcher.dispatch("shownode(" + rootNode.id + "," + State.View + ")");
		}
		else {
			this.setActiveFurniture(link.type, link.id);
			CommandDispatcher.dispatch(ViewFurnitureSet.getCommand(link));
		}
	}

	this.terminate();
};

// ----------------------------------------------------------------------
// Action show node
// ----------------------------------------------------------------------
function CGActionShowNode() {
	this.base = CGActionShowBase;
	this.base(5);
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.DOMViewActiveTab = null;
	this.Mode = null;
};

CGActionShowNode.prototype = new CGActionShowBase;
CGActionShowNode.constructor = CGActionShowNode;
CommandFactory.register(CGActionShowNode, {
	Id: 0,
	Mode: 1,
	Index: 2,
	Count: 3
}, true);

CGActionShowNode.prototype.getDOMElement = function () {
	var DOMElement = Extension.getDOMNode(this.DOMItem);

	if (!DOMElement)
		DOMElement = Extension.getDOMNodeCollection(this.DOMItem);
	if (!DOMElement)
		DOMElement = Extension.getDOMNodeForm(this.DOMItem);

	return DOMElement;
};

CGActionShowNode.prototype.step_1 = function () {
	var Node = new CGNode();
	var ViewNode;

	Node.setId(this.Id);

	ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Id);
	if (ViewNode != null) {
		this.DOMViewActiveTab = ViewNode.getDOM().getActiveTab();
		if ((this.Mode == null) || (ViewNode.getMode() == this.Mode)) {
			var Process = new CGProcessActivateNode();
			Process.Id = this.Id;
			Process.execute();
			State.LastView = ViewNode;
			this.terminate();
			return;
		}
		ViewNode.destroy();
	}

	if (this.Mode)
		this.gotoStep(3);
	else
		Kernel.loadNodeType(this, this.Id);
};

CGActionShowNode.prototype.step_2 = function () {
	var Behaviour = Extension.getDefinitionBehaviour(this.data);

	if ((!Behaviour) || (!Behaviour.ShowNode) || (!Behaviour.ShowNode.Templates) || (!Behaviour.ShowNode.Templates.View)) {
		Desktop.hideReports();
		this.terminate();
		return;
	}

	this.Mode = Behaviour.ShowNode.Templates.View;
	this.execute();
};

CGActionShowNode.prototype.step_3 = function () {
	Kernel.loadNode(this, this.Id, this.Mode, this.Index, this.Count);
};

CGActionShowNode.prototype.step_4 = function () {
	var Node, ViewNode;
	var ProcessShowNode;

	Node = new CGNode();
	Node.unserialize(this.data);
	NodesCache.register(Node);

	if (Node.isPrototype()) {
		var CurrentNode = NodesCache.getCurrent();
		if (CurrentNode && CurrentNode.getId() != Node.getId()) {
			var CurrentViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, CurrentNode.getId());
			var PrototypeTemplate = new Template(Lang.ViewNode.ViewingPrototype);
			Desktop.reportBanner(PrototypeTemplate.evaluate({
				'ImagesPath': Context.Config.ImagesPath,
				'prototype': Node.getLabel(),
				'idnode': CurrentViewNode.getDOM().getId(),
				'node': CurrentViewNode.getDOM().getTitle()
			}));
			State.isShowingPrototype = true;
		}
	} else if (State.isShowingPrototype) {
		Desktop.hideBanner();
		State.isShowingPrototype = false;
	}

	ViewNode = this.getView(VIEW_NODE, Node);

	if (Desktop.Main.Center.Body.isContainerView(ViewNode) && Extension.isDefinitionComponent(Node.Code)) {
		CommandDispatcher.dispatch("shownode(" + Node.getIdParent() + ")");
		this.terminate();
		return;
	}

	if ((ViewNode == false) || (ViewNode == null)) {
		this.terminate();
		return;
	}

	if (Desktop.Main.Center.Body.isContainerView(ViewNode)) {
		State.LastView = ViewNode;
		State.LastObject.Id = this.Id;
		State.LastObject.Mode = this.Mode;
	}

	ProcessShowNode = new CGProcessShowNode();
	ProcessShowNode.ActivateNode = false;
	ProcessShowNode.Node = Node;
	ProcessShowNode.Mode = this.Mode;
	ProcessShowNode.ViewNode = ViewNode;
	ProcessShowNode.ReturnProcess = this;
	ProcessShowNode.execute();
};

CGActionShowNode.prototype.step_5 = function () {
	var Process = new CGProcessActivateNode();
	Process.Id = this.Id;
	Process.NotifyFocus = false;
	Process.DOMViewActiveTab = this.DOMViewActiveTab;
	Process.execute();
	this.terminate();
};

// ----------------------------------------------------------------------
// Action show set item
// ----------------------------------------------------------------------
function CGActionShowSetItem() {
	this.base = CGActionShowBase;
	this.base(1);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShowSetItem.prototype = new CGActionShowBase;
CGActionShowSetItem.constructor = CGActionShowSetItem;
CommandFactory.register(CGActionShowSetItem, {
	Set: 0,
	Item: 1,
	Mode: 2,
	Index: 3,
	Count: 4
}, true);

CGActionShowSetItem.prototype.step_1 = function () {
	var state = State.SetsContext[this.Set];
	if (state == null) state = {};
	var view = this.findView();
	state.view = view != null ? view.getDOM().getActiveTab() : null;
	State.SetsContext[this.Set] = state;
	CommandDispatcher.dispatch("shownode(" + this.Item + "," + this.Mode + "," + this.Index + "," + this.Count + ")");
};

CGActionShowSetItem.prototype.findView = function () {
	var result = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Set);
	if (result != null) return result;
	var views = Desktop.Main.Center.Body.getViews(VIEW_NODE,VIEW_NODE_TYPE_NODE,this.Set);
	return views.length > 0 ? views[0] : null;
};

// ----------------------------------------------------------------------
// Action show node child
// ----------------------------------------------------------------------
function CGActionShowNodeChild() {
	this.base = CGActionShowBase;
	this.base(3);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShowNodeChild.prototype = new CGActionShowBase;
CGActionShowNodeChild.constructor = CGActionShowNodeChild;
CommandFactory.register(CGActionShowNodeChild, {
	Ancestor: 0,
	Mode: 1,
	Index: 2,
	Count: 3
}, true);

CGActionShowNodeChild.prototype.step_1 = function () {
	var view = State.SetsContext[this.Ancestor].view;
	var filters = State.getListViewerFilters(this.Ancestor + view);
	Kernel.loadAncestorChildId(this, this.Ancestor, view, this.Index, filters);
};

CGActionShowNodeChild.prototype.step_2 = function () {
	this.activeTab = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, NodesCache.getCurrent().getId()).getDOM().getActiveTab();

	var ActionShowNode = new CGActionShowNode();
	ActionShowNode.Id = this.data;
	ActionShowNode.Mode = this.Mode;
	ActionShowNode.Index = this.Index;
	ActionShowNode.Count = this.Count;
	ActionShowNode.ReturnProcess = this;
	ActionShowNode.execute();
};

CGActionShowNodeChild.prototype.step_3 = function () {
	Desktop.Main.Center.Body.getContainerView(VIEW_NODE, NodesCache.getCurrent().getId()).getDOM().activateTab(this.activeTab);
};

// ----------------------------------------------------------------------
// Show Embedded Node
// ----------------------------------------------------------------------
function CGActionShowEmbeddedNode() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShowEmbeddedNode.prototype = new CGAction;
CGActionShowEmbeddedNode.constructor = CGActionShowEmbeddedNode;
CommandFactory.register(CGActionShowEmbeddedNode, {
	Id: 0,
	Mode: 1
}, false);

CGActionShowEmbeddedNode.prototype.step_1 = function () {
	var DOMNode = this.DOMItem.up(CSS_NODE);
	this.ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMNode.IdView);

	if (this.ViewNode == null) {
		this.terminate();
		return;
	}

	var Process = new CGProcessShowNode();
	Process.Id = this.Id;
	Process.Mode = this.Mode;
	Process.ViewNode = this.ViewNode;
	Process.ActivateNode = false;
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionShowEmbeddedNode.prototype.step_2 = function () {
	this.terminate();
};

// ----------------------------------------------------------------------
// Show current node
// ----------------------------------------------------------------------
function CGActionShowCurrentNode() {
	this.base = CGAction;
	this.base(1);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShowCurrentNode.prototype = new CGAction;
CGActionShowCurrentNode.constructor = CGActionShowCurrentNode;
CommandFactory.register(CGActionShowCurrentNode, {
	Mode: 0
}, true);

CGActionShowCurrentNode.prototype.step_1 = function () {
	var Node = NodesCache.getCurrent();

	if (!Node) {
		this.terminate();
		return;
	}

	CommandDispatcher.dispatch("shownode(" + Node.getId() + "," + this.Mode + ")");
	this.terminate();
};

// ----------------------------------------------------------------------
// Action refresh node
// ----------------------------------------------------------------------
function CGActionRefreshNode() {
	this.base = CGAction;
	this.base(2);
};

CGActionRefreshNode.prototype = new CGAction;
CGActionRefreshNode.constructor = CGActionRefreshNode;
CommandFactory.register(CGActionRefreshNode, {
	Id: 0
}, false);

CGActionRefreshNode.prototype.step_1 = function () {
	var DOMNode, Process;

	if (this.DOMItem != null) {
		DOMNode = this.DOMItem.up(CSS_NODE);
		this.ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMNode.IdView);
	} else {
		this.ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Id);
		DOMNode = this.ViewNode.getDOM();
	}

	if (this.ViewNode == null) {
		this.terminate();
		return;
	}

	Process = new CGProcessShowNode();
	Process.ReturnProcess = this;
	Process.Id = this.Id;
	Process.Mode = DOMNode.getControlInfo().Templates.Refresh;
	Process.ViewNode = this.ViewNode;
	Process.ActivateNode = true;
	Process.execute();
};

CGActionRefreshNode.prototype.step_2 = function () {
	this.ViewNode.getDOM().executeOnloadCommands();
	this.terminate();
};

// ----------------------------------------------------------------------
// Action show field
// ----------------------------------------------------------------------
function CGActionShowField() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.ViewNode = false;
};

CGActionShowField.prototype = new CGAction;
CGActionShowField.constructor = CGActionShowField;
CommandFactory.register(CGActionShowField, {
	Path: 0,
	IdNode: 1,
	Mode: 2
}, true);

CGActionShowField.prototype.step_1 = function () {
	var DOMNode, Process;

	if ((this.Path == null) || (this.IdNode == null) || (this.Mode == null)) {
		this.terminate();
		return;
	}

	DOMNode = this.DOMItem.up(CSS_NODE);
	this.ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMNode.IdView);

	if (this.ViewNode == null) {
		this.terminate();
		return;
	}

	Process = new CGProcessShowNode();
	Process.Id = this.IdNode;
	Process.Mode = this.Mode;
	Process.ViewNode = this.ViewNode;
	Process.ActivateNode = false;
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionShowField.prototype.step_2 = function () {
	CommandDispatcher.dispatch("loadeditors()");

	var Process = new CGProcessGotoField();
	Process.Path = this.Path;
	Process.ViewNode = this.ViewNode;
	Process.ReturnProcess = this;
	Process.execute();

	this.ViewNode = null;
	this.terminate();
};

// ----------------------------------------------------------------------
// Action show child field
// ----------------------------------------------------------------------
function CGActionShowChildField() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.ViewNode = false;
};

CGActionShowChildField.prototype = new CGAction;
CGActionShowChildField.constructor = CGActionShowChildField;
CommandFactory.register(CGActionShowChildField, {
	Path: 0,
	IdNode: 1,
	IdChild: 2,
	Mode: 3
}, true);

CGActionShowChildField.prototype.step_1 = function () {
	var Process;

	if ((this.Path == null) || (this.IdNode == null) || (this.IdChild == null) || (this.Mode == null)) {
		this.terminate();
		return;
	}

	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.IdNode);

	if (ViewNode == null) {
		this.terminate();
		return;
	}

	Process = new CGProcessShowNode();
	Process.Id = this.IdNode;
	Process.Mode = this.Mode;
	Process.ViewNode = ViewNode;
	Process.ActivateNode = false;
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionShowChildField.prototype.step_2 = function () {
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.IdNode);
	var DOMNode = ViewNode.getDOM();
	var aDOMChildren = DOMNode.getChildrenNodes(this.IdChild);

	CommandDispatcher.dispatch("loadeditors()");

	for (var i = 0; i < aDOMChildren.length; i++) {
		var DOMChild = aDOMChildren[i];
		if (DOMChild.IdView) {
			var Process = new CGProcessGotoField();
			Process.Path = this.Path;
			Process.ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMChild.IdView);
			Process.execute();
		}
	}

	this.terminate();
};

// ----------------------------------------------------------------------
// Activate node
// ----------------------------------------------------------------------
function CGActionActivateNode() {
	this.base = CGAction;
	this.base(1);
};

CGActionActivateNode.prototype = new CGAction;
CGActionActivateNode.constructor = CGActionActivateNode;
CommandFactory.register(CGActionActivateNode, {
	Id: 0
}, true);

CGActionActivateNode.prototype.step_1 = function () {
	var Process;

	Process = new CGProcessActivateNode();
	Process.Id = this.Id;
	Process.execute();

	this.terminate();
};

// ----------------------------------------------------------------------
// Close node
// ----------------------------------------------------------------------
function CGActionCloseNode() {
	this.base = CGAction;
	this.base(1);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionCloseNode.prototype = new CGAction;
CGActionCloseNode.constructor = CGActionCloseNode;
CommandFactory.register(CGActionCloseNode, {
	Id: 0
}, false);

CGActionCloseNode.prototype.step_1 = function () {
	var Process = new CGProcessCloseNode();
	Process.Id = this.Id;
	Process.execute();
	this.terminate();
};

// ----------------------------------------------------------------------
// Edit node
// ----------------------------------------------------------------------
function CGActionEditNode() {
	this.base = CGAction;
	this.base(4);
	this.dlgEditNode = null;
	this.ViewNode = null;
	this.sDummyLayer = null;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionEditNode.prototype = new CGAction;
CGActionEditNode.constructor = CGActionEditNode;
CommandFactory.register(CGActionEditNode, {
	Id: 0,
	Mode: 1
}, false);

CGActionEditNode.prototype.isDummyView = function () {
	return this.sDummyLayer != null;
};

CGActionEditNode.prototype.createDummyView = function (Node) {
	this.sDummyLayer = Node.getId() + DUMMY;
	createLayer(this.sDummyLayer, EMPTY, $(Literals.NodesContainer));
	return Desktop.createView($(this.sDummyLayer), Node, null, this.Mode, true);
};

CGActionEditNode.prototype.deleteDummyView = function () {
	if (this.sDummyLayer != null) {
		$(this.sDummyLayer).remove();
		Desktop.Main.Center.Body.deleteView(VIEW_NODE, this.ViewNode.getId());
	}
};

CGActionEditNode.prototype.setViewNode = function (Node) {
	var DOMForm;

	DOMForm = $(Node.getId());
	if ((!DOMForm) && (this.DOMItem != null))
		DOMForm = Extension.getDOMNodeForm(this.DOMItem);

	if ((DOMForm) && (DOMForm.IdView) && (Desktop.Main.Center.Body.existsView(DOMForm.IdView))) {
		this.ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMForm.IdView);
	} else {
		this.ViewNode = this.createDummyView(Node);
		this.ViewNode.getDOM().style.visibility = "hidden";
	}
};

CGActionEditNode.prototype.close = function () {
	this.deleteDummyView();
	this.resetState();
	this.terminate();
};

CGActionEditNode.prototype.onFailure = function (sResponse) {
	if (this.dlgEditNode)
		this.dlgEditNode.destroy();
	Desktop.reportError(Lang.Action.EditNode.Failure);
};

CGActionEditNode.prototype.step_1 = function () {
	var Node = new CGNode();

	this.dlgEditNode = new CGDialogEditNode();
	this.dlgEditNode.init();
	this.dlgEditNode.onAccept = this.execute.bind(this);
	this.dlgEditNode.onCancel = this.close.bind(this);
	this.dlgEditNode.show();

	Node.setId(this.Id);

	this.setViewNode(Node);
	if (this.ViewNode == null) {
		this.terminate();
		return;
	}

	if ((!NodesCache.exists(Node.getId())) || (this.isDummyView())) {
		var Process = new CGProcessShowNode();
		Process.Id = Node.getId();
		Process.Mode = this.Mode;
		Process.ViewNode = this.ViewNode;
		Process.ReturnProcess = this;
		Process.execute();
	} else {
		this.execute();
	}

};

CGActionEditNode.prototype.step_2 = function () {
	this.dlgEditNode.setNode(Ext.get(this.ViewNode.getDOM()));
	this.dlgEditNode.refresh();
};

CGActionEditNode.prototype.step_3 = function () {
	Kernel.saveNode(this, this.Id, this.dlgEditNode.Fields, null);
	this.dlgEditNode.destroy();
};

CGActionEditNode.prototype.step_4 = function () {
	var Node;

	Node = new CGNode();
	Node.setId(this.Id);

	this.deleteDummyView();

	this.addRefreshTask(RefreshTaskType.Forms, Node);

	Desktop.reportSuccess(Lang.Action.EditNode.Done);
	this.terminate();
};

// ----------------------------------------------------------------------
// Edit node descriptors
// ----------------------------------------------------------------------
// TODO. Refactorizar esta acción. Se llamará EditNodeDescriptor
function CGActionEditNodeDescriptors() {
	this.base = CGActionEditNode;
	this.base(4);
	this.dlgEditNodeDescriptors = null;
};

CGActionEditNodeDescriptors.prototype = new CGActionEditNode;
CGActionEditNodeDescriptors.constructor = CGActionEditNodeDescriptors;
CommandFactory.register(CGActionEditNodeDescriptors, {
	IdNode: 0,
	Mode: 1,
	Label: 2,
	Description: 3
}, false);

CGActionEditNodeDescriptors.prototype.onFailure = function (sResponse) {
	if (this.dlgEditNodeDescriptors)
		this.dlgEditNodeDescriptors.destroy();
	Desktop.reportError(Lang.Action.EditNodeDescriptors.Failure);
	this.terminate();
};

CGActionEditNodeDescriptors.prototype.step_1 = function () {
	var Node = new CGNode();

	this.dlgEditNodeDescriptors = new CGDialogEditNodeDescriptors();
	this.dlgEditNodeDescriptors.init();
	if (this.Report)
		this.dlgEditNodeDescriptors.showReport(this.Report);
	this.dlgEditNodeDescriptors.onAccept = this.execute.bind(this);
	this.dlgEditNodeDescriptors.onCancel = this.close.bind(this);
	this.dlgEditNodeDescriptors.show();

	Node.setId(this.IdNode);

	this.setViewNode(Node);

	if (this.ViewNode == null) {
		this.terminate();
		return;
	}

	if ((!NodesCache.exists(Node.getId())) || (this.isDummyView())) {
		var Process = new CGProcessShowNode();
		Process.Id = Node.getId();
		Process.Mode = this.Mode;
		Process.ViewNode = this.ViewNode;
		Process.ReturnProcess = this;
		Process.execute();
	} else {
		this.execute();
	}

};

CGActionEditNodeDescriptors.prototype.step_2 = function () {
	var Node = NodesCache.get(this.IdNode);

	var aDescriptors = new Array();
	aDescriptors[DESCRIPTOR_LABEL] = (this.Label) ? this.Label : Node.getReference().getLabel();
	aDescriptors[DESCRIPTOR_DESCRIPTION] = (this.Description) ? this.Description : Node.getReference().getDescription();

	this.dlgEditNodeDescriptors.setDescriptors(aDescriptors);
	this.dlgEditNodeDescriptors.refresh();
};

CGActionEditNodeDescriptors.prototype.step_3 = function () {
	var AttributeList = new CGAttributeList();

	var AttributeLabel = new CGAttribute();
	AttributeLabel.setCode(DESCRIPTOR_LABEL);
	AttributeLabel.addIndicatorByValue(CGIndicator.VALUE, -1, this.dlgEditNodeDescriptors.Descriptors[DESCRIPTOR_LABEL]);
	AttributeList.addAttribute(AttributeLabel);

	var AttributeDescription = new CGAttribute();
	AttributeDescription.setCode(DESCRIPTOR_DESCRIPTION);
	AttributeDescription.addIndicatorByValue(CGIndicator.VALUE, -1, this.dlgEditNodeDescriptors.Descriptors[DESCRIPTOR_DESCRIPTION]);
	AttributeList.addAttribute(AttributeDescription);

	Kernel.saveNodeDescriptor(this, this.IdNode, AttributeList, this.Mode);

	this.dlgEditNodeDescriptors.destroy();
};

CGActionEditNodeDescriptors.prototype.step_4 = function () {
	var Node;

	this.deleteDummyView();

	Node = new CGNode();
	Node.setId(this.IdNode);

	this.addRefreshTask(RefreshTaskType.Descriptors, Node);

	Desktop.reportSuccess(Lang.Action.EditNodeDescriptors.Done);
	this.terminate();
};

// ----------------------------------------------------------------------
// Save node
// ----------------------------------------------------------------------
function CGActionSaveNode() {
	this.base = CGAction;
	this.base(2);
};

CGActionSaveNode.prototype = new CGAction;
CGActionSaveNode.constructor = CGActionSaveNode;
CommandFactory.register(CGActionSaveNode, {
	Id: 0
}, false);

CGActionSaveNode.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Action.SaveNode.Failure);
	this.terminate();
};

CGActionSaveNode.prototype.step_1 = function () {
	State.discardNode = false;
	this.Process = new CGProcessSaveNode();
	this.Process.Id = this.Id;
	this.Process.ReturnProcess = this;
	this.Process.execute();
};

CGActionSaveNode.prototype.step_2 = function () {
	if (this.Process.success())
		Desktop.reportSuccess(Lang.Action.SaveNode.Done);
	else
		Desktop.reportError(Lang.Action.SaveNode.Failure);
	this.terminate();
};

// ----------------------------------------------------------------------
// Save Embedded Node
// ----------------------------------------------------------------------
function CGActionSaveEmbeddedNode() {
	this.base = CGAction;
	this.base(2);
};

CGActionSaveEmbeddedNode.prototype = new CGAction;
CGActionSaveEmbeddedNode.constructor = CGActionSaveEmbeddedNode;
CommandFactory.register(CGActionSaveEmbeddedNode, {
	Id: 0,
	Mode: 1
}, false);

CGActionSaveEmbeddedNode.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Action.SaveEmbeddedNode.Failure);
	this.terminate();
};

CGActionSaveEmbeddedNode.prototype.step_1 = function () {
	var DOMNode = this.DOMItem.up(CSS_NODE);
	DOMNode.setDirty(false);
	Kernel.saveEmbeddedNode(this, this.Id, DOMNode.getContent(), null);
};

CGActionSaveEmbeddedNode.prototype.step_2 = function () {
	Desktop.reportSuccess(Lang.Action.SaveEmbeddedNode.Done);
	this.terminate();
};

// ----------------------------------------------------------------------
// Save node descriptors
// ----------------------------------------------------------------------
// TODO. Refactorizar esta acción. ActionSaveNodeDescriptors ya no existe. Pasa
// a ser ActionSaveNodeDescriptor.
function CGActionSaveNodeDescriptor() {
	this.base = CGAction;
	this.base(2);
	this.dlgEditNodeDescriptors = null;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionSaveNodeDescriptor.prototype = new CGAction;
CGActionSaveNodeDescriptor.constructor = CGActionSaveNodeDescriptor;
CommandFactory.register(CGActionSaveNodeDescriptor, {
	IdNode: 0,
	Name: 1,
	Value: 2
}, false);

CGActionSaveNodeDescriptor.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Action.SaveNodeDescriptors.Failure);
	this.terminate();
};

CGActionSaveNodeDescriptor.prototype.step_1 = function () {
	var AttributeList = new CGAttributeList();
	var Attribute = new CGAttribute();

	if ((this.IdNode == null) || (this.Name == null) || (this.Value == null)) {
		this.terminate();
		return;
	}

	Attribute.setCode(this.Name);
	Attribute.addIndicatorByValue(CGIndicator.VALUE, -1, HtmlUtil.encode(this.Value));
	AttributeList.addAttribute(Attribute);

	Kernel.saveNodeDescriptor(this, this.IdNode, AttributeList, this.Mode);
};

CGActionSaveNodeDescriptor.prototype.step_2 = function () {
	var Node = new CGNode;
	Node.setId(this.IdNode);
	this.addRefreshTask(RefreshTaskType.References, Node);
	this.terminate();
};

// ----------------------------------------------------------------------
// Back node
// ----------------------------------------------------------------------
function CGActionBackNode() {
	this.base = CGAction;
	this.base(4);
};

CGActionBackNode.prototype = new CGAction;
CGActionBackNode.constructor = CGActionBackNode;
CommandFactory.register(CGActionBackNode, null, false);

CGActionBackNode.prototype.step_1 = function () {
	var Process = new CGProcessShowLastView();
	Process.execute();
	this.terminate();
};

// ----------------------------------------------------------------------
// Cancel node
// ----------------------------------------------------------------------
function CGActionCancelNode() {
	this.base = CGAction;
	this.base(4);
};

CGActionCancelNode.prototype = new CGAction;
CGActionCancelNode.constructor = CGActionCancelNode;
CommandFactory.register(CGActionCancelNode, {
	Id: 0
}, false);

CGActionCancelNode.prototype.step_1 = function () {
	var Process = new CGProcessShowLastView();
	Process.execute();
	this.terminate();
};

// ----------------------------------------------------------------------
// Add node
// ----------------------------------------------------------------------
function CGActionAddNode() {
	this.base = CGAction;
	this.base(6);
	this.dlgAddNode = null;
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionAddNode.prototype = new CGAction;
CGActionAddNode.constructor = CGActionAddNode;
CommandFactory.register(CGActionAddNode, {
	DataSource: 0,
	Code: 1,
	Mode: 2,
	ContentMode: 3,
	Parent: 4
}, false);

CGActionAddNode.prototype.enabled = function () {
	var Node, aDefinitions;

	if ((Node = NodesCache.getCurrent()) == null)
		return false;
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return false;

	aDefinitions = Extension.getDefinitions(ViewNode.getDOM(), Node.Code);

	return (aDefinitions.size() > 0);
};

CGActionAddNode.prototype.getIdParent = function () {
	var DOMNode = this.DOMItem.up(CSS_NODE);
	var IdParent;

	if (!DOMNode)
		return null;
	if (!DOMNode.getControlInfo)
		return null;

	IdParent = DOMNode.getControlInfo().IdNode;
	if (IdParent == ID_NODE_SEARCH) {
		IdParent = NodesCache.get(State.LastObject.Id).getId();
	}

	return IdParent;
};

CGActionAddNode.prototype.onFailure = function (sResponse) {
	if (this.dlgAddNode)
		this.dlgAddNode.destroy();
	Desktop.reportError(this.getErrorMessage(Lang.Action.AddNode.Failure, sResponse));
	this.terminate();
};

CGActionAddNode.prototype.refresh = function (Dialog) {
	var Process = new CGProcessRefreshNodeTypeDialog();
	Process.Dialog = Dialog;
	Process.execute();
};

CGActionAddNode.prototype.renderDialog = function (Node) {
	var aDefinitions, ViewNode;

	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null) {
		this.terminate();
		return;
	}

	aDefinitions = Extension.getDefinitions(ViewNode.getDOM(), Node.Code);

	if ((aDefinitions == null) || (aDefinitions.length == 0)) {
		Desktop.reportWarning(Lang.ViewNode.DialogAddNode.NoNodes);
		this.terminate();
		return;
	}

	this.dlgAddNode = new CGDialogAddNode();
	this.dlgAddNode.init();
	this.dlgAddNode.Target = {
		NodeTypes: aDefinitions,
		Definition: null,
		From: this.DataSource
	};
	this.dlgAddNode.onAccept = this.gotoStep.bind(this, 3);
	this.dlgAddNode.onSelectNodeType = this.refresh.bind(this);
	this.dlgAddNode.onCancel = this.resetState.bind(this);
	this.dlgAddNode.refresh();
	this.dlgAddNode.show();
};

CGActionAddNode.prototype.step_1 = function () {
	var Node;

	if ((Node = NodesCache.getCurrent()) == null) {
		this.terminate();
		return;
	}

	if ((!this.Mode) || (this.Mode == "") || (this.Mode == "null"))
		this.Mode = null;
	if ((!this.ContentMode) || (this.ContentMode == "") || (this.ContentMode == "null"))
		this.ContentMode = null;
	if ((!this.Parent) || (this.Parent == "") || (this.Parent == "null"))
		this.Parent = this.getIdParent();
	if (this.Parent == CURRENT_NODE)
		this.Parent = Node.getId();

	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);

	if (this.Code && (this.DataSource == ADD_NODE_BLANK)) {
		this.Process = new CGProcessAddNodeBlank();
		this.Process.Code = this.Code;
		this.Process.Mode = this.Mode;
		this.Process.IdParent = this.Parent;
		this.Process.ContentMode = this.ContentMode;
		this.Process.ReturnProcess = this;
		this.Process.execute();
	} else
		this.renderDialog(Node);
};

CGActionAddNode.prototype.step_2 = function () {
	this.gotoStep(4);
};

CGActionAddNode.prototype.step_3 = function () {

	if (this.dlgAddNode.From == ADD_NODE_BLANK)
		this.Process = new CGProcessAddNodeBlank();
	else if (this.dlgAddNode.From == ADD_NODE_FROM_FILE)
		this.Process = new CGProcessAddNodeFromFile();
	else
		this.Process = new CGProcessAddNodeFromClipboard();

	this.Process.Code = this.dlgAddNode.NodeType.Code;
	this.Process.FileForm = this.dlgAddNode.FileForm;
	this.Process.Format = this.dlgAddNode.Format;
	this.Process.Option = this.dlgAddNode.Option;
	this.Process.Description = this.dlgAddNode.Description;
	this.Process.Data = this.dlgAddNode.Result;
	this.Process.IdParent = this.Parent;
	this.Process.ReturnProcess = this;
	this.Process.execute();
};

CGActionAddNode.prototype.step_4 = function () {
	if (this.Process.success())
		this.execute();
	else
		this.onFailure(this.Process.getFailure());
};

CGActionAddNode.prototype.step_5 = function () {
	var Process, ViewNode, Node = NodesCache.getCurrent();

	if (this.DataSource != ADD_NODE_BLANK) {
		Process = new CGProcessShowNode();

		if (Node.getId() == ID_NODE_SEARCH)
			Node = NodesCache.get(State.LastObject.Id);
		ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());

		Process.Id = Node.getId();
		Process.Mode = ViewNode.getMode();
		Process.ViewNode = ViewNode;
		Process.ReturnProcess = this;
		Process.execute();
	} else {
		this.execute();
	}
};

CGActionAddNode.prototype.step_6 = function () {
	if (this.dlgAddNode)
		this.dlgAddNode.destroy();

	if (this.DataSource == ADD_NODE_BLANK) {
		var Node = NodesCache.getCurrent();
		var Definition = Extension.getDefinition(Node.Code);

		State.discardNode = (Definition.Type == DEFINITION_TYPE_FORM) ? true : false;
		Desktop.hideReports();

		if (Node.getId() == ID_NODE_SEARCH)
			Node = NodesCache.get(State.LastObject.Id);
		ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());
		EventManager.notify(EventManager.CREATE_NODE, {
			"Node": Node,
			"DOMNode": ViewNode.getDOM()
		});
	} else
		Desktop.reportSuccess(Lang.Action.AddNode.Done);

	this.terminate();
};

// ----------------------------------------------------------------------
// Add prototype
// ----------------------------------------------------------------------
function CGActionAddPrototype() {
	this.base = CGAction;
	this.base(3);
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionAddPrototype.prototype = new CGAction;
CGActionAddPrototype.constructor = CGActionAddPrototype;
CommandFactory.register(CGActionAddPrototype, {
	CodeType: 0,
	Mode: 1,
	ContentMode: 2,
	IdParent: 3
}, false);

CGActionAddPrototype.prototype.onFailure = function (sResponse) {
	Desktop.reportError(this.getErrorMessage(Lang.Action.AddPrototype.Failure, sResponse));
	this.terminate();
};

CGActionAddPrototype.prototype.step_1 = function () {
	var Node;

	if ((Node = NodesCache.getCurrent()) == null) {
		this.terminate();
		return;
	}

	if ((!this.Mode) || (this.Mode == "") || (this.Mode == "null"))
		this.Mode = null;

	if ((!this.ContentMode) || (this.ContentMode == "") || (this.ContentMode == "null"))
		this.ContentMode = null;

	if ((!this.IdParent) || (this.IdParent == "") || (this.IdParent == "null"))
		this.IdParent = null;

	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);

	this.Process = new CGProcessAddNodeBlank();
	this.Process.Code = this.CodeType;
	this.Process.Mode = this.Mode;
	this.Process.ContentMode = this.ContentMode;
	this.Process.IsPrototype = true;
	this.Process.IdParent = this.IdParent;
	this.Process.Shared = this.IdParent == null;
	this.Process.ReturnProcess = this;
	this.Process.execute();
};

CGActionAddPrototype.prototype.step_2 = function () {
	if (this.Process.success())
		this.execute();
	else
		this.onFailure(this.Process.getFailure());
};

CGActionAddPrototype.prototype.step_3 = function () {
	var Node = NodesCache.getCurrent();
	var Definition = Extension.getDefinition(Node.Code);

	State.discardNode = (Definition.Type == DEFINITION_TYPE_FORM) ? true : false;
	Desktop.hideReports();

	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);
	ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());
	EventManager.notify(EventManager.CREATE_NODE, {
		"Node": Node,
		"DOMNode": ViewNode.getDOM()
	});

	this.terminate();
};

// ----------------------------------------------------------------------
// Generate report
// ----------------------------------------------------------------------
function CGActionGenerateReport() {
	this.base = CGAction;
	this.base(4);
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionGenerateReport.prototype = new CGAction;
CGActionGenerateReport.constructor = CGActionGenerateReport;
CommandFactory.register(CGActionGenerateReport, {
	CodeType: 0,
	IdTarget: 1
}, false);

CGActionGenerateReport.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Action.GenerateReport.Failure);
	this.terminate();
};

CGActionGenerateReport.prototype.step_1 = function () {
	var Node, DefinitionView;

	if ((Node = NodesCache.getCurrent()) == null) {
		this.terminate();
		return;
	}

	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);

	DefinitionView = Extension.getDefinitionDefaultView(this.Code, BUSINESS_MODEL_EXPORT);

	if (!DefinitionView) {
		Desktop.reportError(Lang.Action.GenerateReport.Failure);
		this.terminate();
		return;
	}

	this.Process = new CGProcessGenerateReport();
	this.Process.Code = this.Code;
	this.Process.Target = this.IdTarget;
	this.Process.DataSourceTemplate = DefinitionView.Name;
	this.Process.ReturnProcess = this;
	this.Process.execute();
};

CGActionGenerateReport.prototype.step_2 = function () {
	if (this.Process.success())
		this.execute();
	else
		this.onFailure(this.Process.getFailure());
};

CGActionGenerateReport.prototype.step_3 = function () {
	var Process, ViewNode, Node = NodesCache.getCurrent();

	Process = new CGProcessShowNode();

	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);
	ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());

	Process.Id = Node.getId();
	Process.Mode = ViewNode.getMode();
	Process.ViewNode = ViewNode;
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionGenerateReport.prototype.step_4 = function () {
	var Node = NodesCache.getCurrent();
	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);
	ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());
	EventManager.notify(EventManager.CREATE_NODE, {
		"Node": Node,
		"DOMNode": ViewNode.getDOM()
	});
	this.terminate();
};

// ----------------------------------------------------------------------
// Preview Node
// ----------------------------------------------------------------------
function CGActionPreviewNode() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionPreviewNode.prototype = new CGAction;
CGActionPreviewNode.constructor = CGActionPreviewNode;
CommandFactory.register(CGActionPreviewNode, {
	Id: 0,
	IdDOMLayer: 1
}, true);

CGActionPreviewNode.prototype.destroyDocumentViewer = function () {
	if (State.DocumentViewer == null)
		return;
	State.DocumentViewer.dispose();
	$(Literals.PreviewThumbnails).innerHTML = "";
	$(Literals.PreviewButtons).innerHTML = "";
	Desktop.Main.Center.Body.setScrollListener(Desktop.Main.Center.Body.getActiveTab(VIEW_NODE), null, null);
};

CGActionPreviewNode.prototype.createDocumentViewer = function () {
	var DOMLayer;

	this.destroyDocumentViewer();

	DOMLayer = $(this.IdDOMLayer);
	DOMLayer.innerHTML = "";
	DOMLayer.addClassName(CLASS_PREVIEW_PAGES_VIEW);

	Ext.get(Literals.PreviewThumbnails).setHeight(Desktop.Main.Right.getHeight() - 40);

	State.DocumentViewer = new DocumentViewer(Literals.PreviewThumbnails, this.IdDOMLayer, Literals.PreviewButtons, Account.getUser().Language);
	State.DocumentViewer.setDocumentId(this.Id);
	State.DocumentViewer.setViewport(Desktop.Main.Center.Body.getViewport(DOMLayer));
	State.DocumentViewer.setBaseUrl(Kernel.getPreviewNodesLink());

	Desktop.Main.Center.Body.setScrollListener(Desktop.Main.Center.Body.getActiveTab(VIEW_NODE), State.DocumentViewer.onScrollPageView.createDelegate(State.DocumentViewer), DOMLayer);

	State.DocumentViewer.load();
};

CGActionPreviewNode.prototype.step_1 = function () {

	if ((this.Id == null) || (this.IdDOMLayer == null)) {
		this.terminate();
		return;
	}

	var Process = new CGProcessLoadHelperPreview();
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionPreviewNode.prototype.step_2 = function () {
	this.createDocumentViewer();
	this.terminate();
};

// ----------------------------------------------------------------------
// Render Node List
// ----------------------------------------------------------------------
function CGActionRenderNodeList() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderNodeList.prototype = new CGAction;
CGActionRenderNodeList.constructor = CGActionRenderNodeList;
CommandFactory.register(CGActionRenderNodeList, {
	Id: 0,
	Code: 1,
	CodeView: 2,
	IdDOMViewerLayer: 3,
	IdDOMViewerLayerOptions: 4
}, false);

CGActionRenderNodeList.prototype.atAddItem = function (DOMNode, Sender, Item) {
	CommandListener.throwCommand(Item.Command);
};

CGActionRenderNodeList.prototype.atDeleteItem = function (Sender, Id) {
	CommandListener.throwCommand("deletenodes(" + Id + "," + this.Id + ")");
};

CGActionRenderNodeList.prototype.atDeleteItems = function (Sender, Items) {
	CommandListener.throwCommand("deletenodes(" + Items.toString('#') + "," + this.Id + ")");
};

CGActionRenderNodeList.prototype.atBoundItem = function (Sender, Item) {
	Item.locked = (Item.deletable == "false");

	var Dummy = Item;
	for (var index in Dummy) {
		if (isFunction(Dummy[index]))
			continue;
		Item[index + "_short"] = shortValue(Dummy[index]);
		if (Item[index] == "true") Item[index] = Item[index + "_short"] = Lang.Response.Yes;
		else if (Item[index] == "false") Item[index] = Item[index + "_short"] = Lang.Response.No;
		try {
			Item[index + "_length"] = Dummy[index].length;
		} catch (e) {
		}
	}
};

CGActionRenderNodeList.prototype.atRenderItem = function (Sender, Item, DOMItem) {
	CommandListener.capture(DOMItem);
};

CGActionRenderNodeList.prototype.atSelectItem = function (bSelected, Sender, Id) {
	if (bSelected)
		State.addNodeReferenceToSelection(this.Id, Id, bSelected);
	else
		State.deleteSelectedNodeReference(this.Id, Id);
};

CGActionRenderNodeList.prototype.atSelectItems = function (bSelected, Sender, Items) {
	if (bSelected) {
		State.addNodesReferencesToSelection(this.Id, Items);
	} else {
		State.deleteSelectedNodesReferences(this.Id);
	}
};

CGActionRenderNodeList.prototype.atUpdateState = function (NewState) {
	State.registerListViewerState(this.Id + this.CodeView, NewState);
    State.registerListViewerState(this.Id, NewState);
};

CGActionRenderNodeList.prototype.destroyViewer = function () {
	if (State.NodeListViewer == null)
		return;
	State.NodeListViewer.dispose();
	$(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderNodeList.prototype.createViewer = function () {
	var Options, DOMNode;

	this.destroyViewer();

	DOMNode = $(this.IdDOMViewerLayer).up(CSS_NODE);
	eval($(this.IdDOMViewerLayerOptions).innerHTML);

	State.NodeListViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
	State.NodeListViewer.setDataSourceUrls(Kernel.getNodeItemsLink(this.Id, this.Code, this.CodeView), Kernel.getNodeGroupByOptionsLink(this.Id, this.CodeView));
	State.NodeListViewer.setWizardLayer(Literals.ListViewerWizard);
	State.NodeListViewer.onAddItem = CGActionRenderNodeList.prototype.atAddItem.bind(this, DOMNode);
	State.NodeListViewer.onDeleteItem = CGActionRenderNodeList.prototype.atDeleteItem.bind(this);
	State.NodeListViewer.onDeleteItems = CGActionRenderNodeList.prototype.atDeleteItems.bind(this);
	State.NodeListViewer.onBoundItem = CGActionRenderNodeList.prototype.atBoundItem.bind(this);
	State.NodeListViewer.onRenderItem = CGActionRenderNodeList.prototype.atRenderItem.bind(this);
	State.NodeListViewer.onSelectItem = CGActionRenderNodeList.prototype.atSelectItem.bind(this, true);
	State.NodeListViewer.onUnselectItem = CGActionRenderNodeList.prototype.atSelectItem.bind(this, false);
	State.NodeListViewer.onSelectAllItems = CGActionRenderNodeList.prototype.atSelectItems.bind(this, true);
	State.NodeListViewer.onUnselectAllItems = CGActionRenderNodeList.prototype.atSelectItems.bind(this, false);
	State.NodeListViewer.onUpdateState = CGActionRenderNodeList.prototype.atUpdateState.bind(this);
	State.NodeListViewer.setState(State.getListViewerState(this.Id + this.CodeView));
	State.NodeListViewer.render(this.IdDOMViewerLayer);
	State.NodeListViewer.Id = this.Id;
};

CGActionRenderNodeList.prototype.step_1 = function () {

	if ((this.Id == null) || (this.Code == null) || (this.CodeView == null) || (this.IdDOMViewerLayer == null) || (this.IdDOMViewerLayerOptions == null)) {
		this.terminate();
		return;
	}

	var Process = new CGProcessLoadHelperListViewer();
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionRenderNodeList.prototype.step_2 = function () {
	this.createViewer();
	this.terminate();
};

// ----------------------------------------------------------------------
// Render Node Content
// ----------------------------------------------------------------------
function CGActionRenderNodeContent() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderNodeContent.prototype = new CGAction;
CGActionRenderNodeContent.constructor = CGActionRenderNodeContent;
CommandFactory.register(CGActionRenderNodeContent, {
	Id: 0,
	Content: 1,
	Code: 2,
	CodeView: 3,
	IdDOMViewerLayer: 4,
	IdDOMViewerLayerOptions: 5
}, false);

CGActionRenderNodeContent.prototype.atAddItem = function (DOMNode, Sender, Item) {
	if (this.Content == "ownedprototypes")
		CommandListener.throwCommand("addprototype(" + Item.Code + ",null,null," + this.Id + ")");
	else if (this.Content == "sharedprototypes")
		CommandListener.throwCommand("addprototype(" + Item.Code + ",null,null,null)");
};

CGActionRenderNodeContent.prototype.atDeleteItem = function (Sender, Id) {
	CommandListener.throwCommand("deletenodes(" + Id + "," + this.Id + ")");
};

CGActionRenderNodeContent.prototype.atDeleteItems = function (Sender, Items) {
	CommandListener.throwCommand("deletenodes(" + Items.toString('#') + "," + this.Id + ")");
};

CGActionRenderNodeContent.prototype.atBoundItem = function (Sender, Item) {
	var Dummy = Item;
	for (var index in Dummy) {
		if (isFunction(Dummy[index]))
			continue;
		Item[index + "_short"] = shortValue(Dummy[index]);
		try {
			Item[index + "_length"] = Dummy[index].length;
		} catch (e) {
		}
	}
};

CGActionRenderNodeContent.prototype.atSelectItem = function (bSelected, Sender, Id) {
	if (bSelected)
		State.addNodeReferenceToSelection(this.Id, Id, bSelected);
	else
		State.deleteSelectedNodeReference(this.Id, Id);
};

CGActionRenderNodeContent.prototype.atSelectItems = function (bSelected, Sender, Items) {
	if (bSelected) {
		State.addNodesReferencesToSelection(this.Id, Items);
	} else {
		State.deleteSelectedNodesReferences(this.Id);
	}
};

CGActionRenderNodeContent.prototype.atUpdateState = function (NewState) {
	State.registerListViewerState(this.Id + this.CodeView, NewState);
    State.registerListViewerState(this.Id, NewState);
};

CGActionRenderNodeContent.prototype.destroyViewer = function () {
	if (State.SetListViewer == null)
		return;
	State.SetListViewer.dispose();
	$(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderNodeContent.prototype.createViewer = function () {
	var Options, DOMNode;

	this.destroyViewer();

	DOMNode = $(this.IdDOMViewerLayer).up(CSS_NODE);

	eval($(this.IdDOMViewerLayerOptions).innerHTML);
	State.SetListViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
	State.SetListViewer.setDataSourceUrls(Kernel.getNodeSetItemsLink(this.Id, this.Content, this.Code, this.CodeView), null);
	State.SetListViewer.setWizardLayer(Literals.ListViewerWizard);
	State.SetListViewer.onAddItem = CGActionRenderNodeContent.prototype.atAddItem.bind(this, DOMNode);
	State.SetListViewer.onDeleteItem = CGActionRenderNodeContent.prototype.atDeleteItem.bind(this);
	State.SetListViewer.onDeleteItems = CGActionRenderNodeContent.prototype.atDeleteItems.bind(this);
	State.SetListViewer.onBoundItem = CGActionRenderNodeContent.prototype.atBoundItem.bind(this);
	State.SetListViewer.onSelectItem = CGActionRenderNodeContent.prototype.atSelectItem.bind(this, true);
	State.SetListViewer.onUnselectItem = CGActionRenderNodeContent.prototype.atSelectItem.bind(this, false);
	State.SetListViewer.onSelectAllItems = CGActionRenderNodeContent.prototype.atSelectItems.bind(this, true);
	State.SetListViewer.onUnselectAllItems = CGActionRenderNodeContent.prototype.atSelectItems.bind(this, false);
	State.SetListViewer.onUpdateState = CGActionRenderNodeContent.prototype.atUpdateState.bind(this);
	State.SetListViewer.render(this.IdDOMViewerLayer);
	State.SetListViewer.Id = this.Id;
};

CGActionRenderNodeContent.prototype.step_1 = function () {

	if ((this.Id == null) || (this.Content == null) || (this.Code == null) || (this.CodeView == null) || (this.IdDOMViewerLayer == null) || (this.IdDOMViewerLayerOptions == null)) {
		this.terminate();
		return;
	}

	var Process = new CGProcessLoadHelperListViewer();
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionRenderNodeContent.prototype.step_2 = function () {
	this.createViewer();
	this.terminate();
};

// ----------------------------------------------------------------------
// Render Node Attachments
// ----------------------------------------------------------------------
function CGActionRenderNodeAttachments() {
	this.base = CGAction;
	this.base(2);
	this.idDocument = null;
};

CGActionRenderNodeAttachments.prototype = new CGAction;
CGActionRenderNodeAttachments.constructor = CGActionRenderNodeAttachments;
CommandFactory.register(CGActionRenderNodeAttachments, {
	Id: 0,
	Code: 1,
	CodeView: 2,
	IdDOMLayer: 3,
	IdDOMLayerOptions: 4
}, false);

CGActionRenderNodeAttachments.prototype.atSelectAttachment = function (id) {
	State.CurrentAttachment = id;
};

CGActionRenderNodeAttachments.prototype.destroyViewer = function () {
	if (State.AttachmentsViewer == null)
		return;

	if (State.AttachmentsViewer.target.idNode == this.Id)
		this.idDocument = State.CurrentAttachment;

	State.AttachmentsViewer.dispose();
	$(Literals.PreviewThumbnails).innerHTML = "";
	$(Literals.PreviewButtons).innerHTML = "";
	Desktop.Main.Center.Body.setScrollListener(Desktop.Main.Center.Body.getActiveTab(VIEW_NODE), null, null);
};

CGActionRenderNodeAttachments.prototype.atLabelChange = function (newLabel) {
	CommandListener.throwCommand("renameattachment(" + this.Id + "," + newLabel + ")");
};

CGActionRenderNodeAttachments.prototype.atShowDocument = function () {
	var document = State.AttachmentsViewer.getDocument();
	eval($(this.IdDOMLayerOptions).innerHTML);

	if (Options.Editable) {
		CommandListener.throwCommand("replaceattachment(" + this.Id + ")");
		return;
	}

	if (document.targetType == "file") window.location.href = State.AttachmentsViewer.getDownloadDocumentUrl();
	else {
		var process = new CGProcessShowNodeAttachment();
		process.Id = document.id;
		process.execute();
	}
};

CGActionRenderNodeAttachments.prototype.atFactoryBeforeGet = function (document, documentViewer) {
	documentViewer.showDocumentLabel();
};

CGActionRenderNodeAttachments.prototype.createViewer = function () {
	var DOMLayer;

	this.destroyViewer();

	DOMLayer = $(this.IdDOMLayer);
	DOMLayer.innerHTML = "";

	eval($(this.IdDOMLayerOptions).innerHTML);

	Ext.get(Literals.PreviewThumbnails).setHeight(Desktop.Main.Right.getHeight() - 40);

	var documentViewerFactory = new CGDocumentViewerFactory(Kernel.getPreviewAttachmentsLink(), Options.Editable);
	documentViewerFactory.onDocumentLabelChange = CGActionRenderNodeAttachments.prototype.atLabelChange.bind(this);
	documentViewerFactory.onDocumentClick = CGActionRenderNodeAttachments.prototype.atShowDocument.bind(this);
	documentViewerFactory.onBeforeGet = CGActionRenderNodeAttachments.prototype.atFactoryBeforeGet.bind(this);

	State.AttachmentsViewer = new CGViewerDocumentList(documentViewerFactory);
	State.AttachmentsViewer.target = { idNode: this.Id, idDocument: this.idDocument };
	State.AttachmentsViewer.setBaseUrl(Kernel.getNodeAttachmentItemsLink(this.Id, this.Code, this.CodeView));
	State.AttachmentsViewer.onSelect = CGActionRenderNodeAttachments.prototype.atSelectAttachment.bind(this);
	State.AttachmentsViewer.render(this.IdDOMLayer);
};

CGActionRenderNodeAttachments.prototype.step_1 = function () {

	if ((this.Id == null) || (this.Code == null) || (this.CodeView == null) || (this.IdDOMLayer == null) || (this.IdDOMLayerOptions == null)) {
		this.terminate();
		return;
	}

	var Process = new CGProcessLoadHelperPreview();
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionRenderNodeAttachments.prototype.step_2 = function () {
	this.createViewer();
	this.terminate();
};

// ----------------------------------------------------------------------
// Add node attachment
// ----------------------------------------------------------------------
function CGActionAddNodeAttachment() {
	this.base = CGAction;
	this.base(7);
	this.node = null;
};

CGActionAddNodeAttachment.prototype = new CGAction;
CGActionAddNodeAttachment.constructor = CGActionAddNodeAttachment;
CommandFactory.register(CGActionAddNodeAttachment, {
	Id: 0,
	Code: 1,
	Path: 2,
	IsMultiple: 3,
	CodeNode: 4,
	ExporterCode: 5
}, false);

CGActionAddNodeAttachment.prototype.step_1 = function () {

	if (State.AttachmentsViewer == null) {
		this.terminate();
		return;
	}

	var Behaviour = Extension.getDefinitionBehaviour(this.CodeNode);

	if ((!Behaviour) || (!Behaviour.AddNode) || (!Behaviour.AddNode.Templates) || (!Behaviour.AddNode.Templates.Edit)) {
		this.terminate();
		return;
	}

	Kernel.addNode(this, this.CodeNode, this.Id, Behaviour.AddNode.Templates.Edit);
};

CGActionAddNodeAttachment.prototype.step_2 = function () {
	this.node = new CGNode();
	this.node.unserialize(this.data);
	Kernel.fillNodeDocument(this, this.node.getId(), this.ExporterCode, this.Id);
};

CGActionAddNodeAttachment.prototype.step_3 = function () {
	Kernel.saveNode(this, this.node.getId(), "", null);
};

CGActionAddNodeAttachment.prototype.step_4 = function () {
	Kernel.loadNodeAttribute(this, this.Id, this.Path);
};

CGActionAddNodeAttachment.prototype.step_5 = function () {
	var attribute = new CGAttribute();
	attribute.setCode(this.Code);
	attribute.addIndicatorByValue(CGIndicator.CODE, 0, this.node.getId());
	attribute.addIndicatorByValue(CGIndicator.NODE, 1, this.node.getId());
	attribute.addIndicatorByValue(CGIndicator.VALUE, 2, this.node.getLabel());

	State.CurrentAttachment = this.node.getId();
	State.AttachmentsViewer.clear();

	var pathAttribute = new CGAttribute();
	pathAttribute.unserialize(this.data);

	var originalAttribute = this.locateAttribute(pathAttribute, this.Path);
	if (this.IsMultiple == "true")
		originalAttribute.getAttributeList().addAttribute(attribute);
	else {
		originalAttribute.setCode(this.Code);
		originalAttribute.setIndicatorList(attribute.getIndicatorList());
	}

	Kernel.saveNodeAttribute(this, Account.getInstanceId(), this.Id, pathAttribute.serialize());
};

CGActionAddNodeAttachment.prototype.step_6 = function () {
	this.loadMainNode(this.Id);
};

CGActionAddNodeAttachment.prototype.step_7 = function () {
	this.setMainNode(this.Id, this.data);

	var nodeId = this.Id;
	if (this.data != "null") {
		var mainNode = new CGNode();
		mainNode.unserialize(this.data);
		nodeId = mainNode.getId();
	}

	CommandListener.throwCommand("refreshnode(" + nodeId + ")");

	this.terminate();
};

//----------------------------------------------------------------------
// Add file attachment
//----------------------------------------------------------------------
function CGActionAddFileAttachment() {
	this.base = CGAction;
	this.base(5);
};

CGActionAddFileAttachment.prototype = new CGAction;
CGActionAddFileAttachment.constructor = CGActionAddFileAttachment;
CommandFactory.register(CGActionAddFileAttachment, {
	Id: 0,
	Code: 1,
	Path: 2,
	IsMultiple: 3,
	Label: 4,
	Filename: 5
}, false);

CGActionAddFileAttachment.prototype.step_1 = function () {

	if (State.AttachmentsViewer == null) {
		this.terminate();
		return;
	}

	if (this.Label == null || this.Label == "null")
		State.AttachmentsViewer.showAddDialog("file", CGActionAddFileAttachment.prototype.execute.bind(this), CGActionAddFileAttachment.prototype.terminate.bind(this));
	else this.execute();
};

CGActionAddFileAttachment.prototype.step_2 = function () {
	Kernel.loadNodeAttribute(this, this.Id, this.Path);
};

CGActionAddFileAttachment.prototype.step_3 = function () {
	var attribute = new CGAttribute();
	attribute.setCode(this.Code);
	attribute.addIndicatorByValue(CGIndicator.VALUE, 0, State.AttachmentsViewer.getFilename());
	attribute.addIndicatorByValue(CGIndicator.FORMAT, 1, getFileExtension(State.AttachmentsViewer.getFilename()).toUpperCase());
	attribute.addIndicatorByValue(CGIndicator.DETAILS, 2, State.AttachmentsViewer.getLabel());

	State.CurrentAttachment = State.AttachmentsViewer.getFilename();
	State.AttachmentsViewer.clear();

	var pathAttribute = new CGAttribute();
	pathAttribute.unserialize(this.data);

	var originalAttribute = this.locateAttribute(pathAttribute, this.Path);
	var originalAttributes = originalAttribute.getAttributes();

	var found = false;
	for (var i = 0; i < originalAttributes.length; i++) {
		var childAttribute = originalAttributes[i];
		if (childAttribute.getIndicatorValue(CGIndicator.VALUE) == attribute.getIndicatorValue(CGIndicator.VALUE)) {
			found = true;
			break;
		}
	}

	if (found) {
		Desktop.reportWarning(Lang.Action.AddFileAttachment.Failure);
		State.AttachmentsViewer.clear();
		this.gotoStep(1);
		return;
	}

	if (this.IsMultiple == "true")
		originalAttribute.getAttributeList().addAttribute(attribute);
	else {
		originalAttribute.setCode(this.Code);
		originalAttribute.setIndicatorList(attribute.getIndicatorList());
	}

	Kernel.saveNodeAttribute(this, Account.getInstanceId(), this.Id, pathAttribute.serialize());
};

CGActionAddFileAttachment.prototype.step_4 = function () {
	this.loadMainNode(this.Id);
};

CGActionAddFileAttachment.prototype.step_5 = function () {
	this.setMainNode(this.Id, this.data);

	var nodeId = this.Id;
	if (this.data != "null") {
		var mainNode = new CGNode();
		mainNode.unserialize(this.data);
		nodeId = mainNode.getId();
	}

	CommandListener.throwCommand("refreshnode(" + nodeId + ")");

	this.terminate();
};

//----------------------------------------------------------------------
// Rename attachment
//----------------------------------------------------------------------
function CGActionRenameAttachment() {
	this.base = CGAction;
	this.base(7);
	this.node = null;
};

CGActionRenameAttachment.prototype = new CGAction;
CGActionRenameAttachment.constructor = CGActionRenameAttachment;
CommandFactory.register(CGActionRenameAttachment, {
	Id: 0,
	Label: 1
}, false);

CGActionRenameAttachment.prototype.step_1 = function () {

	if (State.AttachmentsViewer == null) {
		this.terminate();
		return;
	}

	if (!State.AttachmentsViewer.hasDocuments()) {
		Desktop.reportWarning(Lang.Action.RenameAttachment.Failure);
		this.terminate();
		return;
	}

	if (this.Label == null || this.Label == "")
		State.AttachmentsViewer.showRenameDialog(CGActionRenameAttachment.prototype.execute.bind(this), CGActionRenameAttachment.prototype.terminate.bind(this));
	else
		this.gotoStep(3);
};

CGActionRenameAttachment.prototype.step_2 = function () {
	this.Label = State.AttachmentsViewer.getLabel();
	this.execute();
};

CGActionRenameAttachment.prototype.step_3 = function () {
	var document = State.AttachmentsViewer.getDocument();
	Kernel.loadNodeAttribute(this, this.Id, document.path);
};

CGActionRenameAttachment.prototype.step_4 = function () {
	var document = State.AttachmentsViewer.getDocument();

	var pathAttribute = new CGAttribute();
	pathAttribute.unserialize(this.data);

	this.originalAttribute = this.locateAttribute(pathAttribute, document.path);

	if (document.targetType == "file") {
		this.execute();
		return;
	}

	var AttributeList = new CGAttributeList();

	var AttributeLabel = new CGAttribute();
	AttributeLabel.setCode(DESCRIPTOR_LABEL);
	AttributeLabel.addIndicatorByValue(CGIndicator.VALUE, -1, this.Label);
	AttributeList.addAttribute(AttributeLabel);

	Kernel.saveNodeDescriptor(this, document.id, AttributeList, null);
};

CGActionRenameAttachment.prototype.step_5 = function () {
	var document = State.AttachmentsViewer.getDocument();
	var attributes = this.originalAttribute.getAttributes();

	for (var i = 0; i < attributes.length; i++) {
		var attribute = attributes[i];
		var indicator = null;
		if (document.targetType == "node" && attribute.getIndicatorValue(CGIndicator.NODE) == document.id) indicator = attribute.getIndicator(CGIndicator.VALUE);
		else if (document.targetType == "file" && attribute.getIndicatorValue(CGIndicator.VALUE) == document.id) indicator = attribute.getIndicator(CGIndicator.DETAILS);
		if (indicator == null) continue;
		indicator.setValue(this.Label);
	}

	State.AttachmentsViewer.clear();

	Kernel.saveNodeAttribute(this, Account.getInstanceId(), this.Id, this.originalAttribute.serialize());
};

CGActionRenameAttachment.prototype.step_6 = function () {
	this.loadMainNode(this.Id);
};

CGActionRenameAttachment.prototype.step_7 = function () {
	this.setMainNode(this.Id, this.data);

	var nodeId = this.Id;
	if (this.data != "null") {
		var mainNode = new CGNode();
		mainNode.unserialize(this.data);
		nodeId = mainNode.getId();
	}

	CommandListener.throwCommand("refreshnode(" + nodeId + ")");

	this.terminate();
};

//----------------------------------------------------------------------
// Replace attachment
//----------------------------------------------------------------------
function CGActionReplaceAttachment() {
	this.base = CGAction;
	this.base(5);
};

CGActionReplaceAttachment.prototype = new CGAction;
CGActionReplaceAttachment.constructor = CGActionReplaceAttachment;
CommandFactory.register(CGActionReplaceAttachment, {
	Id: 0
}, false);

CGActionReplaceAttachment.prototype.step_1 = function () {

	if (State.AttachmentsViewer == null) {
		this.terminate();
		return;
	}

	var document = State.AttachmentsViewer.getDocument();

	if (document.targetType == "node") {
		var process = new CGProcessReplaceNodeAttachment();
		process.Id = document.id;
		process.execute();
		return;
	}

	State.AttachmentsViewer.setLabel(document.label);
	State.AttachmentsViewer.showAddDialog("file", CGActionReplaceAttachment.prototype.execute.bind(this), CGActionReplaceAttachment.prototype.terminate.bind(this));
};

CGActionReplaceAttachment.prototype.step_2 = function () {
	var document = State.AttachmentsViewer.getDocument();
	Kernel.loadNodeAttribute(this, this.Id, document.path);
};

CGActionReplaceAttachment.prototype.step_3 = function () {
	var document = State.AttachmentsViewer.getDocument();

	var pathAttribute = new CGAttribute();
	pathAttribute.unserialize(this.data);

	originalAttribute = this.locateAttribute(pathAttribute, document.path);
	var attributes = originalAttribute.getAttributes();

	for (var i = 0; i < attributes.length; i++) {
		var attribute = attributes[i];
		var indicator = null;

		if (document.targetType == "file" && attribute.getIndicatorValue(CGIndicator.VALUE) == document.id) indicator = attribute.getIndicator(CGIndicator.VALUE);
		if (indicator == null) continue;

		indicator.setValue(State.AttachmentsViewer.getFilename());

		var indicatorFormat = attribute.getIndicator(CGIndicator.FORMAT);
		indicatorFormat.setValue(getFileExtension(State.AttachmentsViewer.getFilename()).toUpperCase());

		var indicatorDetails = attribute.getIndicator(CGIndicator.DETAILS);
		indicatorDetails.setValue(State.AttachmentsViewer.getLabel());
	}

	var nodeId = originalAttribute.getIndicatorValue(CGIndicator.NODE);
	var value = originalAttribute.getIndicatorValue(CGIndicator.VALUE);
	if (nodeId != "" || value != "") {
		var indicatorList = new CGIndicatorList();

		if (nodeId != "")
			indicatorList.addIndicatorByValue(CGIndicator.NODE, 0, State.AttachmentsViewer.getFilename());
		else
		    indicatorList.addIndicatorByValue(CGIndicator.VALUE, 0, State.AttachmentsViewer.getFilename());

		indicatorList.addIndicatorByValue(CGIndicator.FORMAT, 1, getFileExtension(State.AttachmentsViewer.getFilename()).toUpperCase());
		indicatorList.addIndicatorByValue(CGIndicator.DETAILS, 2, State.AttachmentsViewer.getLabel());
		originalAttribute.setIndicatorList(indicatorList);
	}

	State.AttachmentsViewer.clear();

	Kernel.saveNodeAttribute(this, Account.getInstanceId(), this.Id, originalAttribute.serialize());
};

CGActionReplaceAttachment.prototype.step_4 = function () {
	this.loadMainNode(this.Id);
};

CGActionReplaceAttachment.prototype.step_5 = function () {
	this.setMainNode(this.Id, this.data);

	var nodeId = this.Id;
	if (this.data != "null") {
		var mainNode = new CGNode();
		mainNode.unserialize(this.data);
		nodeId = mainNode.getId();
	}

	CommandListener.throwCommand("refreshnode(" + nodeId + ")");

	this.terminate();
};

//----------------------------------------------------------------------
// Delete attachment
//----------------------------------------------------------------------
function CGActionDeleteAttachment() {
	this.base = CGAction;
	this.base(5);
	this.node = null;
};

CGActionDeleteAttachment.prototype = new CGAction;
CGActionDeleteAttachment.constructor = CGActionDeleteAttachment;
CommandFactory.register(CGActionDeleteAttachment, {
	Id: 0
}, false);

CGActionDeleteAttachment.prototype.step_1 = function () {

	if (State.AttachmentsViewer == null) {
		this.terminate();
		return;
	}

	if (!State.AttachmentsViewer.hasDocuments()) {
		Desktop.reportWarning(Lang.Action.DeleteAttachment.Failure);
		this.terminate();
		return;
	}

	Ext.MessageBox.confirm(Lang.ViewNode.DialogDeleteAttachment.Title, Lang.ViewNode.DialogDeleteAttachment.Description, CGActionDeleteAttachment.prototype.checkOption.bind(this));
};

CGActionDeleteAttachment.prototype.step_2 = function () {
	var document = State.AttachmentsViewer.getDocument();
	Kernel.loadNodeAttribute(this, this.Id, document.path);
};

CGActionDeleteAttachment.prototype.step_3 = function () {
	var document = State.AttachmentsViewer.getDocument();
	var originalAttribute = new CGAttribute();
	var found = false;

	var pathAttribute = new CGAttribute();
	pathAttribute.unserialize(this.data);

	originalAttribute = this.locateAttribute(pathAttribute, document.path);
	var attributes = originalAttribute.getAttributes();

	var attributeList = new CGAttributeList();
	for (var i = 0; i < attributes.length; i++) {
		var attribute = attributes[i];
		found = false;
		if (document.targetType == "node" && attribute.getIndicatorValue(CGIndicator.NODE) == document.id) found = true;
		else if (document.targetType == "file" && attribute.getIndicatorValue(CGIndicator.VALUE) == document.id) found = true;
		if (found) continue;
		attributeList.addAttribute(attribute);
	}
	originalAttribute.setAttributeList(attributeList);

	found = false;
	if (document.targetType == "node" && originalAttribute.getIndicatorValue(CGIndicator.NODE) == document.id) found = true;
	else if (document.targetType == "file" && originalAttribute.getIndicatorValue(CGIndicator.VALUE) == document.id) found = true;

	if (found)
		originalAttribute.setIndicatorList(new CGIndicatorList());

	State.AttachmentsViewer.clear();

	Kernel.saveNodeAttribute(this, Account.getInstanceId(), this.Id, pathAttribute.serialize());
};

CGActionDeleteAttachment.prototype.step_4 = function () {
	this.loadMainNode(this.Id);
};

CGActionDeleteAttachment.prototype.step_5 = function () {
	this.setMainNode(this.Id, this.data);

	var nodeId = this.Id;
	if (this.data != "null") {
		var mainNode = new CGNode();
		mainNode.unserialize(this.data);
		nodeId = mainNode.getId();
	}

	CommandListener.throwCommand("refreshnode(" + nodeId + ")");

	this.terminate();
};

//----------------------------------------------------------------------
// Download attachment
//----------------------------------------------------------------------
function CGActionDownloadAttachment() {
	this.base = CGAction;
	this.base(1);
	this.node = null;
};

CGActionDownloadAttachment.prototype = new CGAction;
CGActionDownloadAttachment.constructor = CGActionDownloadAttachment;
CommandFactory.register(CGActionDownloadAttachment, {
	Id: 0
}, false);

CGActionDownloadAttachment.prototype.step_1 = function () {

	if (State.AttachmentsViewer == null) {
		this.terminate();
		return;
	}

	if (!State.AttachmentsViewer.hasDocuments()) {
		Desktop.reportWarning(Lang.Action.DownloadAttachment.Failure);
		this.terminate();
		return;
	}

	window.location.href = State.AttachmentsViewer.getDownloadDocumentUrl();

	this.terminate();
};

// ----------------------------------------------------------------------
// Render Node Location
// ----------------------------------------------------------------------
function CGActionRenderNodeLocation() {
	this.base = CGAction;
	this.base(3);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderNodeLocation.prototype = new CGAction;
CGActionRenderNodeLocation.constructor = CGActionRenderNodeLocation;
CommandFactory.register(CGActionRenderNodeLocation, {
	Id: 0,
	Code: 1,
	CodeView: 2,
	IdDOMViewerLayer: 3,
	IdDOMViewerLayerOptions: 4
}, false);

CGActionRenderNodeLocation.prototype.step_1 = function () {

	Desktop.Main.Right.registerCollapse("CGActionRenderNodeLocation", CGActionRenderNodeLocation.prototype.atCollapse.bind(this));

	if ((this.Id == null) || (this.Code == null) || (this.CodeView == null) || (this.IdDOMViewerLayer == null) || (this.IdDOMViewerLayerOptions == null)) {
		this.terminate();
		return;
	}

	var Process = new CGProcessLoadHelperMapViewer();
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionRenderNodeLocation.prototype.step_2 = function () {
	Kernel.loadNodeLocation(this, this.Id);
};

CGActionRenderNodeLocation.prototype.step_3 = function () {
	var location = this.data ? Ext.util.JSON.decode(this.data) : null;
	var extLocationLayer = Ext.get(this.IdDOMViewerLayer);
	var extNodeLayer = extLocationLayer.up(CSS_NODE);
	var helper = ViewerSidebar.getHelper(Helper.MAP);

	extLocationLayer.setHeight(extNodeLayer.getHeight());
	eval($(this.IdDOMViewerLayerOptions).innerHTML);

	this.view = new CGViewNodeLocation();
	this.view.setDOMLayer(extLocationLayer.dom);
	this.view.init(Options);
	this.view.setTarget(this.Id, location);

	if (Options.editable)
		helper.showEditionLayer();
	else
		helper.hideEditionLayer();

	this.terminate();
};

CGActionRenderNodeLocation.prototype.atCollapse = function () {
	this.view.resize();
};

//----------------------------------------------------------------------
// Render Node Notes
//----------------------------------------------------------------------
function CGActionRenderNodeNotes() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderNodeNotes.prototype = new CGAction;
CGActionRenderNodeNotes.constructor = CGActionRenderNodeNotes;
CommandFactory.register(CGActionRenderNodeNotes, {
	Id: 0,
	IdDOMViewerLayer: 1,
	IdDOMViewerLayerOptions: 2
}, false);

CGActionRenderNodeNotes.prototype.step_1 = function () {

	if (this.Id == null || this.IdDOMViewerLayer == null || this.IdDOMViewerLayerOptions == null) {
		this.terminate();
		return;
	}

	Kernel.loadNodeNotes(this, this.Id);
};

CGActionRenderNodeNotes.prototype.step_2 = function () {
	var notes = Ext.util.JSON.decode(this.data);
	var extNotesLayer = Ext.get(this.IdDOMViewerLayer);
	var extNodeLayer = extNotesLayer.up(CSS_NODE);
	var options = null;

	extNotesLayer.setHeight(extNodeLayer.getHeight());
	eval($(this.IdDOMViewerLayerOptions).innerHTML);

	var view = new CGViewNodeNotes();
	view.setDOMLayer(extNotesLayer.dom);
	view.init();
	view.setTarget({nodeId: this.Id, notes: notes, options: options});
	view.refresh();

	this.terminate();
};

//----------------------------------------------------------------------
// Add node note
//----------------------------------------------------------------------
function CGActionAddNodeNote() {
	this.base = CGAction;
	this.base(2);
};

CGActionAddNodeNote.prototype = new CGAction;
CGActionAddNodeNote.constructor = CGActionAddNodeNote;
CommandFactory.register(CGActionAddNodeNote, {
	nodeId: 0,
	name: 1,
	value: 2
}, false);

CGActionAddNodeNote.prototype.step_1 = function () {
	Kernel.addNodeNote(this, this.nodeId, this.name, this.value);
};

CGActionAddNodeNote.prototype.step_2 = function () {
	this.terminate();
};

//----------------------------------------------------------------------
// Delete node note
//----------------------------------------------------------------------
function CGActionDeleteNodeNote() {
	this.base = CGAction;
	this.base(2);
};

CGActionDeleteNodeNote.prototype = new CGAction;
CGActionDeleteNodeNote.constructor = CGActionDeleteNodeNote;
CommandFactory.register(CGActionDeleteNodeNote, {
	nodeId: 0,
	name: 1
}, false);

CGActionDeleteNodeNote.prototype.step_1 = function () {
	Kernel.deleteNodeNote(this, this.nodeId, this.name);
};

CGActionDeleteNodeNote.prototype.step_2 = function () {
	this.terminate();
};

//----------------------------------------------------------------------
// Render Node Notes
//----------------------------------------------------------------------
function CGActionRenderRecentTask() {
	this.base = CGActionShowBase;
	this.base(1);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderRecentTask.prototype = new CGActionShowBase;
CGActionRenderRecentTask.constructor = CGActionRenderRecentTask;
CommandFactory.register(CGActionRenderRecentTask, {
	Id: 0,
	IdTask: 1,
	Mode: 2,
	IdDOMViewerLayer: 3
}, false);

CGActionRenderRecentTask.prototype.step_1 = function () {
	var DOMElement = Ext.get(this.IdDOMViewerLayer).dom;
	var Task = new CGTask();
	Task.setId(this.IdTask);

	//var ContainerView = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Id);
	var ViewTask = this.createView(VIEW_TASK, Task, DOMElement, null);
	ViewTask.NodeDependant = true;

	var Process = new CGProcessShowTask();
	Process.Id = this.IdTask;
	Process.Mode = ViewTask.getMode();
	Process.ViewTask = ViewTask;
	Process.execute();

	this.terminate();
};

// ----------------------------------------------------------------------
// Copy node
// ----------------------------------------------------------------------
function CGActionCopyNode() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionCopyNode.prototype = new CGAction;
CGActionCopyNode.constructor = CGActionCopyNode;
CommandFactory.register(CGActionCopyNode, {
	Id: 0,
	Mode: 1,
	IdParent: 2
}, false);

CGActionCopyNode.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Action.CopyNode.Failure);
	this.terminate();
};

CGActionCopyNode.prototype.getIdParent = function () {
	var DOMNode = this.DOMItem.up(CSS_NODE);
	var IdParent;

	if (!DOMNode)
		return null;
	if (!DOMNode.getControlInfo)
		return null;

	IdParent = DOMNode.getControlInfo().IdNode;
	if (IdParent == ID_NODE_SEARCH) {
		IdParent = NodesCache.get(State.LastObject.Id).getId();
	}

	return IdParent;
};

CGActionCopyNode.prototype.step_1 = function () {
	if (this.IdParent == null)
		this.IdParent = this.getIdParent();
	Kernel.copyNode(this, this.Id, this.IdParent, this.Mode);
};

CGActionCopyNode.prototype.step_2 = function () {
	var Node, Behaviour;
	var sMode = null;

	Node = new CGNode();
	Node.unserialize(this.data);
	Behaviour = Extension.getDefinitionBehaviour(Node.Code);

	if (Behaviour && Behaviour.ShowNode && Behaviour.ShowNode.Templates && Behaviour.ShowNode.Templates.Edit) {
		sMode = Behaviour.ShowNode.Templates.Edit;
	}

	State.aMarkedNodesReferences = [ Node.getId() ];
	State.NodeReferenceMarkType = MarkType.Copied;

	this.addRefreshTask(RefreshTaskType.Copied, [ Node ]);

	CommandDispatcher.dispatch("shownode(" + Node.getId() + (sMode != null ? "," + sMode : "") + ")");

	this.terminate();
};

// ----------------------------------------------------------------------
// Copy nodes
// ----------------------------------------------------------------------
function CGActionCopyNodes() {
	this.base = CGAction;
	this.base(4);
	this.sMode = null;
	this.aIdNodes = new Array();
	this.aNodes = new Array();
	this.Index = 0;
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionCopyNodes.prototype = new CGAction;
CGActionCopyNodes.constructor = CGActionCopyNodes;
CommandFactory.register(CGActionCopyNodes, {
	IdParent: 0
}, false);

CGActionCopyNodes.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Action.CopyNodes.Failure);
	this.terminate();
};

CGActionCopyNodes.prototype.getIdParent = function () {
	var DOMNode = this.DOMItem.up(CSS_NODE);
	var IdParent;

	if (!DOMNode)
		return null;
	if (!DOMNode.getControlInfo)
		return null;

	IdParent = DOMNode.getControlInfo().IdNode;
	if (IdParent == ID_NODE_SEARCH) {
		IdParent = NodesCache.get(State.LastObject.Id).getId();
	}

	return IdParent;
};

CGActionCopyNodes.prototype.step_1 = function () {

	if (this.DOMElement == null) {
		if (this.DOMItem == null) {
			this.terminate();
			return;
		}

		this.DOMElement = Extension.getDOMNode(this.DOMItem);
		if (!this.DOMElement)
			this.DOMElement = Extension.getDOMNodeCollection(this.DOMItem);

		if (!this.DOMElement) {
			this.terminate();
			return;
		}
	}

	var ControlInfo = this.DOMElement.getControlInfo();
	this.IdNode = ControlInfo.IdNode;
	this.sMode = ControlInfo.Templates.NodeReferenceAdded;

	if (this.sMode == null) {
		this.terminate();
		return;
	}

	var aSelectedReferences = State.getSelectedNodesReferences(this.IdNode);
	for (var index in aSelectedReferences) {
		if (isFunction(aSelectedReferences[index]))
			continue;
		this.aIdNodes.push(aSelectedReferences[index]);
	}

	if (this.aIdNodes.length <= 0) {
		Desktop.reportWarning(Lang.ViewNode.DialogCopyNodes.NoNodesReferencesSelected);
		this.terminate();
		return;
	}

	this.execute();
};

CGActionCopyNodes.prototype.step_2 = function () {
	if (this.IdParent == null)
		this.IdParent = this.getIdParent();
	if (this.aIdNodes[this.Index] != null)
		Kernel.copyNode(this, this.aIdNodes[this.Index], this.IdParent, this.sMode);
};

CGActionCopyNodes.prototype.step_3 = function () {

	var Node = new CGNode();
	Node.unserialize(this.data);
	this.aNodes.push(Node);

	this.Index++;

	if (this.Index < this.aIdNodes.length)
		this.gotoStep(2);
	else
		this.execute();
};

CGActionCopyNodes.prototype.step_4 = function () {

	State.aMarkedNodesReferences = new Array();
	for (var iPos = 0; iPos < this.aNodes.length; iPos++) {
		State.aMarkedNodesReferences.push(this.aNodes[iPos].getId());
	}
	State.NodeReferenceMarkType = MarkType.Copied;

	this.addRefreshTask(RefreshTaskType.Copied, this.aNodes);

	Desktop.reportSuccess(Lang.Action.CopyNodes.Done);

	this.terminate();
};

// ----------------------------------------------------------------------
// Share node
// ----------------------------------------------------------------------
function CGActionShareNode() {
	this.base = CGAction;
	this.base(3);
	this.dlgShareNode = null;
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShareNode.prototype = new CGAction;
CGActionShareNode.constructor = CGActionShareNode;
CommandFactory.register(CGActionShareNode, {
	Id: 0
}, false);

CGActionShareNode.prototype.onFailure = function (sResponse) {
	if (this.dlgShareNode)
		this.dlgShareNode.destroy();
	Desktop.reportError(Lang.Action.ShareNode.Failure);
	this.terminate();
};

CGActionShareNode.prototype.step_1 = function () {
	var Node = new CGNode();

	Node.setId(this.Id);

	this.dlgShareNode = new CGDialogShareNode();
	this.dlgShareNode.init();
	this.dlgShareNode.onAccept = this.execute.bind(this);
	this.dlgShareNode.onCancel = this.resetState.bind(this);
	this.dlgShareNode.show();
	this.dlgShareNode.refresh();
};

CGActionShareNode.prototype.step_2 = function () {
	Kernel.shareNode(this, this.Id, this.dlgShareNode.UserList, this.dlgShareNode.Description, this.dlgShareNode.ExpireDate);
	this.dlgShareNode.destroy();
};

CGActionShareNode.prototype.step_3 = function () {
	Desktop.reportSuccess(Lang.Action.ShareNode.Done);
	this.terminate();
};

// ----------------------------------------------------------------------
// Delete node
// ----------------------------------------------------------------------
function CGActionDeleteNode() {
	this.base = CGAction;
	this.base(3);
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionDeleteNode.prototype = new CGAction;
CGActionDeleteNode.constructor = CGActionDeleteNode;
CommandFactory.register(CGActionDeleteNode, {
	Id: 0
}, false);

CGActionDeleteNode.prototype.onFailure = function () {
	Desktop.reportError(this.Process.getFailure());
	this.terminate();
};

CGActionDeleteNode.prototype.step_1 = function () {
	var sDescription = Lang.ViewNode.DialogDeleteNode.Description;
	Ext.MessageBox.confirm(Lang.ViewNode.DialogDeleteNode.Title, sDescription, CGActionDeleteNode.prototype.checkOption.bind(this));
};

CGActionDeleteNode.prototype.step_2 = function () {
	this.Process = new CGProcessDeleteNodes();
	this.Process.Nodes = [ this.Id ];
	this.Process.ReturnProcess = this;
	this.Process.execute();
};

CGActionDeleteNode.prototype.step_3 = function () {

	if (!this.Process.success()) {
		this.onFailure();
		return;
	}

	Desktop.reportSuccess(Lang.Action.DeleteNode.Done);

	var CurrentNode = NodesCache.getCurrent();
	if (CurrentNode.getId() == this.Id) {
		var ProcessCloseNode = new CGProcessCloseNode();
		ProcessCloseNode.Id = this.Id;
		ProcessCloseNode.execute();
		history.back();
	}

	this.terminate();
};

// ----------------------------------------------------------------------
// Delete nodes
// ----------------------------------------------------------------------
function CGActionDeleteNodes() {
	this.base = CGAction;
	this.base(3);
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionDeleteNodes.prototype = new CGAction;
CGActionDeleteNodes.constructor = CGActionDeleteNodes;
CommandFactory.register(CGActionDeleteNodes, {
	Nodes: 0,
	IdParent: 1
}, false);

CGActionDeleteNodes.prototype.enabled = function () {
	var Node, aDefinitions;

	if ((Node = NodesCache.getCurrent()) == null)
		return false;
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return false;

	aDefinitions = Extension.getDefinitions(ViewNode.getDOM(), Node.Code);

	return (aDefinitions.size() > 0);
};

CGActionDeleteNodes.prototype.onFailure = function () {
	Desktop.reportError(this.Process.getFailure());
	this.terminate();
};

CGActionDeleteNodes.prototype.step_1 = function () {

	if (this.IdParent == null)
		this.IdParent = NodesCache.getCurrent().getId();

	if (this.Nodes != null) this.Nodes = this.Nodes.split("#");
	else this.Nodes = State.getSelectedNodesReferences(this.IdParent);

	if (this.Nodes.size() <= 0)
		Desktop.reportWarning(Lang.ViewNode.DialogDeleteNodes.NoNodesReferencesSelected);
	else {
		Ext.MessageBox.confirm(Lang.ViewNode.DialogDeleteNodes.Title, Lang.ViewNode.DialogDeleteNodes.Description, CGActionDeleteNodes.prototype.checkOption.bind(this));
	}
};

CGActionDeleteNodes.prototype.step_2 = function () {
	this.Process = new CGProcessDeleteNodes();
	this.Process.Nodes = this.Nodes;
	this.Process.ReturnProcess = this;
	this.Process.execute();
};

CGActionDeleteNodes.prototype.step_3 = function () {

	if (!this.Process.success()) {
		this.onFailure();
		return;
	}

	State.deleteSelectedNodesReferences(this.IdParent);
	Desktop.reportSuccess(Lang.Action.DeleteNodes.Done);

	this.terminate();
};

// ----------------------------------------------------------------------
// Discard node
// ----------------------------------------------------------------------
function CGActionDiscardNode() {
	this.base = CGAction;
	this.base(2);
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionDiscardNode.prototype = new CGAction;
CGActionDiscardNode.constructor = CGActionDiscardNode;
CommandFactory.register(CGActionDiscardNode, {
	Id: 0
}, false);

CGActionDiscardNode.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Action.DeleteNode.Failure);
	this.terminate();
};

CGActionDiscardNode.prototype.step_1 = function () {
	Kernel.discardNode(this, this.Id);
};

CGActionDiscardNode.prototype.step_2 = function () {
	var Node = new CGNode();

	Node.setId(this.Id);

	this.addRefreshTask(RefreshTaskType.Discarted, [ Node ]);

	this.terminate();
};

// ----------------------------------------------------------------------
// Select nodes
// ----------------------------------------------------------------------
function CGActionSelectNodes() {
	this.base = CGAction;
	this.base(1);
};

CGActionSelectNodes.prototype = new CGAction;
CGActionSelectNodes.constructor = CGActionSelectNodes;
CommandFactory.register(CGActionSelectNodes, {
	Type: 0
}, false);

CGActionSelectNodes.prototype.step_1 = function () {
	if (!State.NodeListViewer)
		return;

	if (this.Type == "none")
		State.NodeListViewer.unselectAll();

	this.terminate();
};

// ----------------------------------------------------------------------
// Edit node labels
// ----------------------------------------------------------------------
function CGActionEditNodeLabels() {
	this.base = CGAction;
	this.base(2);
	this.DOMElement = null;
};

CGActionEditNodeLabels.prototype = new CGAction;
CGActionEditNodeLabels.constructor = CGActionEditNodeLabels;
CommandFactory.register(CGActionEditNodeLabels, null, false);

CGActionEditNodeLabels.prototype.step_1 = function () {
	var DOMObject = null;
	var ContainerView;

	if (this.DOMItem != null)
		this.DOMElement = Extension.getDOMNodeCollection(this.DOMItem);

	if (!DOMObject) {
		ContainerView = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, NodesCache.getCurrent().getId());

		if (!ContainerView) {
			this.terminate();
			return;
		}

		this.DOMElement = ContainerView.getDOM();
	}

	this.DOMElement.renderAsDialog();
};

CGActionEditNodeLabels.prototype.step_2 = function () {
	this.terminate();
};

// ----------------------------------------------------------------------
// Set node view
// ----------------------------------------------------------------------
function CGActionSetNodeView() {
	this.base = CGAction;
	this.base(1);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionSetNodeView.prototype = new CGAction;
CGActionSetNodeView.constructor = CGActionSetNodeView;
CommandFactory.register(CGActionSetNodeView, {
	IdNode: 0,
	View: 1
}, false);

CGActionSetNodeView.prototype.enabled = function () {
	var Node, aViews;

	if ((Node = NodesCache.getCurrent()) == null)
		return false;
	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return false;

	aViews = Extension.getDefinitionViews(ViewNode.getDOM(), Node.Code, BUSINESS_MODEL_BROWSE);

	return ((aViews) && (aViews.size() > 1));
};

CGActionSetNodeView.prototype.refresh = function (Menu) {
	var Node, aDefinitions;

	if ((Node = NodesCache.getCurrent()) == null)
		return;
	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return;

	aDefinitions = Extension.getDefinitionViews(ViewNode.getDOM(), Node.Code, BUSINESS_MODEL_BROWSE);

	DialogNodeViewList = new CGDialogNodeViewList();
	DialogNodeViewList.init();
	DialogNodeViewList.Target = {
		NodeViews: aDefinitions,
		Node: Node,
		Menu: Menu
	};
	DialogNodeViewList.refresh();
};

CGActionSetNodeView.prototype.step_1 = function () {
	State.View = this.View;
	CommandDispatcher.dispatch("shownode(" + this.IdNode + "," + this.View + ")");
	this.terminate();
};

// ----------------------------------------------------------------------
// Toggle Highlight node
// ----------------------------------------------------------------------
function CGActionToggleHighlightNode() {
	this.base = CGAction;
	this.base(2);
	this.DOMNode = null;
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionToggleHighlightNode.prototype = new CGAction;
CGActionToggleHighlightNode.constructor = CGActionToggleHighlightNode;
CommandFactory.register(CGActionToggleHighlightNode, {
	Id: 0,
	Mode: 1
}, false);

CGActionToggleHighlightNode.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Action.ToggleHighlightNode.Failure);
	this.terminate();
};

CGActionToggleHighlightNode.prototype.step_1 = function () {
	var DOMNode, ViewContainer;
	var AttributeList = new CGAttributeList();
	var Attribute = new CGAttribute();

	ViewContainer = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, NodesCache.getCurrent().getId());
	if (!ViewContainer)
		return;

	DOMNode = ViewContainer.getDOM();

	if ((!DOMNode) || (!DOMNode.getNodeReferences) || (!DOMNode.isHighlighted)) {
		this.terminate();
		return;
	}

	sValue = 0;
	aDOMNodeReferences = DOMNode.getNodeReferences(this.Id);
	if (aDOMNodeReferences.length > 0)
		sValue = ((aDOMNodeReferences[0].isHighlighted) && (aDOMNodeReferences[0].isHighlighted())) ? 0 : 1;
	else {
		sValue = (DOMNode.isHighlighted()) ? 0 : 1;
		if (DOMNode.setHighlighted)
			DOMNode.setHighlighted(sValue);
	}

	Attribute.setCode(DESCRIPTOR_HIGHLIGHTED);
	Attribute.addIndicatorByValue(CGIndicator.VALUE, -1, sValue);
	AttributeList.addAttribute(Attribute);

	Kernel.saveNodeDescriptor(this, this.Id, AttributeList, this.Mode);
};

CGActionToggleHighlightNode.prototype.step_2 = function () {
	var Node = new CGNode;

	try {
		Node.unserialize(this.data);
		this.addRefreshTask(RefreshTaskType.Descriptors, Node);
	} catch (e) {
	}

	this.terminate();
};

// ----------------------------------------------------------------------
// Download node
// ----------------------------------------------------------------------
function CGActionDownloadNode() {
	this.base = CGAction;
	this.base(1);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionDownloadNode.prototype = new CGAction;
CGActionDownloadNode.constructor = CGActionDownloadNode;
CommandFactory.register(CGActionDownloadNode, {
	Id: 0
}, false);

CGActionDownloadNode.prototype.enabled = function () {
	var Node = NodesCache.getCurrent();
	if (!Node)
		return false;
	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);
	return Extension.isDefinitionExportable(Node.Code);
};

CGActionDownloadNode.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	Desktop.reportError(Lang.Action.DownloadNode.Failure);
	this.terminate();
};

CGActionDownloadNode.prototype.step_1 = function () {
	document.location = Kernel.getDownloadNodeLink(this.Id);
	this.terminate();
};

// ----------------------------------------------------------------------
// Export node
// ----------------------------------------------------------------------
function CGActionExportNode() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionExportNode.prototype = new CGAction;
CGActionExportNode.constructor = CGActionExportNode;
CommandFactory.register(CGActionExportNode, {
	Id: 0,
	Format: 1
}, false);

CGActionExportNode.prototype.enabled = function () {
	var Node = NodesCache.getCurrent();
	if (!Node)
		return false;
	if (Node.getId() == ID_NODE_SEARCH)
		Node = NodesCache.get(State.LastObject.Id);
	return Extension.isDefinitionExportable(Node.Code);
};

CGActionExportNode.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	Desktop.reportError(Lang.Action.ExportNode.Failure);
	this.terminate();
};

CGActionExportNode.prototype.step_1 = function () {
	var Node = NodesCache.get(this.Id);

	if (!Node) {
		Desktop.reportError(Lang.Action.Export.ParametersWrong);
		this.terminate();
		return;
	}

	Kernel.exportNode(this, this.Id, this.Format);
};

CGActionExportNode.prototype.step_2 = function () {
	this.terminate();
	document.location = Kernel.getDownloadExportedNodeLink(this.Id, this.Format);
};

// ----------------------------------------------------------------------
// Search Nodes
// ----------------------------------------------------------------------
function CGActionSearchNodes() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionSearchNodes.prototype = new CGAction;
CGActionSearchNodes.constructor = CGActionSearchNodes;
CommandFactory.register(CGActionSearchNodes, {
	Condition: 0,
	Code: 1,
	Mode: 2
}, true);

CGActionSearchNodes.prototype.enabled = function () {
	return true;
	
};

CGActionSearchNodes.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Action.SearchNodes.Failure);
	State.Searching = false;
	Desktop.hideReports();
	Desktop.Main.Center.Header.refresh();
	this.terminate();
};

CGActionSearchNodes.prototype.loadCollections = function (ViewNode, Node) {
	var ViewNodeCollection;
	var ControlInfo;
	var DOMNode;

	if ((DOMNode = ViewNode.getDOM()) == null)
		return;
	if (!DOMNode.getCollections)
		return;

	aDOMCollections = DOMNode.getCollections();
	for (var iPos = 0; iPos < aDOMCollections.length; iPos++) {
		DOMCollection = aDOMCollections[iPos];
		if (!DOMCollection.getControlInfo)
			return;

		ControlInfo = DOMCollection.getControlInfo();

		ViewNodeCollection = Desktop.createView(DOMCollection, Node, ViewNode, ControlInfo.Templates.Refresh, false);
		ViewNodeCollection.setType(VIEW_NODE_TYPE_COLLECTION);
	}
};

CGActionSearchNodes.prototype.step_1 = function () {
	State.Searching = true;
	Desktop.Main.Center.Header.refresh();

	this.IdNode = Account.getUser().getRootNode().id;
	

	Node = NodesCache.get(this.IdNode);

	if (((this.Condition == null) || (this.Condition == "") || (this.Condition == "null")) && (State.LastSearch.Condition)) {
		this.Condition = State.LastSearch.Condition;
	}
	if (this.Condition == null) {
		this.onFailure();
		return;
	}

	if ((this.Code == null) || (this.Code == "null")) {
		this.Code = Node.Code;
	}

	if ((this.Mode == null) || (this.Mode == "null")) {
		var Behaviour = Extension.getDefinitionBehaviour(this.Code);

		if (Behaviour && Behaviour.Search && Behaviour.Search.Templates && Behaviour.Search.Templates.View)
			this.Mode = Behaviour.Search.Templates.View;
		else if (State.LastSearch.Mode)
			this.Mode = State.LastSearch.Mode;
		else {
			this.onFailure();
			return;
		}
	}

	var LastSearch = State.LastSearch;
	if ((this.Condition == LastSearch.Condition) && (this.Code == LastSearch.Code) && (this.Mode == LastSearch.Mode)) {
		Desktop.Main.Center.Body.activateTab(VIEW_NODE, ID_NODE_SEARCH);
		State.Searching = false;
		Desktop.Main.Center.Header.refresh();
		this.terminate();
	}

	Kernel.searchNodes(this, this.Condition, this.IdNode, this.Code, this.Mode);
};

CGActionSearchNodes.prototype.step_2 = function () {
	var Node, ViewNode, IdTab;

	Node = new CGNode();
	Node.unserialize(this.data);
	Node.setId(ID_NODE_SEARCH);
	Node.Code = this.Code;

	NodesCache.register(Node);
	NodesCache.setCurrent(ID_NODE_SEARCH);

	ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());

	if (ViewNode == null) {
		IdTab = Desktop.Main.Center.Body.addTab(VIEW_NODE, {Id: Node.getId()});
		ViewNode = Desktop.createView($(IdTab), Node, null, this.Mode, true);
	} else {
		Desktop.Main.Center.Body.deleteView(VIEW_NODE, ViewNode.getId());
		IdTab = Desktop.Main.Center.Body.getTabId(VIEW_NODE, Node.getId());
		ViewNode = Desktop.createView($(IdTab), Node, null, this.Mode, true);
		Desktop.Main.Center.Body.activateTab(VIEW_NODE, Node.getId());
	}

	this.loadCollections(ViewNode, Node);

	ViewNode.selectNodesReferences(State.getSelectedNodesReferences(ID_NODE_SEARCH));

	State.LastSearch.IdNode = this.IdNode;
	State.LastSearch.Condition = this.Condition;
	State.LastSearch.Code = this.Code;
	State.LastSearch.Mode = this.Mode;

	State.Searching = false;
	Desktop.Main.Center.Header.refresh();

	this.terminate();
};

// ----------------------------------------------------------------------
// First Field
// ----------------------------------------------------------------------
function CGActionFirstField() {
	this.base = CGAction;
	this.base(1);
};

CGActionFirstField.prototype = new CGAction;
CGActionFirstField.constructor = CGActionFirstField;
CommandFactory.register(CGActionFirstField, null, false);

CGActionFirstField.prototype.step_1 = function () {
	var Node, ViewNode;

	if ((Node = NodesCache.getCurrent()) == null)
		return;
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return;
	if (!ViewNode.getDOM().firstField)
		return;

	ViewNode.getDOM().firstField();

	this.terminate();
};

// ----------------------------------------------------------------------
// Previous Field
// ----------------------------------------------------------------------
function CGActionPreviousField() {
	this.base = CGAction;
	this.base(1);
};

CGActionPreviousField.prototype = new CGAction;
CGActionPreviousField.constructor = CGActionPreviousField;
CommandFactory.register(CGActionPreviousField, null, false);

CGActionPreviousField.prototype.step_1 = function () {
	var Node, ViewNode;

	if ((Node = NodesCache.getCurrent()) == null)
		return;
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return;
	if (!ViewNode.getDOM().previousField)
		return;

	ViewNode.getDOM().previousField();

	this.terminate();
};

// ----------------------------------------------------------------------
// Next Field
// ----------------------------------------------------------------------
function CGActionNextField() {
	this.base = CGAction;
	this.base(1);
};

CGActionNextField.prototype = new CGAction;
CGActionNextField.constructor = CGActionNextField;
CommandFactory.register(CGActionNextField, null, false);

CGActionNextField.prototype.step_1 = function () {
	var Node, ViewNode;

	if ((Node = NodesCache.getCurrent()) == null)
		return;
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return;
	if (!ViewNode.getDOM().nextField)
		return;

	ViewNode.getDOM().nextField();

	this.terminate();
};

// ----------------------------------------------------------------------
// Last Field
// ----------------------------------------------------------------------
function CGActionLastField() {
	this.base = CGAction;
	this.base(1);
};

CGActionLastField.prototype = new CGAction;
CGActionLastField.constructor = CGActionLastField;
CommandFactory.register(CGActionLastField, null, false);

CGActionLastField.prototype.step_1 = function () {
	var Node, ViewNode;

	if ((Node = NodesCache.getCurrent()) == null)
		return;
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return;
	if (!ViewNode.getDOM().lastField)
		return;

	ViewNode.getDOM().lastField();

	this.terminate();
};

// ----------------------------------------------------------------------
// Goto Field
// ----------------------------------------------------------------------
function CGActionGotoField() {
	this.base = CGAction;
	this.base(1);
};

CGActionGotoField.prototype = new CGAction;
CGActionGotoField.constructor = CGActionGotoField;
CommandFactory.register(CGActionGotoField, {
	Path: 0
}, false);

CGActionGotoField.prototype.step_1 = function () {
	if (this.Path == null)
		return;
	if ((Node = NodesCache.getCurrent()) == null)
		return;
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return;

	var Process = new CGProcessGotoField();
	Process.Path = this.Path;
	Process.ViewNode = ViewNode;
	Process.execute();

	this.terminate();
};

// ----------------------------------------------------------------------
// Undo node
// ----------------------------------------------------------------------
function CGActionUndoNode() {
	this.base = CGAction;
	this.base(1);
};

CGActionUndoNode.prototype = new CGAction;
CGActionUndoNode.constructor = CGActionUndoNode;
CommandFactory.register(CGActionUndoNode, null, false);

CGActionUndoNode.prototype.step_1 = function () {
	var Node, ViewNode;

	if ((Node = NodesCache.getCurrent()) == null)
		return;
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return;
	if (!ViewNode.getDOM().undo)
		return;

	ViewNode.getDOM().undo();

	this.terminate();
};

// ----------------------------------------------------------------------
// Redo node
// ----------------------------------------------------------------------
function CGActionRedoNode() {
	this.base = CGAction;
	this.base(1);
};

CGActionRedoNode.prototype = new CGAction;
CGActionRedoNode.constructor = CGActionRedoNode;
CommandFactory.register(CGActionRedoNode, null, false);

CGActionRedoNode.prototype.step_1 = function () {
	var Node, ViewNode;

	if ((Node = NodesCache.getCurrent()) == null)
		return;
	if ((ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId())) == null)
		return;
	if (!ViewNode.getDOM().redo)
		return;

	ViewNode.getDOM().redo();

	this.terminate();
};

// ----------------------------------------------------------------------
// Execute Node Command
// ----------------------------------------------------------------------
function CGActionExecuteNodeCommand() {
	this.base = CGAction;
	this.base(3);
};

CGActionExecuteNodeCommand.prototype = new CGAction;
CGActionExecuteNodeCommand.constructor = CGActionExecuteNodeCommand;
CommandFactory.register(CGActionExecuteNodeCommand, {
	Context: 0,
	Name: 1,
	Parameters: 2
}, false);

CGActionExecuteNodeCommand.prototype.onFailure = function (sResponse) {
	Desktop.hideReports();
	Desktop.reportError(sResponse);
	this.terminate();
};

CGActionExecuteNodeCommand.prototype.titleOf = function (confirmation) {
	if (confirmation.title == null)
		return Lang.ViewNode.DialogExecuteNodeCommand.Title;

	return confirmation.title;
};

CGActionExecuteNodeCommand.prototype.descriptionOf = function (confirmation) {
	if (confirmation.description == null)
		return Lang.ViewNode.DialogExecuteNodeCommand.Description;

	return confirmation.description;
};

CGProcess.prototype.checkConfirmation = function (ButtonResult) {
	if (ButtonResult == BUTTON_RESULT_YES)
		Kernel.executeNodeCommandOnAccept(this, this.Context, this.Name, this.Parameters);
	else
		Kernel.executeNodeCommandOnCancel(this, this.Context, this.Name, this.Parameters);
};

CGActionExecuteNodeCommand.prototype.step_1 = function () {
	var node = NodesCache.get(this.Context);

	if (this.DOMItem.hasClassName(CLASS_DISABLED)) {
		this.terminate();
		return;
	}

	if (this.Name == null)
		return;

	if (node == null)
		return;

	State.discardNode = false;
	Desktop.reportProgress(Lang.Action.ExecuteNodeCommand.Waiting, true);
	Kernel.executeNodeCommand(this, this.Context, this.Name, this.Parameters);
};

CGActionExecuteNodeCommand.prototype.step_2 = function () {
	var response = Ext.util.JSON.decode(this.data);

	if (response.type == "message" && response.data.content == "done") {
		this.execute();
		return;
	}

	var confirmation = response.data;
	if (confirmation == null || !confirmation.required) {
		this.execute();
		return;
	}

	Desktop.hideReports();
	Ext.MessageBox.confirm(this.titleOf(confirmation), this.descriptionOf(confirmation), CGActionExecuteNodeCommand.prototype.checkConfirmation.bind(this));
};

CGActionExecuteNodeCommand.prototype.report = function (message) {
	if (message.content == "")
		return;

	if (message.code == "success") {
		var content = message.content == "done" ? Lang.Action.ExecuteNodeCommand.Done : message.content;
		Desktop.reportSuccess(content);
	}
	else
		Desktop.reportError(message.content);
};

CGActionExecuteNodeCommand.prototype.step_3 = function () {
	var response = Ext.util.JSON.decode(this.data);

	Desktop.hideReports();

	if (response.type == "message") {
		this.report(response.data);
		return;
	}
	else if (response.type == "operation") {
		var operation = response.data;
		CommandDispatcher.execute(operation.name, null, operation.data);
	}
	else Desktop.reportSuccess(Lang.Action.ExecuteNodeCommand.Done);

	var node = NodesCache.getCurrent();
	if (node == null) {
		this.terminate();
		return;
	}

	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, node.getId());
	EventManager.notify(EventManager.POST_EXECUTE_NODE_COMMAND, {
		"Node": node,
		"DOMNode": ViewNode.getDOM(),
		"Command": this.Name,
		"Parameters": this.Parameters
	});

	this.terminate();
};

// ----------------------------------------------------------------------
// Download Node Command File
// ----------------------------------------------------------------------
function CGActionDownloadNodeCommandFile() {
	this.base = CGAction;
	this.base(2);
};

CGActionDownloadNodeCommandFile.prototype = new CGAction;
CGActionDownloadNodeCommandFile.constructor = CGActionDownloadNodeCommandFile;
CommandFactory.register(CGActionDownloadNodeCommandFile, {
	Name: 0
}, false);

CGActionDownloadNodeCommandFile.prototype.step_1 = function () {
	window.location.href = Kernel.getDownloadNodeCommandFileLink(this.Name);
};

// ----------------------------------------------------------------------
// Request Node Field Control
// ----------------------------------------------------------------------
function CGActionRequestNodeFieldControl() {
	this.base = CGAction;
	this.base(2);
	this.sFieldPath = null;
};

CGActionRequestNodeFieldControl.prototype = new CGAction;
CGActionRequestNodeFieldControl.constructor = CGActionRequestNodeFieldControl;
CommandFactory.register(CGActionRequestNodeFieldControl, null, false);

CGActionRequestNodeFieldControl.prototype.step_1 = function () {
	var DOMNode = this.DOMItem.up(CSS_NODE);
	var DOMComponent = this.DOMItem.up(CSS_WIDGET).down(CSS_WIDGET_ELEMENT_COMPONENT);
	if (!DOMComponent)
		return;
	this.sFieldPath = DOMComponent.id;
	Kernel.blurNodeField(this, Account.getInstanceId(), DOMNode.getControlInfo().IdNode, this.sFieldPath);
};

CGActionRequestNodeFieldControl.prototype.step_2 = function () {
	var Widget = WidgetManager.get(this.sFieldPath);
	Widget.setObserver(null, 0);
	Widget.focus();
	this.terminate();
};

// ----------------------------------------------------------------------
// Show node view
// ----------------------------------------------------------------------
function CGActionShowNodeView() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShowNodeView.prototype = new CGAction;
CGActionShowNodeView.constructor = CGActionShowNodeView;
CommandFactory.register(CGActionShowNodeView, {
	IdMainNode: 0,
	IdNode: 1,
	IdView: 2,
	GroupByCode: 3,
	GroupByValue: 4
}, true);

CGActionShowNodeView.prototype.step_1 = function () {
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.IdMainNode);
	var DOMNode = ViewNode.getDOM();

	DOMNode.activateTab(this.IdView);
	window.setTimeout(this.execute.bind(this), 200);
};

CGActionShowNodeView.prototype.step_2 = function () {

	if (State.NodeListViewer) {
		var ListViewerState = State.getListViewerState(this.IdNode);
        if (ListViewerState == null) {
            this.terminate();
            return;
        }
		ListViewerState.Groups = [
			{
				"Code": this.GroupByCode,
				"Value": this.GroupByValue
			}
		];
		State.NodeListViewer.setState(ListViewerState);
		State.NodeListViewer.refresh();
	}

	this.terminate();
};

// ----------------------------------------------------------------------
// Print node
// ----------------------------------------------------------------------
function CGActionPrintNode() {
	this.base = CGAction;
	this.base(6);
	this.allAttributes = new Array();
};

CGActionPrintNode.prototype = new CGAction;
CGActionPrintNode.constructor = CGActionPrintNode;
CommandFactory.register(CGActionPrintNode, {
	IdNode: 0,
	Mode: 1,
	CodeView: 2
}, false);

CGActionPrintNode.prototype.getPrintNodeCookieName = function () {
	return "monet-printnode-" + this.IdNode;
};

CGActionPrintNode.prototype.getAttributes = function () {
	if (this.Mode == "pdf")
		return CGActionPrintNode.Attributes;

	var result = new Array();
	for (var i=0; i<this.allAttributes.length; i++)
		result.push(this.allAttributes[i].code);

	return result;
};

CGActionPrintNode.prototype.getCodeView = function () {

	if (this.CodeView != null && this.CodeView != "")
		return this.CodeView;

    var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.IdNode);
	var CodeView;

	if (ViewNode == null) {
		var aViews = Desktop.Main.Center.Body.getViews(VIEW_NODE, VIEW_NODE_TYPE_NODE, this.IdNode);
		if (aViews.length == 0) {
			this.terminate();
			return;
		}

		ViewNode = aViews[0];
		CodeView = ViewNode.getDOM().getControlInfo().CodeView;
	}
	else CodeView = ViewNode.getDOM().getActiveTab();

	return CodeView;
};

CGActionPrintNode.prototype.saveDialogResult = function () {
	this.savePrintNodeCookie();
	CGActionPrintNode.Attributes = this.dialog.Attributes;
	CGActionPrintNode.DateAttribute = this.dialog.DateAttribute;
	CGActionPrintNode.FromDate = this.dialog.FromDate;
	CGActionPrintNode.ToDate = this.dialog.ToDate;
};

CGActionPrintNode.prototype.loadPrintNodeCookie = function() {
    var value = getCookie(this.getPrintNodeCookieName());
    return value != null && value != "" ? JSON.parse(value) : null;
};

CGActionPrintNode.prototype.savePrintNodeCookie = function() {
    var value = {
        attributes : this.dialog.Attributes,
        dateAttribute : this.dialog.DateAttribute,
        fromDate : this.dialog.FromDate,
        toDate : this.dialog.ToDate
    };
    setCookie(this.getPrintNodeCookieName(), JSON.stringify(value), 30);
};

CGActionPrintNode.prototype.destroy = function (sResponse) {
	if (this.dialog) this.dialog.destroy();
	this.terminate();
};

CGActionPrintNode.prototype.step_1 = function () {
    var value = this.loadPrintNodeCookie();
    CGActionPrintNode.Attributes = value != null && value.attributes != null ? value.attributes : null;
    CGActionPrintNode.DateAttribute = value != null && value.dateAttribute != null ? value.dateAttribute : null;
    CGActionPrintNode.FromDate = value != null && value.fromDate != null ? value.fromDate : new Date(new Date().getFullYear(), 0, 1);
    CGActionPrintNode.ToDate = value != null && value.toDate != null ? value.toDate : new Date();
	Kernel.loadNodePrintAttributes(this, this.IdNode, this.getCodeView());
};

CGActionPrintNode.prototype.step_2 = function () {
	var extItem = Ext.get(this.DOMItem);
	this.allAttributes = Ext.util.JSON.decode(this.data);

	this.dialogLayerId = Ext.id();
	new Insertion.After(extItem.dom, "<div class='dialog embedded' id='" + this.dialogLayerId + "'></div>");

	this.dialog = new CGDialogPrintEntity();
	this.dialog.onAccept = this.execute.bind(this);
	this.dialog.onCancel = this.destroy.bind(this);
	this.dialog.Attributes = CGActionPrintNode.Attributes != null ? CGActionPrintNode.Attributes : new Array();
	this.dialog.DateAttribute = CGActionPrintNode.DateAttribute;
	this.dialog.FromDate = CGActionPrintNode.FromDate;
	this.dialog.ToDate = CGActionPrintNode.ToDate;
	this.dialog.target = { Attributes: this.allAttributes, Mode : this.Mode };
	this.dialog.init(this.dialogLayerId);
	this.dialog.show();
};

CGActionPrintNode.prototype.step_3 = function () {
    var Filters = new Object();

    $(this.dialogLayerId).remove();

    if ((this.IdNode == null) || (this.Mode == null)) {
        this.terminate();
        return;
    }

    this.saveDialogResult();

    this.CodeView = this.getCodeView();
    this.Filters = State.getListViewerFilters(this.IdNode + this.CodeView);
    this.Attributes = this.getAttributes();

    Kernel.printNodeTimeConsumption(this, this.IdNode, this.Mode, this.CodeView, this.Filters, this.Attributes, CGActionPrintNode.DateAttribute, CGActionPrintNode.FromDate, CGActionPrintNode.ToDate, Account.getInstanceId());
};

CGActionPrintNode.prototype.step_4 = function () {
	var timeConsumption = this.data == "true" ? true : false;

	if (!timeConsumption) {
		this.execute();
		return;
    }

    var PrintNodeMsgs = Lang.Action.PrintNode;
    Ext.MessageBox.confirm(PrintNodeMsgs.TimeConsumption.Title, PrintNodeMsgs.TimeConsumption.Description, CGActionPrintNode.prototype.checkOption.bind(this));
};

CGActionPrintNode.prototype.step_5 = function () {
    Kernel.printNode(this, this.IdNode, this.Mode, this.CodeView, this.Filters, this.Attributes, CGActionPrintNode.DateAttribute, CGActionPrintNode.FromDate, CGActionPrintNode.ToDate, Account.getInstanceId());
};

CGActionPrintNode.prototype.step_6 = function () {
	Desktop.reportProgress(Lang.Action.PrintNode.Waiting);
	window.setTimeout(function() { Desktop.hideProgress(); }, 300000);
	this.terminate();
};

// ----------------------------------------------------------------------
// Print node result
// ----------------------------------------------------------------------
function CGActionDownloadPrintedNode() {
    this.base = CGAction;
    this.base(1);
};

CGActionDownloadPrintedNode.prototype = new CGAction;
CGActionDownloadPrintedNode.constructor = CGActionDownloadPrintedNode;
CommandFactory.register(CGActionDownloadPrintedNode, {
    Id: 0,
    Template: 1
}, false);

CGActionDownloadPrintedNode.prototype.step_1 = function () {
    Desktop.hideProgress();
	if (CGActionDownloadPrintedNode.downloading) return;
	CGActionDownloadPrintedNode.downloading = true;
	window.location = Kernel.getDownloadPrintedNodeLink(this.Id, this.Template);
    window.setTimeout(function() { CGActionDownloadPrintedNode.downloading = false; }, 2000);
	this.terminate();
};

// ----------------------------------------------------------------------
// Alert Node
// ----------------------------------------------------------------------
function CGActionAlertNode() {
	this.base = CGAction;
	this.base(3);
	this.AvailableProcessClass = CGProcessCleanDirty;
	this.RefreshProcessClass = CGProcessRefreshDOM;
	this.Dialog = null;
};

CGActionAlertNode.prototype = new CGAction;
CGActionAlertNode.constructor = CGActionAlertNode;
CommandFactory.register(CGActionAlertNode, {
	Id: 0
}, false);

CGActionAlertNode.prototype.onFailure = function (sResponse) {
	if (this.Dialog)
		this.Dialog.destroy();
	Desktop.reportError(sResponse);
	this.terminate();
};

CGActionAlertNode.prototype.step_1 = function () {
	this.Dialog = new CGDialogAlertEntity();
	this.Dialog.init();
	this.Dialog.onAccept = this.execute.bind(this);
	this.Dialog.onCancel = this.resetState.bind(this);
	this.Dialog.show();
};

CGActionAlertNode.prototype.step_2 = function () {
	Kernel.alertEntity(this, this.Id, this.Dialog.UserList, this.Dialog.Message, MONET_LINK_TYPE_NODE);
	this.Dialog.destroy();
};

CGActionAlertNode.prototype.step_3 = function () {
	Desktop.reportSuccess(Lang.Action.AlertNode.Done);
	this.terminate();
};

// ----------------------------------------------------------------------
// Render Map Layer
// ----------------------------------------------------------------------
function CGActionRenderMapLayer() {
	this.base = CGAction;
	this.base(2);
	this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderMapLayer.prototype = new CGAction;
CGActionRenderMapLayer.constructor = CGActionRenderMapLayer;
CommandFactory.register(CGActionRenderMapLayer, {
	Id: 0,
	Code: 1,
	CodeView: 2,
	IdDOMViewerLayer: 3,
	IdDOMViewerLayerOptions: 4,
	IdDOMFiltersWizardOptions: 5
}, false);

CGActionRenderMapLayer.prototype.step_1 = function () {

	Desktop.Main.Right.registerCollapse("CGActionRenderMapLayer", CGActionRenderMapLayer.prototype.atCollapse.bind(this));

	if ((this.Id == null) || (this.Code == null) || (this.CodeView == null) || (this.IdDOMViewerLayer == null) || (this.IdDOMViewerLayerOptions == null)) {
		this.terminate();
		return;
	}

	var Process = new CGProcessLoadHelperMapViewer();
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionRenderMapLayer.prototype.step_2 = function () {
	this.createFiltersWizard();
	this.createMapLayer();

	var helper = ViewerSidebar.getHelper(Helper.MAP);
	helper.hideEditionLayer();
};

CGActionRenderMapLayer.prototype.createFiltersWizard = function () {
	var Options;

	eval($(this.IdDOMFiltersWizardOptions).innerHTML);

	var filtersWizard = new CGFiltersWizard(Options, Context.Config.Language, Context.Config.ImagesPath);
	filtersWizard.setDataSourceUrls(Kernel.getNodeItemsLink(this.Id, this.Code, this.CodeView), Kernel.getNodeGroupByOptionsLink(this.Id, this.CodeView));
	filtersWizard.setWizardLayer(Literals.ListViewerWizard);
	filtersWizard.onUpdateState = CGActionRenderMapLayer.prototype.atUpdateState.bind(this);
	filtersWizard.setState(State.getListViewerState(this.Id + this.CodeView));
	filtersWizard.render(this.IdDOMViewerLayer);
	filtersWizard.Id = this.Id;
};

CGActionRenderMapLayer.prototype.createMapLayer = function () {
	var extMapLayer = Ext.get(this.IdDOMViewerLayer);
	var extNodeLayer = extMapLayer.up(CSS_NODE);
	var Options;

	eval($(this.IdDOMViewerLayerOptions).innerHTML);
	extMapLayer.setHeight(extNodeLayer.getHeight());

	this.view = new CGViewMapLayer();
	this.view.setCenter(Context.Config.DefaultLocation.Latitude, Context.Config.DefaultLocation.Longitude);
	this.view.setDOMLayer(extMapLayer.dom);
	this.view.init(Options);
	this.view.setTarget({ countUrl: this.getSourceCountUrl(), url: this.getSourceUrl() });
	this.view.render();
};

CGActionRenderMapLayer.prototype.atUpdateState = function (NewState) {
	State.registerListViewerState(this.Id + this.CodeView, NewState);
	State.registerListViewerState(this.Id, NewState);

	this.view.setTarget({ countUrl: this.getSourceCountUrl(), url: this.getSourceUrl() });
	this.view.refresh();
};

CGActionRenderMapLayer.prototype.getSourceCountUrl = function () {
    var state = State.getListViewerState(this.Id + this.CodeView);
    return Kernel.getNodeItemsLocationsCountLink(this.Id, this.Code, this.CodeView, (state != null ? state.toEscapeUrl() : ""));
};

CGActionRenderMapLayer.prototype.getSourceUrl = function () {
	var state = State.getListViewerState(this.Id + this.CodeView);
	return Kernel.getNodeItemsLocationsLink(this.Id, this.Code, this.CodeView, (state != null ? state.toEscapeUrl() : ""));
};

CGActionRenderMapLayer.prototype.atCollapse = function () {
	this.view.resize();
};

// ----------------------------------------------------------------------
// Show link node
// ----------------------------------------------------------------------
function CGActionShowLinkNode() {
	this.base = CGAction;
	this.base(1);
};

CGActionShowLinkNode.prototype = new CGAction;
CGActionShowLinkNode.constructor = CGActionShowLinkNode;
CommandFactory.register(CGActionShowLinkNode, {
	IdNode: 0,
	IdLink: 1
}, true);

CGActionShowLinkNode.prototype.step_1 = function () {
	var Process = new CGProcessShowLinkNode();
	Process.IdNode = this.IdNode;
	Process.IdLink = this.IdLink;
	Process.execute();
	this.terminate();
};

// ----------------------------------------------------------------------
// Edit node document
// ----------------------------------------------------------------------
function CGActionEditNodeDocument() {
	this.base = CGAction;
	this.base(4);
};

CGActionEditNodeDocument.prototype = new CGAction;
CGActionEditNodeDocument.constructor = CGActionEditNodeDocument;
CommandFactory.register(CGActionEditNodeDocument, {
	Id: 0,
	IdDOMLayer: 1
}, false);

CGActionEditNodeDocument.prototype.onFailure = function (sResponse) {
	Desktop.reportError(this.getErrorMessage(Lang.Action.EditNodeDocument.Failure, sResponse));
};

CGActionEditNodeDocument.prototype.close = function () {
	this.gotoStep(4);
};

CGActionEditNodeDocument.prototype.step_1 = function () {
	var Node = NodesCache.get(this.Id);
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.Id);
	var aPreferences = Account.getUser().getInfo().getPreferences();
	var bDownloadPreference = aPreferences["DownloadOnEditDocument"] ? aPreferences["DownloadOnEditDocument"] == "true" : false;
	var bEditPreference = aPreferences["GotoEditOnEditDocument"] ? aPreferences["GotoEditOnEditDocument"] == "true" : false;

	if (!Node || !ViewNode) {
		this.terminate();
		return;
	}

	this.dialog = new CGDialogEditNodeDocument();
	this.dialog.init($(this.IdDOMLayer));
	this.dialog.Target = {
		IdNode: this.Id,
		DownloadPreference: bDownloadPreference,
		EditPreference: bEditPreference
	};
	this.dialog.onAccept = CGActionEditNodeDocument.prototype.execute.bind(this);
	this.dialog.onCancel = CGActionEditNodeDocument.prototype.close.bind(this);
	this.dialog.refresh();
	this.dialog.show();
};

CGActionEditNodeDocument.prototype.step_2 = function () {
	Desktop.reportProgress(Lang.Action.EditNodeDocument.Waiting, true);
	Kernel.replaceNodeDocument(this, this.Id, this.dialog.FileForm);
};

CGActionEditNodeDocument.prototype.step_3 = function () {
	var aPreferences = Account.getUser().getInfo().getPreferences();

	aPreferences["DownloadOnEditDocument"] = this.dialog.DownloadPreference ? "true" : "false";
	aPreferences["GotoEditOnEditDocument"] = this.dialog.EditPreference ? "true" : "false";

	Account.getUser().getInfo().setPreferences(aPreferences);

	Process = new CGProcessSaveAccount();
	Process.Account = Account;
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionEditNodeDocument.prototype.step_4 = function () {
	var Node = NodesCache.get(this.Id);

	Desktop.hideReports();

	var Behaviour = Extension.getDefinitionBehaviour(Node.Code);
	if ((!Behaviour) || (!Behaviour.ShowNode) || (!Behaviour.ShowNode.Templates) || (!Behaviour.ShowNode.Templates.View)) {
		this.terminate();
		return;
	}

	CommandListener.dispatchCommand("shownode(" + this.Id + "," + Behaviour.ShowNode.Templates.View + ")");
	this.terminate();
};

// ----------------------------------------------------------------------
// Sign node document
// ----------------------------------------------------------------------
function CGActionSignNodeDocument() {
	this.base = CGAction;
	this.base(2);
};

CGActionSignNodeDocument.prototype = new CGAction;
CGActionSignNodeDocument.constructor = CGActionSignNodeDocument;
CommandFactory.register(CGActionSignNodeDocument, {
	Id: 0,
	CodeSignature: 1
}, false);

CGActionSignNodeDocument.prototype.close = function () {
	this.resetState();
};

CGActionSignNodeDocument.prototype.step_1 = function () {
	this.process = new CGProcessSignNodeDocument();
	this.process.Id = this.Id;
	this.process.CodeSignature = this.CodeSignature;
	this.process.ReturnProcess = this;
	this.process.execute();
};

CGActionSignNodeDocument.prototype.step_2 = function (sResponse) {
	if (this.process.success())
		CommandListener.throwCommand("refreshnode(" + this.Id + ")");
	else
		Desktop.reportError(Lang.Action.SignNodeDocument.Failure);
	this.terminate();
};

// ----------------------------------------------------------------------
// Render signature list
// ----------------------------------------------------------------------
function CGActionRenderSignatureList() {
	this.base = CGAction;
	this.base(2);
};

CGActionRenderSignatureList.prototype = new CGAction;
CGActionRenderSignatureList.constructor = CGActionRenderSignatureList;
CommandFactory.register(CGActionRenderSignatureList, {
	Id: 0,
	IdDOMViewerLayer: 1,
	IdDOMViewerLayerOptions: 2
}, false);

CGActionRenderSignatureList.prototype.atBoundItem = function (Sender, Item) {
	var Dummy = Item;
	for (var index in Dummy) {
		if (isFunction(Dummy[index]))
			continue;
		Item[index + "_short"] = shortValue(Dummy[index]);
		try {
			Item[index + "_length"] = Dummy[index].length;
		} catch (e) {
		}
	}

	if (Item.state == "pending" && !this.canSign(Item))
		Item.state = "waiting";

	if (Item.state == "pending")
		Item.stateLabel = Lang.ViewNode.SignatureState.Pending;
	else if (Item.state == "waiting")
		Item.stateLabel = Lang.ViewNode.SignatureState.Waiting;
	else if (Item.state == "signed")
		Item.stateLabel = Lang.ViewNode.SignatureState.Signed;
	else if (Item.state == "delayed")
		Item.stateLabel = Lang.ViewNode.SignatureState.Delayed;
	else if (Item.state == "disabled")
		Item.stateLabel = Lang.ViewNode.SignatureState.Disabled;
	else if (Item.state == "signing")
		Item.stateLabel = Lang.ViewNode.SignatureState.Signing;

	Item.restricted = Item.users_count > 0 ? 1 : 0;
	Item.css = Item.state;
	Item.date = getFormattedDateTime(parseServerDate(Item.date), Context.Config.Language, false);
};

CGActionRenderSignatureList.prototype.atShowItem = function (ListViewer, Item) {
	if (this.canSign(Item)) {
		Item.state = "signing";
		ListViewer.updateItem(Item);
		CommandListener.throwCommand("signnodedocument(" + this.Id + "," + Item.code + ")");
	}
};

CGActionRenderSignatureList.prototype.canSign = function (Item) {
	var userId = Account.getUser().getId();

	if (Item.users_count > 0 && Item.users_ids.indexOf("#" + userId + "#") == -1)
		return false;

	return Item.state == "pending";
};

CGActionRenderSignatureList.prototype.destroyViewer = function () {
	if (State.SignatureListViewer == null)
		return;
	State.SignatureListViewer.dispose();
	$(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderSignatureList.prototype.createViewer = function () {
	var Options;

	this.destroyViewer();

	DOMNode = $(this.IdDOMViewerLayer).up(CSS_NODE);
	eval($(this.IdDOMViewerLayerOptions).innerHTML);

	State.SignatureListViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
	State.SignatureListViewer.setDataSourceUrls(Kernel.getSignatureItemsLink(this.Id), null);
	State.SignatureListViewer.setWizardLayer(Literals.ListViewerWizard);
	State.SignatureListViewer.onShowItem = CGActionRenderSignatureList.prototype.atShowItem.bind(this);
	State.SignatureListViewer.onBoundItem = CGActionRenderSignatureList.prototype.atBoundItem.bind(this);
	State.SignatureListViewer.render(this.IdDOMViewerLayer);
	State.SignatureListViewer.Id = this.Id;
};

CGActionRenderSignatureList.prototype.step_1 = function () {

	if ((this.Id == null) || (this.IdDOMViewerLayer == null) || (this.IdDOMViewerLayerOptions == null)) {
		this.terminate();
		return;
	}

	var Process = new CGProcessLoadHelperListViewer();
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionRenderSignatureList.prototype.step_2 = function () {
	this.createViewer();
	this.terminate();
};

// ----------------------------------------------------------------------
// Action Load Node Field Composite Item
// ----------------------------------------------------------------------
function CGActionLoadNodeFieldCompositeItem() {
	this.base = CGAction;
	this.base(2);
};

CGActionLoadNodeFieldCompositeItem.prototype = new CGAction;
CGActionLoadNodeFieldCompositeItem.constructor = CGActionLoadNodeFieldCompositeItem;
CommandFactory.register(CGActionLoadNodeFieldCompositeItem, {
	Id: 0,
	Code: 1,
	Position: 2
}, false);

CGActionLoadNodeFieldCompositeItem.prototype.step_1 = function () {
	var extItem = Ext.get(this.DOMItem);
	var extElement = extItem.up(".element");
	var extList = extElement.up("ul");
	var extField = extElement.select(CSS_FIELD).first();

	if (extList) {
		var extActive = extList.down(".element." + CLASS_ACTIVE);
		if (extActive != null && extActive != extElement) {
			extActive.removeClass(CLASS_ACTIVE);
			var extBox = extActive.select(".box").first();
			extBox.dom.style.display = "none";
			var extReference = extActive.select(".reference").first();
			extReference.dom.style.display = "";
		}
	}

	if (extField != null) {
		if (extElement.hasClass(CLASS_ACTIVE))
			extElement.removeClass(CLASS_ACTIVE);
		else
			extElement.addClass(CLASS_ACTIVE);

		var extBox = extElement.select(".box").first();
		extBox.dom.style.display = extElement.hasClass(CLASS_ACTIVE) ? "" : "none";

		var extReference = extElement.select(".reference").first();
		extReference.dom.style.display = extElement.hasClass(CLASS_ACTIVE) ? "none" : "";

		this.terminate();
		return;
	}

	Kernel.loadNodeFieldCompositeItem(this, this.Id, this.Code, this.Position);
};

CGActionLoadNodeFieldCompositeItem.prototype.step_2 = function () {
	var Field = new CGField();
	Field.unserialize(this.data);

	var extItem = Ext.get(this.DOMItem);
	var extElement = extItem.up(".element");
	var extBox = extElement.select(".box").first();
	var extReference = extElement.select(".reference").first();
	var extClose = extElement.select(".close").first();
	var extContent = extBox.select(".content").first();
	new Insertion.Bottom(extContent.dom, Field.getContent());

	extElement.addClass(CLASS_ACTIVE);
	extBox.dom.style.display = "";
	extReference.dom.style.display = "none";
	extClose.setBottom(0);

	CommandListener.capture(extContent.dom);
};

// ----------------------------------------------------------------------
// Show node revisions
// ----------------------------------------------------------------------
function CGActionShowNodeRevisions() {
	this.base = CGAction;
	this.base(2);
};

CGActionShowNodeRevisions.prototype = new CGAction;
CGActionShowNodeRevisions.constructor = CGActionShowNodeRevisions;
CommandFactory.register(CGActionShowNodeRevisions, {
	Id: 0,
	Template: 1
}, true);

CGActionShowNodeRevisions.prototype.step_1 = function () {
	var Process = new CGProcessShowNodeRevisions();
	Process.Id = this.Id;
	Process.Template = this.Template;
	Process.ReturnProcess = this;
	Process.execute();
};

CGActionShowNodeRevisions.prototype.step_2 = function () {
	var Process = new CGProcessShowNodeRevision();
	Process.IdNode = this.Id;
	Process.Template = this.Template;
	Process.execute();
	this.terminate();
};

// ----------------------------------------------------------------------
// Show node revision
// ----------------------------------------------------------------------
function CGActionShowNodeRevision() {
	this.base = CGAction;
	this.base(1);
};

CGActionShowNodeRevision.prototype = new CGAction;
CGActionShowNodeRevision.constructor = CGActionShowNodeRevision;
CommandFactory.register(CGActionShowNodeRevision, {
	Id: 0,
	IdNode: 1,
	Template: 2,
	ActiveTab: 3
}, true);

CGActionShowNodeRevision.prototype.step_1 = function () {
	var Process = new CGProcessShowNodeRevision();
	Process.Id = this.Id;
	Process.IdNode = this.IdNode;
	Process.Template = this.Template;
	Process.ActiveTab = this.ActiveTab;
	Process.execute();
	this.terminate();
};

// ----------------------------------------------------------------------
// Close node revisions
// ----------------------------------------------------------------------
function CGActionCloseNodeRevisions() {
	this.base = CGAction;
	this.base(1);
};

CGActionCloseNodeRevisions.prototype = new CGAction;
CGActionCloseNodeRevisions.constructor = CGActionCloseNodeRevisions;
CommandFactory.register(CGActionCloseNodeRevisions, {
	IdNode: 0,
	Template: 1
}, false);

CGActionCloseNodeRevisions.prototype.step_1 = function () {
	CommandListener.dispatchCommand("shownode(" + this.IdNode + "," + this.Template + ")");
	this.terminate();
};

// ----------------------------------------------------------------------
// Restore node revision
// ----------------------------------------------------------------------
function CGActionRestoreNodeRevision() {
	this.base = CGAction;
	this.base(2);
};

CGActionRestoreNodeRevision.prototype = new CGAction;
CGActionRestoreNodeRevision.constructor = CGActionRestoreNodeRevision;
CommandFactory.register(CGActionRestoreNodeRevision, {
	Id: 0,
	IdNode: 1,
	Template: 2
}, false);

CGActionRestoreNodeRevision.prototype.step_1 = function () {
	if (this.Id == "-1") this.execute();
	else Kernel.restoreNodeRevision(this, this.Id, this.IdNode, this.Template);
};

CGActionRestoreNodeRevision.prototype.step_2 = function () {
	CommandListener.throwCommand("closenoderevisions(" + this.IdNode + "," + this.Template + ")");
	this.terminate();
};

//----------------------------------------------------------------------
// Save node partner context
//----------------------------------------------------------------------
function CGActionSaveNodePartnerContext() {
	this.base = CGAction;
	this.base(2);
};

CGActionSaveNodePartnerContext.prototype = new CGAction;
CGActionSaveNodePartnerContext.constructor = CGActionSaveNodePartnerContext;
CommandFactory.register(CGActionSaveNodePartnerContext, {
	IdNode: 0,
	Context: 1
}, false);

CGActionSaveNodePartnerContext.prototype.step_1 = function () {
	Kernel.saveNodePartnerContext(this, Account.getInstanceId(), this.IdNode, this.Context);
};

CGActionSaveNodePartnerContext.prototype.step_2 = function () {
	CommandListener.throwCommand("refreshnode(" + this.IdNode + ")");
	this.terminate();
};

//----------------------------------------------------------------------
// Refresh node state
//----------------------------------------------------------------------
function CGActionRefreshNodeState() {
	this.base = CGAction;
	this.base(2);
	this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionRefreshNodeState.prototype = new CGAction;
CGActionRefreshNodeState.constructor = CGActionRefreshNodeState;
CommandFactory.register(CGActionRefreshNodeState, { IdView: 0 }, false);

CGActionRefreshNodeState.prototype.step_1 = function () {
	var viewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, this.IdView);

	if (!viewNode) {
		this.terminate();
		return;
	}

	var controlInfo = viewNode.getDOM().getControlInfo();

	if (controlInfo.IdNode == null) {
		this.terminate();
		return;
	}

	var nodeId = controlInfo.IdNode;
	var process = new CGProcessRefreshNodeState();
	process.nodeId = nodeId;
	process.ReturnProcess = this;
	process.execute();
};

CGActionRefreshNodeState.prototype.step_2 = function () {
	var viewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, this.IdView);
	var controlInfo = viewNode.getDOM().getControlInfo();
	var nodeId = controlInfo.IdNode;
	controlInfo.State = State.NodesStates[nodeId];
	this.terminate();
};

CGDialogRememberPreference = function () {
  this.base = CGDialog;
  this.base("dlgRememberPreference");
  this.dialog = null;
  this.Target = null;
};

//------------------------------------------------------------------
CGDialogRememberPreference.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogRememberPreference.prototype.init = function () {

  var html = AppTemplate.DialogRememberPreference;
  html = translate(html, Lang.DialogRememberPreference);

  this.layer = new Insertion.Bottom(document.body, html).element.immediateDescendants().last();

  this.initRequiredFields();
  this.initDialog();
};

//------------------------------------------------------------------
CGDialogRememberPreference.prototype.initDialog = function () {
  if (!this.layer) return;

  this.dialog = new Ext.LayoutDialog(this.layer, {
    modal: true, shadow: true, minWidth: 300, minHeight: 300, closable: false,
    center: { autoScroll: true }
  });

  this.dialog.addKeyListener(27, this.atCancel, this);
  this.dialog.addButton(Lang.Buttons.Yes, this.atYes, this);
  this.dialog.addButton(Lang.Buttons.No, this.atNo, this);
  this.dialog.addButton(Lang.Buttons.Cancel, this.atCancel, this);

  var layout = this.dialog.getLayout();
  layout.beginUpdate();
  layout.add('center', new Ext.ContentPanel(this.sName + ".center"));
  layout.endUpdate();
};

//------------------------------------------------------------------
CGDialogRememberPreference.prototype.refresh = function () {
  $("dlgRememberPreference.title").innerHTML = Lang.DialogRememberPreference.Title[this.Target];
  $("dlgRememberPreference.description").innerHTML = Lang.DialogRememberPreference.Description[this.Target];
  $("dlgRememberPreference.remember").checked = true;
};

//==================================================================
CGDialogRememberPreference.prototype.atYes = function () {
  if (!this.check()) return;

  this.RememberResult = $("dlgRememberPreference.remember").checked;
  this.hide();

  if (this.onYes) this.onYes();
};

//==================================================================
CGDialogRememberPreference.prototype.atNo = function () {
  if (!this.check()) return;

  this.RememberResult = ($("dlgRememberPreference.remember").value == "true") ? true : false;
  this.hide();

  if (this.onNo) this.onNo();
};

//----------------------------------------------------------------------
// Check right panel expanded
//----------------------------------------------------------------------
function CGProcessCheckRightPanelExpanded() {
  this.base = CGProcess;
  this.base(3);
  this.Dialog = null;
};

CGProcessCheckRightPanelExpanded.prototype = new CGProcess;
CGProcessCheckRightPanelExpanded.constructor = CGProcessCheckRightPanelExpanded;

CGProcessCheckRightPanelExpanded.prototype.onFailure = function (sResponse) {
  if (this.Dialog) this.Dialog.destroy();
  this.terminateOnFailure(sResponse);
};

CGProcessCheckRightPanelExpanded.prototype.atYes = function () {
  Desktop.Main.Right.expand();
  this.UserOption = true;
  this.execute();
};

CGProcessCheckRightPanelExpanded.prototype.atNo = function () {
  this.UserOption = false;
  this.execute();
};

CGProcessCheckRightPanelExpanded.prototype.step_1 = function () {

  if (Desktop.Main.Right.isExpanded()) {
    this.terminateOnSuccess();
    return;
  }

  Desktop.Main.Right.expand();
  this.terminateOnSuccess();
};

CGProcessCheckRightPanelExpanded.prototype.step_2 = function () {
  var aPreferences, Process, bRememberResult;

  bRememberResult = this.Dialog.RememberResult;
  this.Dialog.destroy();

  if (bRememberResult) {
    aPreferences = Account.getUser().getInfo().getPreferences();
    aPreferences["LayoutMainRightExpand"] = this.UserOption;

    Account.getUser().getInfo().setPreferences(aPreferences);

    Process = new CGProcessSaveAccount();
    Process.Account = Account;
    Process.ReturnProcess = this;
    Process.execute();
  }
  else this.terminateOnSuccess();
};

CGProcessCheckRightPanelExpanded.prototype.step_3 = function () {
  this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Load node helper page
//----------------------------------------------------------------------
function CGProcessLoadNodeHelperPage() {
  this.base = CGProcess;
  this.base(3);
};

CGProcessLoadNodeHelperPage.prototype = new CGProcess;
CGProcessLoadNodeHelperPage.constructor = CGProcessLoadNodeHelperPage;

CGProcessLoadNodeHelperPage.prototype.step_1 = function () {
  var Code = (this.Code) ? this.Code : null;

  if (Code == null) {
    this.terminateOnSuccess();
    return;
  }

  Kernel.loadNodeHelperPage(this, Code);
};

CGProcessLoadNodeHelperPage.prototype.step_2 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadNodeHelperPage.prototype.step_3 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);

  var Page = new CGPage();
  Page.unserialize(this.data);

  if (Page.getContent() == "") return;

  var helper = ViewerSidebar.getHelper(Helper.PAGE);

  helper.setTarget(Page);
  helper.refresh();
  helper.show();

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper page
//----------------------------------------------------------------------
function CGProcessLoadHelperPage() {
  this.base = CGProcess;
  this.base(3);
};

CGProcessLoadHelperPage.prototype = new CGProcess;
CGProcessLoadHelperPage.constructor = CGProcessLoadHelperPage;

CGProcessLoadHelperPage.prototype.step_1 = function () {

  if (!this.Path) {
    this.terminateOnFailure();
    return;
  }

  Kernel.loadHelperPage(this, this.Path);
};

CGProcessLoadHelperPage.prototype.step_2 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadHelperPage.prototype.step_3 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);

  var Page = new CGPage();
  Page.unserialize(this.data);

  if (Page.getContent() == "") return;

  var helper = ViewerSidebar.getHelper(Helper.PAGE);

  helper.setTarget(Page);
  helper.refresh();
  helper.show();

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper editors
//----------------------------------------------------------------------
function CGProcessLoadHelperEditors() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessLoadHelperEditors.prototype = new CGProcess;
CGProcessLoadHelperEditors.constructor = CGProcessLoadHelperEditors;

CGProcessLoadHelperEditors.prototype.step_1 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadHelperEditors.prototype.step_2 = function () {

  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);

  ViewerSidebar.activateHelper(Helper.EDITORS);

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper document preview
//----------------------------------------------------------------------
function CGProcessLoadHelperPreview() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessLoadHelperPreview.prototype = new CGProcess;
CGProcessLoadHelperPreview.constructor = CGProcessLoadHelperPreview;

CGProcessLoadHelperPreview.prototype.step_1 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadHelperPreview.prototype.step_2 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);

  ViewerSidebar.activateHelper(Helper.PREVIEW);

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper list viewer
//----------------------------------------------------------------------
function CGProcessLoadHelperListViewer() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessLoadHelperListViewer.prototype = new CGProcess;
CGProcessLoadHelperListViewer.constructor = CGProcessLoadHelperListViewer;

CGProcessLoadHelperListViewer.prototype.step_1 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadHelperListViewer.prototype.step_2 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);

  ViewerSidebar.activateHelper(Helper.LIST);

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper map viewer
//----------------------------------------------------------------------
function CGProcessLoadHelperMapViewer() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessLoadHelperMapViewer.prototype = new CGProcess;
CGProcessLoadHelperMapViewer.constructor = CGProcessLoadHelperMapViewer;

CGProcessLoadHelperMapViewer.prototype.step_1 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadHelperMapViewer.prototype.step_2 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);

  ViewerSidebar.activateHelper(Helper.LIST);
  ViewerSidebar.activateHelper(Helper.MAP);

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper source viewer
//----------------------------------------------------------------------
function CGProcessLoadHelperSourceViewer() {
  this.base = CGProcess;
  this.base(3);
};

CGProcessLoadHelperSourceViewer.prototype = new CGProcess;
CGProcessLoadHelperSourceViewer.constructor = CGProcessLoadHelperSourceViewer;

CGProcessLoadHelperSourceViewer.prototype.step_1 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadHelperSourceViewer.prototype.step_2 = function () {
  if (this.IdSource != null)
    Kernel.loadSourceNewTerms(this, this.IdSource);
  else
    this.execute();
};

CGProcessLoadHelperSourceViewer.prototype.step_3 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);
  var JSONData = (this.data != null) ? Ext.util.JSON.decode(this.data) : null;
  var source = (JSONData != null) ? JSONData.source : null;
  var termList = (JSONData != null) ? JSONData.termList : null;
  var Source = new CGSource(source);
  var helper = ViewerSidebar.getHelper(Helper.SOURCE);

  helper.setTarget({Source: Source, NewTermList: termList});
  ViewerSidebar.activateHelper(Helper.SOURCE);

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper role viewer
//----------------------------------------------------------------------
function CGProcessLoadHelperRoleViewer() {
  this.base = CGProcess;
  this.base(4);
};

CGProcessLoadHelperRoleViewer.prototype = new CGProcess;
CGProcessLoadHelperRoleViewer.constructor = CGProcessLoadHelperRoleViewer;

CGProcessLoadHelperRoleViewer.prototype.step_1 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadHelperRoleViewer.prototype.step_2 = function () {
  if (!State.RoleDefinitionList) Kernel.loadRoleDefinitionList(this);
  else this.gotoStep(4);
};

CGProcessLoadHelperRoleViewer.prototype.step_3 = function () {
  State.RoleDefinitionList = Ext.util.JSON.decode(this.data);
  this.execute();
};

CGProcessLoadHelperRoleViewer.prototype.step_4 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);
  var helper = ViewerSidebar.getHelper(Helper.SOURCE);

  helper.setTarget(null);
  ViewerSidebar.activateHelper(Helper.SOURCE);

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper revision list viewer
//----------------------------------------------------------------------
function CGProcessLoadHelperRevisionListViewer() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessLoadHelperRevisionListViewer.prototype = new CGProcess;
CGProcessLoadHelperRevisionListViewer.constructor = CGProcessLoadHelperRevisionListViewer;

CGProcessLoadHelperRevisionListViewer.prototype.step_1 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadHelperRevisionListViewer.prototype.step_2 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);
  var helper = ViewerSidebar.getHelper(Helper.REVISIONLIST);

  helper.show();
  helper.refresh();

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper chat
//----------------------------------------------------------------------
function CGProcessLoadHelperChatViewer() {
  this.base = CGProcess;
  this.base(2);
  this.refresh = false;
};

CGProcessLoadHelperChatViewer.prototype = new CGProcess;
CGProcessLoadHelperChatViewer.constructor = CGProcessLoadHelperChatViewer;

CGProcessLoadHelperChatViewer.prototype.step_1 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessLoadHelperChatViewer.prototype.step_2 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);
  var helper = ViewerSidebar.getHelper(Helper.CHAT);

  helper.show();
  if (this.refresh) helper.refresh();

  this.terminate();
};

//----------------------------------------------------------------------
// Load helper observers
//----------------------------------------------------------------------
function CGProcessRefreshHelperObservers() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessRefreshHelperObservers.prototype = new CGProcess;
CGProcessRefreshHelperObservers.constructor = CGProcessRefreshHelperObservers;

CGProcessRefreshHelperObservers.prototype.step_1 = function () {
  var Process = new CGProcessCheckRightPanelExpanded();
  Process.ReturnProcess = this;
  Process.execute();
};

CGProcessRefreshHelperObservers.prototype.step_2 = function () {
  Desktop.Main.Right.activateTab(Literals.TabPanels.MainRightHelper);
  Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);
  var helper = ViewerSidebar.getHelper(Helper.OBSERVERS);

  helper.setTarget(this.Observers);
  helper.refresh();

  if (this.Observers.length > 0) helper.show();
  else helper.hide();

  this.terminate();
};

//----------------------------------------------------------------------
// Close right panel
//----------------------------------------------------------------------
function CGProcessCloseRightPanel() {
  this.base = CGProcess;
  this.base(1);
};

CGProcessCloseRightPanel.prototype = new CGAction;
CGProcessCloseRightPanel.constructor = CGProcessCloseRightPanel;

CGProcessCloseRightPanel.prototype.step_1 = function () {
  Desktop.Main.Right.close();
};

//----------------------------------------------------------------------
// load node helper page
//----------------------------------------------------------------------
function CGActionLoadNodeHelperPage() {
  this.base = CGAction;
};

CGActionLoadNodeHelperPage.prototype = new CGAction;
CGActionLoadNodeHelperPage.constructor = CGActionLoadNodeHelperPage;
CommandFactory.register(CGActionLoadNodeHelperPage, { Code: 0 }, false);

CGActionLoadNodeHelperPage.prototype.execute = function () {
  var Process = new CGProcessLoadNodeHelperPage();
  Process.Code = this.Code;
  Process.execute();
};

//----------------------------------------------------------------------
// load helper page
//----------------------------------------------------------------------
function CGActionLoadHelperPage() {
  this.base = CGAction;
};

CGActionLoadHelperPage.prototype = new CGAction;
CGActionLoadHelperPage.constructor = CGActionLoadHelperPage;
CommandFactory.register(CGActionLoadHelperPage, { Path: 0 }, false);

CGActionLoadHelperPage.prototype.execute = function () {
  var Process = new CGProcessLoadHelperPage();
  Process.Path = this.Path;
  Process.execute();
};

//----------------------------------------------------------------------
// load helper editors
//----------------------------------------------------------------------
function CGActionLoadHelperEditors() {
  this.base = CGAction;
};

CGActionLoadHelperEditors.prototype = new CGAction;
CGActionLoadHelperEditors.constructor = CGActionLoadHelperEditors;
CommandFactory.register(CGActionLoadHelperEditors, null, false);

CGActionLoadHelperEditors.prototype.execute = function () {
  var Process = new CGProcessLoadHelperEditors();
  Process.execute();
};

//----------------------------------------------------------------------
// Toggle right panel
//----------------------------------------------------------------------
function CGActionToggleRightPanel() {
  this.base = CGAction;
  this.base(1);
};

CGActionToggleRightPanel.prototype = new CGAction;
CGActionToggleRightPanel.constructor = CGActionToggleRightPanel;
CommandFactory.register(CGActionToggleRightPanel, null, false);

CGActionToggleRightPanel.prototype.enabled = function () {
  return true;
};

CGActionToggleRightPanel.prototype.refresh = function (MenuOption) {
  MenuOption.setChecked(Desktop.Main.Right.isExpanded());
};

CGActionToggleRightPanel.prototype.step_1 = function () {
  if (Desktop.Main.Right.isExpanded()) Desktop.Main.Right.collapse();
  else Desktop.Main.Right.expand();
};

//----------------------------------------------------------------------
// Activate right panel tab
//----------------------------------------------------------------------
function CGActionActivateRightPanelTab() {
  this.base = CGAction;
  this.base(2);
};

CGActionActivateRightPanelTab.prototype = new CGAction;
CGActionActivateRightPanelTab.constructor = CGActionActivateRightPanelTab;
CommandFactory.register(CGActionActivateRightPanelTab, { Tab: 0 }, false);

CGActionActivateRightPanelTab.prototype.enabled = function () {
  return true;
};

CGActionActivateRightPanelTab.prototype.step_1 = function () {
  var ProcessCheckRightPanelExpanded = new CGProcessCheckRightPanelExpanded();
  ProcessCheckRightPanelExpanded.ReturnProcess = this;
  ProcessCheckRightPanelExpanded.execute();
};

CGActionActivateRightPanelTab.prototype.step_2 = function () {
  if (this.Tab == Literals.TabPanels.MainRightHelper) Desktop.Main.Right.setPanelTitle(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle);
  Desktop.Main.Right.activateTab(this.Tab);
};

//----------------------------------------------------------------------
// Download Business Model file
//----------------------------------------------------------------------
function CGActionDownloadBusinessModelFile() {
  this.base = CGAction;
};

CGActionDownloadBusinessModelFile.prototype = new CGAction;
CGActionDownloadBusinessModelFile.constructor = CGActionDownloadBusinessModelFile;
CommandFactory.register(CGActionDownloadBusinessModelFile, { Path: 0 }, false);

CGActionDownloadBusinessModelFile.prototype.execute = function () {
  window.location.href = Kernel.getBusinessModelFileLink() + "&path=" + this.Path;
};

CGDialogSelectTaskOwner = function () {
  this.base = CGDialog;
  this.base("dlgSelectTaskOwner");
  this.doHide = true;
  this.User = null;
  this.Reason = "";
};

//------------------------------------------------------------------
CGDialogSelectTaskOwner.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogSelectTaskOwner.prototype.init = function (sLayerName) {
  if (!sLayerName) return;

  this.Layer = $(sLayerName);

  var html = AppTemplate.DialogSelectTaskOwner;
  html = translate(html, Lang.DialogSelectTaskOwner);

  this.Layer.innerHTML = html;

  var extLayer = Ext.get(this.Layer);

  this.initTabs();

  var extContainer = extLayer.select(".dialog.selecttaskowner").first();
  var extComponent = extLayer.select(".dialog.selecttaskowner .component").first();

  this.extClearValue = extLayer.select(".dialog.selecttaskowner .clearvalue").first();
  this.extClearValue.on("click", this.atClearValue, this);

  extComponent.on("focus", this.atUserComponentFocus, this);
  extComponent.on("keyup", this.atUserComponentKeyUp, this);

  var extReason = extLayer.select(".dialog.selecttaskowner .reason");
  extReason.on("focus", this.atReasonFocus, this);
  extReason.on("click", this.atReasonFocus, this);
  extReason.on("dblclick", this.atReasonFocus, this);
  extReason.on("change", this.atReasonChange, this);

  var extDataStore = new Ext.data.Store({
    proxy: new Ext.data.HttpProxy({ url: Kernel.getLoadUsersLink() }),
    reader: new Ext.data.JsonReader({root: 'rows', totalProperty: 'nrows'}, [
      {name: 'id'},
      {name: 'label'},
      {name: 'email'}
    ]),
    remoteSort: true
  });
  extDataStore.isRemote = function () {
    return false;
  };

  var extColumnModel = new Ext.grid.ColumnModel([
    {header: Lang.DialogSelectTaskOwner.Users, dataIndex: 'code', hidden: true},
    {header: Lang.DialogSelectTaskOwner.User, dataIndex: 'label'},
    {header: Lang.DialogSelectTaskOwner.Email, dataIndex: 'email'}
  ]);

  this.dialog = new CGEditorDialogGrid(extContainer);
  this.dialog.setRenderFooter(true);
  this.dialog.setConfiguration({Store: extDataStore, ColumnModel: extColumnModel});
  this.dialog.onSelect = CGDialogSelectTaskOwner.prototype.atSelect.bind(this);

  var extAccept = extLayer.select(".dialog.selecttaskowner .accept");
  extAccept.on("click", this.atAccept, this);

  this.filter();
  this.checkAcceptEnable();
};

CGDialogSelectTaskOwner.prototype.initTabs = function () {
	var extLayer = Ext.get(this.Layer);
	var extTabPanel = extLayer.select(".dialog.selecttaskowner .tabs").first();
	var extTabUsername = extLayer.select(".dialog.selecttaskowner .tab_username").first();
	var extTabReason = extLayer.select(".dialog.selecttaskowner .tab_reason").first();

	extTabUsername.dom.id = Ext.id();
	extTabReason.dom.id = Ext.id();

	this.extTabPanel = new Ext.TabPanel(extTabPanel);
	this.extTabPanel.on("click", this.atTabPanelFocus, this);
	this.extTabPanel.on("focus", this.atTabPanelFocus, this);
	this.extTabPanel.on("tabchange", this.atTabPanelFocus, this);
	this.extTabPanel.addTab(extTabUsername.dom.id, Lang.DialogSelectTaskOwner.Username);
	this.extTabPanel.addTab(extTabReason.dom.id, Lang.DialogSelectTaskOwner.Reason);

	this.extTabPanel.activate(extTabUsername.dom.id);
};

CGDialogSelectTaskOwner.prototype.checkAcceptEnable = function () {
  var extLayer = Ext.get(this.Layer);
  var extAccept = extLayer.select(".dialog.selecttaskowner .accept").first();

  if (this.User != null) extAccept.removeClass("disabled");
  else extAccept.addClass("disabled");

  return !extAccept.hasClass("disabled");
};

CGDialogSelectTaskOwner.prototype.filter = function () {
  var extLayer = Ext.get(this.Layer);
  var extUsername = extLayer.select(".dialog.selecttaskowner .component").first();
  var sUsername = extUsername.dom.value;
  this.extClearValue.dom.style.display = (sUsername != "") ? "block" : "none";
  this.dialog.setData(sUsername);
  this.dialog.refresh();
};

CGDialogSelectTaskOwner.prototype.hideDialogOnTimer = function () {
  if (!this.doHide) {
    this.doHide = true;
    return;
  }
  this.hideDialogTimer = window.setTimeout(this.atCancel.bind(this), 100);
};

CGDialogSelectTaskOwner.prototype.clearHideDialogTimer = function () {
  window.clearTimeout(this.hideDialogTimer);
  return false;
};

CGDialogSelectTaskOwner.prototype.show = function () {
  var extLayer = Ext.get(this.Layer);

  Ext.get(document.body).on("click", this.hideDialogOnTimer, this);
  extLayer.on("click", this.clearHideDialogTimer, this);

  if (this.target != null && this.target.reason != null) {
	  var extReason = extLayer.select(".dialog.selecttaskowner .reason").first();
	  extReason.dom.value = this.target.reason;
	  this.Reason = this.target.reason;
  }

  extLayer.show();
};

CGDialogSelectTaskOwner.prototype.hide = function () {
  var extLayer = Ext.get(this.Layer);
  Ext.get(document.body).un("click", this.hideDialogOnTimer, this);
  extLayer.hide();
  this.dialog.hide();
};

//==================================================================
CGDialogSelectTaskOwner.prototype.atAccept = function () {
  if (this.checkAcceptEnable() == false) {
    this.doHide = false;
    return;
  }
  this.doHide = false;
  this.hide();
  if (this.onAccept) this.onAccept();
};

CGDialogSelectTaskOwner.prototype.atSelect = function (Data) {
  var extLayer = Ext.get(this.Layer);
  var extUsername = extLayer.select(".dialog.selecttaskowner .component").first();
  this.User = Data.value;
  extUsername.dom.value = Data.value;
  this.extClearValue.dom.style.display = "block";
  this.checkAcceptEnable();
  this.doHide = false;
  return false;
};

CGDialogSelectTaskOwner.prototype.atClearValue = function () {
  var extLayer = Ext.get(this.Layer);
  var extUsername = extLayer.select(".dialog.selecttaskowner .component").first();
  extUsername.dom.value = "";
  extUsername.dom.focus();
  this.extClearValue.dom.style.display = "none";
  this.filter();
  this.checkAcceptEnable();
  this.doHide = false;
};

CGDialogSelectTaskOwner.prototype.atUserComponentFocus = function (event) {
  this.doHide = false;
};

CGDialogSelectTaskOwner.prototype.atTabPanelFocus = function (event) {
	this.doHide = false;

	var extLayer = Ext.get(this.Layer);
	var extGrid = extLayer.select(".dialog.selecttaskowner .grid").first();
	extGrid.dom.style.width = "100%";
};

CGDialogSelectTaskOwner.prototype.atUserComponentKeyUp = function (event) {
  var codeKey = event.keyCode;
  var extLayer = Ext.get(this.Layer);
  var extUsername = extLayer.select(".dialog.selecttaskowner .component").first();

  this.doHide = false;

  window.clearTimeout(this.idTimeoutFilter);

  if (codeKey == event.UP) {
    this.dialog.moveUp(extUsername);
    return;
  }
  else if (codeKey == event.DOWN) {
    this.dialog.moveDown(extUsername);
    return;
  }
  else if ((codeKey == event.ENTER) || (codeKey == event.LEFT) || (codeKey == event.RIGHT) || (codeKey == event.SHIFT)) return;

  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 200);
};

CGDialogSelectTaskOwner.prototype.atReasonFocus = function (event) {
  this.doHide = false;
};

CGDialogSelectTaskOwner.prototype.atReasonChange = function (event) {
  var extLayer = Ext.get(this.Layer);
  var extReason = extLayer.select(".dialog.selecttaskowner .reason").first();
  this.doHide = false;
  this.Reason = extReason.dom.value;
};

//----------------------------------------------------------------------
// Show TaskList
//----------------------------------------------------------------------
function CGActionShowTaskList() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowTaskList.prototype = new CGAction;
CGActionShowTaskList.constructor = CGActionShowTaskList;
CommandFactory.register(CGActionShowTaskList, { View: 0, Situation: 1 }, true);

CGActionShowTaskList.prototype.step_1 = function () {

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  Kernel.loadSystemTemplate(this, "tasklist", this.View, this.Situation);
};

CGActionShowTaskList.prototype.step_2 = function () {
  ViewTaskList.setContent(this.data);
  ViewTaskList.refresh();
  ViewTaskList.show();
  ViewTaskList.getDOM().activateDefaultTab();

  if (this.View == "taskboard")
    this.setActiveFurniture(Furniture.TASKBOARD);
  else if (this.View == "tasktray")
    this.setActiveFurniture(Furniture.TASKTRAY);

  Desktop.Main.Center.Body.activateTaskList();
};

//----------------------------------------------------------------------
// Render Task List
//----------------------------------------------------------------------
function CGActionRenderTaskList() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderTaskList.prototype = new CGAction;
CGActionRenderTaskList.constructor = CGActionRenderTaskList;
CommandFactory.register(CGActionRenderTaskList, { Inbox: 0, IdDOMViewerLayer: 1, IdDOMViewerLayerOptions: 2 }, false);

CGActionRenderTaskList.prototype.atAddItem = function (Sender, Item) {
  CommandListener.throwCommand("createtask(" + Item.Code + ")");
};

CGActionRenderTaskList.prototype.atBoundItem = function (Sender, Item) {
  var idUser = Account.getUser().getId();

  var Dummy = Item;
  for (var index in Dummy) {
    if (isFunction(Dummy[index])) continue;
    Item[index + "_short"] = shortValue(Dummy[index]);
  }

  if (!Item.state) return;

  Item.ownerStyle = Item.senderStyle = Item.senderEmptyStyle = "";
  if (Item.idOwner != null) {
    if (Item.idOwner == idUser) {
      if (Item.idSender != null)
        Item.senderStyle = "active";
      else
        Item.senderEmptyStyle = "active";
    }
    else
      Item.ownerStyle = "active";
  }

  if (Item.urgent == true) Item.urgentStyle = "active";
  else Item.urgentStyle = "";

  if (Item.state == "new") Item.stateLabel = Lang.ViewTaskList.State.New;
  else if (Item.state == "pending") Item.stateLabel = Lang.ViewTaskList.State.Pending;
  else if (Item.state == "waiting") Item.stateLabel = Lang.ViewTaskList.State.Waiting;
  else if (Item.state == "expired") Item.stateLabel = Lang.ViewTaskList.State.Expired;
  else if (Item.state == "finished") Item.stateLabel = Lang.ViewTaskList.State.Finished;
  else if (Item.state == "aborted") Item.stateLabel = Lang.ViewTaskList.State.Aborted;
  else if (Item.state == "failure") Item.stateLabel = Lang.ViewTaskList.State.Failure;
  else Item.stateLabel = Lang.ViewTaskList.State.Undefined;

  if (Item.type == "service") Item.typeLabel = Lang.ViewTaskList.Type.Service;
  else if (Item.type == "activity") Item.typeLabel = Lang.ViewTaskList.Type.Activity;
  else if (Item.type == "job") Item.typeLabel = Lang.ViewTaskList.Type.Job;

  Item.newMessagesClass = Item.newMessagesCount > 0 ? "active" : "";

  if (Item.startDate != null) {
    var date = parseServerDate(Item.startDate);
    var message = Lang.ViewTaskList.StartedAt;
    if (date.getTime() > new Date()) message = Lang.ViewTaskList.StartAt;
    Item.startDate = message + getFormattedDateTime(date, Context.Config.Language, false);
  }

  Item.createDate = getFormattedDateTime(parseServerDate(Item.createDate), Context.Config.Language, false);
  Item.updateDate = getFormattedDateTime(parseServerDate(Item.updateDate), Context.Config.Language, false);
  Item.random = Math.random();
};

CGActionRenderTaskList.prototype.atRenderItem = function (Sender, Item, DOMItem) {
  CommandListener.capture(DOMItem);
};

CGActionRenderTaskList.prototype.atUpdateState = function (NewState) {
  State.registerListViewerState("tasklist_" + this.Inbox, NewState);
};

CGActionRenderTaskList.prototype.destroyViewer = function () {
  if (State.TaskListViewer == null) return;
  State.TaskListViewer.dispose();
  $(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderTaskList.prototype.createViewer = function () {
  var Options;

  this.destroyViewer();

  eval($(this.IdDOMViewerLayerOptions).innerHTML);
  State.TaskListViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
  State.TaskListViewer.setDataSourceUrls(Kernel.getLoadTasksLink(this.Inbox), null);
  State.TaskListViewer.setWizardLayer(Literals.ListViewerWizard);
  State.TaskListViewer.onAddItem = CGActionRenderTaskList.prototype.atAddItem.bind(this);
  State.TaskListViewer.onBoundItem = CGActionRenderTaskList.prototype.atBoundItem.bind(this);
  State.TaskListViewer.onRenderItem = CGActionRenderTaskList.prototype.atRenderItem.bind(this);
  State.TaskListViewer.onUpdateState = CGActionRenderTaskList.prototype.atUpdateState.bind(this);
  State.TaskListViewer.setState(State.getListViewerState("tasklist_" + this.Inbox));
  State.TaskListViewer.render(this.IdDOMViewerLayer);
};

CGActionRenderTaskList.prototype.step_1 = function () {

  if ((this.IdDOMViewerLayer == null) || (this.IdDOMViewerLayerOptions == null)) {
    this.terminate();
    return;
  }

  var Process = new CGProcessLoadHelperListViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderTaskList.prototype.step_2 = function () {
  this.createViewer();
  this.terminate();
};

//----------------------------------------------------------------------
// Refresh task list
//----------------------------------------------------------------------
function CGActionRefreshTaskList() {
  this.base = CGAction;
  this.base(1);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRefreshTaskList.prototype = new CGAction;
CGActionRefreshTaskList.constructor = CGActionRefreshTaskList;
CommandFactory.register(CGActionRefreshTaskList, null, false);

CGActionRefreshTaskList.prototype.step_1 = function () {
  if (State.TaskListViewer) State.TaskListViewer.refresh();
  var Process = new CGProcessLoadHelperListViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

//----------------------------------------------------------------------
// Set tasks owner
//----------------------------------------------------------------------
function CGActionSetTasksOwner() {
  this.base = CGAction;
  this.base(3);
  this.dialogLayerId = null;
};

CGActionSetTasksOwner.prototype = new CGAction;
CGActionSetTasksOwner.constructor = CGActionSetTasksOwner;
CommandFactory.register(CGActionSetTasksOwner, null, false);

CGActionSetTasksOwner.prototype.saveReason = function () {
	if (this.dialog == null) return;
	State.SetTaskOwnerReason = this.dialog.Reason;
};

CGActionSetTasksOwner.prototype.destroy = function (sResponse) {
  this.resetState();
  if (this.dialogLayerId != null) $(this.dialogLayerId).remove();
};

CGActionSetTasksOwner.prototype.cancel = function() {
	this.saveReason();
	this.destroy();
};

CGActionSetTasksOwner.prototype.onFailure = function (sResponse) {
  this.saveReason();
  Desktop.reportError(Lang.Action.SetTasksOwner.Failure);
  if (this.dialogLayerId != null) $(this.dialogLayerId).remove();
  this.terminate();
};

CGActionSetTasksOwner.prototype.step_1 = function () {
  var aTasks = State.TaskListViewer.getSelectedItems();

  if (aTasks.length <= 0) {
    Desktop.reportWarning(Lang.ViewTask.DialogSetTasksOwner.NoSelection);
    this.terminate();
    return;
  }

  var extItem = Ext.get(this.DOMItem);
  this.dialogLayerId = Ext.id();
  new Insertion.After(extItem.dom, "<div class='dialog embedded' id='" + this.dialogLayerId + "'></div>");

  this.dialog = new CGDialogSelectTaskOwner();
  this.dialog.target = { reason: State.SetTaskOwnerReason };
  this.dialog.onAccept = this.execute.bind(this);
  this.dialog.onCancel = this.cancel.bind(this);
  this.dialog.init(this.dialogLayerId);
  this.dialog.show();
};

CGActionSetTasksOwner.prototype.step_2 = function () {
  var aTasks = State.TaskListViewer.getSelectedItems();

  $(this.dialogLayerId).remove();
  State.SetTaskOwnerReason = null;
  Kernel.setTasksOwner(this, this.dialog.User, this.dialog.Reason, aTasks.toString());
};

CGActionSetTasksOwner.prototype.step_3 = function () {
  State.TaskListViewer.clearSelection();
  State.TaskListViewer.refresh();
  this.terminate();
};

//----------------------------------------------------------------------
// Unset tasks owner
//----------------------------------------------------------------------
function CGActionUnsetTasksOwner() {
  this.base = CGAction;
  this.base(3);
};

CGActionUnsetTasksOwner.prototype = new CGAction;
CGActionUnsetTasksOwner.constructor = CGActionUnsetTasksOwner;
CommandFactory.register(CGActionUnsetTasksOwner, null, false);

CGActionUnsetTasksOwner.prototype.onFailure = function (sResponse) {
  Desktop.reportError(Lang.Action.UnsetTasksOwner.Failure);
  this.terminate();
};

CGActionUnsetTasksOwner.prototype.step_1 = function () {
  Ext.MessageBox.confirm(Lang.ViewTask.DialogUnsetTasksOwner.Title, Lang.ViewTask.DialogUnsetTasksOwner.Description, CGActionUnsetTasksOwner.prototype.checkOption.bind(this));
};

CGActionUnsetTasksOwner.prototype.step_2 = function () {
  var aTasks = State.TaskListViewer.getSelectedItems();

  if (aTasks.length <= 0) {
    Desktop.reportWarning(Lang.ViewTask.DialogUnsetTasksOwner.NoSelection);
    this.terminate();
    return;
  }

  Kernel.unsetTasksOwner(this, aTasks.toString());
};

CGActionUnsetTasksOwner.prototype.step_3 = function () {
  State.TaskListViewer.clearSelection();
  State.TaskListViewer.refresh();
  this.terminate();
};

// ----------------------------------------------------------------------
// Print task list
// ----------------------------------------------------------------------
function CGActionPrintTaskList() {
	this.base = CGAction;
	this.base(3);
    this.allAttributes = new Array();
};

CGActionPrintTaskList.prototype = new CGAction;
CGActionPrintTaskList.constructor = CGActionPrintTaskList;
CommandFactory.register(CGActionPrintTaskList, { Mode: 0, Inbox: 1 }, false);

CGActionPrintTaskList.prototype.destroy = function (sResponse) {
  if (this.dialog) this.dialog.destroy();
  this.terminate();
};

CGActionPrintTaskList.prototype.saveDialogResult = function () {
  CGActionPrintTaskList.Attributes = this.dialog.Attributes;
  CGActionPrintTaskList.DateAttribute = this.dialog.DateAttribute;
  CGActionPrintTaskList.FromDate = this.dialog.FromDate;
  CGActionPrintTaskList.ToDate = this.dialog.ToDate;
};

CGActionPrintTaskList.prototype.getAttributes = function () {
  if (this.Mode == "pdf")
    return CGActionPrintTaskList.Attributes;

  var result = new Array();
  for (var i=0; i<this.allAttributes.length; i++)
    result.push(this.allAttributes[i].code);

  return result;
};

CGActionPrintTaskList.prototype.step_1 = function () {
  Kernel.loadTaskListPrintAttributes(this);
};

CGActionPrintTaskList.prototype.step_2 = function () {
  var extItem = Ext.get(this.DOMItem);
  this.allAttributes = Ext.util.JSON.decode(this.data);

  this.dialogLayerId = Ext.id();
  new Insertion.After(extItem.dom, "<div class='dialog embedded' id='" + this.dialogLayerId + "'></div>");

  this.dialog = new CGDialogPrintEntity();
  this.dialog.onAccept = this.execute.bind(this);
  this.dialog.onCancel = this.destroy.bind(this);
  this.dialog.Attributes = CGActionPrintTaskList.Attributes != null ? CGActionPrintTaskList.Attributes : new Array();
  this.dialog.DateAttribute = CGActionPrintTaskList.DateAttribute;
  this.dialog.FromDate = CGActionPrintTaskList.FromDate;
  this.dialog.ToDate = CGActionPrintTaskList.ToDate;
  this.dialog.target = { Attributes: this.allAttributes, Mode : this.Mode, DisableRange : true };
  this.dialog.init(this.dialogLayerId);
  this.dialog.show();
};

CGActionPrintTaskList.prototype.step_3 = function () {
	var Filters = new Object();
	var ListState = State.TaskListViewer.getState();

    $(this.dialogLayerId).remove();
    this.saveDialogResult();

    if (ListState != null) {
		Filters["query"] = ListState.Filter;
		Filters["sortsby"] = "";
		Filters["groupsby"] = "";

		for (var i = 0; i < ListState.Sorts.length; i++) {
			Filters["sortsby"] += ListState.Sorts[i].Code + MONET_FILTER_SEPARATOR + ListState.Sorts[i].Mode + MONET_FILTERS_SEPARATOR;
		}

		for (var i = 0; i < ListState.Groups.length; i++) {
			Filters["groupsby"] += ListState.Groups[i].Code + MONET_FILTER_SEPARATOR + ListState.Groups[i].Value + MONET_FILTERS_SEPARATOR;
		}

		if (Filters["sortsby"].length > 0)
			Filters["sortsby"] = Filters["sortsby"].substring(0, Filters["sortsby"].length - MONET_FILTERS_SEPARATOR.length);

		if (Filters["groupsby"].length > 0)
			Filters["groupsby"] = Filters["groupsby"].substring(0, Filters["groupsby"].length - MONET_FILTERS_SEPARATOR.length);
	}

	window.location = Kernel.getPrintTaskListLink(this.Mode, this.Inbox, (ListState!=null)?ListState.Folder:"", Filters, this.getAttributes(), CGActionPrintTaskList.DateAttribute, CGActionPrintTaskList.FromDate, CGActionPrintTaskList.ToDate);
};

//----------------------------------------------------------------------
// Show task
//----------------------------------------------------------------------
function CGProcessShowTask() {
	this.base = CGProcess;
	this.base(3);
	this.ActivateTask = true;
	this.DOMViewActiveTab = null;
};

CGProcessShowTask.prototype = new CGProcess;
CGProcessShowTask.constructor = CGProcessShowTask;

CGProcessShowTask.prototype.createViewTask = function (Task) {
	var IdTab = Desktop.Main.Center.Body.addTab(VIEW_TASK, {Id: Task.getId(), Background: !this.ActivateTask});
	return Desktop.createView($(IdTab), Task, null, this.Mode, true);
};

CGProcessShowTask.prototype.loadEmbeddedNodes = function () {
	var Process = new CGProcessLoadEmbeddedNodes();
	Process.ViewContainer = this.ViewTask;
	Process.LoadHelperPage = true;
	Process.execute();
};

CGProcessShowTask.prototype.reload = function () {
	var sLocation = Context.Config.EnterpriseLoginUrl;
	if (sLocation == "") sLocation = Context.Config.Host;
	reload(sLocation);
};

CGProcessShowTask.prototype.step_1 = function () {

	if (this.ViewTask == null) {
		var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);
		if (ViewTask != null) {
			if (((this.Mode == null) || (ViewTask.getMode() == this.Mode)) && (this.ActivateTask)) {
				var Process = new CGProcessActivateTask();
				Process.Id = this.Id;
				Process.execute();
				this.terminate();
				return;
			}
			else {
				ViewTask.destroy();
				ViewTask = null;
			}
		}
		if (ViewTask == null) {
			if (!this.Task) {
				this.Task = new CGTask();
				this.Task.setId(this.Id);
			}
			this.ViewTask = this.createView(this.Task);
		}
	}
	else {
		if ((!this.DOMViewActiveTab) && (this.ViewTask) && (this.ViewTask.getDOM) && (this.ViewTask.getDOM().getActiveTab)) this.DOMViewActiveTab = this.ViewTask.getDOM().getActiveTab();
	}

	if (!this.Task) Kernel.loadTask(this, this.Id, this.Mode);
	else this.gotoStep(3);
};

CGProcessShowTask.prototype.step_2 = function () {

	this.Task = new CGTask();
	this.Task.unserialize(this.data);
	TasksCache.register(this.Task);

	this.ViewTask.setTarget(this.Task);
	this.ViewTask.refresh();

	this.execute();
};

CGProcessShowTask.prototype.step_3 = function () {

	if (this.Task.isInitializer() && this.Task.State == TASK_STATE_FINISHED) {
		Desktop.reportSuccess(Lang.Information.Updated);
		window.setTimeout(CGProcessShowTask.prototype.reload.bind(this), 3000);
		return;
	}

	Desktop.Main.Center.Header.refresh();
	if (Desktop.Main.Center.Body.existsTab(VIEW_TASK, this.Task.getId())) {
		Desktop.Main.Center.Body.updateTab(VIEW_TASK, this.Task.getId(), this.Task.getLabel());
	}

	if (this.ActivateTask) {
		var Process = new CGProcessActivateTask();
		Process.Id = this.Task.getId();
		Process.DOMViewActiveTab = this.DOMViewActiveTab;
		Process.execute();
	}

	this.loadEmbeddedNodes();

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Load embedded task
//----------------------------------------------------------------------
function CGProcessLoadEmbeddedTask() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessLoadEmbeddedTask.prototype = new CGProcess;
CGProcessLoadEmbeddedTask.constructor = CGProcessLoadEmbeddedTask;

CGProcessLoadEmbeddedTask.prototype.step_1 = function () {
	var ControlInfo, Task = null;
	var DOMTask = this.DOMTask;

	if (DOMTask == null) DOMTask = this.DOMItem;

	if (!DOMTask.getControlInfo) {
		this.execute();
		return;
	}

	ControlInfo = DOMTask.getControlInfo();
	this.ViewTask = Desktop.Main.Center.Body.getView(VIEW_TASK, DOMTask.IdView);

	if (this.ViewContainer == null) this.ViewContainer = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, TasksCache.getCurrent().getId());

	if (!this.ViewTask) {
		Task = new CGTask();
		Task.setId(ControlInfo.IdTask);
		this.ViewTask = Desktop.createView(DOMTask, Task, this.ViewContainer, null, true);
	}

	if (this.ViewTask.getDOM().isLoaded()) {
		this.execute();
		return;
	}

	var Process = new CGProcessShowTask();
	Process.Id = Task.getId();
	Process.Mode = ControlInfo.Templates.Refresh;
	Process.ViewTask = this.ViewTask;
	Process.ActivateTask = false;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessLoadEmbeddedTask.prototype.step_2 = function () {
	if (this.onFinish) this.onFinish();
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Activate task
//----------------------------------------------------------------------
function CGProcessActivateTask() {
	this.base = CGProcess;
	this.base(2);
	this.RefreshTask = false;
};

CGProcessActivateTask.prototype = new CGProcess;
CGProcessActivateTask.constructor = CGProcessActivateTask;

CGProcessActivateTask.prototype.step_1 = function () {
	var Task = null;
	var ViewTask;

	if (!(Task = TasksCache.get(this.Id))) {
		this.terminateOnFailure();
		return;
	}

	if ((ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, Task.getId())) == null) {
		this.terminateOnFailure();
		return;
	}

	TasksCache.setCurrent(this.Id);

	Desktop.Main.Center.Header.refresh();
	Desktop.Footer.refresh();

	Desktop.Main.Center.Body.disableNotifications();
	Desktop.Main.Center.Body.activateTab(VIEW_TASK, this.Id);
	Desktop.Main.Center.Body.enableNotifications();

	this.DOMViewActiveTab = ViewTask.getDOM().getActiveTab();

	if (this.RefreshTask) {
		var Process = new CGProcessRefreshTask();
		Process.ActivateTab = false;
		Process.ReturnProcess = this;
		Process.execute();
	}
	else this.execute();

};

CGProcessActivateTask.prototype.step_2 = function () {

	if (!(Task = TasksCache.get(this.Id))) {
		this.terminateOnFailure();
		return;
	}

	if ((ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, Task.getId())) == null) {
		this.terminateOnFailure();
		return;
	}

	ViewTask.show();
	DOMTask = ViewTask.getDOM();
	if (this.DOMViewActiveTab) DOMTask.activateTab(this.DOMViewActiveTab);
	else DOMTask.activateDefaultTab();

	EventManager.notify(EventManager.OPEN_TASK, {"Task": Task, "DOMTask": ViewTask.getDOM()});

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Refresh Task
//----------------------------------------------------------------------
function CGProcessRefreshTask() {
	this.base = CGProcess;
	this.base(2);
	this.ActivateTab = true;
	this.DOMViewActiveTab = null;
};

CGProcessRefreshTask.prototype = new CGProcess;
CGProcessRefreshTask.constructor = CGProcessRefreshTask;

CGProcessRefreshTask.prototype.step_1 = function () {
	var ViewTask, Process, Task = TasksCache.get(this.Id);

	if (!Task) Task = TasksCache.getCurrent();
	if (!Task) {
		this.terminate();
		return;
	}

	this.Id = Task.getId();

	if ((State.aRefreshingTasks[this.Id] != null) && (State.aRefreshingTasks[this.Id])) {
		this.terminate();
		return;
	}

	if (this.View == null) this.View = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, Task.getId());
	if (!this.View) {
		this.terminate();
		return;
	}

	if ((!this.DOMViewActiveTab) && (this.View) && (this.View.getDOM) && (this.View.getDOM().getActiveTab)) this.DOMViewActiveTab = this.View.getDOM().getActiveTab();

	Process = new CGProcessShowTask();
	Process.Id = this.Id;
	Process.Mode = this.View.getMode();
	Process.ViewTask = this.View;
	Process.ActivateTask = false;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessRefreshTask.prototype.step_2 = function () {
	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

	if (!ViewTask) {
		this.terminate();
		return;
	}

	if (this.ActivateTab && this.DOMViewActiveTab) ViewTask.getDOM().activateTab(this.DOMViewActiveTab);
	this.addRefreshTask(RefreshTaskType.TaskList, null);
	State.aRefreshingTasks[this.Id] = false;
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Refresh Task State
//----------------------------------------------------------------------
function CGProcessRefreshTaskState() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessRefreshTaskState.prototype = new CGProcess;
CGProcessRefreshTaskState.constructor = CGProcessRefreshTaskState;

CGProcessRefreshTaskState.prototype.step_1 = function () {

	var task = TasksCache.get(this.taskId);
	if (!task) {
		this.terminate();
		return;
	}

	this.refreshView(Desktop.Main.Center.Body.getContainerView(VIEW_TASK, task.getId()), true);

	var aViews = Desktop.Main.Center.Body.getViews(VIEW_TASK, VIEW_TASK_TYPE_TASK, task.getId());
	for (var i=0; i<aViews.length; i++) this.refreshView(aViews[i], false);

	this.terminate();
};

CGProcessRefreshTaskState.prototype.refreshView = function(viewTask, checkStateTab) {
	if (!viewTask) {
		this.terminate();
		return;
	}

	if (checkStateTab && !viewTask.getDOM().isStateTabActive()) {
		this.terminate();
		return;
	}

	var process = new CGProcessRefreshTask();
	process.Id = this.taskId;
	process.View = viewTask;
	process.execute();
};

//----------------------------------------------------------------------
// Process refresh task tab
//----------------------------------------------------------------------
function CGProcessRefreshTaskTab() {
	this.base = CGAction;
	this.base(1);
};

CGProcessRefreshTaskTab.prototype = new CGProcess;
CGProcessRefreshTaskTab.constructor = CGProcessRefreshTaskTab;

CGProcessRefreshTaskTab.prototype.step_1 = function () {

	var viewTask = Desktop.Main.Center.Body.getView(VIEW_TASK, this.DOMTask.IdView);
	if (viewTask == null) {
		this.terminate();
		return;
	}

	var process = new CGProcessShowTask();
	process.Id = this.Id;
	process.Mode = this.DOMTask.getControlInfo().Templates.Refresh;
	process.ViewTask = viewTask;
	process.ActivateNode = false;
	process.execute();
};

//----------------------------------------------------------------------
// Close task
//----------------------------------------------------------------------
function CGProcessCloseTask() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessCloseTask.prototype = new CGProcess;
CGProcessCloseTask.constructor = CGProcessCloseTask;

CGProcessCloseTask.prototype.step_1 = function () {
	var Task = TasksCache.get(this.Id);

	if ((ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id)) == null) {
		this.terminateOnSuccess();
		return;
	}

	EventManager.notify(EventManager.CLOSE_TASK, {"Task": Task, "DOMTask": ViewTask.getDOM()});

	ViewTask.destroy();
	Desktop.Main.Center.Body.deleteView(VIEW_TASK, ViewTask.getId());
	Desktop.Main.Center.Body.deleteTab(VIEW_TASK, this.Id);
	TasksCache.unregister(this.Id);

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Do Task AttachNode
//----------------------------------------------------------------------
function CGProcessDoTaskAttachNode() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessDoTaskAttachNode.prototype = new CGProcess;
CGProcessDoTaskAttachNode.constructor = CGProcessDoTaskAttachNode;

CGProcessDoTaskAttachNode.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Process.DoTaskAttachNode.Failure);
	this.terminateOnFailure(sResponse);
};

CGProcessDoTaskAttachNode.prototype.step_1 = function () {
	var IdInput, DOMElement, Action;
	var Task = Account.TaskList.getTask(this.Id);

	if (!Task) {
		this.terminate();
		return;
	}

	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);
	if (ViewTask == null) {
		this.terminate();
		return false;
	}

	DOMElement = Extension.getDOMNodeForm(this.DOMItem);
	if (DOMElement != null) {
		Action = new CGActionCopyNode();
		var ControlInfo = DOMElement.getControlInfo();
		Action.Id = ControlInfo.IdNode;
		Action.Mode = ControlInfo.Templates.Refresh;
	}
	else {
		DOMElement = ViewTask.getDOM().getNode(Task.IdTarget);
		if (DOMElement == null) {
			this.terminate();
			return;
		}
		Action = new CGActionCopyNodes();
		Action.DOMElement = DOMElement;
	}

	IdInput = Task.IdInput;
	if (IdInput == -1) {
		var ViewRoot = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Account.getUser().getRootNode().id);
		if (ViewRoot != null) IdInput = Extension.getTaskIdInput(ViewRoot.getDOM());
		else IdInput = null;
	}

	if (IdInput == null) {
		this.terminateOnFailure();
		return;
	}

	Action.IdParent = IdInput;
	Action.execute();

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Do Task Share
//----------------------------------------------------------------------
function CGProcessDoTaskShare() {
	this.base = CGProcess;
	this.base(1);
};

CGProcessDoTaskShare.prototype = new CGProcess;
CGProcessDoTaskShare.constructor = CGProcessDoTaskShare;

CGProcessDoTaskShare.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Process.DoTaskShare.Failure);
	this.terminateOnFailure(sResponse);
};

CGProcessDoTaskShare.prototype.step_1 = function () {
	var IdInput, DOMElement, Action;
	var Task = Account.TaskList.getTask(this.Id);

	if (!Task) {
		this.terminate();
		return;
	}

	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);
	if (ViewTask == null) {
		this.terminate();
		return false;
	}

	Action = new CGActionCopyNode();

	DOMElement = Extension.getDOMNodeForm(this.DOMItem);
	if (DOMElement == null) {
		DOMElement = ViewTask.getDOM().getNode(Task.IdTarget);
		if (DOMElement == null) {
			this.terminate();
			return;
		}
	}

	var ControlInfo = DOMElement.getControlInfo();
	Action.Id = ControlInfo.IdNode;
	Action.Mode = ControlInfo.Templates.Refresh;

	IdInput = Task.IdInput;
	if (IdInput == -1) {
		var ViewRoot = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Account.getUser().getRootNode().id);
		if (ViewRoot != null) IdInput = Extension.getTaskIdInput(ViewRoot.getDOM());
		else IdInput = null;
	}

	if (IdInput == null) {
		this.terminateOnFailure();
		return;
	}

	Action.IdParent = IdInput;
	Action.execute();

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Do Task Revision
//----------------------------------------------------------------------
function CGProcessDoTaskRevision() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessDoTaskRevision.prototype = new CGProcess;
CGProcessDoTaskRevision.constructor = CGProcessDoTaskRevision;

CGProcessDoTaskRevision.prototype.onFailure = function (sResponse) {
	Desktop.reportError(Lang.Process.DoTaskRevision.Failure);
	this.terminateOnFailure(sResponse);
};

CGProcessDoTaskRevision.prototype.step_1 = function () {
	var Task = Account.TaskList.getTask(this.Id);

	if (!Task) {
		this.terminate();
		return;
	}

	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);
	if (ViewTask == null) {
		this.terminate();
		return false;
	}

	var aDOMEmbeddedNodes = ViewTask.getDOM().getEmbeddedNodes();
	var DOMEmbeddedNode = aDOMEmbeddedNodes[0];

	if (DOMEmbeddedNode == null) {
		this.execute();
		return;
	}

	if (DOMEmbeddedNode.IdView == null) {
		this.execute();
		return;
	}

	var ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, DOMEmbeddedNode.IdView);
	var Process = new CGProcessSaveNode();
	Process.Id = ViewNode.getTarget().Id;
	Process.ReturnProcess = this;
	Process.execute();
};

CGProcessDoTaskRevision.prototype.step_2 = function () {
	Desktop.reportSuccess(Lang.Process.DoTaskRevision.Done);
	var Process = new CGProcessCloseTask();
	Process.Id = this.Id;
	Process.execute();
	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Show task node
//----------------------------------------------------------------------
function CGProcessShowTaskNode() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessShowTaskNode.prototype = new CGProcess;
CGProcessShowTaskNode.constructor = CGProcessShowTaskNode;

CGProcessShowTaskNode.prototype.step_1 = function () {
	var ActionShowNode = new CGActionShowNode();
	ActionShowNode.Id = this.IdNode;
	ActionShowNode.ReturnProcess = this;
	ActionShowNode.execute();
};

CGProcessShowTaskNode.prototype.step_2 = function () {
	var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, this.IdNode);

	State.TaskNode = {IdNode: this.IdNode, TargetNode: this.TargetNode, TargetView: this.TargetView, IdTask: this.IdTask};
	ViewNode.getDOM().showBackTaskCommand(this.IdTask, this.TargetNode, this.TargetView);

	this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Select task delegation role
//----------------------------------------------------------------------
function CGProcessSelectTaskDelegationRole() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessSelectTaskDelegationRole.prototype = new CGProcess;
CGProcessSelectTaskDelegationRole.constructor = CGProcessSelectTaskDelegationRole;

CGProcessSelectTaskDelegationRole.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessSelectTaskDelegationRole.prototype.step_1 = function () {
	Desktop.reportProgress(Lang.Desktop.Starting, true);
	Kernel.selectTaskDelegationRole(this, this.Id, this.RoleId);
};

CGProcessSelectTaskDelegationRole.prototype.step_2 = function () {
	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

	var Process = new CGProcessShowTask();
	Process.Id = this.Id;
	Process.Mode = ViewTask.getMode();
	Process.ViewTask = ViewTask;
	Process.execute();

	this.addRefreshTask(RefreshTaskType.TaskList, null);
	this.terminateOnSuccess();
	Desktop.hideProgress();
};

//----------------------------------------------------------------------
// Setup task delegation
//----------------------------------------------------------------------
function CGProcessSetupTaskDelegation() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessSetupTaskDelegation.prototype = new CGProcess;
CGProcessSetupTaskDelegation.constructor = CGProcessSetupTaskDelegation;

CGProcessSetupTaskDelegation.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessSetupTaskDelegation.prototype.step_1 = function () {
	Desktop.reportProgress(Lang.Desktop.Starting, true);
	Kernel.setupTaskDelegation(this, this.Id);
};

CGProcessSetupTaskDelegation.prototype.step_2 = function () {
	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

	var Process = new CGProcessShowTask();
	Process.Id = this.Id;
	Process.Mode = ViewTask.getMode();
	Process.ViewTask = ViewTask;
	Process.execute();

	this.addRefreshTask(RefreshTaskType.TaskList, null);
	this.terminateOnSuccess();
	Desktop.hideProgress();
};

//----------------------------------------------------------------------
// Select task send job role
//----------------------------------------------------------------------
function CGProcessSelectTaskSendJobRole() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessSelectTaskSendJobRole.prototype = new CGProcess;
CGProcessSelectTaskSendJobRole.constructor = CGProcessSelectTaskSendJobRole;

CGProcessSelectTaskSendJobRole.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessSelectTaskSendJobRole.prototype.step_1 = function () {
	Desktop.reportProgress(Lang.Desktop.Starting, true);
	Kernel.selectTaskSendJobRole(this, this.Id, this.RoleId);
};

CGProcessSelectTaskSendJobRole.prototype.step_2 = function () {
	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

	var Process = new CGProcessShowTask();
	Process.Id = this.Id;
	Process.Mode = ViewTask.getMode();
	Process.ViewTask = ViewTask;
	Process.execute();

	this.addRefreshTask(RefreshTaskType.TaskList, null);
	this.terminateOnSuccess();
	Desktop.hideProgress();
};

//----------------------------------------------------------------------
// Setup task send job
//----------------------------------------------------------------------
function CGProcessSetupTaskSendJob() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessSetupTaskSendJob.prototype = new CGProcess;
CGProcessSetupTaskSendJob.constructor = CGProcessSetupTaskSendJob;

CGProcessSetupTaskSendJob.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessSetupTaskSendJob.prototype.step_1 = function () {
	Desktop.reportProgress(Lang.Desktop.Starting, true);
	Kernel.setupTaskSendJob(this, this.Id);
};

CGProcessSetupTaskSendJob.prototype.step_2 = function () {
	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

	var Process = new CGProcessShowTask();
	Process.Id = this.Id;
	Process.Mode = ViewTask.getMode();
	Process.ViewTask = ViewTask;
	Process.execute();

	this.addRefreshTask(RefreshTaskType.TaskList, null);
	this.terminateOnSuccess();
	Desktop.hideProgress();
};

//----------------------------------------------------------------------
// Setup task enroll
//----------------------------------------------------------------------
function CGProcessSetupTaskEnroll() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessSetupTaskEnroll.prototype = new CGProcess;
CGProcessSetupTaskEnroll.constructor = CGProcessSetupTaskEnroll;

CGProcessSetupTaskEnroll.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessSetupTaskEnroll.prototype.step_1 = function () {
	Desktop.reportProgress(Lang.Desktop.Starting, true);
	Kernel.setupTaskEnroll(this, this.Id, this.ContestId);
};

CGProcessSetupTaskEnroll.prototype.step_2 = function () {
	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

	var Process = new CGProcessShowTask();
	Process.Id = this.Id;
	Process.Mode = ViewTask.getMode();
	Process.ViewTask = ViewTask;
	Process.execute();

	this.addRefreshTask(RefreshTaskType.TaskList, null);
	this.terminateOnSuccess();
	Desktop.hideProgress();
};

//----------------------------------------------------------------------
// Setup task wait
//----------------------------------------------------------------------
function CGProcessSetupTaskWait() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessSetupTaskWait.prototype = new CGProcess;
CGProcessSetupTaskWait.constructor = CGProcessSetupTaskWait;

CGProcessSetupTaskWait.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessSetupTaskWait.prototype.step_1 = function () {
	Desktop.reportProgress(Lang.Desktop.Starting, true);
	Kernel.setupTaskWait(this, this.Id, this.DateQuantity, this.Command);
};

CGProcessSetupTaskWait.prototype.step_2 = function () {
	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

	var Process = new CGProcessShowTask();
	Process.Id = this.Id;
	Process.Mode = ViewTask.getMode();
	Process.ViewTask = ViewTask;
	Process.execute();

	this.addRefreshTask(RefreshTaskType.TaskList, null);
	this.terminateOnSuccess();
	Desktop.hideProgress();
};

//----------------------------------------------------------------------
// Solve task line
//----------------------------------------------------------------------
function CGProcessSolveTaskLine() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessSolveTaskLine.prototype = new CGProcess;
CGProcessSolveTaskLine.constructor = CGProcessSolveTaskLine;

CGProcessSolveTaskLine.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessSolveTaskLine.prototype.step_1 = function () {
	Desktop.reportProgress(Lang.Desktop.Starting, true);
	Kernel.solveTaskLine(this, this.Id, this.PlaceCode, this.StopCode);
};

CGProcessSolveTaskLine.prototype.step_2 = function () {
	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

	if (ViewTask != null && ViewTask.getDOM() != null && ViewTask.getDOM().clearStateView)
		ViewTask.getDOM().clearStateView();

	this.terminateOnSuccess();
	Desktop.hideProgress();
};

//----------------------------------------------------------------------
// Solve task edition
//----------------------------------------------------------------------
function CGProcessSolveTaskEdition() {
	this.base = CGProcess;
	this.base(2);
};

CGProcessSolveTaskEdition.prototype = new CGProcess;
CGProcessSolveTaskEdition.constructor = CGProcessSolveTaskEdition;

CGProcessSolveTaskEdition.prototype.onFailure = function (sResponse) {
	Desktop.hideProgress();
	this.terminateOnFailure(sResponse);
};

CGProcessSolveTaskEdition.prototype.step_1 = function () {
	Desktop.reportProgress(Lang.Desktop.Starting, true);
	Kernel.solveTaskEdition(this, this.Id);
};

CGProcessSolveTaskEdition.prototype.step_2 = function () {
	var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

	var Process = new CGProcessShowTask();
	Process.Id = this.Id;
	Process.Mode = ViewTask.getMode();
	Process.ViewTask = ViewTask;
	Process.execute();

	this.addRefreshTask(RefreshTaskType.TaskList, null);
	this.terminateOnSuccess();
	Desktop.hideProgress();
};

function CGUserInfo(Data) {
  if (!Data) return;
  this.sPhoto = Data.photo;
  this.sFullname = Data.fullname;
  this.aPreferences = SerializerData.deserialize(Data.preferences);
  this.sEmail = (Data.email != "null") ? Data.email : "";
  this.sOccupations = Data.occupations;
};




CGUserInfo.prototype.getPhoto = function () {
  return this.sPhoto;
};

CGUserInfo.prototype.setPhoto = function (sPhoto) {
  this.sPhoto = sPhoto;
};

CGUserInfo.prototype.getFullname = function () {
  return this.sFullname;
};

CGUserInfo.prototype.setFullname = function (sFullname) {
  this.sFullname = sFullname;
};

CGUserInfo.prototype.getPreferences = function () {
  return this.aPreferences;
};

CGUserInfo.prototype.setPreferences = function (aPreferences) {
  this.aPreferences = aPreferences;
};

CGUserInfo.prototype.getEmail = function () {
  return this.sEmail;
};

CGUserInfo.prototype.setEmail = function (sEmail) {
  this.sEmail = sEmail;
};

CGUserInfo.prototype.getOccupations = function () {
  return this.sOccupations;
};

CGUserInfo.prototype.setOccupations = function (sOccupations) {
  this.sOccupations = sOccupations;
};

CGUserInfo.prototype.serialize = function () {
  var sResult = "\"photo\":\"" + this.sPhoto + "\",";
  sResult += "\"fullname\":\"" + this.sFullname + "\",";
  sResult += "\"preferences\":\"" + SerializerData.serialize(this.aPreferences) + "\",";
  sResult += "\"email\":\"" + this.sEmail + "\",";
  sResult += "\"occupations\":\"" + this.sOccupations + "\"";
  return "{" + sResult + "}";
};

function CGUser(Data) {
  this.Info = new CGUserInfo();
  if (Data) this.unserializeFromJSON(Data);
};




CGUser.prototype.getId = function () {
  return this.Id;
};

CGUser.prototype.setId = function (Id) {
  this.Id = Id;
};

CGUser.prototype.getName = function () {
  return this.sName;
};

CGUser.prototype.setName = function (sName) {
  this.sName = sName;
};

CGUser.prototype.getInitializerTask = function () {
  return this.InitializerTask;
};

CGUser.prototype.getRootNode = function () {
  return this.RootNode;
};

CGUser.prototype.getRootDashboard = function () {
  return this.RootDashboard;
};

CGUser.prototype.getInfo = function () {
  return this.Info;
};

CGUser.prototype.setInfo = function (Info) {
  this.Info = Info;
};

CGUser.prototype.toArray = function () {
  return {
    Id: this.Id,
    sName: this.sName,
    Language: this.Language,
    sFullname: this.Info.sFullname,
    sEmail: this.Info.sEmail,
    sPhoto: this.Info.sPhoto,
    sOccupations: this.Info.sOccupations
  };
};

CGUser.prototype.unserializeFromJSON = function (ItemStructure) {
  this.Id = ItemStructure.id;
  this.sName = ItemStructure.name;
  this.Language = ItemStructure.language;
  this.Info = new CGUserInfo(ItemStructure.info);
};

CGUser.prototype.serialize = function () {
  var sResult = "\"id\":\"" + this.Id + "\",";
  sResult += "\"language\":\"" + this.Language + "\",";
  sResult += "\"info\":" + this.Info.serialize();
  return "{" + sResult + "}";
};

CGUserList = function () {
  this.aUsers = new Array();
  this.bDirty = false;
  this.iCount = 0;
};

CGUserList.prototype.newUsers = function (aJsonItems) {

  for (var i = 0; i < aJsonItems.length; i++) {
    Item = aJsonItems[i];
    User = new CGUser();
    User.unserializeFromJSON(Item);
    this.aUsers[User.getId()] = User;
  }

  return this.aUsers;
};

CGUserList.prototype.addUser = function (User) {
  this.aUsers[User.getId()] = User;
};

CGUserList.prototype.deleteUser = function (Id) {
  if (this.aUsers[Id]) delete this.aUsers[Id];
};

CGUserList.prototype.getUser = function (Id) {
  return this.aUsers[Id];
};

CGUserList.prototype.getUsers = function () {
  return this.aUsers;
};

CGUserList.prototype.getUsersIds = function () {
  var aResult = new Array();
  for (IdUser in this.aUsers) {
    if (isFunction(this.aUsers[IdUser])) continue;
    aResult.push(IdUser);
  }
  return aResult;
};

CGUserList.prototype.setUsers = function (aUsers) {
  this.aUsers = aUsers;
};

CGUserList.prototype.clean = function () {
  this.bDirty = false;
};

CGUserList.prototype.isDirty = function () {
  return this.bDirty;
};

CGUserList.prototype.getCount = function () {
  return this.iCount;
};

CGUserList.prototype.setCount = function (iCount) {
  this.iCount = iCount;
};

CGUserList.prototype.unserializeFromJSON = function (ItemStructure) {
  this.aUsers = new Array();
  this.newUsers(ItemStructure.items);
  this.iCount = ItemStructure.count;
};

CGUserList.prototype.unserialize = function (serialized) {
  var jsonData = Ext.util.JSON.decode(serialized);
  this.unserializeFromJSON(jsonData);
};

CGUserList.prototype.serialize = function () {
  var sResult = "";

  for (var iPos in this.aUsers) {
    if (isFunction(this.aUsers[iPos])) continue;
    sResult += this.aUsers[iPos].serialize() + ",";
  }
  if (this.aUsers.size() > 0) sResult = sResult.substring(0, sResult.length - 1);

  return "[" + sResult + "]";
};

function CGCommandInfo(sLink) {

  this.sOperation = null;
  this.aParameters = new Array();

  if (sLink != null) this.processLink(sLink);
};

//---------------------------------------------------------------------
CGCommandInfo.prototype.processLink = function (sLink) {

  sLink = sLink.replace(/%20/g, EMPTY);
  sLink = sLink.replace(/%28/g, LEFT_BRACKET);
  sLink = sLink.replace(/%29/g, RIGHT_BRACKET);

  var iLeftBracket = sLink.indexOf(LEFT_BRACKET);
  var iRightBracket = sLink.indexOf(RIGHT_BRACKET);

  if (iLeftBracket == -1) {
    this.sOperation = sLink;
    return true;
  }

  var sParameters = sLink.substring(iLeftBracket + 1, iRightBracket);
  sParameters = sParameters.replace(/\//g, "@bar45@");
  sLink = sLink.substring(0, iLeftBracket + 1) + sParameters + sLink.substring(iRightBracket);

  while ((iPos = sLink.indexOf(SLASH)) != -1) {
    sLink = sLink.substring(iPos + 1, sLink.length);
  }

  if ((iPos = sLink.indexOf(LEFT_BRACKET)) == -1) {
    this.sOperation = sLink;
    return true;
  }

  if (sLink.substring(sLink.length - 1, sLink.length) != RIGHT_BRACKET) return false;

  this.sOperation = sLink.substring(0, iPos);

  sLink = sLink.substring(iPos + 1, sLink.length - 1);
  sLink = sLink.replace(/@bar45@/g, "/");
  var aResult = sLink.split(',');
  this.aParameters = new Array();
  for (var iPos = 0; iPos < aResult.length; iPos++) {
    this.aParameters.push(unescape(aResult[iPos]));
  }
};

//---------------------------------------------------------------------
CGCommandInfo.prototype.getOperation = function () {
  return this.sOperation;
};

//---------------------------------------------------------------------
CGCommandInfo.prototype.setOperation = function (sOperation) {
  this.sOperation = sOperation;
};

//---------------------------------------------------------------------
CGCommandInfo.prototype.getParameters = function () {
  return this.aParameters;
};

//---------------------------------------------------------------------
CGCommandInfo.prototype.addParameter = function (sParameter) {
  this.aParameters.push(sParameter);
};

//---------------------------------------------------------------------
CGCommandInfo.prototype.setParameters = function (aParameters) {
  this.aParameters = aParameters;
};

//---------------------------------------------------------------------
CGCommandInfo.prototype.getLink = function (sOperation, aParameters) {
  var sResult = sOperation + LEFT_BRACKET;
  var sParameters = EMPTY;

  aParameters.each(function (sParameter) {
    sParameters += sParameter + COMMA;
  }, this);

  if (sParameters != EMPTY) sResult += sParameters.substring(0, sParameters.length - 1);

  return sResult + RIGHT_BRACKET;
};

CGDialogSearchUsers = function () {
  this.base = CGDialog;
  this.base("dlgSearchUsers");
  this.ListView = null;
};

//------------------------------------------------------------------
CGDialogSearchUsers.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogSearchUsers.prototype.init = function (sLayerName) {
  if (!sLayerName) return;

  this.Layer = $(sLayerName);

  var html = AppTemplate.DialogSearchUsers;
  html = translate(html, Lang.DialogSearchUsers);

  this.Layer.innerHTML = html;

  var template = AppTemplate.DialogSearchUsersItem;
  template = translate(template, Lang.DialogSearchUsersItem);

  this.ListView = new TListView();
  this.ListView.setTemplate(template);
  this.ListView.setUrl(Context.Config.Api + "?op=searchusers");
  this.ListView.setMaxPageItems(5);
  this.ListView.init($("dlgSearchUsers.Users"), Lang.DialogSearchUsers.NoResults);
  this.ListView.onLoadData = CGDialogSearchUsers.prototype.atRefreshListView.bind(this);

  Event.observe($("dlgSearchUsers.Filter"), "keypress", CGDialogSearchUsers.prototype.atFilterConditionKeyPress.bind(this));
  this.filter();
};

//------------------------------------------------------------------
CGDialogSearchUsers.prototype.show = function () {
  this.Layer.show();
};

//------------------------------------------------------------------
CGDialogSearchUsers.prototype.hide = function () {
  this.Layer.hide();
};

//------------------------------------------------------------------
CGDialogSearchUsers.prototype.destroy = function () {
};

//------------------------------------------------------------------
CGDialogSearchUsers.prototype.addListeners = function () {
  var extUsers = Ext.get("dlgSearchUsers.Users");
  aLinks = extUsers.select("a");

  aLinks.each(function (extLink) {
    Event.observe(extLink.dom, "click", CGDialogSearchUsers.prototype.atItemClick.bind(this, extLink.dom));
  }, this);

};

//------------------------------------------------------------------
CGDialogSearchUsers.prototype.refresh = function () {
};

//------------------------------------------------------------------
CGDialogSearchUsers.prototype.filter = function (Item) {
  this.ListView.filter($("dlgSearchUsers.Filter").value);
};

//------------------------------------------------------------------
CGDialogSearchUsers.prototype.check = function () {
};

//==================================================================
CGDialogSearchUsers.prototype.atFilterConditionKeyPress = function () {
  window.clearTimeout(this.idTimeoutFilter);
  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 200);
};

//==================================================================
CGDialogSearchUsers.prototype.atItemClick = function (DOMItem, EventLaunched) {
  var CommandInfo = new CGCommandInfo(DOMItem.href);
  var aParameters = CommandInfo.getParameters();
  var User = this.Target.getUser(aParameters[0]);

  if (User != null) {
    this.Users = new Array(User);
    if (this.onAccept) this.onAccept();
  }

  Event.stop(EventLaunched);
  return false;
};

//==================================================================
CGDialogSearchUsers.prototype.atAccept = function () {
  if (this.onAccept) this.onAccept();
};

//==================================================================
CGDialogSearchUsers.prototype.atCancel = function () {
  if (this.onCancel) this.onCancel();
};

//==================================================================
CGDialogSearchUsers.prototype.atRefreshListView = function (aRecords) {
  this.ListView.removeAllElements();
  this.Target = new CGUserList();
  for (var iPos = 0; iPos < aRecords.length; iPos++) {
    var User = new CGUser(aRecords[iPos].json);
    var aUser = User.toArray();
    if (aUser.sEmail == "") aUser.sEmail = "&nbsp;";
    this.ListView.addElement(aUser);
    this.Target.addUser(User);
  }
  CommandListener.capture($("dlgSearchUsers.Users"));
  this.addListeners();
};

CGDialogSearchRoles = function () {
  this.base = CGDialog;
  this.base("dlgSearchRoles");
  this.ListView = null;
};

//------------------------------------------------------------------
CGDialogSearchRoles.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogSearchRoles.prototype.init = function (sLayerName) {
  if (!sLayerName) return;

  this.Layer = $(sLayerName);

  var html = AppTemplate.DialogSearchRoles;
  html = translate(html, Lang.DialogSearchRoles);

  this.Layer.innerHTML = html;

  var template = AppTemplate.DialogSearchRolesItem;
  template = translate(template, Lang.DialogSearchRolesItem);

  this.ListView = new TListView();
  this.ListView.setTemplate(template);
  this.ListView.setUrl(Context.Config.Api + "?op=searchroles");
  this.ListView.setMaxPageItems(-1);
  this.ListView.init($("dlgSearchRoles.Roles"), Lang.DialogSearchRoles.NoResults);
  this.ListView.onLoadData = CGDialogSearchRoles.prototype.atRefreshListView.bind(this);

  Event.observe($("dlgSearchRoles.Filter"), "keypress", CGDialogSearchRoles.prototype.atFilterConditionKeyPress.bind(this));
  this.filter();
};

//------------------------------------------------------------------
CGDialogSearchRoles.prototype.show = function () {
  this.Layer.show();
};

//------------------------------------------------------------------
CGDialogSearchRoles.prototype.hide = function () {
  this.Layer.hide();
};

//------------------------------------------------------------------
CGDialogSearchRoles.prototype.destroy = function () {
};

//------------------------------------------------------------------
CGDialogSearchRoles.prototype.addListeners = function () {
  var extRoles = Ext.get("dlgSearchRoles.Roles");
  aLinks = extRoles.select("a");

  aLinks.each(function (extLink) {
    Event.observe(extLink.dom, "click", CGDialogSearchRoles.prototype.atItemClick.bind(this, extLink.dom));
  }, this);

};

//------------------------------------------------------------------
CGDialogSearchRoles.prototype.refresh = function () {
};

//------------------------------------------------------------------
CGDialogSearchRoles.prototype.filter = function (Item) {
  this.ListView.filter($("dlgSearchRoles.Filter").value);
};

//------------------------------------------------------------------
CGDialogSearchRoles.prototype.check = function () {
};

//==================================================================
CGDialogSearchRoles.prototype.atFilterConditionKeyPress = function () {
  window.clearTimeout(this.idTimeoutFilter);
  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 200);
};

//==================================================================
CGDialogSearchRoles.prototype.atItemClick = function (DOMItem, EventLaunched) {
  var CommandInfo = new CGCommandInfo(DOMItem.href);
  var aParameters = CommandInfo.getParameters();
  var User = this.Target.getUser(aParameters[0]);

  if (User != null) {
    this.Roles = new Array(User);
    if (this.onAccept) this.onAccept();
  }

  Event.stop(EventLaunched);
  return false;
};

//==================================================================
CGDialogSearchRoles.prototype.atAccept = function () {
  if (this.onAccept) this.onAccept();
};

//==================================================================
CGDialogSearchRoles.prototype.atCancel = function () {
  if (this.onCancel) this.onCancel();
};

//==================================================================
CGDialogSearchRoles.prototype.atRefreshListView = function (aRecords) {
  this.ListView.removeAllElements();
  this.Target = new CGUserList();
  for (var iPos = 0; iPos < aRecords.length; iPos++) {
    var User = new CGUser(aRecords[iPos].json);
    var aUser = User.toArray();
    if (aUser.sEmail == "") aUser.sEmail = "&nbsp;";
    this.ListView.addElement(aUser);
    this.Target.addUser(User);
  }
  CommandListener.capture($("dlgSearchRoles.Roles"));
  this.addListeners();
};

LIST_VIEW_MAX_PAGE_ITEMS = 10;

TListView = function () {
  this.extTemplate = null;
  this.extEmpty = null;
  this.extItems = null;
  this.iCounter = 0;
  this.sUrl = null;
  this.onLoadData = null;
  this.extStore = null;
  this.sCondition = "";
  this.iMaxPageItems = LIST_VIEW_MAX_PAGE_ITEMS;
};

TListView.prototype.setTemplate = function (sTemplate) {
  this.extTemplate = new Ext.DomHelper.Template(sTemplate);
};

TListView.prototype.setUrl = function (sUrl) {
  this.sUrl = sUrl;
};

TListView.prototype.setMaxPageItems = function (iCount) {
  this.iMaxPageItems = iCount;
};

TListView.prototype.init = function (layer, sEmptyMessage) {
  var extLayer = Ext.get(layer);

  extLayer.addClass("ListView");
  extLayer.dom.innerHTML = EMPTY;

  if (this.sUrl != null) {
    this.extStore = new Ext.data.Store({
      proxy: new Ext.data.HttpProxy({url: this.sUrl}),
      reader: new Ext.data.JsonReader({root: 'items', totalProperty: 'totalCount', id: 'code'}, [
        {name: 'id', mapping: 'id'},
        {name: 'value', mapping: 'value'}
      ]),
      remoteSort: false
    });
    this.extStore.on("load", this.atLoadData, this);
    this.extStore.on("beforeload", this.atBeforeLoadData, this);

    if (this.iMaxPageItems > -1) {
      var extPaging = new Ext.PagingToolbar(extLayer.dom, this.extStore, {
        pageSize: this.iMaxPageItems,
        displayInfo: true,
        displayMsg: '{0} - {1} / {2}',
        emptyMsg: ''
      });
    }
  }

  new Insertion.Bottom(extLayer.dom, "<div class='empty'>" + sEmptyMessage + "</div>");
  new Insertion.Bottom(extLayer.dom, "<ul class='items'></ul>");

  this.extEmpty = extLayer.select(".empty").first();
  this.extItems = extLayer.select(".items").first();
};

TListView.prototype.addElement = function (aElements) {
  var DOMElement = this.extTemplate.append(this.extItems.dom, aElements);
  this.extEmpty.dom.style.display = "none";
  this.iCounter++;
  this.refresh();
  return DOMElement;
};

TListView.prototype.refresh = function () {
  if (this.iCounter > 0) {
    this.extEmpty.dom.style.display = "none";
  }
  else {
    this.extEmpty.dom.style.display = "block";
  }
};

TListView.prototype.removeAllElements = function () {
  this.extItems.dom.innerHTML = EMPTY;
  this.iCounter = 0;
  this.refresh();
};

TListView.prototype.removeElement = function (DOMElement) {
  var extElement = Ext.get(DOMElement);
  if (extElement) extElement.remove();
  this.iCounter--;
  this.refresh();
};

TListView.prototype.destroy = function (e) {
};

TListView.prototype.filter = function (sCondition) {
  this.sCondition = sCondition;
  if (this.extStore) this.extStore.load({params: {query: sCondition, start: 0}});
};

TListView.prototype.atBeforeLoadData = function (Store, Options) {
  if (Options) {
    if (!Options.params) Options.params = new Object();
    if (!Options.params.query) Options.params.query = this.sCondition;
    Options.params.limit = this.iMaxPageItems;
    if (this.onBeforeLoadData) this.onBeforeLoadData(Options);
  }
};

TListView.prototype.atLoadData = function (Store, aRecords) {
  if (this.onLoadData) this.onLoadData(aRecords);
};

CGDialogAlertEntity = function () {
  this.base = CGDialog;
  this.base("dlgAlertEntity");
  this.UserListView = null;
  this.dlgSearchUsers = new CGDialogSearchUsers();
  this.dlgSearchRoles = new CGDialogSearchRoles();
  this.UserList = new CGUserList();
};

//------------------------------------------------------------------
CGDialogAlertEntity.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogAlertEntity.prototype.init = function () {
  var html;

  html = AppTemplate.DialogAlertEntity;
  html = translate(html, Lang.DialogAlertEntity);

  this.layer = new Insertion.Bottom(document.body, html).element.immediateDescendants().last();

  this.initDialog();
  this.initTabs();
  this.initUserListView();
  this.initSearchUsersDialog();
  this.initSearchRolesDialog();
};

//------------------------------------------------------------------
CGDialogAlertEntity.prototype.initTabs = function () {
  var tabs = new Ext.TabPanel("dlgAlertEntity.RoleUserTabs");
  tabs.addTab("dlgAlertEntity.UserTabs", "Usuarios");
  tabs.addTab("dlgAlertEntity.RoleTabs", "Roles");
  tabs.activate("dlgAlertEntity.UserTabs");
};

//------------------------------------------------------------------
CGDialogAlertEntity.prototype.initUserListView = function () {
  var template = AppTemplate.DialogAlertEntityUser;
  template = translate(template, Lang.DialogAlertEntityUser);

  this.UserListView = new TListView();
  this.UserListView.init($("dlgAlertEntity.UserList"), Lang.DialogAlertEntity.NoUsers);
  this.UserListView.setTemplate(template);
  this.UserListView.removeAllElements();
};

//------------------------------------------------------------------
CGDialogAlertEntity.prototype.initSearchUsersDialog = function () {
  this.dlgSearchUsers.init('dlgAlertEntity.DialogSearchUsers');
  this.dlgSearchUsers.onAccept = this.atAddUsers.bind(this);
};

//------------------------------------------------------------------
CGDialogAlertEntity.prototype.initSearchRolesDialog = function () {
  this.dlgSearchRoles.init('dlgAlertEntity.DialogSearchRoles');
  this.dlgSearchRoles.onAccept = this.atAddRoles.bind(this);
};

//------------------------------------------------------------------
CGDialogAlertEntity.prototype.destroy = function () {
  this.dlgSearchUsers.destroy();
  this.dlgSearchRoles.destroy();
  this.dialog.destroy(true);
};

//------------------------------------------------------------------
CGDialogAlertEntity.prototype.show = function () {
  var DOMStatus = $(this.sName + ".status");
  var extLayout = Ext.get(this.sName);

  if (this.dialog == null) return;
  if (!DOMStatus) return;
  if (!extLayout) return;

  DOMStatus.style.display = "none";
  this.dialog.show();
};

//------------------------------------------------------------------
CGDialogAlertEntity.prototype.refresh = function () {
};

//------------------------------------------------------------------
CGDialogAlertEntity.prototype.addListeners = function (DOMElement) {
  var extElement = Ext.get(DOMElement);
  aLinks = extElement.select("a");

  aLinks.each(function (extLink) {
    Event.observe(extLink.dom, "click", CGDialogAlertEntity.prototype.atUserItemClick.bind(this, extLink.dom));
  }, this);
};

//==================================================================
CGDialogAlertEntity.prototype.check = function () {
  var sMessage = EMPTY;

  if (this.UserList.getUsers().size() == 0) {
    sMessage += "<li>" + Lang.DialogAlertEntity.Error.NoUsers + "</li>";
  }

  if (sMessage != EMPTY) {
    this.showStatus("<ul>" + sMessage + "</ul>");
  }

  return (sMessage == EMPTY);
};

//==================================================================
CGDialogAlertEntity.prototype.atAccept = function () {
  if (!this.check()) return;

  this.Message = $("dlgAlertEntity.Message").value;

  this.hide();

  if (this.onAccept) this.onAccept();
};

//==================================================================
CGDialogAlertEntity.prototype.atUserItemClick = function (DOMItem, EventLaunched) {
  var extItem = Ext.get(DOMItem);
  var CommandInfo = new CGCommandInfo(DOMItem.href);
  var aParameters = CommandInfo.getParameters();

  if (DOMItem) {
    this.UserListView.removeElement(extItem.up("li").dom);
    delete this.UserList.deleteUser(aParameters[0]);
  }

  Event.stop(EventLaunched);
  return false;
};

//==================================================================
CGDialogAlertEntity.prototype.atAddUser = function (Record) {
  var aUser, User = new CGUser();
  var Data = Record.data;
  var Info = User.getInfo();
  var DOMElement;

  User.setId(Record.id);
  Info.setFullname(Data.fullname);
  Info.setEmail(Data.email);
  Info.setPhoto(Data.photo);
  User.setInfo(Info);

  aUser = User.toArray();
  DOMElement = this.UserListView.addElement(aUser);

  this.UserList.addUser(User);
  this.addListeners(DOMElement);
};

//==================================================================
CGDialogAlertEntity.prototype.atAddUsers = function () {
  var aSelectedUsers = this.dlgSearchUsers.Users;

  for (var iPos in aSelectedUsers) {
    if (isFunction(aSelectedUsers[iPos])) continue;
    var User = aSelectedUsers[iPos];

    if (this.UserList.getUser(User.getId()) != null) continue;

    var aUser = User.toArray();
    var DOMElement = this.UserListView.addElement(aUser);

    this.UserList.addUser(User);
    this.addListeners(DOMElement);
  }

  return false;
};

//==================================================================
CGDialogAlertEntity.prototype.atAddRoles = function () {
  var aSelectedRoles = this.dlgSearchRoles.Roles;

  for (var iPos in aSelectedRoles) {
    if (isFunction(aSelectedRoles[iPos])) continue;
    var Role = aSelectedRoles[iPos];

    if (this.UserList.getUser(Role.getId()) != null) continue;

    var aRole = Role.toArray();
    var DOMElement = this.UserListView.addElement(aRole);

    this.UserList.addUser(Role);
    this.addListeners(DOMElement);
  }

  return false;
};

CGDialogTaskComments = function () {
  this.base = CGDialog;
  this.base("dlgTaskComments");
};

CGDialogTaskComments.hideTimeout = null;

//------------------------------------------------------------------
CGDialogTaskComments.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogTaskComments.prototype.init = function() {

  var html = AppTemplate.DialogTaskComments;
  html = translate(html, Lang.DialogTaskComments);

  var layer = Ext.get("dlgTaskComments");
  this.layer = (layer != null) ? layer.dom : new Insertion.Bottom(document.body, html).element.immediateDescendants().last();

  this.addBehaviours();
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.addBehaviours = function () {
  Event.observe(this.layer, "mouseover", CGDialogTaskComments.prototype.atMouseOver.bind(this));
  Event.observe(this.layer, "mouseout", CGDialogTaskComments.prototype.atMouseOut.bind(this));
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.refreshPosition = function () {
  var position = this.Target.position;

  this.layer.style.left = (position.x-this.layer.getWidth()) + "px";
  this.layer.style.top = (position.y+20) + "px";
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.refreshComments = function () {
  Ext.get(this.layer).select(".body").first().dom.innerHTML = this.Target.comments.replace(/\\n/g, "<br/>");
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.show = function () {
  this.cancelHide();
  this.layer.show();
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.doHide = function () {
  this.layer.hide();
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.getHeight = function () {
  return this.layer.getHeight();
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.cancelHide = function () {
  if (CGDialogTaskComments.hideTimeout != null)
    window.clearTimeout(CGDialogTaskComments.hideTimeout);
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.hide = function () {
  if (CGDialogTaskComments.hideTimeout != null)
    window.clearTimeout(CGDialogTaskComments.hideTimeout);

  CGDialogTaskComments.hideTimeout = window.setTimeout(CGDialogTaskComments.prototype.doHide.bind(this), 400);
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.refresh = function () {
  this.refreshPosition();
  this.refreshComments();
};

//------------------------------------------------------------------
CGDialogTaskComments.prototype.destroy = function () {
  this.layer.remove();
}

//==================================================================
CGDialogTaskComments.prototype.atMouseOver = function () {
  this.cancelHide();
};

CGDialogTaskComments.prototype.atMouseOut = function () {
  this.hide();
};

//----------------------------------------------------------------------
// Show Task
//----------------------------------------------------------------------
function CGActionShowTask() {
  this.base = CGActionShowBase;
  this.base(4);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
  this.DOMViewActiveTab = null;
  this.Mode = null;
};

CGActionShowTask.prototype = new CGActionShowBase;
CGActionShowTask.constructor = CGActionShowTask;
CommandFactory.register(CGActionShowTask, { Id: 0, Mode: 1 }, true);

CGActionShowTask.prototype.getDOMElement = function () {
  return Extension.getDOMTask(this.DOMItem);
};

CGActionShowTask.prototype.step_1 = function () {
  var ViewTask;

  Desktop.hideBanner();
  State.TaskNode = null;

  ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);
  if (ViewTask != null && ViewTask.getDOM() != null) {
    this.DOMViewActiveTab = ViewTask.getDOM().getActiveTab();
    if ((this.Mode == null) || (ViewTask.getMode() == this.Mode)) {
      var Process = new CGProcessActivateTask();
      Process.Id = this.Id;
      Process.RefreshTask = true;
      Process.execute();
      State.LastView = ViewTask;
      this.terminate();
      return;
    }
    ViewTask.destroy();
  }

  if (!this.Mode) {
    var Behaviour = Extension.getDefinitionBehaviour(DEFAULT);

    if ((!Behaviour) || (!Behaviour.ShowTask) || (!Behaviour.ShowTask.Templates) || (!Behaviour.ShowTask.Templates.Edit)) {
      Desktop.hideReports();
      this.terminate();
      return;
    }

    this.Mode = Behaviour.ShowTask.Templates.Edit;
  }

  Kernel.loadTask(this, this.Id, this.Mode);
};

CGActionShowTask.prototype.step_2 = function () {
  var Task, ViewTask;
  var ProcessShowTask;

  Task = new CGTask();
  Task.unserialize(this.data);
  TasksCache.register(Task);
  TasksCache.setCurrent(Task.getId());

  if ((ViewTask = this.getView(VIEW_TASK, Task)) == false) {
    this.terminate();
    return;
  }

  State.LastView = ViewTask;
  State.LastObject.Id = this.Id;
  State.LastObject.Mode = this.Mode;

  ProcessShowTask = new CGProcessShowTask();
  ProcessShowTask.ActivateTask = false;
  ProcessShowTask.ReturnProcess = this;
  ProcessShowTask.Task = Task;
  ProcessShowTask.ViewTask = ViewTask;
  ProcessShowTask.DOMViewActiveTab = this.DOMViewActiveTab;
  ProcessShowTask.execute();
};

CGActionShowTask.prototype.step_3 = function () {
  if (this.bActivate) this.execute();
  else this.terminate();
};

CGActionShowTask.prototype.step_4 = function () {
  var Process = new CGProcessActivateTask();
  Process.Id = this.Id;
  Process.NotifyFocus = false;
  Process.execute();
  this.terminate();
};

// ----------------------------------------------------------------------
// Show task view
// ----------------------------------------------------------------------
function CGActionShowTaskView() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShowTaskView.prototype = new CGAction;
CGActionShowTaskView.constructor = CGActionShowTaskView;
CommandFactory.register(CGActionShowTaskView, { Id: 0, View: 1 }, true);

CGActionShowTaskView.prototype.step_1 = function () {
  var action = new CGActionShowTask();
  action.Id = this.Id;
  action.ReturnProcess = this;
  action.execute();
}

CGActionShowTaskView.prototype.step_2 = function () {
  var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);
  var DOMView = ViewTask.getDOM();
  var viewId = this.getViewId();

  if (viewId == null) {
    this.terminate();
    return;
  }

  DOMView.activateTab(viewId);
  window.setTimeout(this.execute.bind(this), 1000);
};

CGActionShowTaskView.prototype.step_3 = function () {
  var command = this.getCommand();
  if (command != null) CommandListener.dispatchCommand(command);
  this.terminate();
};

CGActionShowTaskView.prototype.getViewId = function () {
  if (this.View.indexOf("chat.") != -1) return CGViewTask.ViewOrders;
  return null;
}

CGActionShowTaskView.prototype.getCommand = function () {
  if (this.View.indexOf("chat.") != -1) {
    var orderId = this.View.replace("chat.", "");
    return "showtaskorderchat(" + this.Id + "," + orderId + "," + false + ")";
  }
  return null;
}

//----------------------------------------------------------------------
// Refresh Task
//----------------------------------------------------------------------
function CGActionRefreshTask() {
  this.base = CGAction;
  this.base(1);
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionRefreshTask.prototype = new CGAction;
CGActionRefreshTask.constructor = CGActionRefreshTask;
CommandFactory.register(CGActionRefreshTask, { Id: 0}, false);

CGActionRefreshTask.prototype.step_1 = function () {
  Process = new CGProcessRefreshTask();
  Process.Id = this.Id;
  Process.execute();
};

//----------------------------------------------------------------------
// Action refresh task tab
//----------------------------------------------------------------------
function CGActionRefreshTaskTab() {
  this.base = CGAction;
  this.base(1);
};

CGActionRefreshTaskTab.prototype = new CGAction;
CGActionRefreshTaskTab.constructor = CGActionRefreshTaskTab;
CommandFactory.register(CGActionRefreshTaskTab, { Id: 0 }, true);

CGActionRefreshTaskTab.prototype.step_1 = function () {

  var process = new CGProcessRefreshTaskTab();
  process.Id = this.Id;
  process.DOMTask = this.DOMItem.up(CSS_TASK);
  process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// Back task
//----------------------------------------------------------------------
function CGActionBackTask() {
  this.base = CGAction;
  this.base(1);
};

CGActionBackTask.prototype = new CGAction;
CGActionBackTask.constructor = CGActionBackTask;
CommandFactory.register(CGActionBackTask, null, false);

CGActionBackTask.prototype.step_1 = function () {
  var Process = new CGProcessShowLastView();
  Process.execute();
  this.terminate();
};

//----------------------------------------------------------------------
// Show task node
//----------------------------------------------------------------------
function CGActionShowTaskNode() {
  this.base = CGAction;
  this.base(1);
};

CGActionShowTaskNode.prototype = new CGAction;
CGActionShowTaskNode.constructor = CGActionShowTaskNode;
CommandFactory.register(CGActionShowTaskNode, { Id: 0 }, false);

CGActionShowTaskNode.prototype.isRecentTaskViewOfNode = function () {
  return this.DOMItem != null && this.DOMItem.up(".recenttask") != null;
};

CGActionShowTaskNode.prototype.getRecentTaskViewInfo = function () {
  return this.DOMItem.up(".recenttask").getControlInfo();
};

CGActionShowTaskNode.prototype.step_1 = function () {
  var Task = TasksCache.getCurrent();

  if (!Task) {
    this.terminate();
    return;
  }

  var Process = new CGProcessShowTaskNode();
  Process.IdTask = Task.getId();
  Process.IdNode = this.Id;
  if (this.isRecentTaskViewOfNode()) {
    var info = this.getRecentTaskViewInfo();
    Process.TargetNode = info.IdNode;
    Process.TargetView = info.CodeView;
  }
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// Show task input
//----------------------------------------------------------------------
function CGActionShowTaskInput() {
  this.base = CGAction;
  this.base(1);
};

CGActionShowTaskInput.prototype = new CGAction;
CGActionShowTaskInput.constructor = CGActionShowTaskInput;
CommandFactory.register(CGActionShowTaskInput, { Id: 0 }, false);

CGActionShowTaskInput.prototype.step_1 = function () {
  var Task = TasksCache.get(this.Id);

  if (!Task) {
    this.terminate();
    return;
  }

  var Process = new CGProcessShowTaskNode();
  Process.IdTask = this.Id;
  Process.IdNode = Task.IdInput;
  Process.ITO = "input";
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// Show task target
//----------------------------------------------------------------------
function CGActionShowTaskTarget() {
  this.base = CGAction;
  this.base(1);
};

CGActionShowTaskTarget.prototype = new CGAction;
CGActionShowTaskTarget.constructor = CGActionShowTaskTarget;
CommandFactory.register(CGActionShowTaskTarget, { Id: 0 }, false);

CGActionShowTaskTarget.prototype.step_1 = function () {
  var Task = TasksCache.get(this.Id);

  if (!Task) {
    this.terminate();
    return;
  }

  var Process = new CGProcessShowTaskNode();
  Process.IdTask = this.Id;
  Process.IdNode = Task.IdTarget;
  Process.ITO = "target";
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// Show task target
//----------------------------------------------------------------------
function CGActionShowTaskShortcut() {
  this.base = CGAction;
  this.base(1);
};

CGActionShowTaskShortcut.prototype = new CGAction;
CGActionShowTaskShortcut.constructor = CGActionShowTaskShortcut;
CommandFactory.register(CGActionShowTaskShortcut, { Id: 0, IdShortcut: 1 }, false);

CGActionShowTaskShortcut.prototype.step_1 = function () {
  var Task = TasksCache.get(this.Id);

  if (!Task) {
    this.terminate();
    return;
  }

  var Process = new CGProcessShowTaskNode();
  Process.IdTask = this.Id;
  Process.IdNode = this.IdShortcut;
  Process.ITO = "shortcut";
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// Show task output
//----------------------------------------------------------------------
function CGActionShowTaskOutput() {
  this.base = CGAction;
  this.base(1);
};

CGActionShowTaskOutput.prototype = new CGAction;
CGActionShowTaskOutput.constructor = CGActionShowTaskOutput;
CommandFactory.register(CGActionShowTaskOutput, { Id: 0 }, false);

CGActionShowTaskOutput.prototype.step_1 = function () {
  var Task = TasksCache.get(this.Id);

  if (!Task) {
    this.terminate();
    return;
  }

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  var Process = new CGProcessShowTaskNode();
  Process.IdTask = this.Id;
  Process.IdNode = Task.IdOutput;
  Process.ITO = "output";
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// Activate task
//----------------------------------------------------------------------
function CGActionActivateTask() {
  this.base = CGAction;
  this.base(1);
};

CGActionActivateTask.prototype = new CGAction;
CGActionActivateTask.constructor = CGActionActivateTask;
CommandFactory.register(CGActionActivateTask, { Id: 0 }, false);

CGActionActivateTask.prototype.step_1 = function () {
  var Process = new CGProcessActivateTask();
  Process.Id = this.Id;
  Process.RefreshTask = true;
  Process.execute();
  this.terminate();
};

//----------------------------------------------------------------------
// Close task
//----------------------------------------------------------------------
function CGActionCloseTask() {
  this.base = CGAction;
  this.base(1);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionCloseTask.prototype = new CGAction;
CGActionCloseTask.constructor = CGActionCloseTask;
CommandFactory.register(CGActionCloseTask, { Id: 0 }, false);

CGActionCloseTask.prototype.step_1 = function () {
  var Process = new CGProcessCloseTask();
  Process.Id = this.Id;
  Process.execute();
  this.terminate();
};

//----------------------------------------------------------------------
// Do Task
//----------------------------------------------------------------------
function CGActionDoTask() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionDoTask.prototype = new CGAction;
CGActionDoTask.constructor = CGActionDoTask;
CommandFactory.register(CGActionDoTask, { Id: 0 }, false);

CGActionDoTask.prototype.onFailure = function (sResponse) {
  Desktop.reportError(Lang.Action.DoTask.Failure);
  this.terminate();
};

CGActionDoTask.prototype.step_1 = function () {
  var Task, Process = null;

  Task = Account.TaskList.getTask(this.Id);
  if (!Task) {
    this.terminate();
    return;
  }

  if (Task.Code == TASK_TYPE_ATTACH_NODE) Process = new CGProcessDoTaskAttachNode();
  else if (Task.Code == TASK_TYPE_SHARE) Process = new CGProcessDoTaskShare();
  else if (Task.Code == TASK_TYPE_REVISION) Process = new CGProcessDoTaskRevision();

  if (Process != null) {
    Process.Id = this.Id;
    Process.DOMItem = this.DOMItem;
    Process.ReturnProcess = this;
    Process.execute();
  }
};

CGActionDoTask.prototype.step_2 = function () {
  this.addRefreshTask(RefreshTaskType.TaskList, null);
  this.terminate();
};

//----------------------------------------------------------------------
// Create task
//----------------------------------------------------------------------
function CGActionCreateTask() {
  this.base = CGAction;
  this.base(4);
  this.dlgCreateTask = null;
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionCreateTask.prototype = new CGAction;
CGActionCreateTask.constructor = CGActionCreateTask;
CommandFactory.register(CGActionCreateTask, { CodeType: 0, Mode: 1 }, false);

CGActionCreateTask.prototype.enabled = function () {
  var Task, aDefinitions;

  if ((Task = TasksCache.getCurrent()) == null) return false;
  if ((ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, Task.getId())) == null) return false;

  aDefinitions = Extension.getDefinitions(ViewTask.getDOM(), Task.Code);

  return (aDefinitions.size() > 0);
};

CGActionCreateTask.prototype.onFailure = function (sResponse) {
  if (this.dlgCreateTask) this.dlgCreateTask.destroy();
  Desktop.reportError(this.getErrorMessage(Lang.Action.CreateTask.Failure, sResponse));
  this.terminate();
};

CGActionCreateTask.prototype.renderDialog = function () {
  var aDefinitions;

  aDefinitions = Extension.getTaskDefinitions();

  if ((aDefinitions == null) || (aDefinitions.length == 0)) {
    Desktop.reportWarning(Lang.ViewTask.DialogCreateTask.NoTasks);
    this.terminate();
    return;
  }

  this.dlgCreateTask = new CGDialogCreateTask();
  this.dlgCreateTask.init();
  this.dlgCreateTask.Target = {TaskTypes: aDefinitions};
  this.dlgCreateTask.onAccept = this.execute.bind(this);
  this.dlgCreateTask.onCancel = this.resetState.bind(this);
  this.dlgCreateTask.refresh();
  this.dlgCreateTask.show();
};

CGActionCreateTask.prototype.step_1 = function () {
  this.Title = Context.Config.DefaultLabel;
  if (!this.Code) this.renderDialog();
  else this.gotoStep(3);
};

CGActionCreateTask.prototype.step_2 = function () {
  this.Code = this.dlgCreateTask.TaskType.Code;
  this.Title = this.dlgCreateTask.Title;
  this.dlgCreateTask.destroy();
  this.execute();
};

CGActionCreateTask.prototype.step_3 = function () {

  if (!this.Mode) {
    var Behaviour = Extension.getDefinitionBehaviour(this.Code);

    if ((!Behaviour) || (!Behaviour.CreateTask) || (!Behaviour.CreateTask.Templates) || (!Behaviour.CreateTask.Templates.Edit)) {
      this.terminateOnFailure();
      return;
    }

    this.Mode = Behaviour.CreateTask.Templates.Edit;
  }

  Kernel.createTask(this, this.Code, this.Mode, this.Title);
};

CGActionCreateTask.prototype.step_4 = function () {
  var Process, Task;

  Task = new CGTask();
  Task.unserialize(this.data);
  TasksCache.register(Task);

  Process = new CGProcessShowTask();
  Process.Task = Task;
  Process.Mode = this.Mode;
  Process.execute();

  this.addRefreshTask(RefreshTaskType.TaskList, null);

  Desktop.reportSuccess(Lang.Action.CreateTask.Done);
  this.terminate();
};

//----------------------------------------------------------------------
// Abort Task
//----------------------------------------------------------------------
function CGActionAbortTask() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionAbortTask.prototype = new CGAction;
CGActionAbortTask.constructor = CGActionAbortTask;
CommandFactory.register(CGActionAbortTask, { Id: 0 }, false);

CGActionAbortTask.prototype.onFailure = function (sResponse) {
  this.getErrorMessage(Lang.Action.AbortTask.Failure, sResponse);
  this.terminate();
};

CGActionAbortTask.prototype.step_1 = function () {
  var Task = TasksCache.get(this.Id), DescTemplate;

  if (!Task) {
    this.terminate();
    return;
  }

  DescTemplate = new Template(Lang.ViewTaskList.DialogAbortTask.Description);
  Ext.MessageBox.confirm(Lang.ViewTaskList.DialogAbortTask.Title, DescTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'task': Task.getLabel()}), CGActionAbortTask.prototype.checkOption.bind(this));
};

CGActionAbortTask.prototype.step_2 = function () {
  Kernel.abortTask(this, this.Id);
};

CGActionAbortTask.prototype.step_3 = function () {
  var Process = new CGProcessRefreshTask();
  Process.Id = this.Id;
  Process.execute();
  Desktop.reportSuccess(Lang.Action.AbortTask.Done);
  this.terminate();
};

//----------------------------------------------------------------------
// Load More Task History Task
//----------------------------------------------------------------------
function CGActionLoadMoreTaskHistory() {
  this.base = CGAction;
  this.base(2);
  this.loading = false;
};

CGActionLoadMoreTaskHistory.prototype = new CGAction;
CGActionLoadMoreTaskHistory.constructor = CGActionLoadMoreTaskHistory;
CommandFactory.register(CGActionLoadMoreTaskHistory, { Id: 0 }, false);

CGActionLoadMoreTaskHistory.loadingHistory = false;

CGActionLoadMoreTaskHistory.prototype.onFailure = function (sResponse) {
  CGActionLoadMoreTaskHistory.loadingHistory = false;
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionLoadMoreTaskHistory.prototype.step_1 = function () {
  var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);

  if (!ViewTask || CGActionLoadMoreTaskHistory.loadingHistory) {
    this.terminate();
    return;
  }

  CGActionLoadMoreTaskHistory.loadingHistory = true;

  var DOMTask = ViewTask.getDOM();
  var start = DOMTask.getHistoryItemsCount();
  var limit = 5;
  Kernel.loadTaskHistory(this, this.Id, start, limit);
};

CGActionLoadMoreTaskHistory.prototype.step_2 = function () {
  var DOMTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id).getDOM();
  var jsonData = Ext.util.JSON.decode(this.data);
  var DOMHistory = DOMTask.getDOMHistory();
  var Constructor = Extension.getTaskConstructor();
  DOMTask.addHistoryPage(jsonData.content, jsonData.hasMore);
  Constructor.init(DOMHistory);
  CGActionLoadMoreTaskHistory.loadingHistory = false;
  this.terminate();
};

//----------------------------------------------------------------------
// Alert Task
//----------------------------------------------------------------------
function CGActionAlertTask() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
  this.Dialog = null;
};

CGActionAlertTask.prototype = new CGAction;
CGActionAlertTask.constructor = CGActionAlertTask;
CommandFactory.register(CGActionAlertTask, { Id: 0 }, false);

CGActionAlertTask.prototype.onFailure = function (sResponse) {
  if (this.Dialog) this.Dialog.destroy();
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionAlertTask.prototype.step_1 = function () {
  var Task = TasksCache.get(this.Id);

  if (!Task) {
    this.terminate();
    return;
  }

  this.Dialog = new CGDialogAlertEntity();
  this.Dialog.init();
  this.Dialog.onAccept = this.execute.bind(this);
  this.Dialog.onCancel = this.resetState.bind(this);
  this.Dialog.show();
};

CGActionAlertTask.prototype.step_2 = function () {
  Kernel.alertEntity(this, this.Id, this.Dialog.UserList, this.Dialog.Message, MONET_LINK_TYPE_TASK);
  this.Dialog.destroy();
};

CGActionAlertTask.prototype.step_3 = function () {
  this.addRefreshTask(RefreshTaskType.TaskList, null);
  Desktop.reportSuccess(Lang.Action.AlertTask.Done);
  this.terminate();
};

//----------------------------------------------------------------------
// Select task delegation role
//----------------------------------------------------------------------
function CGActionSelectTaskDelegationRole() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionSelectTaskDelegationRole.prototype = new CGAction;
CGActionSelectTaskDelegationRole.constructor = CGActionSelectTaskDelegationRole;
CommandFactory.register(CGActionSelectTaskDelegationRole, { Id: 0, RoleId: 1, RequireConfirmation : 2 }, false);

CGActionSelectTaskDelegationRole.prototype.onFailure = function (sResponse) {
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionSelectTaskDelegationRole.prototype.step_1 = function () {

  if (this.RequireConfirmation != null && this.RequireConfirmation != "") {
    Ext.MessageBox.confirm(Lang.ViewTask.DialogConfirmAction.Title, utf8Decode(this.RequireConfirmation), CGActionSelectTaskDelegationRole.prototype.checkOption.bind(this));
    return;
  }

  this.execute();
};

CGActionSelectTaskDelegationRole.prototype.step_2 = function () {
  this.Process = new CGProcessSelectTaskDelegationRole();
  this.Process.Id = this.Id;
  this.Process.RoleId = this.RoleId;
  this.Process.DOMItem = this.DOMItem;
  this.Process.ReturnProcess = this;
  this.Process.execute();
};

CGActionSelectTaskDelegationRole.prototype.step_3 = function () {
  if (this.Process.success()) {
    if (!this.Process.Cancel) Desktop.reportSuccess(Lang.Action.SelectTaskDelegationRole.Done);
  }
  else Desktop.reportError(this.Process.getFailure());
  this.terminate();
};

//----------------------------------------------------------------------
// Setup task delegation
//----------------------------------------------------------------------
function CGActionSetupTaskDelegation() {
  this.base = CGAction;
  this.base(4);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionSetupTaskDelegation.prototype = new CGAction;
CGActionSetupTaskDelegation.constructor = CGActionSetupTaskDelegation;
CommandFactory.register(CGActionSetupTaskDelegation, { Id: 0, RequireConfirmation : 1 }, false);

CGActionSetupTaskDelegation.prototype.onFailure = function (sResponse) {
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionSetupTaskDelegation.prototype.step_1 = function () {

  if (this.RequireConfirmation != null && this.RequireConfirmation != "") {
    Ext.MessageBox.confirm(Lang.ViewTask.DialogConfirmAction.Title, utf8Decode(this.RequireConfirmation), CGActionSetupTaskDelegation.prototype.checkOption.bind(this));
    return;
  }

  this.execute();
};

CGActionSetupTaskDelegation.prototype.step_2 = function () {

  var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);
  if (ViewTask == null) {
    this.terminate();
    return;
  }

  var Process = new CGProcessSaveEmbeddedNodes();
  Process.ViewContainer = ViewTask;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionSetupTaskDelegation.prototype.step_3 = function () {
  this.Process = new CGProcessSetupTaskDelegation();
  this.Process.Id = this.Id;
  this.Process.DOMItem = this.DOMItem;
  this.Process.ReturnProcess = this;
  this.Process.execute();
};

CGActionSetupTaskDelegation.prototype.step_4 = function () {
  if (this.Process.success()) {
    if (!this.Process.Cancel) Desktop.reportSuccess(Lang.Action.SetupTaskDelegation.Done);
  }
  else Desktop.reportError(this.Process.getFailure());
  this.terminate();
};

//----------------------------------------------------------------------
// Select task send job role
//----------------------------------------------------------------------
function CGActionSelectTaskSendJobRole() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionSelectTaskSendJobRole.prototype = new CGAction;
CGActionSelectTaskSendJobRole.constructor = CGActionSelectTaskSendJobRole;
CommandFactory.register(CGActionSelectTaskSendJobRole, { Id: 0, RoleId: 1, RequireConfirmation: 2 }, false);

CGActionSelectTaskSendJobRole.prototype.onFailure = function (sResponse) {
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionSelectTaskSendJobRole.prototype.step_1 = function () {

  if (this.RequireConfirmation != null && this.RequireConfirmation != "") {
    Ext.MessageBox.confirm(Lang.ViewTask.DialogConfirmAction.Title, utf8Decode(this.RequireConfirmation), CGActionSelectTaskSendJobRole.prototype.checkOption.bind(this));
    return;
  }

  this.execute();
};

CGActionSelectTaskSendJobRole.prototype.step_2 = function () {

  if (this.RoleId == "" || this.RoleId == "null")
    this.RoleId = null;

  this.Process = new CGProcessSelectTaskSendJobRole();
  this.Process.Id = this.Id;
  this.Process.RoleId = this.RoleId;
  this.Process.DOMItem = this.DOMItem;
  this.Process.ReturnProcess = this;
  this.Process.execute();
};

CGActionSelectTaskSendJobRole.prototype.step_3 = function () {
  if (this.Process.success()) {
    if (!this.Process.Cancel) Desktop.reportSuccess(Lang.Action.SelectTaskSendJobRole.Done);
  }
  else Desktop.reportError(this.Process.getFailure());
  this.terminate();
};

//----------------------------------------------------------------------
// Setup task send job
//----------------------------------------------------------------------
function CGActionSetupTaskSendJob() {
  this.base = CGAction;
  this.base(4);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionSetupTaskSendJob.prototype = new CGAction;
CGActionSetupTaskSendJob.constructor = CGActionSetupTaskSendJob;
CommandFactory.register(CGActionSetupTaskSendJob, { Id: 0, RequireConfirmation: 1 }, false);

CGActionSetupTaskSendJob.prototype.onFailure = function (sResponse) {
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionSetupTaskSendJob.prototype.step_1 = function () {

  if (this.RequireConfirmation != null && this.RequireConfirmation != "") {
    Ext.MessageBox.confirm(Lang.ViewTask.DialogConfirmAction.Title, utf8Decode(this.RequireConfirmation), CGActionSetupTaskSendJob.prototype.checkOption.bind(this));
    return;
  }

  this.execute();
};

CGActionSetupTaskSendJob.prototype.step_2 = function () {

  var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, this.Id);
  if (ViewTask == null) {
    this.terminate();
    return;
  }

  var Process = new CGProcessSaveEmbeddedNodes();
  Process.ViewContainer = ViewTask;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionSetupTaskSendJob.prototype.step_3 = function () {
  this.Process = new CGProcessSetupTaskSendJob();
  this.Process.Id = this.Id;
  this.Process.DOMItem = this.DOMItem;
  this.Process.ReturnProcess = this;
  this.Process.execute();
};

CGActionSetupTaskSendJob.prototype.step_4 = function () {
  if (this.Process.success()) {
    if (!this.Process.Cancel) Desktop.reportSuccess(Lang.Action.SetupTaskSendJob.Done);
  }
  else Desktop.reportError(this.Process.getFailure());
  this.terminate();
};

//----------------------------------------------------------------------
// Setup task enroll
//----------------------------------------------------------------------
function CGActionSetupTaskEnroll() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionSetupTaskEnroll.prototype = new CGAction;
CGActionSetupTaskEnroll.constructor = CGActionSetupTaskEnroll;
CommandFactory.register(CGActionSetupTaskEnroll, { Id: 0, ContestId: 1 }, false);

CGActionSetupTaskEnroll.prototype.onFailure = function (sResponse) {
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionSetupTaskEnroll.prototype.step_1 = function () {

  if (this.RequireConfirmation != null && this.RequireConfirmation != "") {
    Ext.MessageBox.confirm(Lang.ViewTask.DialogConfirmAction.Title, utf8Decode(this.RequireConfirmation), CGActionSetupTaskEnroll.prototype.checkOption.bind(this));
    return;
  }

  this.execute();
};

CGActionSetupTaskEnroll.prototype.step_2 = function () {
  this.Process = new CGProcessSetupTaskEnroll();
  this.Process.Id = this.Id;
  this.Process.ContestId = this.ContestId;
  this.Process.DOMItem = this.DOMItem;
  this.Process.ReturnProcess = this;
  this.Process.execute();
};

CGActionSetupTaskEnroll.prototype.step_3 = function () {
  if (this.Process.success()) {
    if (!this.Process.Cancel) Desktop.reportSuccess(Lang.Action.SetupTaskEnroll.Done);
  }
  else Desktop.reportError(this.Process.getFailure());
  this.terminate();
};

//----------------------------------------------------------------------
// Setup task wait
//----------------------------------------------------------------------
function CGActionSetupTaskWait() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionSetupTaskWait.prototype = new CGAction;
CGActionSetupTaskWait.constructor = CGActionSetupTaskWait;
CommandFactory.register(CGActionSetupTaskWait, { Id: 0, DateQuantity: 1, Command: 2, RequireConfirmation: 3 }, false);

CGActionSetupTaskWait.prototype.onFailure = function (sResponse) {
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionSetupTaskWait.prototype.step_1 = function () {

  if (this.RequireConfirmation != null && this.RequireConfirmation != "") {
    Ext.MessageBox.confirm(Lang.ViewTask.DialogConfirmAction.Title, utf8Decode(this.RequireConfirmation), CGActionSetupTaskWait.prototype.checkOption.bind(this));
    return;
  }

  this.execute();
};

CGActionSetupTaskWait.prototype.step_2 = function () {
  this.Process = new CGProcessSetupTaskWait();
  this.Process.Id = this.Id;
  this.Process.DateQuantity = this.DateQuantity;
  this.Process.Command = this.Command;
  this.Process.DOMItem = this.DOMItem;
  this.Process.ReturnProcess = this;
  this.Process.execute();
};

CGActionSetupTaskWait.prototype.step_3 = function () {
  if (this.Process.success()) {
    if (!this.Process.Cancel) Desktop.reportSuccess(Lang.Action.SetupTaskWait.Done);
  }
  else Desktop.reportError(this.Process.getFailure());
  this.terminate();
};

//----------------------------------------------------------------------
// Solve task line
//----------------------------------------------------------------------
function CGActionSolveTaskLine() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionSolveTaskLine.prototype = new CGAction;
CGActionSolveTaskLine.constructor = CGActionSolveTaskLine;
CommandFactory.register(CGActionSolveTaskLine, { Id: 0, PlaceCode: 1, StopCode: 2, RequireConfirmation: 3 }, false);

CGActionSolveTaskLine.prototype.onFailure = function (sResponse) {
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionSolveTaskLine.prototype.step_1 = function () {

  if (this.RequireConfirmation != null && this.RequireConfirmation != "") {
    Ext.MessageBox.confirm(Lang.ViewTask.DialogConfirmAction.Title, utf8Decode(this.RequireConfirmation), CGActionSolveTaskLine.prototype.checkOption.bind(this));
    return;
  }

  this.execute();
};

CGActionSolveTaskLine.prototype.step_2 = function () {
  this.Process = new CGProcessSolveTaskLine();
  this.Process.Id = this.Id;
  this.Process.PlaceCode = this.PlaceCode;
  this.Process.StopCode = this.StopCode;
  this.Process.DOMItem = this.DOMItem;
  this.Process.ReturnProcess = this;
  this.Process.execute();
};

CGActionSolveTaskLine.prototype.step_3 = function () {
  if (this.Process.success()) {
    if (!this.Process.Cancel) Desktop.reportSuccess(Lang.Action.SolveTaskLine.Done);
  }
  else Desktop.reportError(this.Process.getFailure());
  this.terminate();
};

//----------------------------------------------------------------------
// Solve task edition
//----------------------------------------------------------------------
function CGActionSolveTaskEdition() {
  this.base = CGAction;
  this.base(4);
};

CGActionSolveTaskEdition.prototype = new CGAction;
CGActionSolveTaskEdition.constructor = CGActionSolveTaskEdition;
CommandFactory.register(CGActionSolveTaskEdition, { Id: 0, RequireConfirmation: 1 }, false);

CGActionSolveTaskEdition.prototype.onFailure = function (sResponse) {
  Desktop.reportError(sResponse);
  this.terminate();
};

CGActionSolveTaskEdition.prototype.step_1 = function () {

  if (this.RequireConfirmation != null && this.RequireConfirmation != "") {
    Ext.MessageBox.confirm(Lang.ViewTask.DialogConfirmAction.Title, utf8Decode(this.RequireConfirmation), CGActionSolveTaskEdition.prototype.checkOption.bind(this));
    return;
  }

  this.execute();
};

CGActionSolveTaskEdition.prototype.step_2 = function () {
  if (Ext.isGecko) window.setTimeout(CGActionSolveTaskEdition.prototype.execute.bind(this), 500);
  else this.execute();
};

CGActionSolveTaskEdition.prototype.step_3 = function () {
  this.Process = new CGProcessSolveTaskEdition();
  this.Process.Id = this.Id;
  this.Process.DOMItem = this.DOMItem;
  this.Process.ReturnProcess = this;
  this.Process.execute();
};

CGActionSolveTaskEdition.prototype.step_4 = function () {
  if (this.Process.success()) {
    if (!this.Process.Cancel) Desktop.reportSuccess(Lang.Action.SolveTaskEdition.Done);
  }
  else Desktop.reportError(this.Process.getFailure());
  this.terminate();
};

//----------------------------------------------------------------------
// Set task title
//----------------------------------------------------------------------
function CGActionSetTaskTitle() {
  this.base = CGAction;
  this.base(2);
};

CGActionSetTaskTitle.prototype = new CGAction;
CGActionSetTaskTitle.constructor = CGActionSetTaskTitle;
CommandFactory.register(CGActionSetTaskTitle, { Title: 0 }, false);

CGActionSetTaskTitle.prototype.onFailure = function (sResponse) {
  Desktop.reportError(Lang.Action.SetTaskTitle.Failure);
  this.terminate();
};

CGActionSetTaskTitle.prototype.step_1 = function () {

  if (this.Title == null) {
    this.terminate();
    return;
  }

  var CurrentTask = TasksCache.getCurrent();
  var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, CurrentTask.getId());

  Kernel.setTaskTitle(CurrentTask.getId(), ViewTask.getDOM.getTitle());
};

CGActionSetTaskTitle.prototype.step_2 = function () {
  this.terminate();
};

//----------------------------------------------------------------------
// Show Task Tab
//----------------------------------------------------------------------
function CGActionShowTaskTab() {
  this.base = CGAction;
  this.base(1);
};

CGActionShowTaskTab.prototype = new CGAction;
CGActionShowTaskTab.constructor = CGActionShowTaskTab;
CommandFactory.register(CGActionShowTaskTab, { Tab: 0 }, false);

CGActionShowTaskTab.prototype.onFailure = function (sResponse) {
  Desktop.reportError(Lang.Action.ShowTaskTab.Failure);
  this.terminate();
};

CGActionShowTaskTab.prototype.step_1 = function () {
  var ViewTask = Desktop.Main.Center.Body.getContainerView(VIEW_TASK, TasksCache.getCurrent().getId());
  var DOMTask = ViewTask.getDOM();
  DOMTask.showTab(this.Tab);
  this.terminate();
};

//----------------------------------------------------------------------
// Set task urgency
//----------------------------------------------------------------------
function CGActionToggleTaskUrgency() {
  this.base = CGAction;
  this.base(2);
};

CGActionToggleTaskUrgency.prototype = new CGAction;
CGActionToggleTaskUrgency.constructor = CGActionToggleTaskUrgency;
CommandFactory.register(CGActionToggleTaskUrgency, { Task: 0 }, false);

CGActionToggleTaskUrgency.prototype.onFailure = function (sResponse) {
  Desktop.reportError(Lang.Action.ToggleTaskUrgency.Failure);
  this.terminate();
};

CGActionToggleTaskUrgency.prototype.step_1 = function () {
  Kernel.toggleTaskUrgency(this, this.Task);
};

CGActionToggleTaskUrgency.prototype.step_2 = function () {
  var extItem = Ext.get(this.DOMItem);

  extItem.removeClass(CLASS_ACTIVE);

  if (this.data == "true")
    extItem.addClass(CLASS_ACTIVE);

  this.terminate();
};

//----------------------------------------------------------------------
// Set task owner
//----------------------------------------------------------------------
function CGActionSetTaskOwner() {
  this.base = CGAction;
  this.base(3);
};

CGActionSetTaskOwner.prototype = new CGAction;
CGActionSetTaskOwner.constructor = CGActionSetTaskOwner;
CommandFactory.register(CGActionSetTaskOwner, { Task: 0 }, false);

CGActionSetTaskOwner.prototype.saveReason = function () {
	if (this.dialog == null) return;
	State.SetTaskOwnerReason = this.dialog.Reason;
};

CGActionSetTaskOwner.prototype.destroy = function (sResponse) {
  this.resetState();
  if (this.dialogLayerId != null) $(this.dialogLayerId).remove();
};

CGActionSetTaskOwner.prototype.cancel = function() {
	this.saveReason();
	this.destroy();
};

CGActionSetTaskOwner.prototype.onFailure = function (sResponse) {
  this.saveReason();
  Desktop.reportError(Lang.Action.SetTaskOwner.Failure);
  if (this.dialogLayerId != null) $(this.dialogLayerId).remove();
  this.terminate();
};

CGActionSetTaskOwner.prototype.step_1 = function () {
  var extItem = Ext.get(this.DOMItem);
  this.dialogLayerId = Ext.id();
  new Insertion.After(extItem.dom, "<div class='dialog embedded' id='" + this.dialogLayerId + "'></div>");

  this.dialog = new CGDialogSelectTaskOwner();
  this.dialog.target = { reason: State.SetTaskOwnerReason };
  this.dialog.onAccept = this.execute.bind(this);
  this.dialog.onCancel = this.destroy.bind(this);
  this.dialog.init(this.dialogLayerId);
  this.dialog.show();
};

CGActionSetTaskOwner.prototype.step_2 = function () {
  $(this.dialogLayerId).remove();
  State.SetTaskOwnerReason = null;
  Kernel.setTasksOwner(this, this.dialog.User, this.dialog.Reason, this.Task);
};

CGActionSetTaskOwner.prototype.step_3 = function () {
  CommandListener.throwCommand("refreshtask(" + this.Task + ")");
  this.terminate();
};

//----------------------------------------------------------------------
// Unset task owner
//----------------------------------------------------------------------
function CGActionUnsetTaskOwner() {
  this.base = CGAction;
  this.base(3);
};

CGActionUnsetTaskOwner.prototype = new CGAction;
CGActionUnsetTaskOwner.constructor = CGActionUnsetTaskOwner;
CommandFactory.register(CGActionUnsetTaskOwner, { Task: 0, ParentClass: 1 }, false);

CGActionUnsetTaskOwner.prototype.onFailure = function (sResponse) {
  Desktop.reportError(Lang.Action.UnsetTaskOwner.Failure);
  this.terminate();
};

CGActionUnsetTaskOwner.prototype.step_1 = function () {
  Ext.MessageBox.confirm(Lang.ViewTask.DialogUnsetTaskOwner.Title, Lang.ViewTask.DialogUnsetTaskOwner.Description, CGActionUnsetTaskOwner.prototype.checkOption.bind(this));
};

CGActionUnsetTaskOwner.prototype.step_2 = function () {
  Kernel.unsetTaskOwner(this, this.Task);
};

CGActionUnsetTaskOwner.prototype.step_3 = function () {
  var extItem = Ext.get(this.DOMItem);

  extItem.up("." + this.ParentClass).removeClass(CLASS_ACTIVE);

  var Task = TasksCache.getCurrent();
  if (Task != null && Task.getId() == this.Task)
    CommandListener.throwCommand("refreshtask(" + this.Task + ")");

  this.terminate();
};

//----------------------------------------------------------------------
// Render Task Order List
//----------------------------------------------------------------------
function CGActionRenderTaskOrderList() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderTaskOrderList.prototype = new CGAction;
CGActionRenderTaskOrderList.constructor = CGActionRenderTaskOrderList;
CommandFactory.register(CGActionRenderTaskOrderList, { Id: 0, IdDOMViewerLayer: 1, IdDOMViewerLayerOptions: 2 }, false);

CGActionRenderTaskOrderList.prototype.atBoundItem = function (Sender, Item) {

  if (Item.modified == null || !Item.modified) {
    if (Item.type == "customer") Item.label = Lang.ViewTask.CustomerLabel + " " + Item.label;
    Item.createDate = getFormattedDateTime(parseServerDate(Item.createDate), Context.Config.Language, false);
    Item.modified = true;
  }

  var Dummy = Item;
  for (var index in Dummy) {
    if (isFunction(Dummy[index]))
      continue;
    Item[index + "_short"] = shortValue(Dummy[index]);
    if (Item[index] == "true") Item[index] = Item[index + "_short"] = Lang.Response.Yes;
    else if (Item[index] == "false") Item[index] = Item[index + "_short"] = Lang.Response.No;
    try {
      Item[index + "_length"] = Dummy[index].length;
    } catch (e) {
    }
  }

  Item.newMessagesClass = Item.newMessagesCount > 0 ? "active" : "";
};

CGActionRenderTaskOrderList.prototype.atShowItem = function (Sender, Item) {
  Kernel.resetTaskOrderNewMessages(Item.idTask, Item.id);
  Item.newMessagesCount = 0;
  State.TaskOrderListViewer.updateItem(Item);
  CommandListener.dispatchCommand("showtaskorderchat(" + Item.idTask + "," + Item.id + "," + Item.closed + ")");
};

CGActionRenderTaskOrderList.prototype.destroyViewer = function () {
  if (State.TaskOrderListViewer == null) return;
  State.registerListViewerState("task" + this.Id, State.TaskOrderListViewer.getState());
  State.TaskOrderListViewer.dispose();
  $(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderTaskOrderList.prototype.createViewer = function () {
  var Options;

  this.destroyViewer();

  eval($(this.IdDOMViewerLayerOptions).innerHTML);
  State.TaskOrderListViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
  State.TaskOrderListViewer.setDataSourceUrls(Kernel.getTaskOrderItemsLink(this.Id), null);
  State.TaskOrderListViewer.setWizardLayer(Literals.ListViewerWizard);
  State.TaskOrderListViewer.onBoundItem = CGActionRenderTaskOrderList.prototype.atBoundItem.bind(this);
  State.TaskOrderListViewer.onShowItem = CGActionRenderTaskOrderList.prototype.atShowItem.bind(this);
  State.TaskOrderListViewer.setState(State.getListViewerState("task" + this.Id));
  State.TaskOrderListViewer.render(this.IdDOMViewerLayer);
};

CGActionRenderTaskOrderList.prototype.step_1 = function () {

  if ((this.IdDOMViewerLayer == null) || (this.IdDOMViewerLayerOptions == null)) {
    this.terminate();
    return;
  }

  var Process = new CGProcessLoadHelperListViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderTaskOrderList.prototype.step_2 = function () {
  this.createViewer();
  this.terminate();
};

//----------------------------------------------------------------------
// Action show task order chat
//----------------------------------------------------------------------
function CGActionShowTaskOrderChat() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowTaskOrderChat.prototype = new CGAction;
CGActionShowTaskOrderChat.constructor = CGActionShowTaskOrderChat;
CommandFactory.register(CGActionShowTaskOrderChat, { Id: 0, IdOrder: 1, closed: 2 }, false);

CGActionShowTaskOrderChat.prototype.step_1 = function () {
  var Process = new CGProcessLoadHelperChatViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionShowTaskOrderChat.prototype.step_2 = function () {
  if (this.closed == "true") this.closed = true;
  else if (this.closed == "false") this.closed = false;
  ViewerHelperChat.target = { loader: Kernel.getTaskOrderChatItemsLink(this.Id, this.IdOrder), idTask: this.Id, idOrder: this.IdOrder, closed: this.closed };
  ViewerHelperChat.refresh();
};

//----------------------------------------------------------------------
// Action send task order chat message
//----------------------------------------------------------------------
function CGActionSendTaskOrderChatMessage() {
  this.base = CGAction;
  this.base(3);
};

CGActionSendTaskOrderChatMessage.prototype = new CGAction;
CGActionSendTaskOrderChatMessage.constructor = CGActionSendTaskOrderChatMessage;
CommandFactory.register(CGActionSendTaskOrderChatMessage, { Id: 0, IdOrder: 1, Message: 2 }, false);

CGActionSendTaskOrderChatMessage.prototype.failure = function () {
};

CGActionSendTaskOrderChatMessage.prototype.step_1 = function () {
  Kernel.sendTaskOrderChatMessage(this, this.Id, this.IdOrder, this.Message);
};

CGActionSendTaskOrderChatMessage.prototype.step_2 = function () {
  var Process = new CGProcessLoadHelperChatViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionSendTaskOrderChatMessage.prototype.step_3 = function () {
  ViewerHelperChat.refresh();
};

//----------------------------------------------------------------------
// Action send task request
//----------------------------------------------------------------------
function CGActionSendTaskRequest() {
	this.base = CGAction;
	this.base(3);
};

CGActionSendTaskRequest.prototype = new CGAction;
CGActionSendTaskRequest.constructor = CGActionSendTaskRequest;
CommandFactory.register(CGActionSendTaskRequest, { Id: 0 }, false);

CGActionSendTaskRequest.prototype.failure = function () {
};

CGActionSendTaskRequest.prototype.step_1 = function () {
	Kernel.sendTaskRequest(this, this.Id);
	this.terminate();
};

//----------------------------------------------------------------------
// Action send task response
//----------------------------------------------------------------------
function CGActionSendTaskResponse() {
	this.base = CGAction;
	this.base(3);
};

CGActionSendTaskResponse.prototype = new CGAction;
CGActionSendTaskResponse.constructor = CGActionSendTaskResponse;
CommandFactory.register(CGActionSendTaskResponse, { Id: 0 }, false);

CGActionSendTaskResponse.prototype.failure = function () {
};

CGActionSendTaskResponse.prototype.step_1 = function () {
	Kernel.sendTaskResponse(this, this.Id);
	this.terminate();
};

//----------------------------------------------------------------------
// Action load task info
//----------------------------------------------------------------------
function CGActionLoadTaskComments() {
  this.base = CGAction;
  this.base(3);
};

CGActionLoadTaskComments.prototype = new CGAction;
CGActionLoadTaskComments.constructor = CGActionLoadTaskComments;
CommandFactory.register(CGActionLoadTaskComments, { Id: 0 }, false);

CGActionLoadTaskComments.prototype.failure = function () {
};

CGActionLoadTaskComments.prototype.hideDialog = function () {
  if (this.DOMItem.dialog != null)
    this.DOMItem.dialog.hide();
};

CGActionLoadTaskComments.prototype.step_1 = function () {
  if (this.DOMItem.dialog != null)
    this.gotoStep(3);
  else
    Kernel.loadTaskComments(this, this.Id);
};

CGActionLoadTaskComments.prototype.step_2 = function () {
  this.DOMItem.dialog = new CGDialogTaskComments();
  this.DOMItem.dialog.Target = { comments: this.data };
  this.DOMItem.dialog.init();

  Event.observe(this.DOMItem, "mouseout", CGActionLoadTaskComments.prototype.hideDialog.bind(this));

  this.execute();
};

CGActionLoadTaskComments.prototype.step_3 = function () {
  var extItem = Ext.get(this.DOMItem);
  var positionAtTop = (window.innerHeight - extItem.getTop()) < 200;
  var y = positionAtTop ? extItem.getTop() - this.DOMItem.dialog.getHeight() - 20 : extItem.getTop();

  this.DOMItem.dialog.Target.position = { x: extItem.getLeft(), y: y };
  this.DOMItem.dialog.refresh();
  this.DOMItem.dialog.show();

  this.terminate();
};

//----------------------------------------------------------------------
// Show team
//----------------------------------------------------------------------
function CGProcessShowTeam() {
  this.base = CGProcess;
  this.base(4);
  this.ActivateTeam = true;
  this.DOMViewActiveTab = null;
};

CGProcessShowTeam.prototype = new CGProcess;
CGProcessShowTeam.constructor = CGProcessShowTeam;

CGProcessShowTeam.prototype.createViewTeam = function (Team) {
  var IdTab = Desktop.Main.Center.Body.addTab(VIEW_TEAM, {Id: Team.getId(), Background: !this.ActivateTeam});
  return Desktop.createView($(IdTab), Team, null, "default", true);
};

CGProcessShowTeam.prototype.step_1 = function () {

  if (this.ViewTeam == null) {
    var ViewTeam = Desktop.Main.Center.Body.getContainerView(VIEW_TEAM, this.Id);
    if (ViewTeam != null) {
      if (this.ActivateTeam) {
        var Process = new CGProcessActivateTeam();
        Process.Id = this.Id;
        Process.execute();
        this.terminate();
        return;
      }
      else {
        ViewTeam.destroy();
        ViewTeam = null;
      }
    }
    if (ViewTeam == null) {
      if (!this.Team) {
        this.Team = new CGTeam();
        this.Team.setId(this.Id);
      }
      this.ViewTeam = this.createView(this.Team);
    }
  }
  else {
    if ((!this.DOMViewActiveTab) && (this.ViewTeam) && (this.ViewTeam.getDOM) && (this.ViewTeam.getDOM().getActiveTab)) this.DOMViewActiveTab = this.ViewTeam.getDOM().getActiveTab();
  }

  if (!this.Team) Kernel.loadTeam(this);
  else this.gotoStep(3);
};

CGProcessShowTeam.prototype.step_2 = function () {
  this.Team = new CGTeam();
  this.Team.unserialize(this.data);
  TeamsCache.register(this.Team);

  this.ViewTeam.setTarget(this.Team);
  this.ViewTeam.refresh();

  this.execute();
};

CGProcessShowTeam.prototype.step_3 = function () {

  if (this.ActivateTeam) {
    Process = new CGProcessActivateTeam();
    Process.Id = this.Team.getId();
    Process.DOMViewActiveTab = this.DOMViewActiveTab;
    Process.ReturnProcess = this;
    Process.execute();
  }
  else this.execute();
};

CGProcessShowTeam.prototype.step_4 = function () {
  this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Activate team
//----------------------------------------------------------------------
function CGProcessActivateTeam() {
  this.base = CGProcess;
  this.base(1);
};

CGProcessActivateTeam.prototype = new CGProcess;
CGProcessActivateTeam.constructor = CGProcessActivateTeam;

CGProcessActivateTeam.prototype.step_1 = function () {
  var Team = null;
  var ViewTeam, DOMTeam;

  if (!(Team = TeamsCache.get(this.Id))) {
    this.terminateOnFailure();
    return;
  }

  if ((ViewTeam = Desktop.Main.Center.Body.getContainerView(VIEW_TEAM, Team.getId())) == null) {
    this.terminateOnFailure();
    return;
  }

  TeamsCache.setCurrent(this.Id);

  Desktop.Main.Center.Header.refresh();
  Desktop.Footer.refresh();

  Desktop.Main.Center.Body.disableNotifications();
  Desktop.Main.Center.Body.activateTab(VIEW_TEAM, this.Id);
  Desktop.Main.Center.Body.enableNotifications();

  if (this.DOMViewActiveTab) ViewTeam.getDOM().activateTab(this.DOMViewActiveTab);

  ViewTeam.show();
  DOMTeam = ViewTeam.getDOM();
  var ActiveTabId = DOMTeam.getActiveTab();
  if (ActiveTabId) DOMTeam.activateTab(ActiveTabId);
  else DOMTeam.activateDefaultTab();

  EventManager.notify(EventManager.OPEN_TEAM, {"Team": Team, "DOMTeam": ViewTeam.getDOM()});

  this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Close team
//----------------------------------------------------------------------
function CGProcessCloseTeam() {
  this.base = CGProcess;
  this.base(1);
};

CGProcessCloseTeam.prototype = new CGProcess;
CGProcessCloseTeam.constructor = CGProcessCloseTeam;

CGProcessCloseTeam.prototype.step_1 = function () {
  var Team = TeamsCache.get(this.Id);

  if ((ViewTeam = Desktop.Main.Center.Body.getContainerView(VIEW_TEAM, this.Id)) == null) {
    this.terminateOnSuccess();
    return;
  }

  EventManager.notify(EventManager.CLOSE_TEAM, {"Team": Team, "DOMTeam": ViewTeam.getDOM()});

  ViewTeam.destroy();
  Desktop.Main.Center.Body.deleteView(VIEW_TEAM, ViewTeam.getId());
  Desktop.Main.Center.Body.deleteTab(VIEW_TEAM, this.Id);
  TeamsCache.unregister(this.Id);

  this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Show Team
//----------------------------------------------------------------------
function CGActionShowTeam() {
  this.base = CGActionShowBase;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
  this.DOMViewActiveTab = null;
};

CGActionShowTeam.prototype = new CGActionShowBase;
CGActionShowTeam.constructor = CGActionShowTeam;
CommandFactory.register(CGActionShowTeam, { Id: 0 }, true);

CGActionShowTeam.prototype.getDOMElement = function () {
  return Extension.getDOMTeam(this.DOMItem);
};

CGActionShowTeam.prototype.step_1 = function () {
  var ViewTeam;

  Desktop.hideBanner();

  ViewTeam = Desktop.Main.Center.Body.getContainerView(VIEW_TEAM, this.Id);
  if (ViewTeam != null) {
    this.DOMViewActiveTab = ViewTeam.getDOM().getActiveTab();
    var Process = new CGProcessActivateTeam();
    Process.Id = this.Id;
    Process.execute();
    State.LastView = ViewTeam;
    this.terminate();
    return;
  }

  Kernel.loadTeam(this);
};

CGActionShowTeam.prototype.step_2 = function () {
  var Team, ViewTeam;
  var ProcessShowTeam;

  Team = new CGTeam();
  Team.setId(TeamsCache.getCount() + 1);
  Team.unserialize(this.data);
  TeamsCache.register(Team);
  TeamsCache.setCurrent(Team.getId());

  if ((ViewTeam = this.getView(VIEW_TEAM, Team)) == false) {
    this.terminate();
    return;
  }

  State.LastView = ViewTeam;
  State.LastObject.Id = this.Id;
  State.LastObject.Mode = "default";

  ProcessShowTeam = new CGProcessShowTeam();
  ProcessShowTeam.Team = Team;
  ProcessShowTeam.ViewTeam = ViewTeam;
  ProcessShowTeam.DOMViewActiveTab = this.DOMViewActiveTab;
  ProcessShowTeam.execute();

  EventManager.notify(EventManager.OPEN_Team, {"Team": Team, "DOMTeam": ViewTeam.getDOM()});
  this.terminate();
};

//----------------------------------------------------------------------
// Activate Team
//----------------------------------------------------------------------
function CGActionActivateTeam() {
  this.base = CGAction;
  this.base(1);
};

CGActionActivateTeam.prototype = new CGAction;
CGActionActivateTeam.constructor = CGActionActivateTeam;
CommandFactory.register(CGActionActivateTeam, { Id: 0 }, false);

CGActionActivateTeam.prototype.step_1 = function () {
  var Process = new CGProcessActivateTeam();
  Process.Id = this.Id;
  Process.execute();
  this.terminate();
};

//----------------------------------------------------------------------
// Close Team
//----------------------------------------------------------------------
function CGActionCloseTeam() {
  this.base = CGAction;
  this.base(1);
  this.AvailableProcessClass = CGProcessCleanDirty;
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionCloseTeam.prototype = new CGAction;
CGActionCloseTeam.constructor = CGActionCloseTeam;
CommandFactory.register(CGActionCloseTeam, { Id: 0 }, false);

CGActionCloseTeam.prototype.step_1 = function () {
  var Process = new CGProcessCloseTeam();
  Process.Id = this.Id;
  Process.execute();
  this.terminate();
};

//----------------------------------------------------------------------
// Load Account
//----------------------------------------------------------------------
function CGProcessLoadAccount() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessLoadAccount.prototype = new CGProcess;
CGProcessLoadAccount.constructor = CGProcessLoadAccount;

CGProcessLoadAccount.prototype.step_1 = function () {
  Kernel.loadAccount(this, Date.getCurrentTimeZone());
};

CGProcessLoadAccount.prototype.step_2 = function () {
  Account.unserialize(this.data);

  ViewUser.setTarget(Account);
  ViewUser.refresh();

  BehaviourDispatcher.apply(BehaviourViewTaskList, Literals.Views.TaskList);

  this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Save Account
//----------------------------------------------------------------------
function CGProcessSaveAccount() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessSaveAccount.prototype = new CGProcess;
CGProcessSaveAccount.constructor = CGProcessSaveAccount;

CGProcessSaveAccount.prototype.step_1 = function () {

  if (this.Account == null) {
    this.terminateOnFailure();
    return;
  }

  Kernel.saveAccount(this, this.Account);
};

CGProcessSaveAccount.prototype.step_2 = function () {
  this.terminateOnSuccess();
};

//----------------------------------------------------------------------
// Show Federation
//----------------------------------------------------------------------
function CGActionShowFederation() {
  this.base = CGAction;
  this.base(1);
};

CGActionShowFederation.prototype = new CGAction;
CGActionShowFederation.constructor = CGActionShowFederation;
CommandFactory.register(CGActionShowFederation, null, true);

CGActionShowFederation.prototype.step_1 = function () {
  window.location.href = Context.Config.FederationUrl;
};

//----------------------------------------------------------------------
// Show Environment
//----------------------------------------------------------------------
function CGActionShowEnvironment() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowEnvironment.prototype = new CGAction;
CGActionShowEnvironment.constructor = CGActionShowEnvironment;
CommandFactory.register(CGActionShowEnvironment, { Id: 0 }, true);

CGActionShowEnvironment.prototype.step_1 = function () {

  if (this.Id == Account.User.RootNode.id) {
    CommandListener.throwCommand("showhome()");
    this.terminate();
    return;
  }

  Desktop.reportProgress(Lang.Action.ShowEnvironment.Waiting);

  var aPreferences = Account.getUser().getInfo().getPreferences();
  aPreferences["rootNode"] = this.Id;
  Account.getUser().getInfo().setPreferences(aPreferences);

  var Process = new CGProcessSaveAccount();
  Process.Account = Account;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionShowEnvironment.prototype.step_2 = function () {
  window.location.href = Context.Config.Host;
};

//----------------------------------------------------------------------
// Toggle Dashboard
//----------------------------------------------------------------------
function CGActionToggleDashboard() {
  this.base = CGAction;
  this.base(2);
};

CGActionToggleDashboard.prototype = new CGAction;
CGActionToggleDashboard.constructor = CGActionToggleDashboard;
CommandFactory.register(CGActionToggleDashboard, { Id: 0 }, true);

CGActionToggleDashboard.prototype.step_1 = function () {
  Desktop.reportProgress(Lang.Action.ToggleDashboard.Waiting);

  var aPreferences = Account.getUser().getInfo().getPreferences();
  aPreferences["rootDashboard"] = this.Id;
  Account.getUser().getInfo().setPreferences(aPreferences);

  var Process = new CGProcessSaveAccount();
  Process.Account = Account;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionToggleDashboard.prototype.step_2 = function () {
  window.location.href = Context.Config.AnalyticsHost;
};

//----------------------------------------------------------------------
// Load Units
//----------------------------------------------------------------------
function CGActionLoadUnits() {
  this.base = CGAction;
  this.base(2);
};

CGActionLoadUnits.prototype = new CGAction;
CGActionLoadUnits.constructor = CGActionLoadUnits;
CommandFactory.register(CGActionLoadUnits, null, true);

CGActionLoadUnits.prototype.step_1 = function () {
  Kernel.loadUnits(this);
};

CGActionLoadUnits.prototype.step_2 = function () {
  var jsonData = Ext.util.JSON.decode(this.data);

  Account.setUnits(jsonData);
  ViewUser.addUnits(Account.Units);

  this.terminate();
};

//----------------------------------------------------------------------
// Show Unit
//----------------------------------------------------------------------
function CGActionShowUnit() {
  this.base = CGAction;
  this.base(1);
};

CGActionShowUnit.prototype = new CGAction;
CGActionShowUnit.constructor = CGActionShowUnit;
CommandFactory.register(CGActionShowUnit, { Id: 0, Url: 1 }, true);

CGActionShowUnit.prototype.step_1 = function () {

  if (this.Id == Context.Config.BusinessUnit) {
    this.terminate();
    return;
  }

  window.location.href = this.Url;
};

//----------------------------------------------------------------------
// Logout
//----------------------------------------------------------------------
function CGActionLogout() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionLogout.prototype = new CGAction;
CGActionLogout.constructor = CGActionLogout;
CommandFactory.register(CGActionLogout, null, false);

CGActionLogout.prototype.step_1 = function () {
  Kernel.logout(this, Account.getInstanceId());
};

CGActionLogout.prototype.step_2 = function () {
  var sLocation = Context.Config.EnterpriseLoginUrl;
  if (sLocation == "") sLocation = Context.Config.Host;

  State.logout = true;
  this.terminate();

  reload(sLocation);
};

//----------------------------------------------------------------------
// Change role
//----------------------------------------------------------------------
function CGActionChangeRole() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionChangeRole.prototype = new CGAction;
CGActionChangeRole.constructor = CGActionChangeRole;
CommandFactory.register(CGActionChangeRole, { Role: 0 }, false);

CGActionChangeRole.prototype.step_1 = function () {

  if (this.Role == null) {
    Desktop.reportError(Lang.Action.ChangeRole.Failure);
    this.terminate();
    return;
  }

  Kernel.changeRole(this, this.Role);
};

CGActionChangeRole.prototype.step_2 = function () {
  window.location.reload();
};

//----------------------------------------------------------------------
// Action Send Suggestion
//----------------------------------------------------------------------
function CGActionSendSuggestion() {
  this.base = CGAction;
  this.base(3);
  this.sMessage = "";
}

CGActionSendSuggestion.prototype = new CGAction;
CGActionSendSuggestion.constructor = CGActionSendSuggestion;
CommandFactory.register(CGActionSendSuggestion, null, false);

CGActionSendSuggestion.prototype.onFailure = function (sResponse) {
  Desktop.reportError(Lang.Action.SendSuggestion.Failure);
};

CGActionSendSuggestion.prototype.atDialogClick = function (btn, text) {
  this.sMessage = text;

  if (btn == "cancel") {
    this.terminate();
    return;
  }

  if (text == "") {
    Ext.MessageBox.show({title: Lang.Action.SendSuggestion.Label, msg: Lang.Action.SendSuggestion.DescriptionWithEmptyMessage, width: 500, height: 400, buttons: Ext.MessageBox.OKCANCEL, multiline: true, fn: CGActionSendSuggestion.prototype.atDialogClick.bind(this)});
    return false;
  }

  this.execute();
};

CGActionSendSuggestion.prototype.step_1 = function () {
  Ext.MessageBox.show({title: Lang.Action.SendSuggestion.Label, msg: Lang.Action.SendSuggestion.Description, width: 500, height: 400, buttons: Ext.MessageBox.OKCANCEL, multiline: true, fn: CGActionSendSuggestion.prototype.atDialogClick.bind(this)});
};

CGActionSendSuggestion.prototype.step_2 = function () {
  Kernel.sendSuggestion(this, this.sMessage);
};

CGActionSendSuggestion.prototype.step_3 = function () {
  Desktop.reportSuccess(Lang.Action.SendSuggestion.Done);
  this.terminate();
};

//----------------------------------------------------------------------
// Show trash
//----------------------------------------------------------------------
function CGActionShowTrash() {
  this.base = CGAction;
  this.base(2);
  this.aNodesSelected = new Array();
};

CGActionShowTrash.prototype = new CGAction;
CGActionShowTrash.constructor = CGActionShowTrash;
CommandFactory.register(CGActionShowTrash, null, true);

CGActionShowTrash.prototype.step_1 = function () {

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  Kernel.loadSystemTemplate(this, "trash");
};

CGActionShowTrash.prototype.step_2 = function () {
  ViewTrash.setContent(this.data);
  ViewTrash.refresh();
  ViewTrash.show();
  Desktop.Main.Center.Body.activateTrash();
  this.setActiveFurniture(Furniture.TRASH);
};

//----------------------------------------------------------------------
// Render Trash List
//----------------------------------------------------------------------
function CGActionRenderTrashList() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderTrashList.prototype = new CGAction;
CGActionRenderTrashList.constructor = CGActionRenderTrashList;
CommandFactory.register(CGActionRenderTrashList, { IdDOMViewerLayer: 0, IdDOMViewerLayerOptions: 1 }, false);

CGActionRenderTrashList.prototype.atSelectItem = function (bSelected, Sender, Id) {
  if (bSelected) State.addNodeReferenceToTrashSelection(Id, bSelected);
  else State.deleteSelectedNodeReferenceFromTrash(Id);
};

CGActionRenderTrashList.prototype.atSelectItems = function (bSelected, Sender, Items) {
  if (bSelected) {
    State.addNodesReferencesToTrashSelection(Items);
  }
  else {
    State.deleteSelectedNodesReferencesFromTrash();
  }
};

CGActionRenderTrashList.prototype.atBoundItem = function (Sender, Item) {
  var Dummy = Item;
  for (var index in Dummy) {
    if (isFunction(Dummy[index])) continue;
    Item[index + "_short"] = shortValue(Dummy[index]);
  }
};

CGActionRenderTrashList.prototype.destroyViewer = function () {
  if (State.TrashListViewer == null) return;
  State.registerListViewerState("trashlist", State.TrashListViewer.getState());
  State.TrashListViewer.dispose();
  $(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderTrashList.prototype.createViewer = function () {
  var Options;

  this.destroyViewer();

  eval($(this.IdDOMViewerLayerOptions).innerHTML);
  State.TrashListViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
  State.TrashListViewer.setDataSourceUrls(Kernel.getLoadNodesFromTrashLink(), null);
  State.TrashListViewer.setWizardLayer(Literals.ListViewerWizard);
  State.TrashListViewer.onSelectItem = CGActionRenderTrashList.prototype.atSelectItem.bind(this, true);
  State.TrashListViewer.onUnselectItem = CGActionRenderTrashList.prototype.atSelectItem.bind(this, false);
  State.TrashListViewer.onSelectAllItems = CGActionRenderTrashList.prototype.atSelectItems.bind(this, true);
  State.TrashListViewer.onUnselectAllItems = CGActionRenderTrashList.prototype.atSelectItems.bind(this, false);
  State.TrashListViewer.onBoundItem = CGActionRenderTrashList.prototype.atBoundItem.bind(this);
  State.TrashListViewer.setState(State.getListViewerState("trashlist"));
  State.TrashListViewer.render(this.IdDOMViewerLayer);
};

CGActionRenderTrashList.prototype.step_1 = function () {

  if ((this.IdDOMViewerLayer == null) || (this.IdDOMViewerLayerOptions == null)) {
    this.terminate();
    return;
  }

  var Process = new CGProcessLoadHelperListViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderTrashList.prototype.step_2 = function () {
  this.createViewer();
  this.terminate();
};

//----------------------------------------------------------------------
// Empty trash
//----------------------------------------------------------------------
function CGActionEmptyTrash() {
  this.base = CGAction;
  this.base(3);
};

CGActionEmptyTrash.prototype = new CGAction;
CGActionEmptyTrash.constructor = CGActionEmptyTrash;
CommandFactory.register(CGActionEmptyTrash, null, false);

CGActionEmptyTrash.prototype.checkOption = function (ButtonResult) {
  if (ButtonResult == BUTTON_RESULT_YES) {
    this.execute();
  }
};

CGActionEmptyTrash.prototype.enabled = function () {
  return true;
};

CGActionEmptyTrash.prototype.step_1 = function () {
  Ext.MessageBox.confirm(Lang.ViewTrash.DialogEmptyTrash.Title, Lang.ViewTrash.DialogEmptyTrash.Description, CGActionEmptyTrash.prototype.checkOption.bind(this));
};

CGActionEmptyTrash.prototype.step_2 = function (ButtonResult) {
  Kernel.emptyTrash(this);
};

CGActionEmptyTrash.prototype.step_3 = function () {
  var Action = new CGActionShowTrash();
  Action.execute();

  Desktop.reportSuccess(Lang.Action.EmptyTrash.Done);
  this.terminate();
};

//----------------------------------------------------------------------
// Recover node from trash
//----------------------------------------------------------------------
function CGActionRecoverNodeFromTrash() {
  this.base = CGAction;
  this.base(3);
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionRecoverNodeFromTrash.prototype = new CGAction;
CGActionRecoverNodeFromTrash.constructor = CGActionRecoverNodeFromTrash;
CommandFactory.register(CGActionRecoverNodeFromTrash, { IdNode: 0 }, false);

CGActionRecoverNodeFromTrash.prototype.step_1 = function () {
  Ext.MessageBox.confirm(Lang.ViewTrash.DialogRecoverNodeFromTrash.Title, Lang.ViewTrash.DialogRecoverNodeFromTrash.Description, CGActionRecoverNodeFromTrash.prototype.checkOption.bind(this));
};

CGActionRecoverNodeFromTrash.prototype.step_2 = function () {
  Kernel.recoverNodeFromTrash(this, this.IdNode);
};

CGActionRecoverNodeFromTrash.prototype.step_3 = function () {
  var Node = new CGNode();
  Node.setId(this.IdNode);

  State.aMarkedNodesReferences = [this.IdNode];
  State.NodeReferenceMarkType = MarkType.RecoveredFromTrash;

  this.addRefreshTask(RefreshTaskType.RecoveredFromTrash, [Node]);

  Desktop.reportSuccess(Lang.Action.RecoverNodeFromTrash.Done);
  this.terminate();
};

//----------------------------------------------------------------------
// Recover nodes from trash
//----------------------------------------------------------------------
function CGActionRecoverNodesFromTrash() {
  this.base = CGAction;
  this.base(3);
  this.RefreshProcessClass = CGProcessRefreshDOM;
};

CGActionRecoverNodesFromTrash.prototype = new CGAction;
CGActionRecoverNodesFromTrash.constructor = CGActionRecoverNodesFromTrash;
CommandFactory.register(CGActionRecoverNodesFromTrash, null, false);

CGActionRecoverNodesFromTrash.prototype.enabled = function () {
  return (ViewTrash.getSelected().length > 0);
};

CGActionRecoverNodesFromTrash.prototype.step_1 = function () {
  Ext.MessageBox.confirm(Lang.ViewTrash.DialogRecoverNodesFromTrash.Title, Lang.ViewTrash.DialogRecoverNodesFromTrash.Description, CGActionRecoverNodesFromTrash.prototype.checkOption.bind(this));
};

CGActionRecoverNodesFromTrash.prototype.step_2 = function () {
  var aSelectedReferences = State.getSelectedTrashNodesReferences();
  var sSelectedReferences = aSelectedReferences.toString();

  if (sSelectedReferences == "") {
    Desktop.reportWarning(Lang.Action.RecoverNodesFromTrash.NoSelectedReferences);
    this.terminate();
    return;
  }

  Kernel.recoverNodesFromTrash(this, sSelectedReferences);
};

CGActionRecoverNodesFromTrash.prototype.step_3 = function () {
  var aIdNodes = State.getSelectedTrashNodesReferences();
  var aNodes = new Array();

  for (var index in aIdNodes) {
    if (isFunction(aIdNodes[index])) continue;
    var Node = new CGNode();
    Node.setId(aIdNodes[index]);
    aNodes.push(Node);
  }

  State.aMarkedNodesReferences = aIdNodes;
  State.NodeReferenceMarkType = MarkType.RecoveredFromTrash;

  this.addRefreshTask(RefreshTaskType.RecoveredFromTrash, aNodes);

  Desktop.reportSuccess(Lang.Action.RecoverNodesFromTrash.Done);
  this.terminate();
};

//----------------------------------------------------------------------
// Select trash nodes
//----------------------------------------------------------------------
function CGActionSelectTrashNodes() {
  this.base = CGAction;
  this.base(1);
};

CGActionSelectTrashNodes.prototype = new CGAction;
CGActionSelectTrashNodes.constructor = CGActionSelectTrashNodes;
CommandFactory.register(CGActionSelectTrashNodes, { Type: 0 }, false);

CGActionSelectTrashNodes.prototype.step_1 = function () {
  if (this.Type == "all") ViewTrash.selectAll();
  else if (this.Type == "invert") ViewTrash.selectInvert();
  else ViewTrash.selectNone();
  this.terminate();
};

//----------------------------------------------------------------------
// Show dashboard
//----------------------------------------------------------------------
function CGActionShowDashboard() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowDashboard.prototype = new CGAction;
CGActionShowDashboard.constructor = CGActionShowDashboard;
CommandFactory.register(CGActionShowDashboard, { Code: 0, View: 1 }, true);

CGActionShowDashboard.prototype.step_1 = function () {

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  Kernel.loadDashboardTemplate(this, this.Code, this.View);
};

CGActionShowDashboard.prototype.step_2 = function () {

  var process = new CGProcessCloseRightPanel();
  process.execute();

  ViewDashboard.setContent(this.data);
  ViewDashboard.refresh();
  ViewDashboard.show();
  this.setActiveFurniture(Furniture.DASHBOARD, this.Code);
  Desktop.Main.Center.Body.activateDashboard();
};

//----------------------------------------------------------------------
// Show analysisboard
//----------------------------------------------------------------------
function CGActionShowAnalysisboard() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowAnalysisboard.prototype = new CGAction;
CGActionShowAnalysisboard.constructor = CGActionShowAnalysisboard;
CommandFactory.register(CGActionShowAnalysisboard, { Code: 0 }, true);

CGActionShowAnalysisboard.prototype.step_1 = function () {

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  var process = new CGProcessCloseRightPanel();
  process.execute();

  Kernel.loadSystemTemplate(this, "analysisboard", this.Code);
};

CGActionShowAnalysisboard.prototype.step_2 = function () {
  ViewAnalysisboard.setContent(this.data);
  ViewAnalysisboard.refresh();
  ViewAnalysisboard.show();
  Desktop.Main.Center.Body.activateAnalysisboard();
};

CGListViewerFactory = function (url, options, language, imagesPath) {
  this.url = url;
  this.options = options;
  this.language = language;
  this.imagesPath = imagesPath;
};

CGListViewerFactory.prototype.get = function (object) {
  var url = resolveParametrizedUrl(this.url, object);
  var options = clone(this.options);
  var view = new CGListViewer(options, this.language, this.imagesPath);
  //if (Object != null) View.setLabel(Object.label);
  view.setDataSourceUrls(url, null);
  if (this.onBoundItem) view.onBoundItem = this.onBoundItem;
  if (this.onDeleteItem) view.onDeleteItem = this.onDeleteItem;
  if (this.onDeleteItems) view.onDeleteItems = this.onDeleteItems;
  if (this.onBoundOperation) view.onBoundOperation = this.onBoundOperation;
  if (this.onOperationClick) view.onOperationClick = this.onOperationClick;
  return view;
};

var aNavigationViewControllerTemplates = new Array();
aNavigationViewControllerTemplates["es"] = new Array();
aNavigationViewControllerTemplates["es"]["NVC_TEMPLATE"] = "<table height='100%'><tr class='panels'></tr></table>";
aNavigationViewControllerTemplates["es"]["NVC_PANEL_TEMPLATE"] = "<div class='box' id='#{boxId}'></div>";
aNavigationViewControllerTemplates["es"]["NVC_PANEL_TEMPLATE_ARROW"] = "<img style='display:none;' src='#{imagesPath}/s.gif'/>";

CLASS_NVC = "nvc";
CSS_NCV_PANELS = ".panels";
CSS_NCV_PANEL_BOX = ".box";
ID_NCV_PANEL_ARROW = "panel_arrow_::id::";
CSS_NCV_ARROW = "img";

// IMPORTANT: escape and utf8Encode functions are needed by this library

function CGNavigationViewController(sLayer, ViewsFactory, imagesPath) {
  if (sLayer == null) return;

  this.imagesPath = imagesPath;

  this.extLayer = Ext.get(sLayer);
  this.extLayer.dom.innerHTML = aNavigationViewControllerTemplates["es"]["NVC_TEMPLATE"];
  this.extLayer.addClass(CLASS_NVC);

  this.extPanels = this.extLayer.select(CSS_NCV_PANELS).first();
  this.ViewsFactory = ViewsFactory;
  this.aIdViews = new Array();
  this.aViews = new Array();
};

CGNavigationViewController.prototype.getViewPos = function (View) {
  for (var i = 0; i < this.aIdViews.length; i++) {
    if (this.aIdViews[i] == View.id) return i;
  }
  return -1;
};

CGNavigationViewController.prototype.getViewLabel = function (iPos) {
  if (iPos < 0) return "";
  if (!this.aIdViews[iPos]) return "";
  if (!this.aViews[this.aIdViews[iPos]].getLabel) return "";
  return this.aViews[this.aIdViews[iPos]].getLabel();
};

CGNavigationViewController.prototype.pushView = function (View) {
  var id = Ext.id(), idBox = Ext.id();
  var PanelTemplate = new Template(aNavigationViewControllerTemplates["es"]["NVC_PANEL_TEMPLATE"]);
  var PanelArrowTemplate = new Template(aNavigationViewControllerTemplates["es"]["NVC_PANEL_TEMPLATE_ARROW"]);
  var iHeight = this.extLayer.getHeight();

  var DOMPanel = document.createElement("td");
  DOMPanel.id = id;
  DOMPanel.className = "panel depth" + this.aViews.size();
  DOMPanel.innerHTML = PanelTemplate.evaluate({id: id, boxId: idBox, "imagesPath": this.imagesPath});
  this.extPanels.dom.appendChild(DOMPanel);

  var DOMPanelArrow = document.createElement("td");
  DOMPanelArrow.id = "panel_arrow_" + id;
  DOMPanelArrow.className = "panel arrow";
  DOMPanelArrow.innerHTML = PanelArrowTemplate.evaluate({id: id, boxId: idBox, "imagesPath": this.imagesPath});
  this.extPanels.dom.appendChild(DOMPanelArrow);

  var extPanel = Ext.get(id);
  var extPanelBox = extPanel.down(CSS_NCV_PANEL_BOX);

  if (iHeight > 0) extPanelBox.dom.style.height = (iHeight - 40) + "px";
  Ext.get(id).scrollIntoView(this.extLayer);

  View.id = id;
  View.onShowItem = CGNavigationViewController.prototype.atShowItem.bind(this, View, extPanel.dom);
  View.render(extPanelBox.id);

  this.aIdViews.push(View.id);
  this.aViews[View.id] = View;

  if (this.onPushView) this.onPushView(View);
};

CGNavigationViewController.prototype.pushViewForObject = function (Object) {
  if (this.onBeforePushView && !this.onBeforePushView(Object)) return;
  var NewView = this.ViewsFactory.get(Object);
  this.pushView(NewView);
};

CGNavigationViewController.prototype.popView = function (View) {
  var sIdViews = this.aIdViews.join(",");
  var sNewIdViews = "", sViewsToPop = "";
  var iPos = sIdViews.indexOf(View.id);
  var aViewsToPop;

  if (iPos != -1) {
    if (iPos > 0) iPos = iPos - 1;
    sNewIdViews = sIdViews.substring(0, iPos);
    sViewsToPop = sIdViews.substring(iPos != 0 ? iPos + 1 : iPos);
  }

  this.aIdViews = (sNewIdViews.length > 0) ? sNewIdViews.split(",") : new Array();
  aViewsToPop = (sViewsToPop.length > 0) ? sViewsToPop.split(",") : new Array();

  for (var i = 0; i < aViewsToPop.length; i++) {
    var idView = aViewsToPop[i];
    var DOMPanel = $(idView);
    var DOMPanelArrow = $(ID_NCV_PANEL_ARROW.replace("::id::", idView));

    this.aViews[idView].dispose();
    DOMPanel.remove();
    DOMPanelArrow.remove();

    delete this.aViews[idView];
  }

};

CGNavigationViewController.prototype.getFirstView = function () {
  if (this.aIdViews.length <= 0) return null;
  return this.aViews[this.aIdViews[0]];
};

CGNavigationViewController.prototype.getCurrentView = function () {
  var iPos = this.aIdViews.length - 1;
  if (iPos < 0) return null;
  return this.aViews[this.aIdViews[iPos]];
};

CGNavigationViewController.prototype.getParentViewOfCurrentView = function () {
  var iPos = this.aIdViews.length - 2;
  if (iPos < 0) return null;
  return this.aViews[this.aIdViews[iPos]];
};

CGNavigationViewController.prototype.dispose = function () {
  var View = this.aViews[this.aIdViews[0]];
  if (View != null) this.popView(View);
};

CGNavigationViewController.prototype.getCountViews = function () {
  return this.aIdViews.length;
};

//#############################################################################################################

CGNavigationViewController.prototype.atShowItem = function (View, DOMPanel, Sender, Object) {
  var iViewPos = this.getViewPos(View);
  var CurrentView = this.aViews[this.aIdViews[iViewPos]];
  var ViewToPop = this.aViews[this.aIdViews[iViewPos + 1]];
  var IdArrow = ID_NCV_PANEL_ARROW.replace("::id::", DOMPanel.id);
  var extArrow = Ext.get(IdArrow).down(CSS_NCV_ARROW);

  extArrow.dom.style.display = "none";

  if (ViewToPop) this.popView(ViewToPop);

  if (this.onBeforePushView && !this.onBeforePushView(Object)) return;

  if (CurrentView.getActiveItem) {
    var ActiveItem = CurrentView.getActiveItem();
    if (ActiveItem && CurrentView.getDOMItem) {
      var extPanel = Ext.get(DOMPanel);
      var extItem = Ext.get(CurrentView.getDOMItem(ActiveItem.id));
      extArrow.dom.style.display = "block";
      extArrow.setTop(extItem.getTop() - extPanel.getTop() - 4);
    }
  }

  var NewView = this.ViewsFactory.get(Object);
  this.pushView(NewView);
};

//----------------------------------------------------------------------
// show source list
//----------------------------------------------------------------------
function CGActionShowSourceList() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowSourceList.prototype = new CGAction;
CGActionShowSourceList.constructor = CGActionShowSourceList;
CommandFactory.register(CGActionShowSourceList, null, true);

CGActionShowSourceList.prototype.step_1 = function () {

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  Kernel.loadSystemTemplate(this, "sourcelist");
};

CGActionShowSourceList.prototype.step_2 = function () {
  ViewSourceList.setContent(this.data);
  ViewSourceList.refresh();
  ViewSourceList.show();
  Desktop.Main.Center.Body.activateSourceList();
};

//----------------------------------------------------------------------
// render source list
//----------------------------------------------------------------------
function CGActionRenderSourceList() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderSourceList.prototype = new CGAction;
CGActionRenderSourceList.constructor = CGActionRenderSourceList;
CommandFactory.register(CGActionRenderSourceList, { IdDOMViewLayer: 0, IdDOMViewLayerOptions: 1, IdDOMViewLayerTermsOptions: 2 }, false);

CGActionRenderSourceList.prototype.atBeforePushView = function (Object) {
  if (State.SourceListViewController == null) return;

  var SourceViewer = State.SourceListViewController.getFirstView();
  var SourceItem = SourceViewer.getActiveItem();
  var Source = CGSource.createFromListItem(SourceItem);
  var Term = CGTerm.createFromListItem(Object);
  var helper = ViewerSidebar.getHelper(Helper.SOURCE);

  helper.setTarget({Source: Source, Term: Term});
  helper.refresh();

  return Term.Type != CGTerm.TERM;
};

CGActionRenderSourceList.prototype.atPushView = function (View) {
  if (State.SourceListViewController == null) return;

  var SourceViewer = State.SourceListViewController.getFirstView();
  var ParentViewer = State.SourceListViewController.getParentViewOfCurrentView();
  var SourceItem = SourceViewer.getActiveItem();
  var Source = CGSource.createFromListItem(SourceItem);
  var Term = null;
  var helper = ViewerSidebar.getHelper(Helper.SOURCE);

  if (ParentViewer != null && ParentViewer != SourceViewer) {
    var ParentItem = ParentViewer.getActiveItem();
    Term = CGTerm.createFromListItem(ParentItem);
  }

  helper.setTarget({Source: Source, Term: Term});
  helper.refresh();
};

CGActionRenderSourceList.prototype.atBoundItem = function (Sender, Item) {
  if (Item.type != CGTerm.TERM) Item.css = "nav";
  var tags = SerializerData.deserializeSet(Item.tags);
  Item.formattedTags = "";
  if (tags.length == 0) Item.formattedTags = "<span class='notags'>" + Lang.ViewSourceList.NoTags + "</span>";
  else {
    for (var i = 0; i < tags.length; i++)
      Item.formattedTags += "<span>" + tags[i] + "</span>";
  }
};

CGActionRenderSourceList.prototype.destroyViewController = function () {
  State.SourceListViewController = null;
  $(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderSourceList.prototype.createViewController = function () {

  this.destroyViewController();

  var Options, SourceOptions, TermsOptions;

  eval($(this.IdDOMViewLayerOptions).innerHTML);
  SourceOptions = Options;

  eval($(this.IdDOMViewLayerTermsOptions).innerHTML);
  TermsOptions = Options;

  var SourceListViewerFactory = new CGListViewerFactory(Kernel.getLoadSourceListLink(), SourceOptions, Context.Config.Language, Context.Config.ImagesPath);
  var TermsListViewerFactory = new CGListViewerFactory(Kernel.getLoadSourceTermsLink("::idSource::", "::code::", "tree", 1), TermsOptions, Context.Config.Language, Context.Config.ImagesPath);

  SourceListViewerFactory.onBoundItem = this.atBoundItem;
  TermsListViewerFactory.onBoundItem = this.atBoundItem;

  var SourceListViewer = SourceListViewerFactory.get(null);
  //SourceListViewer.setLabel(Lang.ViewerHelperSource.SourceList);
  SourceListViewer.setName("sourceList");

  State.SourceListViewController = new CGNavigationViewController(this.IdDOMViewLayer, TermsListViewerFactory, Context.Config.ImagesPath);
  State.SourceListViewController.pushView(SourceListViewer);
  State.SourceListViewController.onPushView = this.atPushView;
  State.SourceListViewController.onBeforePushView = this.atBeforePushView;
};

CGActionRenderSourceList.prototype.step_1 = function () {

  if ((this.IdDOMViewLayer == null) || (this.IdDOMViewLayerOptions == null) || (this.IdDOMViewLayerTermsOptions == null)) {
    this.terminate();
    return;
  }

  var Process = new CGProcessLoadHelperListViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderSourceList.prototype.step_2 = function () {
  var Process = new CGProcessLoadHelperSourceViewer();
  Process.IdSource = null;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderSourceList.prototype.step_3 = function () {
  this.createViewController();
  this.terminate();
};

//----------------------------------------------------------------------
// refresh source new terms
//----------------------------------------------------------------------
function CGProcessRefreshSourceNewTerms() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessRefreshSourceNewTerms.prototype = new CGProcess;
CGProcessRefreshSourceNewTerms.constructor = CGProcessRefreshSourceNewTerms;

CGProcessRefreshSourceNewTerms.prototype.step_1 = function () {
  Kernel.loadSourceNewTerms(this, this.IdSource);
};

CGProcessRefreshSourceNewTerms.prototype.step_2 = function () {
  var helper = ViewerSidebar.getHelper(Helper.SOURCE);
  var Target = helper.getTarget();
  var JSONData = Ext.util.JSON.decode(this.data);

  Target.NewTermList = JSONData.termList;
  helper.refresh();

  this.terminateOnSuccess();
};

var SerializerData = new Object();

SerializerData.ITEM_SEPARATOR = "#";
SerializerData.ITEM_CODE_SEPARATOR = "=";

SerializerData.deserialize = function (data) {
  var result = new Array();

  if (data == null || data == "") return result;

  var itemsArray = data.split(SerializerData.ITEM_SEPARATOR);
  for (var i = 0; i < itemsArray.length; i++) {
    var itemArray = itemsArray[i].split(SerializerData.ITEM_CODE_SEPARATOR);
    if (itemArray.length == 0)
      continue;
    result[itemArray[0]] = (itemArray.length > 1) ? itemArray[1] : "";
  }

  return result;
};

SerializerData.deserializeSet = function (data) {
  var result = new Array();

  if (data == null || data == "") return result;

  var itemsArray = data.split(SerializerData.ITEM_SEPARATOR);
  for (var i = 0; i < itemsArray.length; i++)
    result.push(itemsArray[i]);

  return result;
};

SerializerData.serialize = function (data) {
  var result = "";

  if (data == null) return "";

  for (var key in data) {
    if (isFunction(data[key])) continue;
    var value = data[key];
    result += key + SerializerData.ITEM_CODE_SEPARATOR + value + SerializerData.ITEM_SEPARATOR;
  }

  if (result.length > 0)
    result = result.substring(0, result.length - 1);

  return result;
};

SerializerData.serializeSet = function (data) {
  var result = "";

  if (data == null) return "";

  for (var key in data) {
    if (isFunction(data[key])) continue;
    result += data[key] + SerializerData.ITEM_SEPARATOR;
  }

  if (result.length > 0)
    result = result.substring(0, result.length - 1);

  return result;
};

function CGSource(Data) {
  if (Data != null) {
    this.Id = Data.id;
    this.Code = Data.code;
    this.Type = Data.type;
	this.Editable = Data.editable;
    this.sLabel = Data.label;
  }
};

CGSource.Type = {
  Glossary: "Glossary",
  Thesaurus: "Thesaurus"
};

CGSource.createFromListItem = function (ListItem) {
  var result = new CGSource();

  if (ListItem == null) return result;

  result.Id = ListItem.idSource;
  result.Code = ListItem.codeSource;
  result.Type = ListItem.typeSource;
  result.Editable = ListItem.isEditableSource;
  result.sLabel = ListItem.label;

  return result;
};

function CGTerm(Data) {
  if (Data != null) {
    this.Id = Data.id;
    this.IdSource = Data.idSource;
    this.CodeSource = Data.codeSource;
    this.TypeSource = Data.typeSource;
    this.CodeParent = Data.parent;
    this.Code = Data.code;
    this.Type = Data.type;
    this.Enable = Data.enable;
    this.IsNew = Data.isNew;
    this.sLabel = Data.label;
    this.aTags = SerializerData.deserializeSet(Data.tags);
  }
};

CGTerm.TERM = "0";
CGTerm.SUPER_TERM = "1";
CGTerm.CATEGORY = "2";

CGTerm.createFromListItem = function (ListItem) {
  var result = new CGTerm();

  if (ListItem == null) return result;

  result.Id = ListItem.id;
  result.IdSource = ListItem.idSource;
  result.CodeSource = ListItem.codeSource;
  result.TypeSource = ListItem.typeSource;
  result.CodeParent = ListItem.parent;
  result.Code = ListItem.code;
  result.Type = ListItem.type;
  result.Enable = ListItem.enable;
  result.IsNew = ListItem.isNew;
  result.sLabel = ListItem.label;
  result.aTags = SerializerData.deserializeSet(ListItem.tags);

  return result;
};

//----------------------------------------------------------------------
// show source
//----------------------------------------------------------------------
function CGActionShowSource() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowSource.prototype = new CGAction;
CGActionShowSource.constructor = CGActionShowSource;
CommandFactory.register(CGActionShowSource, { Id: 0 }, true);

CGActionShowSource.prototype.step_1 = function () {

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  Kernel.loadSource(this, this.Id);
};

CGActionShowSource.prototype.step_2 = function () {
  ViewSource.setContent(this.data);
  ViewSource.refresh();
  ViewSource.show();
  Desktop.Main.Center.Body.activateSource();
};

//----------------------------------------------------------------------
// render source
//----------------------------------------------------------------------
function CGActionRenderSource() {
  this.base = CGAction;
  this.base(3);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderSource.prototype = new CGAction;
CGActionRenderSource.constructor = CGActionRenderSource;
CommandFactory.register(CGActionRenderSource, { Id: 0, Label: 1, IdDOMViewLayer: 2, IdDOMViewLayerTermsOptions: 3 }, false);

CGActionRenderSource.prototype.atBeforePushView = function (Object) {
  if (State.SourceListViewController == null) return;

  var SourceViewer = State.SourceListViewController.getFirstView();
  var SourceItem = SourceViewer.getActiveItem();
  var Source = CGSource.createFromListItem(SourceItem);
  var Term = CGTerm.createFromListItem(Object);
  var helper = ViewerSidebar.getHelper(Helper.SOURCE);

  helper.setTarget({Source: Source, Term: Term});
  helper.refresh();

  return Term.Type != CGTerm.TERM;
};

CGActionRenderSource.prototype.atPushView = function (View) {
  if (State.SourceListViewController == null) return;

  var SourceViewer = State.SourceListViewController.getFirstView();
  var ParentViewer = State.SourceListViewController.getParentViewOfCurrentView();
  var SourceItem = SourceViewer.getActiveItem();
  var Source = CGSource.createFromListItem(SourceItem);
  var Term = null;
  var helper = ViewerSidebar.getHelper(Helper.SOURCE);

  if (ParentViewer != null) {
    var ParentItem = ParentViewer.getActiveItem();
    Term = CGTerm.createFromListItem(ParentItem);
  }

  helper.setTarget({Source: Source, Term: Term});
  helper.refresh();
};

CGActionRenderSource.prototype.atBoundItem = function (Sender, Item) {
  if (Item.type != CGTerm.TERM) Item.css = "nav";
  var tags = SerializerData.deserializeSet(Item.tags);
  Item.formattedTags = "";
  if (tags.length == 0) Item.formattedTags = "<span class='notags'>" + Lang.ViewSourceList.NoTags + "</span>";
  else {
    for (var i = 0; i < tags.length; i++)
      Item.formattedTags += "<span>" + tags[i] + "</span>";
  }
};

CGActionRenderSource.prototype.destroyViewController = function () {
  State.SourceListViewController = null;
  $(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderSource.prototype.createViewController = function () {

  this.destroyViewController();

  var Options, TermsOptions;

  eval($(this.IdDOMViewLayerTermsOptions).innerHTML);
  TermsOptions = Options;

  var TermsListViewerFactory = new CGListViewerFactory(Kernel.getLoadSourceTermsLink(this.Id, "::code::", "tree", 1), TermsOptions, Context.Config.Language, Context.Config.ImagesPath);
  TermsListViewerFactory.onBoundItem = this.atBoundItem;

  var SourceListViewer = TermsListViewerFactory.get({code: ""});
  //SourceListViewer.setLabel(Lang.ViewerHelperSource.TermList);
  SourceListViewer.setName(this.Id);

  State.SourceListViewController = new CGNavigationViewController(this.IdDOMViewLayer, TermsListViewerFactory, Context.Config.ImagesPath);
  State.SourceListViewController.pushView(SourceListViewer);
  State.SourceListViewController.onPushView = this.atPushView;
  State.SourceListViewController.onBeforePushView = this.atBeforePushView;
};

CGActionRenderSource.prototype.step_1 = function () {

  if ((this.IdDOMViewLayer == null) || (this.IdDOMViewLayerTermsOptions == null)) {
    this.terminate();
    return;
  }

  var Process = new CGProcessLoadHelperListViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderSource.prototype.step_2 = function () {
  var Process = new CGProcessLoadHelperSourceViewer();
  Process.IdSource = this.Id;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderSource.prototype.step_3 = function () {
  this.createViewController();
  this.terminate();
};

//----------------------------------------------------------------------
// show add source term
//----------------------------------------------------------------------
function CGActionShowAddSourceTerm() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowAddSourceTerm.prototype = new CGAction;
CGActionShowAddSourceTerm.constructor = CGActionAddSourceTerm;
CommandFactory.register(CGActionShowAddSourceTerm, { Type: 0 }, false);

CGActionShowAddSourceTerm.prototype.step_1 = function () {
  var SourceViewer = State.SourceListViewController.getFirstView();
  var SourceItem = SourceViewer.getActiveItem();
  var Source = CGSource.createFromListItem(SourceItem);

  var Process = new CGProcessLoadHelperSourceViewer();
  Process.IdSource = Source.Id;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionShowAddSourceTerm.prototype.step_2 = function () {
  var SourceViewer = State.SourceListViewController.getFirstView();
  var SourceItem = SourceViewer.getActiveItem();
  var Source = CGSource.createFromListItem(SourceItem);
  var Term = new CGTerm();
  var helper = ViewerSidebar.getHelper(Helper.SOURCE);

  helper.setTarget({Source: Source, Term: Term });
  helper.refresh();
};

//----------------------------------------------------------------------
// add source term
//----------------------------------------------------------------------
function CGActionAddSourceTerm() {
  this.base = CGAction;
  this.base(3);
};

CGActionAddSourceTerm.prototype = new CGAction;
CGActionAddSourceTerm.constructor = CGActionAddSourceTerm;
CommandFactory.register(CGActionAddSourceTerm, { IdSource: 0, Code: 1, Label: 2 }, false);

CGActionAddSourceTerm.prototype.step_1 = function () {
  var ParentViewer = State.SourceListViewController.getParentViewOfCurrentView();
  var IdSource, CodeParent;

  if (ParentViewer == null || ParentViewer.getName() == "sourceList") {
    IdSource = this.IdSource;
    CodeParent = null;
  }
  else {
    var ParentItem = ParentViewer.getActiveItem();
    var Parent = CGTerm.createFromListItem(ParentItem);
    IdSource = Parent.IdSource;
    CodeParent = Parent.Code;
  }

  Kernel.addSourceTerm(this, IdSource, CodeParent, this.Code, this.Label);
};

CGActionAddSourceTerm.prototype.step_2 = function () {
  var Process = new CGProcessRefreshSourceNewTerms();
  Process.IdSource = this.IdSource;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionAddSourceTerm.prototype.step_3 = function () {
  var CurrentViewer = State.SourceListViewController.getCurrentView();
  CurrentViewer.refresh();
  this.terminate();
};

//----------------------------------------------------------------------
// save source term attribute
//----------------------------------------------------------------------
function CGActionSaveSourceTermAttribute() {
  this.base = CGAction;
  this.base(2);
};

CGActionSaveSourceTermAttribute.prototype = new CGAction;
CGActionSaveSourceTermAttribute.constructor = CGActionSaveSourceTermAttribute;
CommandFactory.register(CGActionSaveSourceTermAttribute, { IdSource: 0, Code: 1, Attribute: 2, Value: 3 }, false);

CGActionSaveSourceTermAttribute.prototype.step_1 = function () {
  Kernel.saveSourceTermAttribute(this, this.IdSource, this.Code, this.Attribute, this.Value);
};

CGActionSaveSourceTermAttribute.prototype.step_2 = function () {
  var CurrentViewer = State.SourceListViewController.getCurrentView();
  var Term = CGTerm.createFromListItem(CurrentViewer.getActiveItem());
  var Viewer;

  if (Term.Type == CGTerm.TERM) Viewer = CurrentViewer;
  else Viewer = State.SourceListViewController.getParentViewOfCurrentView();

  if (this.Attribute == "tags") {
    var ViewerActiveItem = Viewer.getActiveItem();
    ViewerActiveItem.tags = this.Value;
    Viewer.updateItem(ViewerActiveItem);
    this.terminate();
    return;
  }

  Viewer.refresh();

  this.terminate();
};

//----------------------------------------------------------------------
// save source term type
//----------------------------------------------------------------------
function CGActionSaveSourceTermType() {
  this.base = CGAction;
  this.base(2);
};

CGActionSaveSourceTermType.prototype = new CGAction;
CGActionSaveSourceTermType.constructor = CGActionSaveSourceTermType;
CommandFactory.register(CGActionSaveSourceTermType, { IdSource: 0, Code: 1, PreviousType: 2, Type: 3 }, false);

CGActionSaveSourceTermType.prototype.step_1 = function () {
  Kernel.saveSourceTermAttribute(this, this.IdSource, this.Code, "type", this.Type);
};

CGActionSaveSourceTermType.prototype.step_2 = function () {
  var Viewer;

  if (this.Type == CGTerm.TERM) {
    if (this.PreviousType == CGTerm.SUPER_TERM || this.PreviousType == CGTerm.CATEGORY) {
      Viewer = State.SourceListViewController.getCurrentView();
      State.SourceListViewController.popView(Viewer);
      Viewer = State.SourceListViewController.getCurrentView();
      Viewer.refresh();
    }
  }
  else {
    if (this.PreviousType == CGTerm.TERM) {
      Viewer = State.SourceListViewController.getCurrentView();
      Viewer.refresh();
    }
    else {
      Viewer = State.SourceListViewController.getParentViewOfCurrentView();
      Viewer.refresh();
    }
  }

  this.terminate();
};

//----------------------------------------------------------------------
// delete source term
//----------------------------------------------------------------------
function CGActionDeleteSourceTerm() {
  this.base = CGAction;
  this.base(3);
};

CGActionDeleteSourceTerm.prototype = new CGAction;
CGActionDeleteSourceTerm.constructor = CGActionDeleteSourceTerm;
CommandFactory.register(CGActionDeleteSourceTerm, { IdSource: 0, Code: 1 }, false);

CGActionDeleteSourceTerm.prototype.step_1 = function () {
  Kernel.deleteSourceTerm(this, this.IdSource, this.Code);
};

CGActionDeleteSourceTerm.prototype.step_2 = function () {
  var Process = new CGProcessRefreshSourceNewTerms();
  Process.IdSource = this.IdSource;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionDeleteSourceTerm.prototype.step_3 = function () {
  var Viewer = State.SourceListViewController.getParentViewOfCurrentView();
  Viewer.refresh();
  this.terminate();
};

//----------------------------------------------------------------------
// check exists source term
//----------------------------------------------------------------------
function CGActionCheckExistsSourceTerm() {
  this.base = CGAction;
  this.base(2);
};

CGActionCheckExistsSourceTerm.prototype = new CGAction;
CGActionCheckExistsSourceTerm.constructor = CGActionCheckExistsSourceTerm;
CommandFactory.register(CGActionCheckExistsSourceTerm, { IdSource: 0, Code: 1 }, false);

CGActionCheckExistsSourceTerm.prototype.step_1 = function () {
  Kernel.existsSourceTerm(this, this.IdSource, this.Code);
};

CGActionCheckExistsSourceTerm.prototype.step_2 = function () {
  var exists = (this.data == "true");
  var helper = ViewerSidebar.getHelper(Helper.SOURCE);
  if (exists) helper.showTermExists();
  this.terminate();
};

//----------------------------------------------------------------------
// publish source terms 
//----------------------------------------------------------------------
function CGActionPublishSourceTerms() {
  this.base = CGAction;
  this.base(3);
};

CGActionPublishSourceTerms.prototype = new CGAction;
CGActionPublishSourceTerms.constructor = CGActionPublishSourceTerms;
CommandFactory.register(CGActionPublishSourceTerms, { IdSource: 0, Terms: 1 }, false);

CGActionPublishSourceTerms.prototype.step_1 = function () {
  Kernel.publishSourceTerms(this, this.IdSource, this.Terms);
};

CGActionPublishSourceTerms.prototype.step_2 = function () {
  var Process = new CGProcessRefreshSourceNewTerms();
  Process.IdSource = this.IdSource;
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionPublishSourceTerms.prototype.step_3 = function () {
  var Viewer = State.SourceListViewController.getFirstView();
  Viewer.refresh();
  this.terminate();
};

//----------------------------------------------------------------------
// show role list
//----------------------------------------------------------------------
function CGActionShowRoleList() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowRoleList.prototype = new CGAction;
CGActionShowRoleList.constructor = CGActionShowRoleList;
CommandFactory.register(CGActionShowRoleList, null, true);

CGActionShowRoleList.prototype.step_1 = function () {

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  Kernel.loadSystemTemplate(this, "rolelist");
};

CGActionShowRoleList.prototype.step_2 = function () {
  ViewRoleList.setContent(this.data);
  ViewRoleList.refresh();
  ViewRoleList.show();
  this.setActiveFurniture(Furniture.ROLES);
  Desktop.Main.Center.Body.activateRoleList();
};

//----------------------------------------------------------------------
// Render Role List
//----------------------------------------------------------------------
function CGActionRenderRoleList() {
  this.base = CGAction;
  this.base(4);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderRoleList.prototype = new CGAction;
CGActionRenderRoleList.constructor = CGActionRenderRoleList;
CommandFactory.register(CGActionRenderRoleList, { IdDOMViewLayer: 0, IdDOMViewDefinitionsLayerOptions: 1, IdDOMViewLayerOptions: 2 }, false);

CGActionRenderRoleList.prototype.getRolesOptions = function () {
  var Options = clone(this.RolesOptions);
  Options.Operations = new Array();
  Options.Templates.NoItems = Lang.ViewerHelperRole.NoHistory;
  return Options;
};

CGActionRenderRoleList.prototype.atBeforePushView = function (Object) {
  if (State.RoleListViewController == null) return;
  if (Object != null) View = Object.view;

  var DefinitionViewer = State.RoleListViewController.getFirstView();
  var DefinitionItem = DefinitionViewer.getActiveItem();
  var Definition = new CGRoleDefinition(DefinitionItem);
  var Role = new CGRole(Object);

  var helper = ViewerSidebar.getHelper(Helper.ROLE);
  if (Object.view == "grouped") {
    helper.setTarget({Definition: Definition, HistoryOptions: this.getRolesOptions(), PartnerList: State.PartnerList, Role: Role, View: "save"});
    helper.refresh();
  }
  else helper.hide();

  return Object.view != "grouped";
};

CGActionRenderRoleList.prototype.atBoundItem = function (Sender, Item) {
  if (Item.view == null || Item.view != "grouped") Item.css = "nav";
  if (Item.beginDate) Item.formattedBeginDate = getFormattedDateTime(parseServerDate(Item.beginDate), Context.Config.Language, false);
  if (Item.expireDate) Item.formattedExpireDate = getFormattedDateTime(parseServerDate(Item.expireDate), Context.Config.Language, false);
  else Item.formattedExpireDate = "";
};

CGActionRenderRoleList.prototype.atOperationClick = function (Sender, name) {
  var DefinitionViewer = State.RoleListViewController.getFirstView();
  var DefinitionItem = DefinitionViewer.getActiveItem();
  var helper = ViewerSidebar.getHelper(Helper.ROLE);
  var Definition = new CGRoleDefinition(DefinitionItem);
  var RoleType = null;

  if (name == "adduser") RoleType = "user";
  else if (name == "addservice") RoleType = "service";
  else if (name == "addfeeder") RoleType = "feeder";

  helper.setTarget({Definition: Definition, HistoryOptions: this.getRolesOptions(), PartnerList: State.PartnerList, Role: null, View: "add", RoleType: RoleType });
  helper.refresh();
};

CGActionRenderRoleList.prototype.atBoundOperation = function (Sender, Operation) {
  var DefinitionViewer = State.RoleListViewController.getFirstView();
  var DefinitionItem = DefinitionViewer.getActiveItem();

  if (Operation.name == "adduser" && !DefinitionItem.enableUsers) Operation.visible = false;
  if (Operation.name == "addservice" && DefinitionItem.PartnerServiceOntologies == null) Operation.visible = false;
  if (Operation.name == "addfeeder" && DefinitionItem.PartnerFeederOntologies == null) Operation.visible = false;
};

CGActionRenderRoleList.prototype.destroyViewController = function () {
  State.RoleListViewController = null;
  $(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderRoleList.prototype.createViewController = function () {

  this.destroyViewController();

  var Options, DefinitionsOptions;

  eval($(this.IdDOMViewDefinitionsLayerOptions).innerHTML);
  DefinitionsOptions = Options;

  eval($(this.IdDOMViewLayerOptions).innerHTML);
  this.RolesOptions = Options;

  var RoleDefinitionListViewerFactory = new CGListViewerFactory(Kernel.getLoadRoleDefinitionListLink(), DefinitionsOptions, Context.Config.Language, Context.Config.ImagesPath);
  var RoleListViewerFactory = new CGListViewerFactory(Kernel.getLoadRoleListLink("::code::", "::view::"), this.RolesOptions, Context.Config.Language, Context.Config.ImagesPath);

  RoleDefinitionListViewerFactory.onBoundItem = this.atBoundItem.bind(this);
  RoleListViewerFactory.onBoundItem = this.atBoundItem.bind(this);
  RoleListViewerFactory.onOperationClick = this.atOperationClick.bind(this);
  RoleListViewerFactory.onBoundOperation = this.atBoundOperation.bind(this);

  var RoleDefinitionListViewer = RoleDefinitionListViewerFactory.get(null);
  //RoleDefinitionListViewer.setLabel(Lang.ViewerHelperRole.DefinitionList);
  RoleDefinitionListViewer.setName("roleDefinitionList");

  State.RoleListViewController = new CGNavigationViewController(this.IdDOMViewLayer, RoleListViewerFactory, Context.Config.ImagesPath);
  State.RoleListViewController.pushView(RoleDefinitionListViewer);
  State.RoleListViewController.onBeforePushView = this.atBeforePushView.bind(this);
};

CGActionRenderRoleList.prototype.step_1 = function () {

  if ((this.IdDOMViewLayer == null) || (this.IdDOMViewDefinitionsLayerOptions == null) || (this.IdDOMViewLayerOptions == null)) {
    this.terminate();
    return;
  }

  var Process = new CGProcessLoadHelperListViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderRoleList.prototype.step_2 = function () {
  var Process = new CGProcessLoadHelperRoleViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderRoleList.prototype.step_3 = function () {
  this.createViewController();
  this.terminate();
};

//----------------------------------------------------------------------
// add role process
//----------------------------------------------------------------------
function CGProcessAddRole() {
  this.base = CGAction;
  this.base(2);
};

CGProcessAddRole.prototype = new CGAction;
CGProcessAddRole.constructor = CGProcessAddRole;

CGProcessAddRole.prototype.step_1 = function () {
  var CurrentViewer = State.RoleListViewController.getFirstView();
  CurrentViewer.onRefresh = window.setTimeout(CGProcessAddRole.prototype.execute.bind(this), 400);
  CurrentViewer.setActiveItem(this.Code);
  CurrentViewer.refresh();
};

CGProcessAddRole.prototype.step_2 = function () {
  var RolesViewer = State.RoleListViewController.getCurrentView();
  RolesViewer.activateItem(this.Role.Id);
  this.terminate();
};

function CGRoleDefinition(Data) {
  this.Code = Data != null ? Data.code : "";
  this.sLabel = Data != null ? Data.label : "";
  this.enableUsers = Data != null ? Data.enableUsers : true;
  this.PartnerServiceOntologies = Data != null ? Data.PartnerServiceOntologies : null;
  this.PartnerFeederOntologies = Data != null ? Data.PartnerFeederOntologies : null;
};

CGRoleDefinition.prototype.getType = function () {
  if (this.enableUsers != null) return "user";
  if (this.PartnerServiceOntologies != null) return "service";
  if (this.PartnerFeederOntologies != null) return "feeder";
  return null;
};

function CGRole(Data) {
  this.Id = Data != null ? Data.id : null;
  this.GroupedId = Data != null ? Data.groupedId : null;
  this.Type = Data != null ? Data.type : "user";
  this.User = new CGUser(Data != null ? Data.user : null);
  this.PartnerId = Data != null ? Data.partnerId : null;
  this.PartnerServiceName = Data != null ? Data.partnerServiceName : null;
  this.Code = Data != null ? Data.code : "";
  this.sLabel = Data != null ? Data.label : "";
  if (Data != null && Data.beginDate) this.dtBeginDate = parseServerDate(Data.beginDate);
  else {
    var date = new Date();
    date.setMonth(date.getMonth() + 1);
    this.dtBeginDate = date;
  }
  this.dtExpireDate = (Data != null && Data.expireDate) ? parseServerDate(Data.expireDate) : null;
  this.expires = Data != null ? Data.expires : null;
  this.expired = Data != null ? Data.expired : null;
  this.began = Data != null ? Data.began : null;
};

CGRole.prototype.clone = function (Role) {
  var date = new Date();
  date.setMonth(date.getMonth() + 1);

  this.Id = Role.Id;
  this.GroupedId = Role.GroupedId;
  this.Type = Role.Type;
  this.User = Role.User;
  this.PartnerId = Role.PartnerId;
  this.PartnerServiceName = Role.PartnerServiceName;
  this.Code = Role.Code;
  this.sLabel = Role.sLabel;
  this.dtBeginDate = date;
  this.dtExpireDate = null;
  this.expires = false;
  this.expired = false;
  this.began = false;
};

//----------------------------------------------------------------------
// show role
//----------------------------------------------------------------------
function CGActionShowRole() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowRole.prototype = new CGAction;
CGActionShowRole.constructor = CGActionShowRole;
CommandFactory.register(CGActionShowRole, { Code: 0 }, true);

CGActionShowRole.prototype.step_1 = function () {

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  Kernel.loadRole(this, this.Code);
};

CGActionShowRole.prototype.step_2 = function () {
  ViewRole.setContent(this.data);
  ViewRole.refresh();
  ViewRole.show();
  this.setActiveFurniture(Furniture.ROLES);
  Desktop.Main.Center.Body.activateRole();
};

//----------------------------------------------------------------------
// add user role
//----------------------------------------------------------------------
function CGActionAddUserRole() {
  this.base = CGAction;
  this.base(4);
};

CGActionAddUserRole.prototype = new CGAction;
CGActionAddUserRole.constructor = CGActionAddUserRole;
CommandFactory.register(CGActionAddUserRole, { Code: 0, UserId: 1, Username: 2, BeginDate: 3, ExpireDate: 4 }, false);

CGActionAddUserRole.prototype.onFailure = function (response) {
  response = response.substring(response.indexOf(":") + 1);
  var message = response;

  if (response.indexOf("ERR_ROLE_ACTIVE") != -1)
    message = Lang.ViewerHelperRole.UserRoleExists;

  Desktop.reportError(message);

  this.terminate();
};

CGActionAddUserRole.prototype.step_1 = function () {
  Kernel.addUserRole(this, this.Code, this.UserId, this.Username, this.BeginDate, this.ExpireDate);
};

CGActionAddUserRole.prototype.step_2 = function () {
  var jsonData = Ext.util.JSON.decode(this.data);
  var Role = new CGRole(jsonData);

  var Process = new CGProcessAddRole();
  Process.InstanceId = Role.User.getId();
  Process.Code = this.Code;
  Process.Role = Role;
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// add service role
//----------------------------------------------------------------------
function CGActionAddServiceRole() {
  this.base = CGAction;
  this.base(2);
};

CGActionAddServiceRole.prototype = new CGAction;
CGActionAddServiceRole.constructor = CGActionAddServiceRole;
CommandFactory.register(CGActionAddServiceRole, { Code: 0, PartnerId: 1, PartnerServiceName: 2, BeginDate: 3, ExpireDate: 4 }, false);

CGActionAddServiceRole.prototype.onFailure = function (response) {
  response = response.substring(response.indexOf(":") + 1);
  var message = response;

  if (response.indexOf("ERR_ROLE_ACTIVE") != -1)
    message = Lang.ViewerHelperRole.ServiceRoleExists;

  Desktop.reportError(message);

  this.terminate();
};

CGActionAddServiceRole.prototype.step_1 = function () {
  Kernel.addServiceRole(this, this.Code, this.PartnerId, this.PartnerServiceName, this.BeginDate, this.ExpireDate);
};

CGActionAddServiceRole.prototype.step_2 = function () {
  var jsonData = Ext.util.JSON.decode(this.data);
  var Role = new CGRole(jsonData);

  var Process = new CGProcessAddRole();
  Process.InstanceId = generateIdForKey(Role.PartnerId + Role.PartnerServiceName);
  Process.Code = this.Code;
  Process.Role = Role;
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// add feeder role
//----------------------------------------------------------------------
function CGActionAddFeederRole() {
  this.base = CGAction;
  this.base(2);
};

CGActionAddFeederRole.prototype = new CGAction;
CGActionAddFeederRole.constructor = CGActionAddFeederRole;
CommandFactory.register(CGActionAddFeederRole, { Code: 0, PartnerId: 1, PartnerServiceName: 2, BeginDate: 3, ExpireDate: 4 }, false);

CGActionAddFeederRole.prototype.onFailure = function (response) {
  response = response.substring(response.indexOf(":") + 1);
  var message = response;

  if (response.indexOf("ERR_ROLE_ACTIVE") != -1)
    message = Lang.ViewerHelperRole.FeederRoleExists;

  Desktop.reportError(message);

  this.terminate();
};

CGActionAddFeederRole.prototype.step_1 = function () {
  Kernel.addFeederRole(this, this.Code, this.PartnerId, this.PartnerServiceName, this.BeginDate, this.ExpireDate);
};

CGActionAddFeederRole.prototype.step_2 = function () {
  var jsonData = Ext.util.JSON.decode(this.data);
  var Role = new CGRole(jsonData);

  var Process = new CGProcessAddRole();
  Process.InstanceId = generateIdForKey(Role.PartnerId + Role.PartnerServiceName);
  Process.Code = this.Code;
  Process.Role = Role;
  Process.execute();

  this.terminate();
};

//----------------------------------------------------------------------
// save user role
//----------------------------------------------------------------------
function CGActionSaveUserRole() {
  this.base = CGAction;
  this.base(2);
};

CGActionSaveUserRole.prototype = new CGAction;
CGActionSaveUserRole.constructor = CGActionSaveUserRole;
CommandFactory.register(CGActionSaveUserRole, { Id: 0, UserId: 1, BeginDate: 2, ExpireDate: 3 }, false);

CGActionSaveUserRole.prototype.step_1 = function () {
  Kernel.saveUserRole(this, this.Id, this.UserId, this.BeginDate, this.ExpireDate);
};

CGActionSaveUserRole.prototype.step_2 = function () {
  var CurrentViewer = State.RoleListViewController.getCurrentView();
  CurrentViewer.refresh();
  this.terminate();
};

//----------------------------------------------------------------------
// save service role
//----------------------------------------------------------------------
function CGActionSaveServiceRole() {
  this.base = CGAction;
  this.base(2);
};

CGActionSaveServiceRole.prototype = new CGAction;
CGActionSaveServiceRole.constructor = CGActionSaveServiceRole;
CommandFactory.register(CGActionSaveServiceRole, { Id: 0, PartnerId: 1, PartnerServiceName: 2, BeginDate: 3, ExpireDate: 4 }, false);

CGActionSaveServiceRole.prototype.step_1 = function () {
  Kernel.saveServiceRole(this, this.Id, this.PartnerId, this.PartnerServiceName, this.BeginDate, this.ExpireDate);
};

CGActionSaveServiceRole.prototype.step_2 = function () {
  var CurrentViewer = State.RoleListViewController.getCurrentView();
  CurrentViewer.refresh();
  this.terminate();
};

//----------------------------------------------------------------------
// save feeder role
//----------------------------------------------------------------------
function CGActionSaveFeederRole() {
  this.base = CGAction;
  this.base(2);
};

CGActionSaveFeederRole.prototype = new CGAction;
CGActionSaveFeederRole.constructor = CGActionSaveFeederRole;
CommandFactory.register(CGActionSaveFeederRole, { Id: 0, PartnerId: 1, PartnerServiceName: 2, BeginDate: 3, ExpireDate: 4 }, false);

CGActionSaveFeederRole.prototype.step_1 = function () {
  Kernel.saveFeederRole(this, this.Id, this.PartnerId, this.PartnerServiceName, this.BeginDate, this.ExpireDate);
};

CGActionSaveFeederRole.prototype.step_2 = function () {
  var CurrentViewer = State.RoleListViewController.getCurrentView();
  CurrentViewer.refresh();
  this.terminate();
};

ViewUser = new Object;

ViewUser.sLayerName = null;
ViewUser.User = null;
ViewUser.Units = null;

ViewUser.init = function (sLayerName) {
  ViewUser.sLayerName = sLayerName;

  var html = AppTemplate.ViewUser;
  html = translate(html, Lang.ViewUser);

  this.unitItemTemplate = new Ext.Template(AppTemplate.ViewUserUnitItem);
  this.unitItemTemplate.compile();

  $(ViewUser.sLayerName).innerHTML = html;

  this.extUsername = Ext.get("Username");
  this.extUsernamePanel = Ext.get("UsernamePanel");
  this.extUnitList = this.extUsernamePanel.select("ul.units").first();
  Event.observe(this.extUsername.dom, "click", ViewUser.atUsernameClick.bind(this));
};

ViewUser.addUnits = function (Units) {
  this.Units = Units;
  this.extUnitList.dom.innerHTML = "";
  for (var i = 0; i < this.Units.length; i++) {
    var unit = this.Units[i];
    this.addUnit(unit);
  }
};

ViewUser.addUnit = function (unit) {
  unit.fullLabel = unit.label + (unit.active ? " " + Lang.ViewUser.Current : "");
  unit.anchorTitle = unit.active ? unit.label : Lang.ViewUser.GotoUnit + " " + unit.label;
  unit.disabledLabel = unit.disabled ? "disabled" : "";
  unit.command = unit.disabled ? "javascript:void(null)" : "showunit(" + unit.id + "," + unit.url + ")";
  element = this.unitItemTemplate.append(this.extUnitList, unit, true);
  CommandListener.capture(element);
};

ViewUser.setTarget = function (account) {
  this.User = account.getUser();
  this.Units = account.getUnits();
  CommandListener.capture($(ViewUser.sLayerName));
};

ViewUser.show = function () {
  if (!$(ViewUser.sLayerName)) return;
  $(ViewUser.sLayerName).show();
};

ViewUser.hide = function () {
  if (!$(ViewUser.sLayerName)) return;
  $(ViewUser.sLayerName).hide();
};

ViewUser.refresh = function () {
  if (!ViewUser.User) return;

  $("UsernameLabel").innerHTML = ViewUser.User.getInfo().getFullname();
};

ViewUser.atUsernameClick = function (EventLaunched) {
  if ($(this.extUsernamePanel.dom).hasClassName(CLASS_ACTIVE))
    ViewUser.hideUsernamePanel();
  else
    ViewUser.showUsernamePanel();

  if (this.Units == null)
    CommandListener.throwCommand("loadunits()");

  Event.stop(EventLaunched);
};

ViewUser.showUsernamePanel = function () {
  $(this.extUsernamePanel.dom).addClassName(CLASS_ACTIVE);
  Ext.get(document.body).on("click", ViewUser.hideUsernamePanel, ViewUser);
};

ViewUser.hideUsernamePanel = function () {
  $(this.extUsernamePanel.dom).removeClassName(CLASS_ACTIVE);
  Ext.get(document.body).un("click", ViewUser.hideUsernamePanel, ViewUser);
};

function CGActionNewNotification() {
  this.base = CGAction;
  this.base(1);
};

CGActionNewNotification.prototype = new CGAction;
CGActionNewNotification.constructor = CGActionNewNotification;
CommandFactory.register(CGActionNewNotification, null, true);

CGActionNewNotification.prototype.step_1 = function () {
  Account.addNotification(this.notification);
  this.refreshFurnitureSet(true);
};

//----------------------------------------------------------------------
// show notification list
//----------------------------------------------------------------------
function CGActionShowNotificationList() {
  this.base = CGAction;
  this.base(2);
};

CGActionShowNotificationList.prototype = new CGAction;
CGActionShowNotificationList.constructor = CGActionShowNotificationList;
CommandFactory.register(CGActionShowNotificationList, null, true);

CGActionShowNotificationList.prototype.step_1 = function () {
  CommandListener.throwCommand("notificationsreadall()");

  Desktop.hideBanner();
  State.isShowingPrototype = false;

  Kernel.loadSystemTemplate(this, "notificationlist");
};

CGActionShowNotificationList.prototype.step_2 = function () {
  ViewNotificationList.setContent(this.data);
  ViewNotificationList.refresh();
  ViewNotificationList.show();
  Desktop.Main.Center.Body.activateNotificationList();
};

//----------------------------------------------------------------------
// render notification list
//----------------------------------------------------------------------
function CGActionRenderNotificationList() {
  this.base = CGAction;
  this.base(2);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionRenderNotificationList.prototype = new CGAction;
CGActionRenderNotificationList.constructor = CGActionRenderNotificationList;
CommandFactory.register(CGActionRenderNotificationList, { IdDOMViewerLayer: 0, IdDOMViewerLayerOptions: 1 }, false);

CGActionRenderNotificationList.prototype.atShowItem = function (Sender, Item) {
  CommandListener.dispatchCommand("shownotification(" + Item.id + "," + Item.target + ")");
};

CGActionRenderNotificationList.prototype.atBoundItem = function (Sender, Item) {
  var Dummy = Item;
  for (var index in Dummy) {
    if (isFunction(Dummy[index])) continue;
    Item[index + "_short"] = shortValue(Dummy[index]);
  }
  Item.display = (Item.icon && Item.icon != EMPTY) ? "block" : "none";
  Item.unread = Item.read ? EMPTY : "unread";
  Item.createDate = getFormattedDateTime(parseServerDate(Item.createDate), Context.Config.Language, false);
};

CGActionRenderNotificationList.prototype.destroyViewer = function () {
  if (State.NotificationListViewer == null) return;
  State.registerListViewerState("notificationlist", State.NotificationListViewer.getState());
  State.NotificationListViewer.dispose();
  $(Literals.ListViewerWizard).innerHTML = "";
};

CGActionRenderNotificationList.prototype.createViewer = function () {
  var Options;

  this.destroyViewer();

  eval($(this.IdDOMViewerLayerOptions).innerHTML);
  State.NotificationListViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
  State.NotificationListViewer.setDataSourceUrls(Kernel.getLoadNotificationsLink(), null);
  State.NotificationListViewer.setWizardLayer(Literals.ListViewerWizard);
  State.NotificationListViewer.onShowItem = CGActionRenderNotificationList.prototype.atShowItem.bind(this);
  State.NotificationListViewer.onBoundItem = CGActionRenderNotificationList.prototype.atBoundItem.bind(this);
  State.NotificationListViewer.setState(State.getListViewerState("notificationlist"));
  State.NotificationListViewer.render(this.IdDOMViewerLayer);
};

CGActionRenderNotificationList.prototype.step_1 = function () {

  if ((this.IdDOMViewerLayer == null) || (this.IdDOMViewerLayerOptions == null)) {
    this.terminate();
    return;
  }

  var Process = new CGProcessLoadHelperListViewer();
  Process.ReturnProcess = this;
  Process.execute();
};

CGActionRenderNotificationList.prototype.step_2 = function () {
  this.createViewer();
  this.terminate();
};


//----------------------------------------------------------------------
// Show notification
//----------------------------------------------------------------------
function CGActionShowNotification() {
  this.base = CGAction;
  this.base(1);
  this.AvailableProcessClass = CGProcessCleanDirty;
};

CGActionShowNotification.prototype = new CGAction;
CGActionShowNotification.constructor = CGActionShowNotification;
CommandFactory.register(CGActionShowNotification, { Id: 0, Target: 1 }, true);

CGActionShowNotification.prototype.step_1 = function () {

  if (this.Target && this.Target != EMPTY)
    CommandListener.dispatchCommand(getMonetLinkAction(this.Target));

  var Action = new CGActionNotificationsReadAll();
  Action.execute();
};

//----------------------------------------------------------------------
// notifications read
//----------------------------------------------------------------------
function CGActionNotificationsRead() {
  this.base = CGAction;
  this.base(2);
};

CGActionNotificationsRead.prototype = new CGAction;
CGActionNotificationsRead.constructor = CGActionNotificationsRead;
CommandFactory.register(CGActionNotificationsRead, { Ids: 0, Mode: 1 }, false);

CGActionNotificationsRead.prototype.step_1 = function () {
  if (!this.Ids) return;
  Kernel.notificationsRead(this.Ids.replace(/#/g, ","));
  Kernel.loadNotifications(this, 0, 6);
};

CGActionNotificationsRead.prototype.step_2 = function () {
  var jsonData = Ext.util.JSON.decode(this.data);
  Account.Notifications = jsonData;
  this.refreshFurnitureSet(false);
  this.terminate();
};
//----------------------------------------------------------------------
// notifications read all
//----------------------------------------------------------------------
function CGActionNotificationsReadAll() {
  this.base = CGAction;
  this.base(2);
};

CGActionNotificationsReadAll.prototype = new CGAction;
CGActionNotificationsReadAll.constructor = CGActionNotificationsReadAll;
CommandFactory.register(CGActionNotificationsReadAll, null, false);

CGActionNotificationsReadAll.prototype.step_1 = function () {
  Kernel.notificationsReadAll();
  Kernel.loadNotifications(this, 0, 6);
};

CGActionNotificationsReadAll.prototype.step_2 = function () {
  var jsonData = Ext.util.JSON.decode(this.data);
  Account.Notifications = jsonData;
  this.refreshFurnitureSet(false);
  this.terminate();
};

CommandListener = new Object;
CommandListener.onUnload = null;
CommandListener.onUnload = null;

CommandListener.start = function (Dispatcher) {
  this.Dispatcher = Dispatcher;
  Event.observe(document.body, 'keyup', CommandListener.atCommandKeyUp.bind(CommandListener));
  Event.observe(window, 'beforeunload', CommandListener.atBeforeUnload.bind(CommandListener));
  Event.observe(window, 'unload', CommandListener.atUnload.bind(CommandListener));
};

CommandListener.stop = function () {
  this.Dispatcher = null;
};

CommandListener.capture = function (DOMElement) {
  if (!this.Dispatcher) return;

  var extElement = Ext.get(DOMElement);
  if (!extElement) return;

  if (extElement.hasClass("command")) Event.observe(extElement.dom, 'click', CommandListener.atCommandClick.bind(CommandListener, extElement.dom));

  var extCommandList = extElement.select(".command");
  extCommandList.each(function (extCommand) {
    DOMCommand = extCommand.dom;
    Event.observe(DOMCommand, 'click', CommandListener.atCommandClick.bind(CommandListener, DOMCommand));
  });

  extCommandList = extElement.select(".changecommand");
  extCommandList.each(function (extCommand) {
    DOMCommand = extCommand.dom;
    Event.observe(DOMCommand, 'change', CommandListener.atCommandChange.bind(CommandListener, DOMCommand));
  });

  extCommandList = extElement.select(".hover");
  extCommandList.each(function (extCommand) {
    DOMCommand = extCommand.dom;
    Event.observe(DOMCommand, 'mouseover', CommandListener.atCommandHover.bind(CommandListener, DOMCommand));
  });

};

CommandListener.throwCommand = function (sCommand) {
  this.Dispatcher.execute(sCommand, null);
};

CommandListener.dispatchCommand = function (sCommand) {
  this.Dispatcher.dispatch(sCommand, null);
};

CommandListener.getCommand = function (sCommand) {
  var Expression = new RegExp("\\([^\\)]*\\)");
  var aResult = Expression.exec(sCommand);

  if (aResult != null && aResult.length > 0) {
    sCommand = sCommand.replace(aResult[0], "#command#");
  }

  sCommand = sCommand.substr(sCommand.lastIndexOf("/") + 1);
  if (aResult != null && aResult.length > 0) sCommand = sCommand.replace("#command#", aResult[0]);

  return sCommand;
};

CommandListener.atCommandKeyUp = function (EventLaunched) {
  if (EventLaunched.keyCode != 13) return false;

  var extForm = Ext.get(EventLaunched.target);
  if (!extForm) return false;

  var extForm = extForm.up("form");
  if (!extForm) return false;

  DOMForm = extForm.dom;

  var sCommand = DOMForm.action;
  if (sCommand != null) this.Dispatcher.dispatch(sCommand, DOMForm);
  if (EventLaunched) Event.stop(EventLaunched);

  return false;
};

CommandListener.atBeforeUnload = function (EventLaunched) {
  if (CommandListener.onUnload) {
    var sResult = CommandListener.onUnload();
    if ((sResult != "") && (sResult != null)) {
      if (typeof EventLaunched == 'undefined') {
        EventLaunched = window.event;
      }
      if (EventLaunched) {
        EventLaunched.returnValue = sResult;
      }
      return sResult;
    }
  }
};

CommandListener.atUnload = function (EventLaunched) {
  if (CommandListener.onUnload) {
    CommandListener.onUnload();
  }
};

CommandListener.atCommandClick = function (DOMItem, EventLaunched) {
  CommandListener.dispatchAnchorCommand(DOMItem);
  if (EventLaunched) Event.stop(EventLaunched);
  return false;
};

CommandListener.atCommandChange = function (DOMItem, EventLaunched) {
  var sCommand = null;

  if (DOMItem.href) sCommand = DOMItem.href;
  else if (DOMItem.name) sCommand = DOMItem.name;
  else if (DOMItem.value) sCommand = DOMItem.value;

  if (sCommand != null) this.Dispatcher.dispatch(sCommand, DOMItem);
  if (EventLaunched) Event.stop(EventLaunched);

  return false;
};

CommandListener.atCommandHover = function (DOMItem) {
  CommandListener.dispatchAnchorCommand(DOMItem);
};

CommandListener.dispatchAnchorCommand = function(DOMItem) {
  var sCommand = null;

  if (DOMItem.href) sCommand = DOMItem.href;
  else if (DOMItem.hasClassName("button")) sCommand = DOMItem.name;
  else sCommand = DOMItem.value;

  sCommand = CommandListener.getCommand(sCommand);
  if (sCommand == null)
    return;

  this.Dispatcher.dispatch(sCommand, DOMItem);
};

function CGBehaviour(Config) {
  this.eLayer = null;
  this.CurrentObject = null;
  this.iTimeLeft = 500;
  if (Config) {
    this.sClassName = Config.cls;
  }
};




CGBehaviour.prototype.destroyLayer = function () {
  if (this.eLayer) this.eLayer.remove();
};

CGBehaviour.prototype.initLayer = function () {

  this.destroyLayer();
  this.eLayer = new Ext.Layer({shim: true, constrain: true, shadowOffset: 4});
  this.eLayer.activated = false;
  this.eLayer.addClass(this.sClassName);

  Event.observe(this.eLayer.dom, 'mouseover', CGBehaviour.prototype.activateContextualPanel.bind(this));
  Event.observe(this.eLayer.dom, 'mouseout', CGBehaviour.prototype.deactivateContextualPanel.bind(this));

  return true;
};

CGBehaviour.prototype.addCommandObservers = function () {
  if (!this.eLayer) return;
  aCommands = this.eLayer.select(".command");
  aCommands.each(function (Command) {
    Event.observe(Command.dom, "click", CGBehaviour.prototype.atCommandClick.bind(this));
  }, this);
};

CGBehaviour.prototype.atCommandClick = function () {
  this.eLayer.hide();
};

CGBehaviour.prototype.locateLayer = function (eContextualPanel, extObject) {
  if (eContextualPanel.hasClass(Literals.FloatLayer.LocationTop)) this.eLayer.setXY([extObject.getLeft(), extObject.getTop() - extObject.getHeight()]);
  else if (eContextualPanel.hasClass(Literals.FloatLayer.LocationRight)) this.eLayer.setXY([extObject.getRight() + 5, extObject.getTop() - 1]);
  else if (eContextualPanel.hasClass(Literals.FloatLayer.LocationBottom)) this.eLayer.setXY([extObject.getLeft(), extObject.getTop() + extObject.getHeight()]);
  else if (eContextualPanel.hasClass(Literals.FloatLayer.LocationLeft)) this.eLayer.setXY([extObject.getLeft() - this.eLayer.getWidth() - 5, extObject.getTop() - 1]);

  return true;
};

CGBehaviour.prototype.showDelayedContextualPanel = function (Object, EventSent) {
  if (this.P) {
    window.setTimeout(this.showDelayedContextualPanel.bind(this, Object, EventSent), 10);
    return;
  }

  this.P = true;
  if (this.idTimeoutHide) window.clearTimeout(this.idTimeoutHide);
  this.idTimeoutHide = null;

  if (this.idTimeoutShow) window.clearTimeout(this.idTimeoutShow);
  this.idTimeoutShow = Object.idTimeoutShow = window.setTimeout(this.showContextualPanel.bind(this, Object, EventSent), this.iTimeLeft);
  this.LastObject = Object;
  this.P = false;
};

CGBehaviour.prototype.showContextualPanel = function (Object, EventSent) {
  this.idTimeoutShow = Object.idTimeoutShow = null;

  if (!(extObject = Ext.get(Object))) return;
  if (!(extParent = Ext.get(Object.parentNode))) return;
  if (!(eContextualPanel = $(extParent).select(".contextual").first())) return;

  this.eLayer.update(eContextualPanel.dom.innerHTML);
  CommandListener.capture(this.eLayer.dom);

  if (eContextualPanel.hasClass(Literals.FloatLayer.LocationCursor)) {
    this.eLayer.setXY([extObject.getX() + 35, extObject.getTop() + extObject.getHeight() + 10]);
  }
  else {
    this.locateLayer(eContextualPanel, extObject);
  }

//  if (this.idTimeoutHide) window.clearTimeout(this.idTimeoutHide);
//  this.idTimeoutHide = window.setTimeout(this.hideContextualPanel.bind(this), 1500);

  this.eLayer.show();
  this.addCommandObservers();
  this.CurrentObject = Object;
};

CGBehaviour.prototype.hideDelayedContextualPanel = function () {
  if (this.P) {
    window.setTimeout(this.hideDelayedContextualPanel.bind(this), 10);
    return;
  }

  this.P = true;

  if (this.eLayer.isVisible()) {
    if (this.idTimeoutHide) window.clearTimeout(this.idTimeoutHide);
    this.idTimeoutHide = window.setTimeout(this.hideContextualPanel.bind(this), this.iTimeLeft);
  }

  if (this.LastObject && this.LastObject.idTimeoutShow) {
    window.clearTimeout(this.LastObject.idTimeoutShow);
    if (this.idTimeoutShow == this.LastObject.idTimeoutShow) this.idTimeoutShow = null;
    this.LastObject.idTimeoutShow = null;
    this.LastObject = null;
  }

  this.P = false;
};

CGBehaviour.prototype.hideContextualPanel = function () {
  if (!this.eLayer) return;
  if (this.eLayer.activated) return;
  if (this.idTimeoutShow) window.clearTimeout(this.idTimeoutShow);
  this.idTimeoutShow = null;
  this.idTimeoutHide = null;
  this.eLayer.hide();
  return false;
};

CGBehaviour.prototype.activateContextualPanel = function (Sent) {
  if (!this.eLayer) return;
  if (this.eLayer.activated) return;

  if (this.P) {
    window.setTimeout(this.activateContextualPanel.bind(this, Sent), 5);
    return;
  }

  this.P = true;
  this.eLayer.activated = true;
  if (this.idTimeoutHide) {
    window.clearTimeout(this.idTimeoutHide);
    this.idTimeoutHide = null;
  }
  this.LastObject = null;
  this.P = false;
};

CGBehaviour.prototype.deactivateContextualPanel = function (Sent) {
  if (!this.eLayer) return;
  if (!this.eLayer.activated) return;

  if (this.P) {
    window.setTimeout(this.activateContextualPanel.bind(this, Sent), 5);
    return;
  }

  this.P = true;
  this.eLayer.activated = false;
  this.LastObject = null;
  this.P = false;
  this.hideDelayedContextualPanel();
};

function CGBehaviourViewNode(Config) {
  this.base = CGBehaviour;
  this.base(Config);
};

CGBehaviourViewNode.prototype = new CGBehaviour;

CGBehaviourViewNode.prototype.init = function (extObject) {

  this.initLayer();

  var aTitles = extObject.select("a.title");
  aTitles.each(function (extTitle) {
    this.addObservers(extTitle);
  }, this);

};

CGBehaviourViewNode.prototype.addObservers = function (extObject) {
  eObject = extObject.dom;
  Event.observe(eObject, 'mouseover', CGBehaviourViewNode.prototype.showDelayedContextualPanel.bind(this, eObject));
  Event.observe(eObject, 'mouseout', CGBehaviourViewNode.prototype.hideDelayedContextualPanel.bind(this, eObject));
  Event.observe(eObject, 'click', CGBehaviourViewNode.prototype.hideContextualPanel.bind(this, eObject));
};

BehaviourViewNode = new CGBehaviourViewNode({cls: "nodefloatinglayer"});

function CGBehaviourViewTaskList(Config) {
  this.base = CGBehaviour;
  this.base(Config);
  this.iTimeLeft = 25;
};

CGBehaviourViewTaskList.prototype = new CGBehaviour;

CGBehaviourViewTaskList.prototype.init = function (extObject) {

  this.initLayer();

  var aTasks = extObject.select(".task a");
  aTasks.each(function (extTask) {
    Task = extTask.dom;
    Event.observe(Task, 'mouseover', CGBehaviourViewTaskList.prototype.showDelayedContextualPanel.bind(this, Task));
    Event.observe(Task, 'mouseout', CGBehaviourViewTaskList.prototype.hideDelayedContextualPanel.bind(this, Task));
  }, this);

};

BehaviourViewTaskList = new CGBehaviourViewTaskList({cls: "taskfloatinglayer"});

function CGBehaviourViewTask(Config) {
  this.base = CGBehaviour;
  this.base(Config);
};

CGBehaviourViewTask.prototype = new CGBehaviour;

CGBehaviourViewTask.prototype.init = function (extObject) {
  this.initLayer();
  var aTitles = extObject.select("a.title");
  aTitles.each(function (extTitle) {
    this.addObservers(extTitle);
  }, this);
};

CGBehaviourViewTask.prototype.addObservers = function (extObject) {
  eObject = extObject.dom;
  Event.observe(eObject, 'mouseover', CGBehaviourViewTask.prototype.showDelayedContextualPanel.bind(this, eObject));
  Event.observe(eObject, 'mouseout', CGBehaviourViewTask.prototype.hideDelayedContextualPanel.bind(this, eObject));
  Event.observe(eObject, 'click', CGBehaviourViewTask.prototype.hideContextualPanel.bind(this, eObject));
};

BehaviourViewTask = new CGBehaviourViewTask({cls: "taskfloatinglayer"});

function CGBehaviourViewTrash(Config) {
  this.base = CGBehaviour;
  this.base(Config);
  this.iTimeLeft = 25;
};

CGBehaviourViewTrash.prototype = new CGBehaviour;

CGBehaviourViewTrash.prototype.init = function (extObject) {

  this.initLayer();

  var aTrashNodes = extObject.select(".trashnode a");
  aTrashNodes.each(function (extTrashNode) {
    TrashNode = extTrashNode.dom;
    Event.observe(TrashNode, 'mouseover', CGBehaviourViewTrash.prototype.showDelayedContextualPanel.bind(this, TrashNode));
    Event.observe(TrashNode, 'mouseout', CGBehaviourViewTrash.prototype.hideDelayedContextualPanel.bind(this, TrashNode));
  }, this);

};

BehaviourViewTrash = new CGBehaviourViewTrash({cls: "trashnodefloatinglayer"});

BehaviourDispatcher = new Object;

BehaviourDispatcher.apply = function (Behaviour, Object) {
  var eElement = Ext.get(Object);
  if (!eElement) return;

  if (!Behaviour) return;
  Behaviour.init(eElement);
};

function CGStub(Mode, idLoadingLayer) {
  this.Mode = Mode;
  this.idLoadingLayer = idLoadingLayer;
};

CGStub.prototype.showLoading = function (sMessage) {
  $(this.idLoadingLayer).style.display = "block";
  document.body.style.cursor = "hand";
};

CGStub.prototype.hideLoading = function () {
  $(this.idLoadingLayer).style.display = "none";
  document.body.style.cursor = "auto";
};

CGStub.prototype.showConnectionFailure = function () {
  Desktop.reportProgress(Lang.Exceptions.ConnectionFailure, true);
};

CGStub.prototype.hideConnectionFailure = function () {
  Desktop.hideReports();
};

function CGStubAjax(Mode, idMessageLayer) {
  this.base = CGStub;
  this.base(Mode, idMessageLayer);
  this.title = parent.document.title;
};

CGStubAjax.prototype = new CGStub;

CGStubAjax.prototype.isSessionExpired = function (sMessage) {
  var sInitialChars;

  sInitialChars = sMessage.substr(0, SERVER_USER_NOT_LOGGED.length);
  if (sInitialChars.toLowerCase() == SERVER_USER_NOT_LOGGED) return true;

  sInitialChars = sMessage.substr(0, SERVER_SESSION_EXPIRES.length);
  if (sInitialChars.toLowerCase() == SERVER_SESSION_EXPIRES) return true;

  return false;
};

CGStubAjax.prototype.isBusinessUnitStopped = function (sMessage) {
  var sInitialChars;

  sInitialChars = sMessage.substr(0, SERVER_BUSINESSUNIT_STOPPED.length);
  if (sInitialChars.toLowerCase() == SERVER_BUSINESSUNIT_STOPPED) return true;

  return false;
};

CGStubAjax.prototype.existServerError = function (sMessage) {
  var sInitialChars = sMessage.substr(0, SERVER_ERROR_PREFIX.length);
  return (sInitialChars.toLowerCase() == SERVER_ERROR_PREFIX);
};

CGStubAjax.prototype.getErrorMessage = function (sMessage) {
  var iPos = sMessage.indexOf(":");
  return sMessage.substring(iPos + 1);
};

CGStubAjax.prototype.getTimeZone = function () {
  var dateVar = new Date();
  return dateVar.getTimezoneOffset() / 60 * (-1);
};

CGStubAjax.prototype.request = function (Action, sOperation, aParameters, bCheckConnection) {
  this.showLoading();
  if (bCheckConnection == null) bCheckConnection = true;
  Ext.Ajax.method = "POST";
  Ext.Ajax.url = Context.Config.Api;
  Ext.Ajax.request({
    params: writeServerRequest(this.Mode, "op=" + sOperation + "&sender=ajax&timezone=" + this.getTimeZone() + ((aParameters != null) ? serializeParameters(aParameters) : "")),
    callback: CGStubAjax.prototype.atRequestResponse.bind(this, Action, sOperation, aParameters, bCheckConnection)
  }, this);
};

CGStubAjax.prototype.atRequestResponse = function (Action, sOperation, aParameters, bCheckConnection, sOptions, bSuccess, Response) {
  if (bSuccess) {

    if ((bCheckConnection) && (Response.responseText == "")) {
      this.ping(Action, sOperation, aParameters);
      return;
    }

    Action.data = readServerResponse(this.Mode, Response.responseText);
    if ((this.isSessionExpired(Action.data)) || (this.isBusinessUnitStopped(Action.data))) {
      if (this.isSessionExpired(Action.data)) alert(Lang.Exceptions.SessionExpired);
      if (this.isBusinessUnitStopped(Action.data)) alert(Lang.Exceptions.BusinessUnitStopped);
      window.location = window.location + (location.indexOf("?") != -1 ? "&" : "?") + "m=" + Math.random();
      parent.document.title = this.title;
      return;
    }
    this.hideLoading();
    try {
      if (Action.onFailure && this.existServerError(Response.responseText)) Action.onFailure(this.getErrorMessage(Response.responseText));
      else if (Action.onSuccess) Action.onSuccess();
    }
    catch (e) {
      Ext.MessageBox.alert(Lang.Exceptions.Title, e.message);
    }
  }
  else {
    this.hideLoading();
    try {
      if (Action.onFailure && this.existServerError(Response.responseText)) Action.onFailure(this.getErrorMessage(Response.responseText));
      else RequestException(sOperation, Response, sOptions);
    }
    catch (e) {
      RequestException(sOperation, Response, sOptions);
    }
    Desktop.hideReports();
    Desktop.hideProgress();
  }
};

CGStubAjax.prototype.ping = function (Action, sOperation, aParameters) {
  this.hideConnectionFailure();
  Ext.Ajax.method = "POST";
  Ext.Ajax.url = Context.Config.Api;
  Ext.Ajax.request({
    params: writeServerRequest(this.Mode, "op=ping&sender=ajax&timezone=" + this.getTimeZone()),
    callback: CGStubAjax.prototype.atPingResponse.bind(this, Action, sOperation, aParameters)
  }, this);
};

CGStubAjax.prototype.atPingResponse = function (Action, sOperation, aParameters, sOptions, bSuccess, Response) {
  if (bSuccess) {
    if (Response.responseText == "") {
      this.showConnectionFailure();
      window.setTimeout(CGStubAjax.prototype.ping.bind(this, Action, sOperation, aParameters), 5000);
    }
    else {
      this.hideConnectionFailure();
      this.request(Action, sOperation, aParameters, false);
    }
  }
  else {
    this.showConnectionFailure();
    window.setTimeout(CGStubAjax.prototype.ping.bind(this, Action, sOperation, aParameters), 5000);
  }
};

CGStubAjax.prototype.zoombieRequest = function (sOperation, aParameters) {
  this.showLoading();
  Ext.Ajax.method = "POST";
  Ext.Ajax.url = Context.Config.Api;
  Ext.Ajax.request({
    params: writeServerRequest(this.Mode, "op=" + sOperation + "&sender=ajax&timezone=" + this.getTimeZone() + ((aParameters != null) ? serializeParameters(aParameters) : "")),
    callback: CGStubAjax.prototype.atZoombieRequestResponse.bind(this)
  });
};

CGStubAjax.prototype.atZoombieRequestResponse = function (sOptions, bSuccess, Response) {
  if (bSuccess) {
    var sResponse = readServerResponse(this.Mode, Response.responseText);
    if ((this.isSessionExpired(sResponse)) || (this.isBusinessUnitStopped(sResponse))) {
      if (this.isSessionExpired(sResponse)) alert(Lang.Exceptions.SessionExpired);
      if (this.isBusinessUnitStopped(sResponse)) alert(Lang.Exceptions.BusinessUnitStopped);
      window.location = window.location + (location.indexOf("?") != -1 ? "&" : "?") + "m=" + Math.random();
      return;
    }
    this.hideLoading();
  }
  else this.hideLoading();
};

CGStubAjax.prototype.upload = function (Action, sOperation, DOMForm) {
  this.showLoading();
  var iPos = DOMForm.action.indexOf("?");

  DOMForm.action = Context.Config.Api + (iPos != -1 ? "&" : "?") + "op=" + sOperation + "&sender=ajax&timezone=" + this.getTimeZone();

  Ext.Ajax.method = "POST";
  Ext.Ajax.url = DOMForm.action;
  Ext.Ajax.on("requestexception", RequestException);
  Ext.Ajax.request({
    callback: CGStubAjax.prototype.atUploadResponse.bind(this, Action),
    form: DOMForm,
    isUpload: true
  });
};

CGStubAjax.prototype.atUploadResponse = function (Action, sOptions, bSuccess, Response) {
  if (bSuccess) {
    Action.data = readServerResponse(this.Mode, Response.responseText);
    if ((this.isSessionExpired(Action.data)) || (this.isBusinessUnitStopped(Action.data))) {
      if (this.isSessionExpired(Action.data)) alert(Lang.Exceptions.SessionExpired);
      if (this.isBusinessUnitStopped(Action.data)) alert(Lang.Exceptions.BusinessUnitStopped);
      window.location = window.location + (location.indexOf("?") != -1 ? "&" : "?") + "m=" + Math.random();
      return;
    }
    this.hideLoading();
    try {
      if (Action.onFailure && this.existServerError(Response.responseText)) Action.onFailure(Response.responseText);
      else if (Action.onSuccess) Action.onSuccess();
    }
    catch (e) {
      Ext.MessageBox.alert(Lang.Exceptions.Title, e.message);
    }
  }
  else {
    this.hideLoading();
    RequestException(sOperation, Response, sOptions);
    Desktop.hideReports();
    Desktop.hideProgress();
  }
};

function CGNodeReference(Data) {
  this.bIsDirty = false;
  this.aAttributes = new Array();
  for (var i = 0; i < Data.attributes.length; i++) {
    Item = Data.attributes[i];
    this.aAttributes[Item.code] = Item.value;
  }
};




CGNodeReference.prototype.isDirty = function () {
  return this.bIsDirty;
};

CGNodeReference.prototype.getLabel = function () {
  return this.aAttributes["label"];
};

CGNodeReference.prototype.setLabel = function (sValue) {
  return this.setAttributeValue("label", sValue);
};

CGNodeReference.prototype.getDescription = function () {
  return this.aAttributes["description"];
};

CGNodeReference.prototype.setDescription = function (sValue) {
  return this.setAttributeValue("description", sValue);
};

CGNodeReference.prototype.getDeleteDate = function () {
  return this.aAttributes["delete_date"];
};

CGNodeReference.prototype.getAttributes = function () {
  return this.aAttributes;
};

CGNodeReference.prototype.getAttributeValue = function (code) {
  return this.aAttributes[code];
};

CGNodeReference.prototype.setAttributeValue = function (code, sValue) {
  this.bIsDirty = true;
  this.aAttributes[code.toLowerCase()] = sValue;
};

CGNodeReference.prototype.serialize = function () {
  var sAttributes = "";

  for (var code in this.aAttributes) {
    if (isFunction(this.aAttributes[code])) continue;
    sAttributes += "{\"code\":\"" + code + "\",\"value\":\"" + this.aAttributes[code] + "\"},";
  }
  if (sAttributes.length > 0) sAttributes = sAttributes.substring(0, sAttributes.length - 1);

  return "{\"attributes\":[" + sAttributes + "]}";
};

function CGAttributeList() {
  this.aAttributes = new Array;
  this.aIndexAttributes = new Array();
};

CGAttributeList.prototype.getAttribute = function (code) {
  var aIndexes = this.aIndexAttributes[code];
  if ((aIndexes == null) || (aIndexes.length <= 0)) return null;
  return this.aAttributes[aIndexes[0]];
};

CGAttributeList.prototype.getAttributes = function () {
  return this.aAttributes;
};

CGAttributeList.prototype.clear = function () {
  this.aAttributes = new Array();
  this.aIndexAttributes = new Array();
};

CGAttributeList.prototype.createAttribute = function (code) {
  var Attribute = new CGAttribute();
  Attribute.code = code;
  this.addAttribute(Attribute);
  return Attribute;
};

CGAttributeList.prototype.addAttribute = function (Attribute) {
  if (!this.aIndexAttributes[Attribute.code]) this.aIndexAttributes[Attribute.code] = new Array();
  var iPos = this.aAttributes.size();
  this.aAttributes[iPos] = Attribute;
  this.aIndexAttributes[Attribute.code].push(this.aAttributes.length - 1);
};

CGAttributeList.prototype.deleteAttribute = function (iPos) {
  var Attribute = this.aAttributes[iPos];
  var aIndexAttributes = new Array();
  var aAttributes = new Array();

  if (Attribute == null) return;

  for (var i = 0; i < this.aAttributes.length; i++) {
    if (iPos == i) continue;
    if (!aIndexAttributes[this.aAttributes[i].code]) aIndexAttributes[this.aAttributes[i].code] = new Array();
    var iNewPos = aAttributes.size();
    aAttributes[iNewPos] = this.aAttributes[i];
    aIndexAttributes[this.aAttributes[i].code].push(aAttributes.length - 1);
  }

  this.aIndexAttributes = aIndexAttributes;
  this.aAttributes = aAttributes;
};

CGAttributeList.prototype.getCount = function () {
  return this.aAttributes.length;
};

CGAttributeList.prototype.copyField = function (code, sValue) {
  var aParents;

  aParents = code.split(FIELD_CODE_SEPARATOR);
  if (aParents.length == 0) return;

  Attribute = this.getAttribute(aParents[0]);
  if (Attribute == null) Attribute = this.createAttribute(aParents[0]);

  if (aParents.length == 1) Attribute.addIndicatorByValue(CGIndicator.VALUE, -1, sValue);
  else {
    aParents = aParents.slice(1);
    code = aParents.join(FIELD_CODE_SEPARATOR);
    Attribute.AttributeList.copyField(code, sValue);
  }
};

CGAttributeList.prototype.copyFromFields = function (aFields) {
  for (var code in aFields) {
    if (isFunction(aFields[code])) continue;
    this.copyField(code, aFields[code]);
  }
};

CGAttributeList.prototype.unserialize = function (sData) {
  this.unserializeFromXmlDocument(parseXml(sData).childNodes[0]);
};

CGAttributeList.prototype.unserializeFromXmlDocument = function (XmlAttributeList) {
  var aChildren = XmlAttributeList.childNodes;

  if (aChildren == null) aChildren = XmlAttributeList.children;
  if (aChildren == null) return;

  this.clear();
  for (var iPos = 0; iPos < aChildren.length; iPos++) {
    if (aChildren[iPos].tagName.toLowerCase() == "attribute") {
      var Attribute = new CGAttribute();
      Attribute.unserializeFromXmlDocument(aChildren[iPos]);
      this.addAttribute(Attribute);
    }
  }
};

CGAttributeList.prototype.serialize = function () {
  var sAttributes = "";

  for (var iPos = 0; iPos < this.aAttributes.length; iPos++) {
    if (this.aAttributes[iPos].iOrder == -1) this.aAttributes[iPos].iOrder = iPos;
    sAttributes += this.aAttributes[iPos].serialize();
  }

  if (sAttributes == "") return "";

  return "<attributelist>" + sAttributes + "</attributelist>";
};

//---------------------------------------------------------------------
CGAttributeList.prototype.serializeWithData = function (sData) {
  return "<attributelist>" + sData + "</attributelist>";
};

function CGNode() {
  this.Id = null;
  this.IdParent = null;
  this.Code = "";
  this.bIsPrototype = false;
  this.sContent = null;
  this.Reference = null;
  this.NodeList = new CGNodeList();
  this.AttributeList = new CGAttributeList();
  this.bLoaded = false;
};

//---------------------------------------------------------------------
CGNode.prototype.getId = function () {
  return this.Id;
};

//---------------------------------------------------------------------
CGNode.prototype.setId = function (Id) {
  this.Id = Id;
};

//---------------------------------------------------------------------
CGNode.prototype.setCode = function (Code) {
  this.Code = Code;
};

//---------------------------------------------------------------------
CGNode.prototype.getIdParent = function () {
  return this.IdParent;
};

//---------------------------------------------------------------------
CGNode.prototype.isPrototype = function () {
  return this.bIsPrototype;
};

//---------------------------------------------------------------------
CGNode.prototype.getLabel = function () {
  return this.Reference.getLabel();
};

//---------------------------------------------------------------------
CGNode.prototype.setLabel = function (sLabel) {
  this.Reference.setLabel(sLabel);
};

//---------------------------------------------------------------------
CGNode.prototype.getContent = function () {
  return this.sContent;
};

//---------------------------------------------------------------------
CGNode.prototype.setContent = function (sContent) {
  this.sContent = sContent;
  this.bLoaded = true;
};

//---------------------------------------------------------------------
CGNode.prototype.getReference = function () {
  return this.Reference;
};

//---------------------------------------------------------------------
CGNode.prototype.setReference = function (Reference) {
  this.Reference = Reference;
};

//---------------------------------------------------------------------
CGNode.prototype.isLoaded = function () {
  return this.bLoaded;
};

//---------------------------------------------------------------------
CGNode.prototype.setLoaded = function (bValue) {
  this.bLoaded = bValue;
};

//---------------------------------------------------------------------
CGNode.prototype.toArray = function () {
  return {
    Id: this.Id,
    sLabel: this.Reference.getLabel(),
    sDescription: this.Reference.getDescription(),
    dtDeleted: getFormattedDate(parseServerDate(this.Reference.getDeleteDate()), Context.Config.Language)
  };
};

//---------------------------------------------------------------------
CGNode.prototype.unserializeFromJSON = function (ItemStructure) {
  this.Id = ItemStructure.id;
  this.IdParent = ItemStructure.idparent;
  this.Code = ItemStructure.code;
  this.bIsPrototype = ItemStructure.isPrototype;
  this.sContent = ItemStructure.content;
  if (ItemStructure.reference) this.Reference = new CGNodeReference(ItemStructure.reference);
  if (ItemStructure.nodelist) {
    this.NodeList = new CGNodeList();
    this.NodeList.setCount(ItemStructure.nodelist.count);
  }
  this.AttributeList = new CGAttributeList();
};

CGNode.prototype.copyFromFields = function (aFields) {
  this.AttributeList.copyFromFields(aFields);
};

//---------------------------------------------------------------------
CGNode.prototype.serialize = function (iOrder) {
  var sResult = "<node id=\"" + this.Id + "\" code=\"" + this.Code + "\">";
  sResult += this.AttributeList.serialize();
  sResult += this.NodeList.serialize();
  sResult += "</node>";
  return sResult;
};

//---------------------------------------------------------------------
CGNode.prototype.serializeWithData = function (sData) {
  return "<node id=\"" + this.Id + "\" code=\"" + this.Code + "\">" + sData + "</node>";
};

//---------------------------------------------------------------------
CGNode.prototype.unserialize = function (serialized) {
  var jsonData = Ext.util.JSON.decode(serialized);
  this.unserializeFromJSON(jsonData);
};



var Base64 = {

  // private property
  _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

  // public method for encoding
  encode: function (input) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;

    input = Base64._utf8_encode(input);

    while (i < input.length) {

      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);

      enc1 = chr1 >> 2;
      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
      enc4 = chr3 & 63;

      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }

      output = output +
          this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
          this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

    }

    return output;
  },

  // public method for decoding
  decode: function (input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;

    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    while (i < input.length) {

      enc1 = this._keyStr.indexOf(input.charAt(i++));
      enc2 = this._keyStr.indexOf(input.charAt(i++));
      enc3 = this._keyStr.indexOf(input.charAt(i++));
      enc4 = this._keyStr.indexOf(input.charAt(i++));

      chr1 = (enc1 << 2) | (enc2 >> 4);
      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
      chr3 = ((enc3 & 3) << 6) | enc4;

      output = output + String.fromCharCode(chr1);

      if (enc3 != 64) {
        output = output + String.fromCharCode(chr2);
      }
      if (enc4 != 64) {
        output = output + String.fromCharCode(chr3);
      }

    }

    output = Base64._utf8_decode(output);

    return output;

  },

  // private method for UTF-8 encoding
  _utf8_encode: function (string) {
    if (string == null) return "";

    string = string.replace(/\r\n/g, "\n");
    var utftext = "";

    for (var n = 0; n < string.length; n++) {

      var c = string.charCodeAt(n);

      if (c < 128) {
        utftext += String.fromCharCode(c);
      }
      else if ((c > 127) && (c < 2048)) {
        utftext += String.fromCharCode((c >> 6) | 192);
        utftext += String.fromCharCode((c & 63) | 128);
      }
      else {
        utftext += String.fromCharCode((c >> 12) | 224);
        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
        utftext += String.fromCharCode((c & 63) | 128);
      }

    }

    return utftext;
  },

  // private method for UTF-8 decoding
  _utf8_decode: function (utftext) {
    var string = "";
    var i = 0;
    var c = c1 = c2 = 0;

    while (i < utftext.length) {

      c = utftext.charCodeAt(i);

      if (c < 128) {
        string += String.fromCharCode(c);
        i++;
      }
      else if ((c > 191) && (c < 224)) {
        c2 = utftext.charCodeAt(i + 1);
        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
        i += 2;
      }
      else {
        c2 = utftext.charCodeAt(i + 1);
        c3 = utftext.charCodeAt(i + 2);
        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        i += 3;
      }

    }

    return string;
  }

};

Kernel = new Object;

Kernel.init = function () {
  Kernel.mode = (Context.Config.EncriptData == "true") ? true : false;
  if (Context.Config.TestCase == "true") Kernel.Stub = new CGStubTestCase(Kernel.mode, Literals.ActionMessage.Loading);
  else Kernel.Stub = new CGStubAjax(Kernel.mode, Literals.ActionMessage.Loading);
};

Kernel.loadAccount = function (Action, timeZone) {
  Kernel.Stub.request(Action, "loadaccount", {timezone: timeZone});
};

Kernel.loadUnits = function (Action) {
  Kernel.Stub.request(Action, "loadunits");
};

Kernel.saveAccount = function (Action, Account) {
  var sData = Account.serialize();
  Kernel.Stub.request(Action, "saveaccount", {data: escape(utf8Encode(sData))});
};

Kernel.searchUsers = function (Action, sCondition) {
  Kernel.Stub.request(Action, "searchusers", {query: sCondition});
};

Kernel.getLoadUsersLink = function () {
  var sParameters = "op=loadusers";
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getLoadFederationUsersLink = function () {
  var sParameters = "op=loadfederationusers";
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadPartners = function (Action) {
  Kernel.Stub.request(Action, "loadpartners", null);
};

Kernel.changeRole = function (Action, sRole) {
  Kernel.Stub.request(Action, "changeRole", {role: sRole});
};

Kernel.logout = function (Action, sInstanceId) {
  Kernel.Stub.request(Action, "logout", {i: sInstanceId});
};

Kernel.loadNode = function (Action, Id, Mode, Index, Count) {
  Kernel.Stub.request(Action, "loadnode", {id: Id, mode: escape(Mode), index: Index, count: Count});
};

Kernel.loadMainNode = function (Action, Id) {
  Kernel.Stub.request(Action, "loadmainnode", {id: Id});
};

Kernel.loadNodeState = function (Action, Id) {
  Kernel.Stub.request(Action, "loadnodestate", {id: Id});
};

Kernel.loadNodeType = function (Action, Id) {
  Kernel.Stub.request(Action, "loadnodetype", {id: Id});
};

Kernel.loadNodeTemplate = function (Action, Code, Mode) {
  Kernel.Stub.request(Action, "loadnodetemplate", {code: Code, mode: escape(Mode)});
};

Kernel.loadNodeReference = function (Action, Id, Mode) {
  Kernel.Stub.request(Action, "loadnodereference", {id: Id, mode: escape(Mode)});
};

Kernel.loadNodePrintAttributes = function (Action, Id, CodeView) {
	Kernel.Stub.request(Action, "loadnodeprintattributes", {id: Id, view: CodeView});
};

Kernel.loadNodeNotes = function (Action, Id) {
  Kernel.Stub.request(Action, "loadnodenotes", {id: Id});
};

Kernel.addNodeNote = function (Action, nodeId, name, value) {
  Kernel.Stub.request(Action, "addnodenote", {idnode: nodeId, name: escape(utf8Encode(name)), value: escape(utf8Encode(value))});
};

Kernel.saveNodeNote = function (Action, nodeId, name, value) {
  Kernel.Stub.request(Action, "savenodenote", {idnode: nodeId, name: escape(utf8Encode(name)), value: escape(utf8Encode(value))});
};

Kernel.deleteNodeNote = function (Action, nodeId, name) {
  Kernel.Stub.request(Action, "deletenodenote", {idnode: nodeId, name: escape(utf8Encode(name))});
};

Kernel.addNode = function (Action, Code, IdParent, Mode) {
  var Parameters = new Object();

  Parameters.code = Code;
  Parameters.idparent = IdParent;
  if (Mode != null) Parameters.mode = escape(Mode);

  Kernel.Stub.request(Action, "addnode", Parameters);
};

Kernel.addPrototype = function (Action, Code, IdParent, Mode) {
  var Parameters = new Object();

  Parameters.code = Code;
  if (IdParent != null) Parameters.idparent = IdParent;
  if (Mode != null) Parameters.mode = escape(Mode);

  Kernel.Stub.request(Action, "addprototype", Parameters);
};

Kernel.generateReport = function (Action, Code, IdParent, Mode, DataSourceTemplate, sNodes, sNodeTypes, sFromDate, sToDate) {
  var Parameters = new Object();

  Parameters.code = Code;
  Parameters.idparent = IdParent;
  if (Mode != null) Parameters.mode = escape(Mode);
  if (DataSourceTemplate != null) Parameters.dstemplate = escape(DataSourceTemplate);
  if ((sNodes) && (sNodes != "")) Parameters.nodes = sNodes;
  if ((sNodeTypes) && (sNodeTypes != "")) Parameters.nodetypes = sNodeTypes;
  if ((sFromDate) && (sFromDate != "")) Parameters.from = sFromDate;
  if ((sToDate) && (sToDate != "")) Parameters.to = sToDate;

  Kernel.Stub.request(Action, "generatereport", Parameters);
};

Kernel.copyNode = function (Action, Id, IdParent, Mode) {
  var Parameters = new Object();

  Parameters.id = Id;
  Parameters.idparent = IdParent;
  if (Mode != null) Parameters.mode = escape(Mode);

  Kernel.Stub.request(Action, "copynode", Parameters);
};

Kernel.saveNode = function (Action, Id, sContent, Mode) {
  var Parameters = new Object();

  Parameters.id = Id;
  Parameters.data = escape(utf8Encode(sContent));
  if (Mode != null) Parameters.mode = escape(Mode);

  Kernel.Stub.request(Action, "savenode", Parameters);
};

Kernel.loadNodeAttribute = function (Action, IdNode, sPath) {
  var Parameters = new Object();
  Parameters.idnode = IdNode;
  Parameters.path = sPath;
  Kernel.Stub.request(Action, "loadnodeattribute", Parameters);
};

Kernel.saveNodeAttribute = function (Action, sInstanceId, IdNode, sContent) {
  var Parameters = new Object();

  Parameters.i = sInstanceId;
  Parameters.idnode = IdNode;
  Parameters.data = escape(utf8Encode(sContent));

  Kernel.Stub.request(Action, "savenodeattribute", Parameters);
};

Kernel.saveNodePartnerContext = function (action, instanceId, nodeId, context) {
  var parameters = new Object();

  parameters.i = instanceId;
  parameters.idnode = nodeId;
  parameters.context = escape(utf8Encode(context));

  Kernel.Stub.request(action, "savenodepartnercontext", parameters);
};

Kernel.saveEmbeddedNode = function (Action, Id, sContent, Mode) {
  var Parameters = new Object();

  Parameters.id = Id;
  Parameters.data = escape(utf8Encode(sContent));
  if (Mode != null) Parameters.mode = escape(Mode);

  Kernel.Stub.request(Action, "saveembeddednode", Parameters);
};

Kernel.loadNodeDescriptor = function (Action, IdNode) {
  var Parameters = new Object();
  Parameters.id = IdNode;
  Kernel.Stub.request(Action, "loadnodedescriptor", Parameters);
};

Kernel.saveNodeDescriptor = function (Action, IdNode, AttributeList, Mode) {
  var Parameters = new Object();

  Parameters.id = IdNode;
  Parameters.data = escape(utf8Encode(AttributeList.serialize()));
  if (Mode != null) Parameters.mode = escape(Mode);

  Kernel.Stub.request(Action, "savenodedescriptor", Parameters);
};

Kernel.deleteNodes = function (Action, sData) {
  Kernel.Stub.request(Action, "deletenodes", {data: sData});
};

Kernel.deleteNode = function (Action, Id) {
  Kernel.Stub.request(Action, "deletenode", {id: Id});
};

Kernel.discardNode = function (Action, Id) {
  Kernel.Stub.request(Action, "discardnode", {id: Id});
};

Kernel.importNode = function (Action, IdNode, sData, ImportOption, sDescription) {
  var Parameters = new Object();

  Parameters.id = IdNode;
  if (sData != null) Parameters.data = escape(utf8Encode(sData));
  if (ImportOption != "") Parameters.option = ImportOption;
  if (sDescription != "") Parameters.description = sDescription;

  Kernel.Stub.request(Action, "importnode", Parameters);
};

Kernel.exportNode = function (Action, Id, CodeFormat) {
  Kernel.Stub.request(Action, "exportnode", {id: Id, format: CodeFormat});
};

Kernel.fillNodeDocument = function (Action, nodeId, exporterCode, nodeScopeId) {
  Kernel.Stub.request(Action, "fillnodedocument", {id: nodeId, exporter: exporterCode, scope: nodeScopeId});
};

Kernel.getDownloadExportedNodeLink = function (Id, CodeFormat) {
  var sParameters = "op=downloadexportednodefile&id=" + Id + "&format=" + CodeFormat;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.shareNode = function (Action, Id, UserList, sDescription, sExpireDate) {
  var UsersIds = UserList.getUsersIds();
  Kernel.Stub.request(Action, "sharenode", {id: Id, users: UsersIds, description: sDescription, expire: sExpireDate});
};

Kernel.getPreviewNodesLink = function () {
  var sParameters = "op=previewnode";
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getPreviewAttachmentsLink = function () {
  var sParameters = "op=previewattachment";
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getDownloadNodeLink = function (IdNode) {
  var sParameters = "op=downloadnode&id=" + IdNode;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.printNodeTimeConsumption = function (Action, IdNode, Template, CodeView, Filters, Attributes, DateAttribute, FromDate, ToDate, InstanceId) {
    var link = Kernel.getPrintNodeTimeConsumptionLink(IdNode, Template, CodeView, Filters, Attributes, DateAttribute, FromDate, ToDate, InstanceId);
    Kernel.Stub.request(Action, link);
};

Kernel.printNode = function (Action, IdNode, Template, CodeView, Filters, Attributes, DateAttribute, FromDate, ToDate, InstanceId) {
    var link = Kernel.getPrintNodeLink(IdNode, Template, CodeView, Filters, Attributes, DateAttribute, FromDate, ToDate, InstanceId);
    Kernel.Stub.request(Action, link);
};

Kernel.getPrintNodeTimeConsumptionLink = function (IdNode, Template, CodeView, Filters, Attributes, DateAttribute, FromDate, ToDate, InstanceId) {
    return Kernel.getPrintLink("printnodetimeconsumption", IdNode, Template, CodeView, Filters, Attributes, DateAttribute, FromDate, ToDate, InstanceId);
};

Kernel.getPrintNodeLink = function (IdNode, Template, CodeView, Filters, Attributes, DateAttribute, FromDate, ToDate, InstanceId) {
  return Kernel.getPrintLink("printnode", IdNode, Template, CodeView, Filters, Attributes, DateAttribute, FromDate, ToDate, InstanceId);
};

Kernel.getPrintLink = function (op, IdNode, Template, CodeView, Filters, Attributes, DateAttribute, FromDate, ToDate, InstanceId) {
    var sParameters = "op=" + op + "&id=" + IdNode + "&view=" + CodeView + "&template=" + escape(Template);

    for (var CodeFilter in Filters) {
        if (isFunction(Filters[CodeFilter])) continue;
        var Filter = Filters[CodeFilter];
        sParameters += "&" + CodeFilter + "=" + escape(utf8Encode(Filter));
    }

    for (var i=0; i<Attributes.length; i++) {
        if (i==0) sParameters += "&attributes=";
        else sParameters += ",";
        sParameters += escape(utf8Encode(Attributes[i]));
    }

    if (DateAttribute != null) sParameters += "&date=" + DateAttribute;
    if (FromDate != null) sParameters += "&from=" + FromDate;
    if (ToDate != null) sParameters += "&to=" + ToDate;
    if (InstanceId != null) sParameters += "&i=" + InstanceId;

    return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadAncestorChildId = function (Action, IdAncestor, CodeView, Index, Filters) {
  var aParameters = {ancestor: IdAncestor, index: Index, view: CodeView};

  for (var CodeFilter in Filters) {
    if (isFunction(Filters[CodeFilter])) continue;
    var Filter = Filters[CodeFilter];
    aParameters[CodeFilter] = escape(utf8Encode(Filter));
  }

  Kernel.Stub.request(Action, "loadancestorchildid", aParameters);
};

Kernel.getDownloadPrintedNodeLink = function (IdNode, Template) {
    var sParameters = "op=downloadprintednode&id=" + IdNode + "&template=" + escape(Template);
    return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadTaskListPrintAttributes = function (Action) {
  Kernel.Stub.request(Action, "loadtasklistprintattributes", null);
};

Kernel.loadTaskComments = function (Action, Id) {
  Kernel.Stub.request(Action, "loadtaskcomments", {id: Id});
};

Kernel.getPrintTaskListLink = function (Template, Inbox, Folder, Filters, Attributes, DateAttribute, FromDate, ToDate) {
	var sParameters = "op=printtasklist&template=" + escape(Template) + "&inbox=" + escape(Inbox) + "&folder=" + escape(Folder);

	for (var CodeFilter in Filters) {
		if (isFunction(Filters[CodeFilter])) continue;
		var Filter = Filters[CodeFilter];
		sParameters += "&" + CodeFilter + "=" + escape(Filter);
	}

    for (var i=0; i<Attributes.length; i++) {
      if (i==0) sParameters += "&attributes=";
      else sParameters += ",";
      sParameters += escape(Attributes[i]);
    }

    if (DateAttribute != null) sParameters += "&date=" + DateAttribute;
    if (FromDate != null) sParameters += "&from=" + FromDate;
    if (ToDate != null) sParameters += "&to=" + ToDate;

	return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.replaceNodeDocument = function (Action, IdNode, DOMForm) {
  DOMForm.enctype = "multipart/form-data";
  Kernel.Stub.upload(Action, "replacenodedocument&id=" + IdNode, DOMForm);
};

Kernel.uploadNodeContent = function (Action, DOMForm) {
  DOMForm.enctype = "multipart/form-data";
  Kernel.Stub.upload(Action, "uploadnodecontent", DOMForm);
};

Kernel.prepareNodeDocumentSignature = function (Action, Id, CodeSignature, Signature, sReason, sLocation) {
  Kernel.Stub.request(Action, "preparenodedocumentsignature", {id: Id, code: CodeSignature, signature: escape(utf8Encode(Signature)), reason: escape(utf8Encode(sReason)), location: escape(utf8Encode(sLocation))});
};

Kernel.deleteNodeDocumentSignature = function (Action, Id, SignatureCode) {
  Kernel.Stub.request(Action, "deletenodedocumentsignature", {id: Id, signature: escape(utf8Encode(SignatureCode))});
};

Kernel.stampNodeDocumentSignature = function (Action, Id, CodeSignature, IdSignature, Signature) {
  Kernel.Stub.request(Action, "stampnodedocumentsignature", {id: Id, code: CodeSignature, signid: IdSignature, signature: escape(utf8Encode(Signature))});
};

Kernel.getSignatureItemsLink = function (IdNode) {
  var sParameters = "op=loadsignatureitems&id=" + IdNode;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.uploadNodeFile = function (Action, DOMForm) {
  DOMForm.enctype = "multipart/form-data";
  Kernel.Stub.upload(Action, "uploadnodefile", DOMForm);
};

Kernel.searchNodes = function (Action, sCondition, Id, CodeType, Mode) {
  Kernel.Stub.request(Action, "searchnodes", {query: escape(utf8Encode(sCondition)), id: Id, code: CodeType, mode: escape(Mode)});
};

Kernel.executeNodeCommand = function (Action, IdNode, sCommand, sParameters) {
  Kernel.Stub.request(Action, "executenodecommand", {id: IdNode, name: sCommand, data: escape(utf8Encode(sParameters))});
};

Kernel.executeNodeCommandOnAccept = function (Action, IdNode, sCommand, sParameters) {
  Kernel.Stub.request(Action, "executenodecommandonaccept", {id: IdNode, name: sCommand, data: escape(utf8Encode(sParameters))});
};

Kernel.executeNodeCommandOnCancel = function (Action, IdNode, sCommand, sParameters) {
  Kernel.Stub.request(Action, "executenodecommandoncancel", {id: IdNode, name: sCommand, data: escape(utf8Encode(sParameters))});
};

Kernel.getDownloadNodeCommandFileLink = function (Name) {
  var sParameters = "op=downloadnodecommandfile&name=" + escape(utf8Encode(Name));
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadNodesFromTrash = function (Action) {
  Kernel.Stub.request(Action, "loadnodesfromtrash");
};

Kernel.loadNodeFieldCompositeItem = function (Action, Id, sCode, iPosition) {
  Kernel.Stub.request(Action, "loadnodefieldcompositeitem", {id: Id, code: sCode, position: iPosition});
};

Kernel.loadNodeFieldCheckTerms = function (Action, id, code) {
  Kernel.Stub.request(Action, "loadnodefieldcheckterms", { id: id, code: code });
};

Kernel.loadNodeContext = function (Action, Id) {
  Kernel.Stub.request(Action, "loadnodecontext", {id: Id});
};

Kernel.getLoadNodesFromTrashLink = function (Action) {
  var sParameters = "op=loadnodesfromtrash";
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.focusNodeView = function (Action, sInstanceId, IdNode, sTimestampValue) {
  Kernel.Stub.request(Action, "focusnodeview", {i: sInstanceId, idnode: IdNode, timestamp: sTimestampValue});
};

Kernel.focusNodeField = function (Action, sInstanceId, IdNode, sFieldPath) {
  Kernel.Stub.zoombieRequest("focusnodefield", {i: sInstanceId, idnode: IdNode, field: sFieldPath});
};

Kernel.blurNodeField = function (Action, sInstanceId, IdNode, sFieldPath) {
  Kernel.Stub.request(Action, "blurnodefield", {i: sInstanceId, idnode: IdNode, field: sFieldPath});
};

Kernel.emptyTrash = function (Action) {
  Kernel.Stub.request(Action, "emptytrash");
};

Kernel.recoverNodeFromTrash = function (Action, Id) {
  Kernel.Stub.request(Action, "recovernodefromtrash", {id: Id});
};

Kernel.recoverNodesFromTrash = function (Action, Data) {
  Kernel.Stub.request(Action, "recovernodesfromtrash", {data: Data});
};

Kernel.getNodeItemsLink = function (IdNode, Code, CodeView) {
  var sParameters = "op=loadnodeitems&id=" + IdNode + "&code=" + Code + "&view=" + CodeView;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getNodeItemsLocationsCountLink = function (IdNode, Code, CodeView, Filters) {
    var sParameters = "op=loadnodeitemslocationscount&id=" + IdNode + "&code=" + Code + "&view=" + CodeView + Filters;
    return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getNodeItemsLocationsLink = function (IdNode, Code, CodeView, Filters) {
  var sParameters = "op=loadnodeitemslocations&id=" + IdNode + "&code=" + Code + "&view=" + CodeView + Filters;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getNodeSetItemsLink = function (Id, Set, Code, CodeView) {
  var sParameters = "op=loadsetitems&id=" + Id + "&set=" + Set + "&code=" + Code + "&view=" + CodeView;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getNodeAttachmentItemsLink = function (Id, Code, CodeView) {
  var sParameters = "op=loadattachmentitems&id=" + Id + "&code=" + Code + "&view=" + CodeView;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getNodeGroupByOptionsLink = function (IdNode, CodeView) {
	var sParameters = "op=loadnodegroupbyoptions&id=" + IdNode + "&view=" + CodeView;
	return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadNodeRevision = function (Action, Id, IdNode, Mode, CodeView) {
  var Parameters = {id: Id, idnode: IdNode, mode: escape(Mode)};
  if (CodeView != null) Parameters.view = CodeView;
  Kernel.Stub.request(Action, "loadnoderevision", Parameters);
};

Kernel.loadCurrentNodeRevision = function (Action, IdNode, Mode, CodeView) {
  var Parameters = { idnode: IdNode, mode: escape(Mode) };
  if (CodeView != null) Parameters.view = CodeView;
  Kernel.Stub.request(Action, "loadcurrentnoderevision", Parameters);
};

Kernel.restoreNodeRevision = function (Action, Id, IdNode, Mode) {
  Kernel.Stub.request(Action, "restorenoderevision", {id: Id, idnode: IdNode, mode: escape(Mode)});
};

Kernel.getNodeRevisionItemsLink = function (IdNode) {
  var sParameters = "op=loadnoderevisionitems&id=" + IdNode;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadDefaultValue = function (Action, CodeNodeType, sProperty) {
  Kernel.Stub.request(Action, "loaddefaultvalue", {nodetype: CodeNodeType, property: sProperty});
};

Kernel.addDefaultValue = function (Action, CodeNodeType, sProperty, sData) {
  Kernel.Stub.request(Action, "adddefaultvalue", {nodetype: CodeNodeType, property: sProperty, data: escape(utf8Encode(sData))});
};

Kernel.createSequenceValue = function (Action, Sequence) {
  Kernel.Stub.request(Action, "createsequencevalue", {code: Sequence});
};

Kernel.loadNodeHelperPage = function (Action, Code) {
  Kernel.Stub.request(Action, "loadnodehelperpage", {code: Code});
};

Kernel.loadHelperPage = function (Action, Path) {
  Kernel.Stub.request(Action, "loadhelperpage", {path: Path});
};

Kernel.loadTemplate = function (Action, Code) {
  Kernel.Stub.request(Action, "loadtemplate", {code: Code});
};

Kernel.loadTask = function (Action, Id, Mode) {
  Kernel.Stub.request(Action, "loadtask", {id: Id, mode: escape(Mode)});
};

Kernel.loadTaskFilters = function (Action) {
  Kernel.Stub.request(Action, "loadtaskfilters");
};

Kernel.createTask = function (Action, Code, Mode, sTitle) {
  var Parameters = new Object();

  Parameters.code = Code;
  if (Mode != null) Parameters.mode = escape(Mode);
  if (sTitle != null) Parameters.title = escape(utf8Encode(sTitle));

  Kernel.Stub.request(Action, "createtask", Parameters);
};

Kernel.alertEntity = function (Action, idTask, UserList, sNotes, sType) {
  var UsersIds = UserList.getUsersIds();
  Kernel.Stub.request(Action, "alertentity", {id: idTask, users: UsersIds, data: sNotes, type: sType});
};

Kernel.selectTaskDelegationRole = function (Action, idTask, idRole) {
  Kernel.Stub.request(Action, "selecttaskdelegationrole", {id: idTask, role: idRole});
};

Kernel.setupTaskDelegation = function (Action, idTask) {
  Kernel.Stub.request(Action, "setuptaskdelegation", {id: idTask});
};

Kernel.selectTaskSendJobRole = function (Action, idTask, idRole) {
  var parameters = new Object();
  parameters.id = idTask;
  if (idRole != null) parameters.role = idRole;
  Kernel.Stub.request(Action, "selecttasksendjobrole", parameters);
};

Kernel.setupTaskSendJob = function (Action, idTask) {
  Kernel.Stub.request(Action, "setuptasksendjob", {id: idTask});
};

Kernel.setupTaskEnroll = function (Action, idTask, idContest) {
  Kernel.Stub.request(Action, "setuptaskenroll", {id: idTask, contest: idContest});
};

Kernel.setupTaskWait = function (Action, idTask, quantity, command) {
  Kernel.Stub.request(Action, "setuptaskwait", {id: idTask, quantity: quantity, cmd: command});
};

Kernel.solveTaskLine = function (Action, idTask, codePlace, codeStop) {
  Kernel.Stub.request(Action, "solvetaskline", {id: idTask, place: codePlace, stop: codeStop});
};

Kernel.solveTaskEdition = function (Action, idTask) {
  Kernel.Stub.request(Action, "solvetaskedition", {id: idTask});
};

Kernel.toggleTaskUrgency = function (Action, idTask) {
  Kernel.Stub.request(Action, "toggletaskurgency", {id: idTask});
};

Kernel.setTaskOwner = function (Action, username, reason, idTask) {
  Kernel.Stub.request(Action, "settaskowner", {name: username, reason: escape(utf8Encode(reason)), idtask: idTask});
};

Kernel.setTasksOwner = function (Action, username, reason, data) {
  Kernel.Stub.request(Action, "settasksowner", {name: username, reason: escape(utf8Encode(reason)), data: data});
};

Kernel.unsetTaskOwner = function (Action, idTask) {
  Kernel.Stub.request(Action, "unsettaskowner", {id: idTask});
};

Kernel.unsetTasksOwner = function (Action, data) {
  Kernel.Stub.request(Action, "unsettasksowner", {data: data});
};

Kernel.getTaskOrderItemsLink = function (Id) {
  var sParameters = "op=loadtaskorderitems&id=" + Id;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.resetTaskOrderNewMessages = function (idTask, idOrder) {
  Kernel.Stub.zoombieRequest("resettaskordernewmessages", {id: idTask, order: idOrder});
};

Kernel.getBusinessModelFileLink = function () {
  var sParameters = "op=loadbusinessmodelfile";
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getBusinessModelDefinitionLink = function () {
  var sParameters = "op=loadbusinessmodeldefinition&lang=" + Context.Config.Language;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadTaskHistory = function (Action, taskId, startpos, limit) {
  Kernel.Stub.request(Action, "loadtaskhistory", {id: taskId, start: startpos, limit: limit});
};

Kernel.abortTask = function (Action, Id) {
  Kernel.Stub.request(Action, "aborttask", {id: Id});
};

Kernel.getTaskOrderChatItemsLink = function (IdTask, IdOrder) {
  var sParameters = "op=loadtaskorderchatitems&id=" + IdTask + "&order=" + IdOrder;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.sendTaskOrderChatMessage = function (Action, IdTask, IdOrder, message) {
  Kernel.Stub.request(Action, "sendtaskorderchatmessage", {id: IdTask, order: IdOrder, message: escape(utf8Encode(message))});
};

Kernel.sendTaskRequest = function (Action, IdTask) {
  Kernel.Stub.request(Action, "sendtaskrequest", {id: IdTask});
};

Kernel.sendTaskResponse = function (Action, IdTask) {
  Kernel.Stub.request(Action, "sendtaskresponse", {id: IdTask});
};

Kernel.loadNodeLocation = function (Action, Id) {
  Kernel.Stub.request(Action, "loadnodelocation", {id: Id});
};

Kernel.updateNodeLocation = function (Action, Id, Location) {
  Kernel.Stub.request(Action, "updatenodelocation", {id: Id, location: Location});
};

Kernel.cleanNodeLocation = function (Action, Id) {
  Kernel.Stub.request(Action, "cleannodelocation", {id: Id});
};

Kernel.addCommentToPost = function (Action, PostId, Text) {
  Kernel.Stub.request(Action, "addcommenttopost", {postid: PostId, text: Text});
};

Kernel.addPost = function (Action, Text) {
  Kernel.Stub.request(Action, "addpost", {text: Text});
};

Kernel.loadNewsNextPage = function (Action, Start, Limit) {
  Kernel.Stub.request(Action, "loadnewsnextpage", {start: Start, limit: Limit});
};

Kernel.addFilter = function (Action, PostId, Filter) {
  Kernel.Stub.request(Action, "addfilter", {postid: PostId, filter: Filter});
};

Kernel.getLoadTasksLink = function (Inbox) {
  var sParameters = "op=loadtasks&inbox=" + Inbox;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadAccountPendingTasks = function(Action) {
    Kernel.Stub.request(Action, "loadaccountpendingtasks");
};

Kernel.sendMail = function (sSubject, sBody) {
  Kernel.Stub.zoombieRequest("sendmail", {subject: escape(sSubject), body: escape(utf8Encode(sBody))});
};

Kernel.sendSuggestion = function (Action, sBody) {
  Kernel.Stub.request(Action, "sendsuggestion", {body: escape(utf8Encode(sBody))});
};

Kernel.exiting = function (sInstanceId) {
  Kernel.Stub.zoombieRequest("exiting", {i: sInstanceId});
};

Kernel.notificationsRead = function (ids) {
  Kernel.Stub.zoombieRequest("notificationsread", {ids: ids});
};

Kernel.notificationsReadAll = function (ids) {
  Kernel.Stub.zoombieRequest("notificationsreadall", {});
};

Kernel.loadSystemTemplate = function (Action, Code, View, Extra) {
  Kernel.Stub.request(Action, "loadsystemtemplate", {code: Code, view: View, extra: Extra});
};

Kernel.loadDashboardTemplate = function (Action, Code, View) {
  Kernel.Stub.request(Action, "loaddashboardtemplate", {code: Code, view: View});
};

Kernel.loadNotifications = function (Action, iStart, iLimit) {
  Kernel.Stub.request(Action, "loadnotifications", {start: iStart, limit: iLimit});
};

Kernel.getLoadNotificationsLink = function () {
  var sParameters = "op=loadnotifications";
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadSource = function (Action, Id) {
  Kernel.Stub.request(Action, "loadsource", {id: Id});
};

Kernel.getLoadSourceListLink = function () {
  var sParameters = "op=loadsourcelist";
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.loadSourceNewTerms = function (Action, Id) {
  Kernel.Stub.request(Action, "loadsourcenewterms", {id: Id});
};

Kernel.getLoadSourceTermsLink = function (IdSource, CodeFromTerm, Mode, iDepth) {
  var sParameters = "op=loadsourceterms&id=" + IdSource + "&from=" + CodeFromTerm + "&mode=" + Mode + "&depth=" + iDepth;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.addSourceTerm = function (Action, IdSource, CodeParent, Code, sLabel) {
  Kernel.Stub.request(Action, "addsourceterm", {idsource: IdSource, parent: CodeParent, code: Code, label: sLabel});
};

Kernel.saveSourceTermAttribute = function (Action, IdSource, Code, Attribute, sValue) {
  Kernel.Stub.request(Action, "savesourcetermattribute", {idsource: IdSource, code: Code, attribute: Attribute, data: escape(utf8Encode(sValue))});
};

Kernel.deleteSourceTerm = function (Action, IdSource, Code) {
  Kernel.Stub.request(Action, "deletesourceterm", {idsource: IdSource, code: Code});
};

Kernel.existsSourceTerm = function (Action, IdSource, Code) {
  Kernel.Stub.request(Action, "existssourceterm", {idsource: IdSource, code: Code});
};

Kernel.publishSourceTerms = function (Action, IdSource, sTerms) {
  Kernel.Stub.request(Action, "publishsourceterms", {idsource: IdSource, terms: escape(utf8Encode(sTerms))});
};

Kernel.loadRoleDefinitionList = function (Action) {
  Kernel.Stub.request(Action, "loadroledefinitionlist", {start: 0, limit: -1});
};

Kernel.getLoadRoleDefinitionListLink = function () {
  var sParameters = "op=loadroledefinitionlist";
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getLoadRoleListLink = function (CodeDefinition, CodeView) {
  var sParameters = "op=loadrolelist&code=" + CodeDefinition + "&view=" + CodeView;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.getLoadGroupedRoleListLink = function (CodeDefinition, GroupedId) {
  var sParameters = "op=loadgroupedrolelist&code=" + CodeDefinition + "&groupedid=" + GroupedId;
  return Context.Config.Api + writeServerRequest(Kernel.mode, sParameters);
};

Kernel.addUserRole = function (Action, Code, IdUser, Username, sBeginDate, sExpireDate) {
  var Parameters = {code: Code, iduser: IdUser, name: Username, begin: sBeginDate};
  if (sExpireDate != null && sExpireDate != "") Parameters.expire = sExpireDate;
  Kernel.Stub.request(Action, "adduserrole", Parameters);
};

Kernel.addServiceRole = function (Action, code, partnerId, partnerServiceName, beginDate, expireDate) {
  var Parameters = {code: code, begin: beginDate};
  if (partnerId != null) Parameters.partnerid = partnerId;
  if (partnerServiceName != null) Parameters.partnerservicename = partnerServiceName;
  if (expireDate != null && expireDate != "") Parameters.expire = expireDate;
  Kernel.Stub.request(Action, "addservicerole", Parameters);
};

Kernel.addFeederRole = function (Action, code, partnerId, partnerServiceName, beginDate, expireDate) {
  var Parameters = {code: code, begin: beginDate};
  if (partnerId != null) Parameters.partnerid = partnerId;
  if (partnerServiceName != null) Parameters.partnerservicename = partnerServiceName;
  if (expireDate != null && expireDate != "") Parameters.expire = expireDate;
  Kernel.Stub.request(Action, "addfeederrole", Parameters);
};

Kernel.saveUserRole = function (Action, IdRole, IdUser, sBeginDate, sExpireDate) {
  var Parameters = {id: IdRole, iduser: IdUser, begin: sBeginDate};
  if (sExpireDate != null && sExpireDate != "") Parameters.expire = sExpireDate;
  Kernel.Stub.request(Action, "saveuserrole", Parameters);
};

Kernel.saveServiceRole = function (Action, IdRole, partnerId, partnerServiceName, beginDate, expireDate) {
  var Parameters = {id: IdRole, partnerid: partnerId, partnerservicename: partnerServiceName, begin: beginDate};
  if (expireDate != null && expireDate != "") Parameters.expire = expireDate;
  Kernel.Stub.request(Action, "saveservicerole", Parameters);
};

Kernel.saveFeederRole = function (Action, IdRole, partnerId, partnerServiceName, beginDate, expireDate) {
  var Parameters = {id: IdRole, partnerid: partnerId, partnerservicename: partnerServiceName, begin: beginDate};
  if (expireDate != null && expireDate != "") Parameters.expire = expireDate;
  Kernel.Stub.request(Action, "savefeederrole", Parameters);
};

Kernel.loadTeam = function (Action) {
  Kernel.Stub.request(Action, "loadteam", {});
};

Kernel.registerException = function (exception) {
  var sException = "";
  Desktop.hideReports();
  if (exception.name) sException += "name: " + exception.name + "\n";
  if (exception.fileName) sException += "filename: " + exception.fileName + "\n";
  if (exception.message) sException += "message: " + exception.message + "\n";
  sException += "stack:\n" + getStackTrace(exception);
  if (Context.Debugging) RequestExceptionWithMessage(exception.message, getStackTrace(exception));
  else Kernel.Stub.zoombieRequest("registerexception", {data: escape(utf8Encode(sException))});
};

CGTask = function () {
  this.Id = -1;
  this.IdTarget = "";
  this.IdInput = "";
  this.IdOutput = "";
  this.Code = null;
  this.State = null;
  this.sLabel = EMPTY;
  this.sDescription = EMPTY;
  this.sSender = EMPTY;
  this.dtCreated = null;
  this.dtExpired = null;
  this.dtFinished = null;
  this.bRead = null;
  this.bAborted = null;
  this.iOrdering = null;
  this.bIsInitializer = false;
  this.bIsPending = false;
  this.bIsWaiting = false;
  this.sContent = EMPTY;
  this.bDirty = false;
};




CGTask.prototype.getId = function () {
  return this.Id;
};

CGTask.prototype.setId = function (Id) {
  this.Id = Id;
};

CGTask.prototype.getLabel = function () {
  return this.sLabel;
};

CGTask.prototype.setLabel = function (sLabel) {
  this.sLabel = sLabel;
};

CGTask.prototype.getDescription = function () {
  return this.sDescription;
};

CGTask.prototype.setDescription = function (sDescription) {
  this.sDescription = sDescription;
};

CGTask.prototype.getSender = function () {
  return this.sSender;
};

CGTask.prototype.setSender = function (sSender) {
  this.sSender = sSender;
};

CGTask.prototype.getContent = function () {
  return this.sContent;
};

CGTask.prototype.setContent = function (sContent) {
  this.sContent = sContent;
};

CGTask.prototype.isInitializer = function () {
  return this.bIsInitializer;
};

CGTask.prototype.isPending = function () {
  return this.bIsPending;
};

CGTask.prototype.isWaiting = function () {
  return this.bIsWaiting;
};

CGTask.prototype.toArray = function () {
  return {
    Id: this.Id,
    IdTarget: this.IdTarget,
    IdInput: this.IdInput,
    IdOutput: this.IdOutput,
    Code: this.Code,
    State: this.State,
    sLabel: this.sLabel,
    sDescription: this.sDescription,
    sSender: this.sSender,
    dtCreated: getFormattedDateTime(parseServerDate(this.dtCreated), Context.Config.Language),
    dtExpired: this.dtExpired ? getFormattedDateTime(parseServerDate(this.dtExpired), Context.Config.Language) : null,
    dtFinished: this.dtExpired ? getFormattedDateTime(parseServerDate(this.dtFinished), Context.Config.Language) : null,
    bRead: this.bRead,
    bAborted: this.bAborted,
    iOrdering: this.iOrdering
  };
};

CGTask.prototype.unserializeFromJSON = function (ItemStructure) {
  this.Id = ItemStructure.id;
  this.IdTarget = ItemStructure.idTarget;
  this.IdInput = ItemStructure.idInput;
  this.IdOutput = ItemStructure.idOutput;
  this.Code = ItemStructure.code;
  this.State = ItemStructure.state;
  this.sLabel = ItemStructure.label;
  this.sDescription = ItemStructure.description;
  this.sSender = ItemStructure.sender;
  this.dtCreated = ItemStructure.created;
  this.dtExpired = (ItemStructure.expired && ItemStructure.expired != "null") ? ItemStructure.expired : null;
  this.dtFinished = (ItemStructure.finished && ItemStructure.finished != "null") ? ItemStructure.finished : null;
  this.bRead = ItemStructure.read;
  this.bAborted = ItemStructure.aborted;
  this.iOrdering = ItemStructure.ordering;
  this.bIsInitializer = ItemStructure.isInitializer;
  this.bIsPending = ItemStructure.isPending;
  this.bIsWaiting = ItemStructure.isWaiting;
  this.sContent = ItemStructure.content;
};

CGTask.prototype.clean = function () {
  this.bDirty = false;
};

CGTask.prototype.isDirty = function () {
  return this.bDirty;
};

CGTask.prototype.unserialize = function (serialized) {
  var jsonData = Ext.util.JSON.decode(serialized);
  this.unserializeFromJSON(jsonData);
};

CGTaskList = function () {
  this.aTasks = new Array();
  this.bDirty = false;
  this.iCount = 0;
};

CGTaskList.prototype.newTasks = function (aJsonItems) {

  for (var i = 0; i < aJsonItems.length; i++) {
    var Item = aJsonItems[i];
    var Task = new CGTask();
    Task.unserializeFromJSON(Item);
    this.aTasks[Task.getId()] = Task;
  }

  return this.aTasks;
};

CGTaskList.prototype.addTask = function (Task) {
  this.aTasks[Task.getId()] = Task;
};

CGTaskList.prototype.deleteTask = function (Id) {
  if (this.aTasks[Id]) delete this.aTasks[Id];
};

CGTaskList.prototype.getTask = function (Id) {
  return this.aTasks[Id];
};

CGTaskList.prototype.getTasks = function () {
  return this.aTasks;
};

CGTaskList.prototype.setTasks = function (aTasks) {
  this.aTasks = aTasks;
};

CGTaskList.prototype.clean = function () {
  this.bDirty = false;
};

CGTaskList.prototype.isDirty = function () {
  return this.bDirty;
};

CGTaskList.prototype.getCount = function () {
  return this.iCount;
};

CGTaskList.prototype.setCount = function (iCount) {
  this.iCount = iCount;
};

CGTaskList.prototype.unserialize = function (serialized) {
  var jsonData = Ext.util.JSON.decode(serialized);

  this.aTasks = new Array();
  this.newTasks(jsonData.items);
  this.iCount = jsonData.count;
};

Account = new Object;




Account.Id = null;
Account.User = null;
Account.Units = null;




Account.getInstanceId = function () {
  return Account.InstanceId;
};

Account.getId = function () {
  return Account.Id;
};

Account.setId = function (Id) {
  Account.Id = Id;
};

Account.getUser = function () {
  return Account.User;
};

Account.setUser = function (User) {
  Account.User = User;
};

Account.getEnvironments = function () {
  return Account.Environments;
};

Account.getDashboards = function () {
  return Account.Dashboards;
};

Account.getUnits = function () {
  return Account.Units;
};

Account.setUnits = function (Units) {
  Account.Units = Units;
};

Account.getLastNotifications = function () {
  return Account.Notifications;
};

Account.addNotification = function (notification) {
  Account.Notifications.nrows++;
  Account.Notifications.unread++;
  Account.Notifications.rows.push(notification);
};

Account.getPendingTasks = function (type) {
    return Account.PendingTasks[type];
};

Account.clean = function () {
  Account.bDirty = false;
};

Account.isDirty = function () {
  return Account.bDirty;
};

Account.serialize = function () {
  var sResult = "\"id\":\"" + this.Id + "\",";
  sResult += "\"user\":" + this.User.serialize();
  return "{" + sResult + "}";
};

Account.unserialize = function (serialized) {
  var jsonData = Ext.util.JSON.decode(serialized);

  Account.InstanceId = jsonData.instanceId;
  Account.Id = jsonData.id;
  Account.User = new CGUser(jsonData.user);
  Account.User.InitializerTask = jsonData.initializertask;
  Account.User.RootNode = jsonData.rootnode;
  Account.User.RootDashboard = jsonData.rootdashboard;
  Account.aRoles = jsonData.roles;

  Account.Notifications = jsonData.notifications;
  Account.Environments = jsonData.environments;
  Account.Dashboards = jsonData.dashboards;
  Account.PendingTasks = jsonData.pendingTasks;
  Account.Links = jsonData.links;
};

CGLayoutHeader = function () {
};

CGLayoutHeader.prototype.initLogo = function () {
  var extHeaderLogo = Ext.get(Literals.HeaderLogo);

  extHeaderLogo.dom.innerHTML = translate(extHeaderLogo.dom.innerHTML, Lang.LayoutHeader);

  var extFederationImage = extHeaderLogo.select(CSS_FEDERATION_IMAGE).first();
  extFederationImage.dom.src = Context.Config.FederationLogoUrl;
  extFederationImage.dom.title = Context.Config.FederationLabel;
  extFederationImage.dom.alt = Context.Config.FederationLabel;

  var extSpaceLabel = extHeaderLogo.select(".subtitle").first();
  extSpaceLabel.dom.innerHTML = Context.Config.SpaceLabel;

  var extModelLabel = extHeaderLogo.select(".title").first();
  extModelLabel.dom.innerHTML = Context.Config.ModelLabel;

  CommandListener.capture(extHeaderLogo.dom);
};

CGLayoutHeader.prototype.init = function (CommonLayout) {

  CommonLayout.add("north", new Ext.ContentPanel(Literals.Layout.Header, {title: Lang.LayoutHeader.Title}));

  var ToolbarHeader = new TToolbarHandler($(Literals.Toolbars.Header));
  ToolbarHeader.AddDefinition(ToolbarDefinition.Header);
  CommandListener.capture($(Literals.Toolbars.Header));

  this.initLogo();
  ViewUser.init(Literals.Views.User);
};

CGLayoutHeader.prototype.refresh = function () {
  ViewUser.refresh();
};

CGLayoutMainHeader = function () {
};

CGLayoutMainHeader.prototype.init = function (InnerLayout) {
  InnerLayout.add("north", new Ext.ContentPanel(Literals.Layout.MainHeader, {title: Lang.LayoutMainHeader.Title}));
};

CGLayoutMainHeader.prototype.refresh = function () {
  $("CurrentDate").innerHTML = getFormattedDate(new Date(), Context.Config.Language);
};

CGDialogSearchNodes = function () {
  this.base = CGDialog;
  this.base("dlgSearchNodes");
  this.sLayerName = null;
  this.Target = null;
};

//------------------------------------------------------------------
CGDialogSearchNodes.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogSearchNodes.prototype.init = function (sLayerName) {
  this.sLayerName = sLayerName;

  var html = AppTemplate.DialogSearchNodes;
  html = translate(html, Lang.DialogSearchNodes);

  $(this.sLayerName).innerHTML = html;

  Event.observe($("dlgSearchNodes.ButtonSearch"), "click", CGDialogSearchNodes.prototype.atSearchClick.bind(this));
  Event.observe($("dlgSearchNodes.Condition"), "keypress", CGDialogSearchNodes.prototype.atSearchConditionClick.bind(this));
};

//------------------------------------------------------------------
CGDialogSearchNodes.prototype.refresh = function () {
  
};

//==================================================================
CGDialogSearchNodes.prototype.atSearchClick = function (Item) {
  var Type = NodesCache.getCurrent().Type;
  var Behaviour = Extension.getDefinitionBehaviour(Type);
  var Mode = null;

  this.Condition = $("dlgSearchNodes.Condition").value;
  if (this.Condition == EMPTY) {
    Ext.MessageBox.alert(Lang.Warning.Title, Lang.DialogSearchNodes.Error.EmptyCondition);
    return false;
  }

  if (Behaviour && Behaviour.Search && Behaviour.Search.Templates && Behaviour.Search.Templates.View) Mode = Behaviour.Search.Templates.View;
  else if (State.LastSearch.Mode) Mode = State.LastSearch.Mode;

  CommandListener.dispatchCommand("searchnodes(" + escape(this.Condition) + "," + Type + "," + Mode + ")");
};

//==================================================================
CGDialogSearchNodes.prototype.atSearchConditionClick = function (Item) {
  if (Item.keyCode == KEY_ENTER) this.atSearchClick();
};

CGLayoutMainCenterHeader = function () {
  this.InnerLayout = null;
  this.Toolbar = null;
  this.DialogSearchNodes = new CGDialogSearchNodes();
};

CGLayoutMainCenterHeader.prototype.init = function (InnerLayout) {
  this.InnerLayout = InnerLayout;
  //this.InnerLayout.add("north", new Ext.ContentPanel(Literals.Layout.MainCenterHeader, {title : Lang.LayoutMainCenterHeader.Title}));
  //this.initDialogSearchNodes();
  this.hideBanner();
  //this.initToolbar();
};

CGLayoutMainCenterHeader.prototype.initDialogSearchNodes = function () {
  createLayer(Literals.Dialogs.SearchNodes, EMPTY, $(Literals.Layout.MainCenterHeader));
  this.DialogSearchNodes.init(Literals.Dialogs.SearchNodes);
  this.DialogSearchNodes.refresh();
};

CGLayoutMainCenterHeader.prototype.initToolbar = function () {

  this.Toolbar = new Ext.Toolbar(Literals.Toolbars.Main);

  this.ButtonHome = new Ext.Toolbar.Button({name: 'showhome()', disabled: true, cls: 'x-btn-text', text: ToolbarDefinition.Main.cmdShowHome.caption, handler: this.atItemClick.createDelegate(this)});

  this.Toolbar.add(this.ButtonHome);
  this.Toolbar.addSeparator();
  this.Toolbar.add($(Literals.Dialogs.SearchNodes));
};

CGLayoutMainCenterHeader.prototype.refreshToolbar = function () {
  var ActionShowHome = new CGActionShowHome();

  if (ActionShowHome.enabled()) this.ButtonHome.enable();
  else this.ButtonHome.disable();

  CommandListener.capture($(Literals.Toolbars.Main));
};

CGLayoutMainCenterHeader.prototype.atItemClick = function (Item, EventLaunched) {
  CommandListener.dispatchCommand(Item.name);
  if (EventLaunched) Event.stop(EventLaunched);
};

CGLayoutMainCenterHeader.prototype.reportBanner = function (sMessage) {
  var extReportBanner = Ext.get(Literals.ReportBanner);
  if (extReportBanner == null) extReportBanner = Ext.get(new Insertion.Bottom(this.InnerLayout.getRegion("north").el.dom, "<div class='reportbanner' id='" + Literals.ReportBanner + "'></div>").element.immediateDescendants().last());
  extReportBanner.dom.innerHTML = sMessage;
  extReportBanner.dom.style.display = "block";
  CommandListener.capture(extReportBanner.dom);
  this.InnerLayout.getRegion("north").resizeTo(Widths.Layout.MainCenterHeader + extReportBanner.getHeight() + 2);
};

CGLayoutMainCenterHeader.prototype.showBanner = function () {
  var extReportBanner = Ext.get(Literals.ReportBanner);
  if (extReportBanner != null) {
    extReportBanner.dom.style.display = "block";
    this.InnerLayout.getRegion("north").resizeTo(Widths.Layout.MainCenterHeader + extReportBanner.getHeight() + 2);
  }
};

CGLayoutMainCenterHeader.prototype.hideBanner = function () {
  var extReportBanner = Ext.get(Literals.ReportBanner);
  if (extReportBanner != null) extReportBanner.dom.style.display = "none";
  this.InnerLayout.getRegion("north").resizeTo(Widths.Layout.MainCenterHeader);
};

CGLayoutMainCenterHeader.prototype.refresh = function () {
  //this.refreshToolbar();
  this.DialogSearchNodes.refresh();
};

function CGNodeList() {
  this.aNodes = new Array;
  this.aIterNodes = new Array;
  this.bDirty = false;
  this.iCount = 0;
};

CGNodeList.prototype.getNodes = function () {
  return this.aNodes;
};

CGNodeList.prototype.getNode = function (Id) {
  return this.aNodes[Id];
};

CGNodeList.prototype.existNode = function (Id) {
  return (this.aNodes[Id] != null);
};

CGNodeList.prototype.isNodeLoaded = function (Id) {
  eNode = Extension.getModelNodeDOM(Id);
  if (!eNode.isLoaded) return false;
  return eNode.isLoaded();
//  if (this.aNodes[Id] == null) return false;
//  return (this.aNodes[Id].isLoaded());
};

CGNodeList.prototype.addNode = function (Node) {
  if (Node.getId() == null) Node.setId(this.aNodes.length);

  this.aNodes[Node.getId()] = Node;
  this.aIterNodes.push(Node);
  this.iCount++;

  return Node;
};

CGNodeList.prototype.deleteNode = function (IdNode) {
  if (!this.existNode(IdNode)) return false;

  delete this.aNodes[IdNode];
  this.iCount--;
};

CGNodeList.prototype.clearNodes = function () {
  this.aNodes = new Array();
  this.aIterNodes = new Array();
  this.iCount = 0;
};

CGNodeList.prototype.isDirty = function () {
  return this.bDirty;
};

CGNodeList.prototype.getCount = function () {
  return this.iCount;
};

CGNodeList.prototype.setCount = function (iCount) {
  this.iCount = iCount;
};

CGNodeList.prototype.newNodes = function (aJsonItems) {

  for (var i = 0; i < aJsonItems.length; i++) {
    Item = aJsonItems[i];
    Node = new CGNode();
    Node.unserializeFromJSON(Item);
    this.addNode(Node);
  }

  return this.aNodes;
};

CGNodeList.prototype.clone = function () {
  var NewNodeList = new CGNodeList();
  var j = 0;

  for (var i in this.aNodes) {
    if (isFunction(this.aNodes[i])) continue;
    NewNodeList.aNodes[i] = this.aNodes[i].PartialClone();
    NewNodeList.aIterNodes[j] = NewNodeList.aNodes[i];
    j++;
  }

  return NewNodeList;
};

CGNodeList.prototype.serialize = function () {
  var sNodes = "";
  var iPos = 0;

  for (var index in this.aNodes) {
    if (isFunction(this.aNodes[index])) continue;
    sNodes += this.aNodes[index].serialize(iPos);
    iPos++;
  }

  if (sNodes == "") return "";

  return "<nodelist>" + sNodes + "</nodelist>";
};

CGNodeList.prototype.serializeWithData = function (data) {
  return "<nodelist>" + data + "</nodelist>";
};

CGNodeList.prototype.unserialize = function (serialized) {
  var jsonData = Ext.util.JSON.decode(serialized);
  this.iCount = jsonData.count;
};

CGDialogEditNode = function () {
  this.base = CGDialog;
  this.base("dlgEditNode");
  this.dialog = null;
  this.Node = null;
};

//------------------------------------------------------------------
CGDialogEditNode.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogEditNode.prototype.init = function () {

  var html = AppTemplate.DialogEditNode;
  html = translate(html, Lang.DialogEditNode);

  this.layer = new Insertion.Bottom(document.body, html).element.immediateDescendants().last();

  this.initRequiredFields();
  this.initDialog();
};

//------------------------------------------------------------------
CGDialogEditNode.prototype.setNode = function (Node) {
  this.Node = Node;
};

//------------------------------------------------------------------
CGDialogEditNode.prototype.refresh = function () {
  if (!this.dialog) return false;

  if (this.Node.dom.getHtmlDialog) {
    var sContent = this.Node.dom.getHtmlDialog();
    $("dlgEditNode.dialogbox").innerHTML = (sContent != false) ? sContent : Lang.DialogEditNode.NoFields;
  }
  else $("dlgEditNode.dialogbox").innerHTML = Lang.DialogEditNode.NoFields;

  CommandListener.capture($("dlgEditNode.dialogbox"));
  Constructor = Extension.getNodeConstructor();
  Constructor.init($("dlgEditNode.dialogbox"));

  this.dialog.buttons[0].enable();
};

//==================================================================
CGDialogEditNode.prototype.atAccept = function () {
  if (!this.check()) return;

  this.Fields = new Array();

  var extDialogBox = Ext.get("dlgEditNode.dialogbox");
  aFields = extDialogBox.select('.nodeFields input');
  aFields.each(function (Field) {
    if (!Field.dom.name) return;
    this.Fields.push({code: Field.dom.name, id: Field.dom.name, name: Field.dom.name, value: Field.dom.value});
  }, this);

  this.hide();

  if (this.onAccept) this.onAccept();
};

CGDialogEditNodeDescriptors = function () {
  this.base = CGDialog;
  this.base("dlgEditNodeDescriptors");
  this.dialog = null;
  this.Descriptors = null;
};

//------------------------------------------------------------------
CGDialogEditNodeDescriptors.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogEditNodeDescriptors.prototype.init = function () {

  var html = AppTemplate.DialogEditNodeDescriptors;
  html = translate(html, Lang.DialogEditNodeDescriptors);

  this.layer = new Insertion.Bottom(document.body, html).element.immediateDescendants().last();

  this.initRequiredFields();
  this.initDialog();
};

//------------------------------------------------------------------
CGDialogEditNodeDescriptors.prototype.setDescriptors = function (Descriptors) {
  this.Descriptors = Descriptors;
};

//------------------------------------------------------------------
CGDialogEditNodeDescriptors.prototype.check = function () {
  var sMessage = EMPTY;
  var DOMLabel = $("dlgEditNodeDescriptors.label");

  DOMLabel.removeClassName("error");
  if (DOMLabel.value == EMPTY) {
    sMessage += "<li>" + Lang.DialogEditNodeDescriptors.Error.LabelRequired + "</li>";
    DOMLabel.addClassName("error");
  }

  if (sMessage != EMPTY) {
    this.showStatus("<ul>" + sMessage + "</ul>");
  }
  return (sMessage == EMPTY);
};

//------------------------------------------------------------------
CGDialogEditNodeDescriptors.prototype.refresh = function () {
  if (!this.dialog) return false;

  $("dlgEditNodeDescriptors.label").value = this.Descriptors[DESCRIPTOR_LABEL];
  $("dlgEditNodeDescriptors.description").value = this.Descriptors[DESCRIPTOR_DESCRIPTION];
};

//==================================================================
CGDialogEditNodeDescriptors.prototype.atAccept = function () {
  if (!this.check()) return;

  this.Descriptors[DESCRIPTOR_LABEL] = $("dlgEditNodeDescriptors.label").value;
  this.Descriptors[DESCRIPTOR_DESCRIPTION] = $("dlgEditNodeDescriptors.description").value;

  this.hide();

  if (this.onAccept) this.onAccept();
};

function InputFiles(eFrame, eList, iMaxFiles, FileNameLength, FileNameCellWidth) {
  this.eList = eList;
  this.eFrame = eFrame;
  this.id = 0;
  if (iMaxFiles > 0)
    this.iMaxFiles = iMaxFiles;
  this.eCurrentInput = null;
  this.iFileNameLength = FileNameLength;
  this.iFileNameCellWidth = FileNameCellWidth;
  this.Init(eFrame);
};

//---------------------------------------------------------------------

InputFiles.prototype.Init = function (eFrame) {
  var eDocument;
  var name = eFrame.name;

  if (eFrame.contentDocument) eDocument = eFrame.contentDocument;
  else if (eFrame.contentWindow) eDocument = eFrame.contentWindow.document;
  else if (window.frames[name]) eDocument = window.frames[name].document;

  eDocument.open();
  eDocument.write("<style>body {margin: 3px; background-color: transparent;}</style>");
  eDocument.close();

  var aBodys = eDocument.getElementsByTagName("BODY");
  aBodys[0].innerHTML = "<form enctype='multipart/form-data' method='post'><input type='text'></form>";

  this.eDocument = eDocument;
  this.eForm = eDocument.forms[0];
  this.eForm.eDocument = eDocument;
  this.eForm.elements[0].style.display = "none";  //IE bug

  this.NewInput();
};

//---------------------------------------------------------------------

InputFiles.prototype.NewInput = function () {
  if (this.iMaxFiles && this.eForm.elements.length > this.iMaxFiles) return;

  var eInput = this.eDocument.createElement('input');
  eInput.type = 'file';
  eInput.name = eInput.id = 'file' + this.id++;
  eInput.Handler = this;
  eInput.style.width = "100%";
  eInput.onchange = function () {
    this.Handler.AddList(this);
    this.Handler.NewInput();
    this.style.display = "none";
  };

  this.eForm.insertBefore(eInput, this.eForm.firstChild);

  this.eCurrentInput = eInput;
};

//---------------------------------------------------------------------

InputFiles.prototype.AddList = function (eInput) {
  var eRow = this.eList.insertRow(this.eList.rows.length);

  var eCellFileIcon = eRow.insertCell(0);
  eCellFileIcon.className = GetFileClass(eInput.value);

  var eCellFileName = eRow.insertCell(1);
  eCellFileName.style.width = this.iFileNameCellWidth;
  eCellFileName.innerHTML = "<div style='margin-left: 4px;'>" + this.TruncateFileName(eInput.value) + "</div>";

  var eCellFileDel = eRow.insertCell(2);
  var eRowButton = document.createElement('a');
  eRowButton.style.cursor = "pointer";
  eRowButton.Handler = this;
  eRowButton.onclick = function () {
    this.Handler.RemoveFromList(this);
  };
  eCellFileDel.appendChild(eRowButton);
  eCellFileDel.className = "DELFILE";

  eRow.eInput = eInput;
};

//---------------------------------------------------------------------

InputFiles.prototype.AddToList = function (sValue) {
  var eInput = this.eDocument.createElement('input');
  eInput.type = 'text';
  eInput.name = eInput.id = 'file' + this.id++;
  eInput.style.width = "100%";
  eInput.style.display = "none";
  eInput.value = sValue;

  this.eForm.insertBefore(eInput, this.eForm.firstChild);

  if (this.iMaxFiles && this.eForm.elements.length > this.iMaxFiles) {
    this.eCurrentInput.style.display = "none"; //Ocultamos, ya no se permiten más
  }

  this.AddList(eInput);
  return eInput;
};

//---------------------------------------------------------------------

InputFiles.prototype.RemoveAll = function () {
  var length = this.eList.rows.length;
  for (var i = 0; i < length; i++) {
    //this.RemoveFromList(this.eList.rows[0]);
    var eRow = this.eList.rows[0];
    eRow.eInput.parentNode.removeChild(eRow.eInput);
    eRow.parentNode.removeChild(eRow);
    delete this.eForm[eRow.eInput.name];

    if (this.eForm.elements.length <= this.iMaxFiles) this.NewInput();

    this.eCurrentInput.style.display = "block"; //Al quitar un elemento, se puede volver a mostrar

    return false;
  }
  return true;
};

//---------------------------------------------------------------------

InputFiles.prototype.RemoveFromList = function (eRow) {
  eRow.parentNode.parentNode.eInput.parentNode.removeChild(eRow.parentNode.parentNode.eInput);
  eRow.parentNode.parentNode.parentNode.removeChild(eRow.parentNode.parentNode);
  delete this.eForm[eRow.parentNode.parentNode.eInput.name];

  if (this.eForm.elements.length <= this.iMaxFiles) this.NewInput();

  this.eCurrentInput.style.display = "block"; //Al quitar un elemento, se puede volver a mostrar

  return false;
};

//---------------------------------------------------------------------

InputFiles.prototype.TruncateFileName = function (string) {
  var myString = string;
  var outString;
  if (myString.length >= this.iFileNameLength) {
    outString = myString.substr(0, 6);
    outString += '...';
    var tmpString = myString.substr(myString.length - (this.iFileNameLength - 4));
    if (tmpString.indexOf("\\") > 0)
      outString += tmpString.substr(tmpString.indexOf("\\"));
    else {          //No hay carpetas en medio.
      splitString = myString.split("\\");
      tmpString = splitString[splitString.length - 1];
      if (tmpString.length > (this.iFileNameLength - 11)) {
        splitString = tmpString.split(".");

        extensionString = splitString[splitString.length - 1];
        tmpString = tmpString.substr(0, (this.iFileNameLength - 22) - extensionString.length) + "..." + tmpString.substr(tmpString.indexOf("." + extensionString) - 4);
      }
      outString += "\\" + tmpString;
    }
  }
  else {
    outString = myString;
  }

  return outString;
};

InputFiles.prototype.GetCount = function () {
  var iResult = 0;

  for (var iPos = 0; iPos < this.eForm.elements.length; iPos++) {
    if (this.eForm.elements[iPos].value != "") iResult++;
  }

  return iResult;
};

CGWizard = function () {
  this.extDisplay = null;
  this.Dialog = null;
  this.iStep = 1;
};

//------------------------------------------------------------------
CGWizard.prototype.init = function (sContent, DOMContainer, bModal) {
  if (DOMContainer == null) DOMContainer = document.body;

  if (bModal == null || bModal == true) this.initDialogBox(DOMContainer, sContent);
  else this.initLayer(DOMContainer, sContent);

  this.firstStep();
};

//------------------------------------------------------------------
CGWizard.prototype.initDialogBox = function (DOMContainer, sContent) {
  var DOMLayer = new Insertion.Bottom(DOMContainer, sContent).element.immediateDescendants().last();
  var extLayer = Ext.get(DOMLayer);

  this.extDisplay = extLayer.select(".body").first();

  this.Dialog = new Ext.LayoutDialog(DOMLayer, {
    modal: true, shadow: true, minWidth: 400, minHeight: 300, closable: false,
    center: { autoScroll: false }
  });

  this.Dialog.addKeyListener(27, this.atCancel, this);
  this.extCancel = this.Dialog.addButton(Lang.Buttons.Cancel, this.atCancel, this);
  this.extPrevious = this.Dialog.addButton(Lang.Buttons.Previous, this.atPreviousStep, this);
  this.extNext = this.Dialog.addButton(Lang.Buttons.Next, this.atNextStep, this);
  this.extFinish = this.Dialog.addButton(Lang.Buttons.Finish, this.atAccept, this);

  this.extSteps = null;

  var layout = this.Dialog.getLayout();
  layout.beginUpdate();
  layout.add('center', new Ext.ContentPanel(this.extDisplay.dom));
  layout.endUpdate();
};

//------------------------------------------------------------------
CGWizard.prototype.initLayer = function (DOMContainer, sContent) {
  var html = AppTemplate.Wizard;
  var DOMLayer = new Insertion.Bottom(DOMContainer, translate(html, Lang.Wizard)).element.immediateDescendants().last();
  var extLayer = Ext.get(DOMLayer);

  this.extDisplay = extLayer.select(".display").first();
  this.extDisplay.dom.innerHTML = sContent;

  this.extCancel = extLayer.select(".toolbar .cancel").first();
  if (this.extCancel) this.extCancel.on("click", this.atCancel, this);

  this.extPrevious = extLayer.select(".toolbar .previous").first();
  this.extPrevious.on("click", this.atPreviousStep, this);

  this.extNext = extLayer.select(".toolbar .next").first();
  this.extNext.on("click", this.atNextStep, this);

  this.extFinish = extLayer.select(".toolbar .finish").first();
  if (this.extFinish) this.extFinish.on("click", this.atAccept, this);

  this.extSteps = extLayer.select(".steps").first();
  var iNumSteps = this.extDisplay.select(".step").getCount();
  for (var i = 1; i <= iNumSteps; i++) {
    var extTitle = this.extDisplay.select(".step." + i + " .wizard.title").first();
    var extStep = Ext.get(new Insertion.Bottom(this.extSteps.dom, "<li class='assistant step" + i + "'>" + extTitle.dom.innerHTML + "</li>").element.immediateDescendants().last());
    extStep.on("click", function () {
      alert("has pulsado en un step");
    });
  }
};

//------------------------------------------------------------------
CGWizard.prototype.disable = function (extElement) {
  if (extElement == null) return;
  if (extElement.disable) extElement.disable();
  else extElement.addClass(CLASS_DISABLED);
};

//------------------------------------------------------------------
CGWizard.prototype.enable = function (extElement) {
  if (extElement == null) return;
  if (extElement.enable) extElement.enable();
  else extElement.removeClass(CLASS_DISABLED);
};

//------------------------------------------------------------------
CGWizard.prototype.refreshSteps = function (iStep) {
  if (this.extSteps == null) return;

  var extStepList = this.extSteps.select("li");
  var iCurrent = 1;
  extStepList.each(function (extStep) {
    extStep.removeClass(CLASS_DISABLED);
    if (iCurrent > iStep) extStep.addClass(CLASS_DISABLED);
    iCurrent++;
  }, this);
};

//------------------------------------------------------------------
CGWizard.prototype.refreshButtonbar = function (sBranch) {
  var extPreviousStep = this.getStep(this.iStep - 1, sBranch);
  var extNextStep = this.getStep(this.iStep + 1, sBranch);

  if (extPreviousStep == null) this.disable(this.extPrevious);
  else this.enable(this.extPrevious);

  if (extNextStep == null) {
    this.disable(this.extNext);
    this.enable(this.extFinish);
  }
  else {
    this.enable(this.extNext);
    this.disable(this.extFinish);
  }
};

//------------------------------------------------------------------
CGWizard.prototype.enablePreviousButton = function () {
  this.enable(this.extPrevious);
};

//------------------------------------------------------------------
CGWizard.prototype.disablePreviousButton = function () {
  this.disable(this.extPrevious);
};

//------------------------------------------------------------------
CGWizard.prototype.enableNextButton = function () {
  this.enable(this.extNext);
};

//------------------------------------------------------------------
CGWizard.prototype.disableNextButton = function () {
  this.disable(this.extNext);
};

//------------------------------------------------------------------
CGWizard.prototype.enableFinishButton = function () {
  this.enable(this.extFinish);
};

//------------------------------------------------------------------
CGWizard.prototype.disableFinishButton = function () {
  this.disable(this.extFinish);
};

//------------------------------------------------------------------
CGWizard.prototype.getStep = function (iStep, sBranch) {
  extStep = this.extDisplay.select(".step." + iStep + ((sBranch != null) ? sBranch : "")).first();
  if (extStep == null) extStep = this.extDisplay.select(".step." + iStep + ".main").first();
  return extStep;
};

//------------------------------------------------------------------
CGWizard.prototype.getActiveStep = function () {
  var extStep = this.getStep(this.iStep);
  if (extStep == null) return;
  extStep.id = this.iStep;
  return extStep;
};

//------------------------------------------------------------------
CGWizard.prototype.hideSteps = function () {
  var extStepList = this.extDisplay.select(".step");
  extStepList.each(function (extStep) {
    extStep.dom.style.display = "none";
  }, this);
};

//------------------------------------------------------------------
CGWizard.prototype.showStep = function (iStep, sBranch) {
  var extStep = this.getStep(iStep, sBranch);
  if (extStep == null) return;
  this.iStep = iStep;
  this.hideSteps();
  extStep.dom.style.display = "block";
  this.refreshSteps(iStep);
  this.refreshButtonbar(sBranch);
};

//------------------------------------------------------------------
CGWizard.prototype.firstStep = function () {
  this.showStep(1);
};

//------------------------------------------------------------------
CGWizard.prototype.previousStep = function (sBranch) {
  this.iStep--;
  if (this.iStep < 1) this.iStep = 1;
  this.showStep(this.iStep, sBranch);
  if (this.onPreviousStep) this.onPreviousStep();
};

//------------------------------------------------------------------
CGWizard.prototype.nextStep = function (sBranch) {
  this.iStep++;
  this.showStep(this.iStep, sBranch);
  if (this.onNextStep) this.onNextStep();
};

//------------------------------------------------------------------
CGWizard.prototype.show = function () {
  if (this.Dialog == null) return false;
  this.Dialog.show();
  this.firstStep();
};

//------------------------------------------------------------------
CGWizard.prototype.hide = function () {
  if (this.Dialog == null) return false;
  this.Dialog.hide();
};

//------------------------------------------------------------------
CGWizard.prototype.destroy = function () {
  this.Dialog.destroy(true);
};

//==================================================================
CGWizard.prototype.atCancel = function () {
  if (this.onCancel) this.onCancel();
};

//==================================================================
CGWizard.prototype.atPreviousStep = function () {
  if (this.PreviousStepHandler) this.PreviousStepHandler();
  else this.previousStep();
};

//==================================================================
CGWizard.prototype.atNextStep = function () {
  if (this.NextStepHandler) this.NextStepHandler();
  else this.nextStep();
};

//==================================================================
CGWizard.prototype.atAccept = function () {
  if (this.onAccept) this.onAccept();
};

var TEMPLATE = "<div class='panel clipboard'><label>Pega aquí el texto que deseas importar:</label><textarea class='data' rows='32'></textarea></div><div class='panel options'><fieldset class='delimiters'><legend>Delimita el texto que se seleccionará en cada momento indicando cómo están separados los campos</legend><form><div><input name='delimiter' id='dparagraph' type='radio' class='command paragraph' checked><label for='dparagraph'>Cada campo es un párrafo</label></div><div><input name='delimiter' id='dtab' type='radio' class='command tab' ><label for='dtab'>Con tabulaciones</label></div><div><input name='delimiter' id='ddot' type='radio' class='command dot' ><label for='ddot'>Con puntos</label></div><div><input name='delimiter' id='dsemicolon' type='radio' class='command semicolon' ><label for='dsemicolon'>Con puntos y coma</label></div><div><input name='delimiter' id='dcomma' type='radio' class='command comma' ><label for='dcomma'>Con comas</label></div><div><input name='delimiter' id='dfree' type='radio' class='command free' ><span class='label'><label for='dfree'>Empiezan con </label><input type='text' class='text free startwith'><label for='dfree'> y terminan con </label><input type='text' class='text free endwith'></label></span></div><!--<div><input name='delimiter' id='dregexp' type='radio' class='command regexp' ><span class='label'><label for='dregexp'>Necesito una expresión regular para indicar los marcadores de inicio y fin. Expresión: <label for='dregexp'></label><input type='text' class='text regexp'></span></div>--></form></fieldset><fieldset class='definition fields'><legend>Indica el orden en que aparecen estos campos en el texto. Esto te facilitará cumplimentar los formularios</legend><ul class='list'></ul></fieldset><div class='toolbar'><div class='command close'></div></div></div><div class='panel layout'><div class='identation'><label>Texto:</label><div><textarea class='data' rows='10'></textarea><div class='pattern'>Patrón: <a class='command options'><span class='type paragraph'>Cada campo es un párrafo</span><span class='type tab'>Cada campo se delimita por una tabulación</span><span class='type dot'>Cada campo se delimita por un punto</span><span class='type semicolon'>Cada campo se delimita por un punto y coma</span><span class='type comma'>Cada campo se delimita por una coma</span><span class='type free'>Cada campo empieza por '<span class='startwith'></span>' y termina con '<span class='endwith'></span>'</span><span class='type regexp'>Cada campo se delimita por la expresión regular '<span class='regexp'></span>'</span> cambiar...</a></div></div><div class='toolbar'><div class='left'><div class='command addform'></div></div><div class='right'><div class='command search'></div><div class='fields'></div><div class='command addfieldsplit'></div></div></div></div><div class='tabs'></div></div>";
var TEMPLATE_FIELD = "<li class='definition field'><div class='code hidden'>#{code}</div>#{title}<a class='raise'>subir<a class='bury'>bajar</a></li>";
var TEMPLATE_TAB = "<div class='tab'><ul class='list'>#{fields}</ul></div>";
var TEMPLATE_TAB_FIELD = "<li class='field #{code} #{class}'><div class='code hidden'>#{code}</div><table><tr><td width='15'><div class='arrow'>&nbsp;</div></td><td width='30%'><p class='title'>#{title}</p></td><td width='6%'><a class='raise'><img class='trigger' src='#{ImagesPath}/s.gif' alt='subir' title='subir'/></a><a class='bury'><img class='trigger' src='#{ImagesPath}/s.gif' alt='bajar' title='bajar'/></a></td><td width='64%'><a class='command value showfieldeditor'>#{value}</a></td></tr></table></li>";
var TEMPLATE_TAB_FIELD_VALUE_LINK = "<a id='#{id}' class='command value showfieldeditor'>#{value}</a>";
var TEMPLATE_TAB_FIELD_VALUE_EDITOR = "<div id='#{id}' class='editor'><textarea class='value' type='text'>#{value}</textarea><a class='command setfieldvalue'>cambiar</a></div>";

LangDataImporter = {
  FieldEmpty: "[Haz click para cumplimentar]",
  FieldValueEmpty: "vacío",
  TabTitle: "Formulario #num",
  Search: "Buscar",
  Close: "Cerrar",
  AddForm: "A�adir formulario",
  AddField: "A�adir",
  AddFields: "continuar desde aqu�"
};

String.prototype.indexOfDelimiter = function (sDelimiter, iStartPos) {
  var iPos = iStartPos;

  while (iPos < this.length) {
    iEndPos = iPos + sDelimiter.length;
    if (iEndPos > this.length) iEndPos = this.length;
    if (this.substring(iPos, iEndPos) == sDelimiter) return iPos;
    iPos++;
  }

  return -1;
};

String.prototype.delimitedSubstring = function (sStartDelimiter, sEndDelimiter) {
};

String.prototype.indexOfParagraph = function (iStartPos) {
  return this.indexOfDelimiter("\n", iStartPos);
};

String.prototype.paragraph = function (iStartPos) {
  var iPos = this.indexOfParagraph(iStartPos);
  if (iPos == -1) return "";
  return this.substr(iStartPos, iPos - iStartPos + 1);
};

function CGClipboardBehaviour() {
};

CGClipboardBehaviour.prototype.init = function (extData) {

  extData.dom = extData.getEl().dom;

  extData.scroll = function (iPos) {
    var sValue = this.getValue();
    var iTextPercentage = (iPos * 100) / sValue.length;
    var iScrollPosition = (this.dom.scrollHeight * iTextPercentage) / 100;
    this.dom.scrollTop = iScrollPosition;
  };

  extData.select = function (iStartPos, iEndPos) {
    var iTextLength = this.getValue().length;

    if (iStartPos < 0) iStartPos = 0;
    if (iEndPos > iTextLength) iEndPos = iTextLength;

    this.focus();
    this.scroll(iStartPos - 250);
    this.selectText(iStartPos, iEndPos);
  };

  extData.getSelectedContent = function () {
    if (document.selection) {
      return document.selection.createRange().text;
    }
    var sContent = this.getContent();
    return sContent.substr(this.dom.selectionStart, this.dom.selectionEnd - this.dom.selectionStart);
  };

  extData.getContent = function () {
    return this.getValue();
  };

  extData.setContent = function (sContent) {
    return this.setValue(sContent);
  };

  extData.setCursorPosition = function (iPosition) {
    if (this.setSelectionRange) {
      this.dom.focus();
      this.dom.setSelectionRange(iPosition, iPosition);
    }
    else if (this.createTextRange) {
      var Range = this.createTextRange();
      Range.collapse(true);
      Range.moveStart('character', Position);
      Range.moveEnd('character', iPosition);
      Range.select();
    }
  };

  extData.getCursorPosition = function () {
    return this.dom.selectionStart;
  };

  extData.atDataClick = function (EventLaunched) {
    this.setCursorPosition(this.dom.selectionStart);
  };

  Event.observe(extData.dom, "click", extData.atDataClick.bind(extData));

};

CGLayoutTabSet = function () {
  this.extDisplay = null;
  this.extTabPanel = null;
  this.extCurrentField = null;
  this.Definition = new Array();
  this.aFields = new Array();
  this.sLastFieldValue = "";
  this.iForm = 1;
};

CGLayoutTabSet.prototype.init = function (extDisplay) {
  this.extDisplay = extDisplay;
  this.extTabPanel = new Ext.TabPanel(extDisplay, {resizeTabs: true, minTabWidth: 20, preferredTabWidth: 150});
};

CGLayoutTabSet.prototype.setDefinition = function (Definition) {
  this.Definition = Definition;
};

CGLayoutTabSet.prototype.setFields = function (aFields) {
  this.aFields = aFields;
};

CGLayoutTabSet.prototype.addTab = function (codeForm, bCloseable) {
  var TemplateTab = new Template(TEMPLATE_TAB);
  var TemplateTabField = new Template(TEMPLATE_TAB_FIELD);
  var extTabPanelItem;
  var sContent = "";
  var id = Ext.id();

  for (var iPos = 0; iPos < this.Definition.aFields.length; iPos++) {
    var Field = this.Definition.aFields[iPos];
    var sClass = ((iPos % 2) == 0) ? "even" : "odd";
    sContent += TemplateTabField.evaluate({'ImagesPath': Context.Config.ImagesPath, 'code': Field.code, 'title': Field.title, 'value': (Field.defaultValue && Field.defaultValue != "") ? Field.defaultValue : LangDataImporter.FieldEmpty, 'class': sClass});
  }

  sContent = TemplateTab.evaluate({'ImagesPath': Context.Config.ImagesPath, 'fields': sContent});

  extTabPanelItem = this.extTabPanel.addTab(id, LangDataImporter.TabTitle.replace("#num", this.iForm), sContent, bCloseable);
  extTabPanelItem.on("activate", CGLayoutTabSet.prototype.atTabActivate.bind(this));
  extTabPanelItem.on("beforeclose", CGLayoutTabSet.prototype.atTabClose.bind(this));
  extTabPanelItem.codeForm = codeForm;

  this.addBehaviours(id);
  this.extTabPanel.activate(id);
  this.iForm++;
};

CGLayoutTabSet.prototype.addBehaviours = function (idTab) {
  var extTab = Ext.get(idTab);
  var extList;

  extList = extTab.select(".raise");
  extList.each(function (extItem) {
    Event.observe(extItem.dom, 'click', CGLayoutTabSet.prototype.atFieldRaiseClick.bindAsEventListener(this, extItem.dom));
  }, this);

  extList = extTab.select(".bury");
  extList.each(function (extItem) {
    Event.observe(extItem.dom, 'click', CGLayoutTabSet.prototype.atFieldBuryClick.bindAsEventListener(this, extItem.dom));
  }, this);

  extList = extTab.select(".field");
  extList.each(function (extItem) {
    Event.observe(extItem.dom, 'click', CGLayoutTabSet.prototype.atSelectField.bindAsEventListener(this, extItem.dom));
  }, this);

  extList = extTab.select(".command.showfieldeditor");
  extList.each(function (extItem) {
    Event.observe(extItem.dom, 'click', CGLayoutTabSet.prototype.atShowFieldValueEditorClick.bindAsEventListener(this, extItem.dom));
  }, this);
};

CGLayoutTabSet.prototype.raiseField = function (DOMElement) {
  var extElement = Ext.get(DOMElement);
  var DOMList = extElement.up(".list").dom;
  if (DOMElement != DOMList.immediateDescendants().first()) {
    extPrevious = Ext.get(DOMElement.previous());
    DOMElement.remove();
    extPrevious.insertSibling(DOMElement, 'before');
  }
  new Effect.Highlight(DOMElement, {duration: 0.5});
};

CGLayoutTabSet.prototype.buryField = function (DOMElement) {
  var extElement = Ext.get(DOMElement);
  var DOMList = extElement.up(".list").dom;
  if (DOMElement != DOMList.immediateDescendants().last()) {
    extNext = Ext.get(DOMElement.next());
    DOMElement.remove();
    extNext.insertSibling(DOMElement, 'after');
  }
  new Effect.Highlight(DOMElement, {duration: 0.5});
};

CGLayoutTabSet.prototype.getDefinitionFieldsOrder = function () {
  var extTab = Ext.get(this.extTabPanel.getActiveTab().id);
  var extList = extTab.select(".list").first();

  var extCodeList = extList.select(".code");
  var aResult = new Array();

  extCodeList.each(function (extCode) {
    aResult.push(extCode.dom.innerHTML);
  }, this);

  return aResult;
};

CGLayoutTabSet.prototype.selectField = function (code) {
  var extTab = Ext.get(this.extTabPanel.getActiveTab().id);
  var extField = extTab.select(".field." + code).first();
  if (this.extCurrentField) this.extCurrentField.removeClass("selected");
  extField.addClass("selected");
  this.extCurrentField = extField;
  this.extCurrentField.code = code;
};

CGLayoutTabSet.prototype.setFieldValue = function (code, sValue) {
  var extTab = Ext.get(this.extTabPanel.getActiveTab().id);
  var extField = extTab.select(".field." + code).first();
  var extData = extField.select(".value").first();

  if (sValue == "") sValue = LangDataImporter.FieldValueEmpty;

  if (extData.dom.value) extData.dom.value = sValue;
  else extData.dom.innerHTML = sValue;
};

CGLayoutTabSet.prototype.showFieldValueLink = function (extLayer, sValue) {
  var TemplateTabFieldValueLink = new Template(TEMPLATE_TAB_FIELD_VALUE_LINK);
  var DOMLayer = $(extLayer.dom.id);

  if (sValue == "") sValue = LangDataImporter.FieldEmpty;

  DOMLayer.replace(TemplateTabFieldValueLink.evaluate({'ImagesPath': Context.Config.ImagesPath, id: extLayer.dom.id, value: sValue}));
  extLayer = Ext.get(extLayer.dom.id);
  extLayer.on("click", this.atShowFieldValueEditorClick, this);
};

CGLayoutTabSet.prototype.showFieldValueEditor = function (extLayer, sValue) {
  var TemplateTabFieldValueEditor = new Template(TEMPLATE_TAB_FIELD_VALUE_EDITOR);
  var extCommand;
  var DOMLayer = $(extLayer.dom.id);

  this.sLastFieldValue = sValue;

  DOMLayer.replace(TemplateTabFieldValueEditor.evaluate({'ImagesPath': Context.Config.ImagesPath, id: extLayer.dom.id, value: sValue}));
  extLayer = Ext.get(extLayer.dom.id);

  extCommand = extLayer.select(".value").first();
  extCommand.focus();
  extCommand.on("blur", this.atSetFieldValueClick, this);
  extCommand.on("keyup", this.atSetFieldValueInputPress, this);
};

CGLayoutTabSet.prototype.refresh = function () {
  var TemplateTab = new Template(TEMPLATE_TAB);
  var TemplateTabField = new Template(TEMPLATE_TAB_FIELD);
  var sContent = "";

  for (var iPos = 0; iPos < this.extTabPanel.getCount(); iPos++) {
    var extTab = this.extTabPanel.getTab(iPos);
    if (!this.aFields[extTab.codeForm]) continue;

    sContent = "";
    for (var jPos = 0; jPos < this.Definition.aFields.length; jPos++) {
      Field = this.Definition.aFields[jPos];
      sContent += TemplateTabField.evaluate({'ImagesPath': Context.Config.ImagesPath, 'code': Field.code, 'title': Field.title, 'value': (this.aFields[extTab.codeForm][Field.code] != "") ? this.aFields[extTab.codeForm][Field.code] : LangDataImporter.FieldEmpty});
    }

    extTab.setContent(TemplateTab.evaluate({'ImagesPath': Context.Config.ImagesPath, 'fields': sContent}));
    this.addBehaviours(extTab.id);

    if (extTab.isActive() && this.extCurrentField) this.selectField(this.extCurrentField.code);
  }

};

//---------------------------------------------------------------------------------------------------------------------

CGLayoutTabSet.prototype.atFieldRaiseClick = function (oEvent, DOMTarget) {
  var extTarget = Ext.get(DOMTarget);
  DOMElement = extTarget.up(".field").dom;
  this.raiseField(DOMElement);
  if (this.onDefinitionChange) this.onDefinitionChange();
};

CGLayoutTabSet.prototype.atFieldBuryClick = function (oEvent, DOMTarget) {
  var extTarget = Ext.get(DOMTarget);
  DOMElement = extTarget.up(".field").dom;
  this.buryField(DOMElement);
  if (this.onDefinitionChange) this.onDefinitionChange();
};

CGLayoutTabSet.prototype.atSelectField = function (oEvent, DOMTarget) {
  var extTarget = Ext.get(DOMTarget);
  var code = extTarget.down(".code").dom.innerHTML;
  this.selectField(code);
  if (this.onSelectField) this.onSelectField(code);
  if (oEvent) Event.stop(oEvent);
  return false;
};

CGLayoutTabSet.prototype.atShowFieldValueEditorClick = function (oEvent, DOMTarget) {
  var extTarget = Ext.get(DOMTarget);
  var sValue = DOMTarget.innerHTML;

  this.atSelectField(oEvent, extTarget.up(".field").dom);

  if (sValue == LangDataImporter.FieldEmpty) sValue = "";
  if (extTarget.dom.id == null) extTarget.dom.id = Ext.id();

  this.showFieldValueEditor(extTarget, sValue);
};

CGLayoutTabSet.prototype.atSetFieldValueInputPress = function (oEvent, DOMTarget) {
  if ((oEvent.keyCode != oEvent.ENTER) && (oEvent.keyCode != oEvent.ESC)) return;

  var extEditor = Ext.get(DOMTarget).up(".editor");

  if (((oEvent.keyCode == oEvent.ENTER) && (DOMTarget.type != "textarea")) || ((oEvent.keyCode == oEvent.ENTER) && (oEvent.ctrlKey))) {
    var code = extEditor.up(".field").down(".code").dom.innerHTML;
    this.setFieldValue(code, DOMTarget.value);
    this.showFieldValueLink(extEditor, DOMTarget.value);
    if (this.onFieldChange) this.onFieldChange(code, DOMTarget.value);
  }
  else if (oEvent.keyCode == oEvent.ESC) {
    this.showFieldValueLink(extEditor, this.sLastFieldValue);
  }

};

CGLayoutTabSet.prototype.atSetFieldValueClick = function (oEvent, DOMTarget) {
  var extTarget = Ext.get(DOMTarget);
  var extEditor = extTarget.up(".editor");
  var code = extTarget.up(".field").down(".code").dom.innerHTML;
  var sValue = extEditor.select('.value').first().dom.value;

  this.setFieldValue(code, sValue);
  this.showFieldValueLink(extEditor, sValue);
  if (this.onFieldChange) this.onFieldChange(code, sValue);
};

CGLayoutTabSet.prototype.atTabActivate = function () {
  if (this.onSelectForm) this.onSelectForm(this.extTabPanel.getActiveTab().codeForm);
  if (this.extCurrentField) this.selectField(this.extCurrentField.code);
};

CGLayoutTabSet.prototype.atTabClose = function (extTabPanelItem, extObject) {
  if (this.onDeleteForm) this.onDeleteForm(extTabPanelItem.codeForm);
  if (this.extTabPanel.getCount() <= 1) extObject.cancel = true;
};

CGPanel = function () {
  this.Definition = null;
  this.Delimiter = null;
  this.extDisplay = null;
};

CGPanel.prototype.init = function (extDisplay) {
};

CGPanel.prototype.setDefinition = function (Definition) {
  this.Definition = Definition;
};

CGPanel.prototype.setFields = function (aFields) {
  this.aFields = aFields;
};

CGPanel.prototype.setDelimiter = function (Delimiter) {
  this.Delimiter = Delimiter;
};

CGPanel.prototype.show = function () {
  this.extDisplay.dom.style.display = "block";
};

CGPanel.prototype.showDialog = function () {
  this.extDisplay.dom.style.display = "block";
  this.extDisplay.addClass("dialog");
};

CGPanel.prototype.hide = function () {
  this.extDisplay.dom.style.display = "none";
};

CGPanel.prototype.hideDialog = function () {
  this.extDisplay.dom.style.display = "none";
  this.extDisplay.removeClass("dialog");
};

CGPanel.prototype.isDialog = function () {
  return this.extDisplay.hasClass("dialog");
};

CGPanel.prototype.refresh = function (Delimiter) {
};

CGPanelClipboard = function () {
  this.base = CGPanel;
  this.base();
  this.extDisplay = null;
  this.Clipboard = null;
};

CGPanelClipboard.prototype = new CGPanel;

CGPanelClipboard.prototype.init = function (extDisplay) {
  this.extDisplay = extDisplay;
  this.initClipboard();
};

CGPanelClipboard.prototype.initClipboard = function () {
  var ClipboardBehaviour = new CGClipboardBehaviour();
  this.Clipboard = new Ext.form.TextArea();
  this.Clipboard.applyTo(this.extDisplay.select('.data').first());
  this.Clipboard.on("change", this.atDataChange, this);
  ClipboardBehaviour.init(this.Clipboard);
};

//---------------------------------------------------------------------------------------------------------------------

CGPanelClipboard.prototype.atDataChange = function () {
  if (this.onDataChange) this.onDataChange();
};

CGPanelLayout = function () {
  this.base = CGPanel;
  this.base();
  this.extDisplay = null;
  this.Clipboard = null;
  this.onShowOptions = null;
  this.onSearch = null;
  this.onFieldChange = null;
};

CGPanelLayout.prototype = new CGPanel;

CGPanelLayout.prototype.init = function (extDisplay) {
  this.extDisplay = extDisplay;
  this.initData();
  this.initPattern();
  this.initToolbar();
  this.initTabs();
};

CGPanelLayout.prototype.initData = function () {
  var ClipboardBehaviour = new CGClipboardBehaviour();
  var extData = this.extDisplay.select('.data').first();
  this.Clipboard = new Ext.form.TextArea();
  this.Clipboard.applyTo(extData);
  extData.on("click", this.atDataClick, this);
  extData.on("select", this.atDataSelect, this);
  ClipboardBehaviour.init(this.Clipboard);
};

CGPanelLayout.prototype.initPattern = function () {
  var extPattern = this.extDisplay.select('.pattern').first();
  var extShowOptions = extPattern.select('.command.options').first();
  extShowOptions.on("click", this.atShowOptionsClick, this);
};

CGPanelLayout.prototype.initToolbar = function () {
  var extToolbar = this.extDisplay.select('.toolbar').first();
  var extSearch = extToolbar.select('.search').first();
  var extAddForm = this.extDisplay.select('.addform').first();
  var extAddField = extToolbar.select('.addfieldsplit').first();

  extSearch = new Ext.Button(extSearch.dom, {text: LangDataImporter.Search});
  extAddForm = new Ext.Button(extAddForm.dom, {text: LangDataImporter.AddForm});
  extAddField = new Ext.SplitButton(extAddField.dom,
      {cls: "input", text: LangDataImporter.AddField, menu: {items: [new Ext.menu.Item({text: LangDataImporter.AddFields, handler: CGPanelLayout.prototype.atAddFieldsClick.bind(this)})]}}
  );

  extSearch.on("click", this.atSearchClick, this);
  extAddForm.on("click", this.atAddFormClick, this);
  extAddField.on("click", this.atAddFieldClick, this);

  this.extSelectorFields = extToolbar.select('.fields').first();
  this.extSelectorFields.on("change", this.atSelectorFieldsChange, this);
  this.extSelectorFields.dom.innerHTML = "";
};

CGPanelLayout.prototype.initTabs = function () {
  this.TabSet = new CGLayoutTabSet();
  this.TabSet.setDefinition(this.Definition);
  this.TabSet.init(this.extDisplay.select(".tabs").first());
  this.TabSet.onDefinitionChange = CGPanelLayout.prototype.atTabSetDefinitionChange.bind(this);
  this.TabSet.onSelectForm = CGPanelLayout.prototype.atTabSetSelectForm.bind(this);
  this.TabSet.onSelectField = CGPanelLayout.prototype.atTabSetSelectField.bind(this);
  this.TabSet.onDeleteForm = CGPanelLayout.prototype.atTabSetDeleteForm.bind(this);
  this.TabSet.onFieldChange = CGPanelLayout.prototype.atTabSetFieldChange.bind(this);
};

CGPanelLayout.prototype.setDefinition = function (Definition) {
  this.Definition = Definition;
  if (this.TabSet) this.TabSet.setDefinition(Definition);
};

CGPanelLayout.prototype.setFields = function (aFields) {
  this.aFields = aFields;
  if (this.TabSet) this.TabSet.setFields(aFields);
};

CGPanelLayout.prototype.getDefinitionFieldsOrder = function () {
  return this.TabSet.getDefinitionFieldsOrder();
};

CGPanelLayout.prototype.addTab = function (codeForm) {
  var extSelector = this.extSelectorFields.down("select");
  if (extSelector.dom.options.length <= 0) return;
  var code = extSelector.dom.options[0].value;
  this.TabSet.addTab(codeForm, true);
  this.TabSet.selectField(code);
};

CGPanelLayout.prototype.setFieldValue = function (code, sValue) {
  this.TabSet.setFieldValue(code, sValue);
};

CGPanelLayout.prototype.refresh = function () {
  var extSelector = this.extSelectorFields.down("select");
  var codeSelected = null;
  var extPattern = this.extDisplay.select(".pattern").first();
  var extDelimiterType = extPattern.select('.type.' + this.Delimiter.type).first();
  var sFields;

  if ((extSelector != null) && (extSelector.dom.selectedIndex > 0)) codeSelected = extSelector.dom.options[extSelector.dom.selectedIndex].value;

  sFields = "<select name='pltb_fields'>";
  for (var iPos = 0; iPos < this.Definition.aFields.length; iPos++) {
    var Field = this.Definition.aFields[iPos];
    var sSelected = ((codeSelected != null) && (Field.code == codeSelected)) ? " selected" : "";
    sFields += "<option value='" + Field.code + "'" + sSelected + ">" + Field.title + "</option>";
  }
  sFields += "</select>";
  this.extSelectorFields.dom.innerHTML = sFields;

  if (this.Delimiter.type == "free") {
    extDelimiterType.select(".startwith").first().dom.innerHTML = this.Delimiter.start;
    extDelimiterType.select(".endwith").first().dom.innerHTML = this.Delimiter.end;
  }
  else if (this.Delimiter.type == "regexp") {
    extDelimiterType.select(".regexp").first().dom.innerHTML = this.Delimiter.start;
  }

  extPattern.dom.className = "pattern";
  extPattern.addClass(this.Delimiter.type);

  this.TabSet.refresh();
};

//---------------------------------------------------------------------------------------------------------------------

CGPanelLayout.prototype.atDataClick = function (EventLaunched, DOMTarget) {
  if (this.onClipboardClick) this.onClipboardClick();
};

CGPanelLayout.prototype.atDataSelect = function (EventLaunched, DOMTarget) {
  if (this.onClipboardSelect) this.onClipboardSelect();
};

CGPanelLayout.prototype.atShowOptionsClick = function (EventLaunched) {
  if (this.onShowOptions) this.onShowOptions();
  if (EventLaunched) Event.stop(EventLaunched);
  return false;
};

CGPanelLayout.prototype.atSearchClick = function (EventLaunched) {
  if (this.onSearch) this.onSearch();
  if (EventLaunched) Event.stop(EventLaunched);
  return false;
};

CGPanelLayout.prototype.atSelectorFieldsChange = function (EventLaunched, DOMElement) {
  this.TabSet.selectField(DOMElement.options[DOMElement.selectedIndex].value);
};

CGPanelLayout.prototype.atAddFormClick = function (EventLaunched) {
  if (this.onAddForm) this.onAddForm();
};

CGPanelLayout.prototype.atAddFieldClick = function (EventLaunched) {
  var extSelector = this.extSelectorFields.down("select");
  var code = extSelector.dom.options[extSelector.dom.selectedIndex].value;
  var sValue = this.Clipboard.getSelectedContent();
  var index = extSelector.dom.selectedIndex + 1;

  if (this.onFieldChange) this.onFieldChange(code, sValue);

  this.atSearchClick(EventLaunched);

  if (index >= extSelector.dom.options.length) {
    index = 0;
    if (this.onAddForm) this.onAddForm();
  }
  else this.TabSet.selectField(code);

  extSelector.dom.selectedIndex = index;

  if (EventLaunched) Event.stop(EventLaunched);

  return false;
};

CGPanelLayout.prototype.atAddFieldsClick = function (EventLaunched) {
  if (this.onGenerate) this.onGenerate();
};

CGPanelLayout.prototype.atTabSetDefinitionChange = function () {
  if (this.onDefinitionChange) this.onDefinitionChange();
};

CGPanelLayout.prototype.atTabSetSelectForm = function (code) {
  if (this.onSelectForm) this.onSelectForm(code);
};

CGPanelLayout.prototype.atTabSetSelectField = function (code) {
  var extSelector = this.extSelectorFields.down("select");
  for (var iPos = 0; iPos < extSelector.dom.options.length; iPos++) {
    var Option = extSelector.dom.options[iPos];
    if (Option.value == code) {
      extSelector.dom.selectedIndex = iPos;
      return;
    }
  }
};

CGPanelLayout.prototype.atTabSetDeleteForm = function (code) {
  if (this.onDeleteForm) this.onDeleteForm(code);
};

CGPanelLayout.prototype.atTabSetFieldChange = function (codeField, sValue) {
  if (this.onFieldChange) this.onFieldChange(codeField, sValue);
};

CGPanelOptions = function () {
  this.base = CGPanel;
  this.base();
  this.extDisplay = null;
  this.extList = null;
  this.onSetDelimiter = null;
};

CGPanelOptions.prototype = new CGPanel;

CGPanelOptions.prototype.init = function (extDisplay) {
  this.extDisplay = extDisplay;
  this.initDelimiters();
  this.initFields();
  this.initToolbar();
};

CGPanelOptions.prototype.initDelimiters = function () {
  var extDelimiters = this.extDisplay.select(".delimiters").first();
  var extCommandList = extDelimiters.select(".command");
  var extInputList = extDelimiters.select("input.text");

  extCommandList.each(function (extCommand) {
    var DOMCommand = extCommand.dom;
    Event.observe(DOMCommand, 'click', this.atSetDelimiterClick.bindAsEventListener(this, DOMCommand));
  }, this);

  extInputList.each(function (extInput) {
    var DOMInput = extInput.dom;
    Event.observe(DOMInput, 'click', this.atInputTextClick.bindAsEventListener(this, DOMInput));
    Event.observe(DOMInput, 'change', this.atInputChangeClick.bindAsEventListener(this, DOMInput));
  }, this);
};

CGPanelOptions.prototype.initFields = function () {
  this.extList = this.extDisplay.select(".definition.fields .list").first();
  this.extList.dom.innerHTML = "";
};

CGPanelOptions.prototype.initToolbar = function () {
  var extToolbar = this.extDisplay.select('.toolbar').first();
  var extClose = extToolbar.select('.command.close').first();
  extClose = new Ext.Button(extClose.dom, {text: LangDataImporter.Close});
  extClose.on("click", this.atCloseClick, this);
};

CGPanelOptions.prototype.raiseElement = function (DOMElement) {
  if (DOMElement != this.extList.dom.immediateDescendants().first()) {
    extPrevious = Ext.get(DOMElement.previous());
    DOMElement.remove();
    extPrevious.insertSibling(DOMElement, 'before');
  }
  new Effect.Highlight(DOMElement, {duration: 0.5});
};

CGPanelOptions.prototype.buryElement = function (DOMElement) {
  if (DOMElement != this.extList.dom.immediateDescendants().last()) {
    extNext = Ext.get(DOMElement.next());
    DOMElement.remove();
    extNext.insertSibling(DOMElement, 'after');
  }
  new Effect.Highlight(DOMElement, {duration: 0.5});
};

CGPanelOptions.prototype.getDefinitionFieldsOrder = function () {
  var extCodeList = this.extList.select(".definition.field .code");
  var aResult = new Array();

  extCodeList.each(function (extCode) {
    aResult.push(extCode.dom.innerHTML);
  }, this);

  return aResult;
};

CGPanelOptions.prototype.refresh = function () {
  var TemplateField = new Template(TEMPLATE_FIELD);
  var extDelimiter = this.extDisplay.select(".delimiters ." + this.Delimiter.type).first();

  this.extList.dom.innerHTML = "";
  for (var iPos = 0; iPos < this.Definition.aFields.length; iPos++) {
    Field = this.Definition.aFields[iPos];
    sContent = TemplateField.evaluate({'ImagesPath': Context.Config.ImagesPath, 'code': Field.code, 'title': Field.title});

    new Insertion.Bottom(this.extList.dom, sContent);
    extElement = Ext.get(this.extList.dom.immediateDescendants().last());

    var DOMRaiseOption = extElement.down(".raise").dom;
    Event.observe(DOMRaiseOption, 'click', this.atFieldRaiseClick.bindAsEventListener(this, DOMRaiseOption));

    var DOMBuryOption = extElement.down(".bury").dom;
    Event.observe(DOMBuryOption, 'click', this.atFieldBuryClick.bindAsEventListener(this, DOMBuryOption));
  }

  if (extDelimiter != null) extDelimiter.dom.checked = true;

};

//---------------------------------------------------------------------------------------------------------------------

CGPanelOptions.prototype.atSetDelimiterClick = function (EventLaunched, DOMCommand) {
  var extCommand = Ext.get(DOMCommand);
  var sStart = null, sEnd = null;
  var Delimiter = new Object();

  if (extCommand.hasClass("paragraph")) Delimiter = {type: "paragraph", start: null, end: "\n"};
  else if (extCommand.hasClass("tab")) Delimiter = {type: "tab", start: null, end: "\t"};
  else if (extCommand.hasClass("dot")) Delimiter = {type: "dot", start: null, end: "."};
  else if (extCommand.hasClass("semicolon")) Delimiter = {type: "semicolon", start: null, end: ";"};
  else if (extCommand.hasClass("comma")) Delimiter = {type: "comma", start: null, end: ","};
  else if (extCommand.hasClass("free")) {
    Delimiter.type = "free";
    Delimiter.start = this.extDisplay.select(".text.free.startwith").first().dom.value;
    Delimiter.end = this.extDisplay.select(".text.free.endwith").first().dom.value;
  }
  else if (extCommand.hasClass("regexp")) {
    Delimiter.type = "regexp";
    Delimiter.start = this.extDisplay.select(".text.regexp").first().dom.value;
  }

  if (this.onSetDelimiter) this.onSetDelimiter(Delimiter);
};

CGPanelOptions.prototype.atInputTextClick = function (oEvent, DOMTarget) {
  var extTarget = Ext.get(DOMTarget);
  var sClass = "";

  if (extTarget.hasClass("free")) sClass = "free";
  else if (extTarget.hasClass("regexp")) sClass = "regexp";

  if (sClass != "") {
    var extRadio = this.extDisplay.select(".command." + sClass).first();
    extRadio.dom.checked = true;
  }

  this.atInputChangeClick(oEvent, DOMTarget);
};

CGPanelOptions.prototype.atInputChangeClick = function (oEvent, DOMTarget) {
  var extTarget = Ext.get(DOMTarget);
  var sStart = null, sEnd = null;
  var Delimiter = new Object();

  if (extTarget.hasClass("regexp")) {
    Delimiter.type = "regexp";
    Delimiter.start = this.extDisplay.select(".text.regexp").first().dom.value;
  }
  else if (extTarget.hasClass("free")) {
    Delimiter.type = "free";
    Delimiter.start = this.extDisplay.select(".text.free.startwith").first().dom.value;
    Delimiter.end = this.extDisplay.select(".text.free.endwith").first().dom.value;
  }

  if (this.onSetDelimiter) this.onSetDelimiter(Delimiter);
};

CGPanelOptions.prototype.atFieldRaiseClick = function (oEvent, DOMTarget) {
  var extTarget = Ext.get(DOMTarget);
  DOMElement = extTarget.up(".definition.field").dom;
  this.raiseElement(DOMElement);
  if (this.onDefinitionChange) this.onDefinitionChange();
};

CGPanelOptions.prototype.atFieldBuryClick = function (oEvent, DOMTarget) {
  var extTarget = Ext.get(DOMTarget);
  DOMElement = extTarget.up(".definition.field").dom;
  this.buryElement(DOMElement);
  if (this.onDefinitionChange) this.onDefinitionChange();
};

CGPanelOptions.prototype.atCloseClick = function () {
  if (this.onClose) this.onClose();
};

CGDataImporter = function () {
  this.extDisplay = null;
  this.Definition = null;
  this.Result = new Array();
  this.aPanels = new Array();
  this.aCodeForms = new Array();
  this.iPosition = 0;
  this.indexCurrentForm = 0;
  this.indexCurrentField = 0;
  this.Delimiter = {type: 'paragraph', start: null, end: "\n"};
};

CGDataImporter.prototype.init = function (sDisplay) {
  this.extDisplay = Ext.get(sDisplay);
  this.extDisplay.dom.innerHTML = TEMPLATE;
  this.initPanels();
};

CGDataImporter.prototype.initPanels = function () {
  this.aPanels["clipboard"] = new CGPanelClipboard();
  this.aPanels["clipboard"].init(this.extDisplay.down(".panel.clipboard"));
  this.aPanels["clipboard"].onDataChange = CGDataImporter.prototype.updateData.bind(this);

  this.aPanels["options"] = new CGPanelOptions();
  this.aPanels["options"].init(this.extDisplay.down(".panel.options"));
  this.aPanels["options"].setDelimiter(this.Delimiter);
  this.aPanels["options"].onSetDelimiter = CGDataImporter.prototype.setDelimiter.bind(this);
  this.aPanels["options"].onClose = CGDataImporter.prototype.closePanelOptions.bind(this);
  this.aPanels["options"].onDefinitionChange = CGDataImporter.prototype.updateDefinition.bind(this, "options");

  this.aPanels["layout"] = new CGPanelLayout();
  this.aPanels["layout"].init(this.extDisplay.down(".panel.layout"));
  this.aPanels["layout"].setDelimiter(this.Delimiter);
  this.aPanels["layout"].onShowOptions = CGDataImporter.prototype.renderPanelOptions.bind(this, true);
  this.aPanels["layout"].onSearch = CGDataImporter.prototype.search.bind(this);
  this.aPanels["layout"].onDefinitionChange = CGDataImporter.prototype.updateDefinition.bind(this, "layout");
  this.aPanels["layout"].onGenerate = CGDataImporter.prototype.generate.bind(this);
  this.aPanels["layout"].onSelectForm = CGDataImporter.prototype.selectForm.bind(this);
  this.aPanels["layout"].onAddForm = CGDataImporter.prototype.addForm.bind(this);
  this.aPanels["layout"].onDeleteForm = CGDataImporter.prototype.deleteForm.bind(this);
  this.aPanels["layout"].onFieldChange = CGDataImporter.prototype.setFieldValue.bind(this);
  this.aPanels["layout"].onClipboardClick = CGDataImporter.prototype.atClipboardClick.bind(this);
  this.aPanels["layout"].onClipboardSelect = CGDataImporter.prototype.atClipboardSelect.bind(this);
};

CGDataImporter.prototype.setDefinition = function (Definition) {
  this.Definition = Definition;

  this.Definition.aFieldsCodes = new Array();
  for (var iPos = 0; iPos < this.Definition.aFields.length; iPos++) {
    var Field = this.Definition.aFields[iPos];
    this.Definition.aFieldsCodes[Field.code] = iPos;
  }

  this.aPanels["options"].setDefinition(this.Definition);
  this.aPanels["layout"].setDefinition(this.Definition);
};

CGDataImporter.prototype.setDelimiter = function (Delimiter) {
  this.Delimiter = Delimiter;
  this.aPanels["layout"].setDelimiter(Delimiter);
  this.aPanels["layout"].refresh();
};

CGDataImporter.prototype.setPosition = function (iPosition) {
  this.iPosition = iPosition;
};

CGDataImporter.prototype.updateData = function () {
  var sContent = this.aPanels["clipboard"].Clipboard.getContent();
  this.aPanels["layout"].Clipboard.setContent(sContent);
  this.aPanels["layout"].refresh();
};

CGDataImporter.prototype.updateDefinition = function (sEventPanel) {
  var aFieldsOrder = this.aPanels[sEventPanel].getDefinitionFieldsOrder();
  var aResult = new Array();

  for (var iPos = 0; iPos < aFieldsOrder.length; iPos++) {
    var iCurrentPos = this.Definition.aFieldsCodes[aFieldsOrder[iPos]];
    var Field = this.Definition.aFields[iCurrentPos];
    if (Field == null) continue;
    aResult.push(Field);
  }

  this.Definition.aFields = aResult;
  this.setDefinition(this.Definition);

  if (sEventPanel != "options") this.aPanels["options"].refresh();
  this.aPanels["layout"].refresh();
};

CGDataImporter.prototype.search = function () {
  var sContent = this.aPanels["layout"].Clipboard.getContent();
  var iStartPos, iEndPos;

  if ((this.iPosition == null) || (this.iPosition > sContent.length)) this.iPosition = 0;
  iStartPos = this.iPosition;

  if (this.Delimiter.start) {
    iStartPos = sContent.indexOfDelimiter(this.Delimiter.start, this.iPosition);
    if (iStartPos == -1) iStartPos = sContent.length;
    else iStartPos = iStartPos + this.Delimiter.start.length;
  }

  iEndPos = sContent.indexOfDelimiter(this.Delimiter.end, iStartPos);
  if (iEndPos == -1) {
    if (this.Delimiter.type != "free") iEndPos = sContent.length;
    else iEndPos = iStartPos;
  }

  this.aPanels["layout"].Clipboard.select(iStartPos, iEndPos);

  this.setPosition(iEndPos + this.Delimiter.end.length);
};

CGDataImporter.prototype.selectForm = function (iForm) {
  this.indexCurrentForm = iForm;
};

CGDataImporter.prototype.getResult = function () {
  return this.Result;
};

CGDataImporter.prototype.addForm = function () {
  codeForm = this.createEmptyForm();
  this.aPanels["layout"].addTab(codeForm);
  return codeForm;
};

CGDataImporter.prototype.deleteForm = function (code) {
  delete (this.Result[code]);
};

CGDataImporter.prototype.setFieldValue = function (codeField, sValue) {
  if (this.Result[this.indexCurrentForm] == null) return false;
  this.Result[this.indexCurrentForm][codeField] = sValue;
  this.aPanels["layout"].setFieldValue(codeField, sValue);
  this.indexCurrentField = this.Definition.aFieldsCodes[codeField];
};

CGDataImporter.prototype.nextField = function () {
  this.indexCurrentField++;
  if (this.Definition.aFields[this.indexCurrentField] == null) {
    this.indexCurrentForm = this.addForm();
    this.indexCurrentField = 0;
  }
  return this.Definition.aFields[this.indexCurrentField].code;
};

CGDataImporter.prototype.generate = function () {
  var sContent = this.aPanels["layout"].Clipboard.getContent();
  var codeField, sData;
  var indexForm, indexField;

  while (this.iPosition < sContent.length) {
    this.search();
    codeField = this.nextField();
    sData = this.aPanels["layout"].Clipboard.getSelectedContent();
    this.setFieldValue(codeField, sData);
  }
};

CGDataImporter.prototype.createEmptyForm = function () {
  var codeForm = this.indexCurrentForm = this.Result.length;
  this.Result[this.indexCurrentForm] = new Array();

  for (var iPos = 0; iPos < this.Definition.aFields.length; iPos++) {
    var Field = this.Definition.aFields[iPos];
    this.Result[this.indexCurrentForm][Field.code] = (Field.defaultValue) ? Field.defaultValue : "";
  }

  return codeForm;
};

CGDataImporter.prototype.hidePanels = function () {
  this.aPanels["clipboard"].hide();
  this.aPanels["options"].hide();
  this.aPanels["layout"].hide();
};

CGDataImporter.prototype.renderPanelClipboard = function () {
  this.hidePanels();
  this.aPanels["clipboard"].show();
};

CGDataImporter.prototype.renderPanelOptions = function (bDialog) {
  if (bDialog) {
    if (this.aPanels["options"].isDialog()) this.aPanels["options"].hideDialog();
    else this.aPanels["options"].showDialog();
  }
  else {
    this.hidePanels();
    this.aPanels["options"].show();
  }
};

CGDataImporter.prototype.renderPanelLayout = function () {
  this.hidePanels();
  this.aPanels["layout"].show();
  if (this.Result.length == 0) this.addForm();
};

CGDataImporter.prototype.closePanelOptions = function () {
  this.aPanels["options"].hide();
};

CGDataImporter.prototype.refresh = function (sDisplay) {
  this.aPanels["clipboard"].refresh();
  this.aPanels["options"].refresh();
  this.aPanels["layout"].refresh();
};

//---------------------------------------------------------------------------------------------------------------------

CGDataImporter.prototype.atClipboardClick = function (EventLaunched, iPosition) {
  this.setPosition(this.aPanels["layout"].Clipboard.getCursorPosition());
};

CGDataImporter.prototype.atClipboardSelect = function (EventLaunched, iPosition) {
  var iPosition = this.aPanels["layout"].Clipboard.getCursorPosition();
  iPosition += this.aPanels["layout"].Clipboard.getSelectedContent().length + 1;
  this.aPanels["layout"].Clipboard.setCursorPosition(iPosition);
  this.setPosition(iPosition);
};

ADD_NODE_BLANK = "blank";
ADD_NODE_FROM_FILE = "file";
ADD_NODE_FROM_CLIPBOARD = "clipboard";

ADD_NODE_OPTION_PRESERVE_ORIGINAL = "preserve_original";
ADD_NODE_OPTION_REPLACE = "replace";
ADD_NODE_OPTION_DUPLICATE = "duplicate";

CGDialogAddNode = function () {
  this.base = CGDialog;
  this.base("dlgAddNode");
  this.DataImporter = null;
  this.Wizard = null;
  this.NodeType = new Object();
};

//------------------------------------------------------------------
CGDialogAddNode.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogAddNode.prototype.init = function () {

  this.initWizard();
  this.initAddBlank();
  this.initAddFromClipboard();
  this.initBehaviours();
  this.initRequiredFields();

  if ((!Ext.isIE) && (frames["dlgAddNode.uploadfileframe"])) delete(frames["dlgAddNode.uploadfileframe"]);
  var eFrame = frames["dlgAddNode.uploadfileframe"];
  this.input = new InputFiles(eFrame, $("dlgAddNode.filelist"), 1, 90, 263);
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.initWizard = function () {
  var html, DOMLayer;

  html = AppTemplate.DialogAddNode;
  html = translate(html, Lang.DialogAddNode);

  this.Wizard = new CGWizard();
  this.Wizard.init(html);
  this.Wizard.onCancel = this.atCancel.bind(this);
  this.Wizard.onAccept = this.atAccept.bind(this);
  this.Wizard.PreviousStepHandler = this.atPreviousStep.bind(this);
  this.Wizard.NextStepHandler = this.atNextStep.bind(this);
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.initAddBlank = function () {
  var Store = new Ext.data.SimpleStore({fields: ['code', 'caption']});

  this.AddBlankNodeTypeList = new Ext.form.ComboBox({
    store: Store,
    displayField: 'caption',
    emptyText: Lang.DialogAddNode.SelectOne,
    typeAhead: true,
    triggerAction: 'all',
    hideTrigger: false,
    mode: 'local',
    resizable: true,
    width: 500,
    listWidth: 500,
    tpl: new Ext.Template("<div>{caption}</div>")
  });

  this.AddBlankNodeTypeList.applyTo('dlgAddNode.addblanklistinput');
  this.AddBlankNodeTypeList.on('select', this.atSelectAddBlankNodeType, this);
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.initAddFromClipboard = function () {
  this.initDataImporter();
  this.initNodeTypeSelector();
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.initDataImporter = function () {
  this.DataImporter = new CGDataImporter();
  this.DataImporter.init('dlgAddNode.dataimporter');
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.initNodeTypeSelector = function () {
  var Store = new Ext.data.SimpleStore({fields: ['code', 'caption']});

  this.AddFromClipboardNodeTypeList = new Ext.form.ComboBox({
    store: Store,
    displayField: 'caption',
    emptyText: Lang.DialogAddNode.SelectOne,
    typeAhead: true,
    triggerAction: 'all',
    hideTrigger: false,
    mode: 'local',
    resizable: true,
    width: 500,
    listWidth: 500,
    tpl: new Ext.Template("<div>{caption}</div>")
  });

  this.AddFromClipboardNodeTypeList.applyTo('dlgAddNode.addfromclipboardlistinput');
  this.AddFromClipboardNodeTypeList.on('select', this.atSelectFromClipboardNodeType, this);
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.initBehaviours = function () {
  var extOption;
  extOption = Ext.get("dlgAddNode.addblank");
  extOption.on("click", this.atAddBlankClick, this);
  extOption = Ext.get("dlgAddNode.addfromfile");
  extOption.on("click", this.atAddFromFileClick, this);
  extOption = Ext.get("dlgAddNode.addfromclipboard");
  extOption.on("click", this.atAddFromClipboardClick, this);
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.show = function () {
  if (this.Wizard == null) return false;
  $("dlgAddNode.status").hide();

  this.Wizard.show();

  if (this.Target.From == ADD_NODE_FROM_FILE) {
    this.activateOptionAddFromFile();
    this.atNextStep();
  }
  else if (this.Target.From == ADD_NODE_FROM_CLIPBOARD) this.activateOptionAddFromClipboard();
  else this.activateOptionAddBlank();

};

//------------------------------------------------------------------
CGDialogAddNode.prototype.activateOptionAddBlank = function () {
  var extAddBlankList = Ext.get("dlgAddNode.addblanklist");
  var extAddFromClipboardList = Ext.get("dlgAddNode.addfromclipboardlist");
  extAddBlankList.addClass("visible");
  extAddFromClipboardList.removeClass("visible");
  this.Wizard.disableNextButton();
  if (this.AddBlankNodeTypeList.getValue() == "") this.Wizard.disableFinishButton();
  else this.Wizard.enableFinishButton();
  $("dlgAddNode.addblank").checked = true;
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.activateOptionAddFromFile = function () {
  var extAddBlankList = Ext.get("dlgAddNode.addblanklist");
  var extAddFromClipboardList = Ext.get("dlgAddNode.addfromclipboardlist");
  extAddBlankList.removeClass("visible");
  extAddFromClipboardList.removeClass("visible");
  this.Wizard.enableNextButton();
  this.Wizard.disableFinishButton();
  $("dlgAddNode.addfromfile").checked = true;
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.activateOptionAddFromClipboard = function () {
  var extAddBlankList = Ext.get("dlgAddNode.addblanklist");
  var extAddFromClipboardList = Ext.get("dlgAddNode.addfromclipboardlist");
  extAddBlankList.removeClass("visible");
  extAddFromClipboardList.addClass("visible");
  if (this.AddFromClipboardNodeTypeList.getValue() == "") this.Wizard.disableNextButton();
  else this.Wizard.enableNextButton();
  this.Wizard.disableFinishButton();
  $("dlgAddNode.addfromclipboard").checked = true;
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.hide = function () {
  if (this.Wizard == null) return false;
  this.Wizard.hide();
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.destroy = function () {
  this.Wizard.destroy();
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.refreshNodeTypeLists = function () {
  var RecordDefinition = new Ext.data.Record.create({id: 'code'}, {name: 'caption'});

  this.AddBlankNodeTypeList.store.removeAll();
  this.AddFromClipboardNodeTypeList.store.removeAll();
  for (var iPos = 0; iPos < this.Target.NodeTypes.length; iPos++) {
    var NodeType = this.Target.NodeTypes[iPos];
    var record = new RecordDefinition({code: NodeType.Code, caption: NodeType.Caption});
    this.AddBlankNodeTypeList.store.add(record);
    this.AddFromClipboardNodeTypeList.store.add(record);
  }
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.refresh = function () {
  if (!this.Wizard) return false;

  this.refreshNodeTypeLists();

  $("dlgAddNode.optionpreserveoriginal").checked = true;
  $("dlgAddNode.description").value = Lang.DialogAddNode.AddedAt + " " + getFormattedDate(new Date(), Context.Config.Language, true);
  $("dlgAddNode.loadingnodetype").style.display = "none";
  $("dlgAddNode.nodetype").style.display = "none";

  if (this.Target.Definition != null) {
    var sNodeTypeFields = EMPTY;
    for (var iPos = 0; iPos < this.Target.Definition.aFields.length; iPos++) {
      var Field = this.Target.Definition.aFields[iPos];
      sNodeTypeFields += "<li>" + Field.title + "</li>";
    }
    $("dlgAddNode.nodetype").style.display = "block";
    $("dlgAddNode.nodetypefields").innerHTML = sNodeTypeFields;

    this.DataImporter.setDefinition(this.Target.Definition);
    this.DataImporter.refresh();
  }

  this.Wizard.enableNextButton();
};

//------------------------------------------------------------------
CGDialogAddNode.prototype.check = function () {
  var sMessage = EMPTY;
  var DOMAddBlank = $("dlgAddNode.addblank");
  var DOMAddFromFile = $("dlgAddNode.addfromfile");

  DOMAddBlank.removeClassName("error");
  if (DOMAddBlank.checked) {
    if (this.NodeType.Code == null) sMessage += "<li>" + Lang.DialogAddNode.Error.TypeRequired + "</li>";
    DOMAddBlank.addClassName("error");
  }

  DOMAddFromFile.removeClassName("error");
  if (DOMAddFromFile.checked) {
    if (this.input.GetCount() <= 0) sMessage += "<li>" + Lang.DialogAddNode.Error.FileRequired + "</li>";
    DOMAddFromFile.addClassName("error");
  }

  if (sMessage != EMPTY) {
    this.showStatus("<ul>" + sMessage + "</ul>");
  }

  return (sMessage == EMPTY);
};

//==================================================================
CGDialogAddNode.prototype.atAccept = function () {
  if (!this.check()) return;

  this.FileForm = this.input.eForm;

  if ($("dlgAddNode.addblank").checked) this.From = ADD_NODE_BLANK;
  else if ($("dlgAddNode.addfromfile").checked) this.From = ADD_NODE_FROM_FILE;
  else this.From = ADD_NODE_FROM_CLIPBOARD;

  if ($("dlgAddNode.optionpreserveoriginal").checked) this.Option = ADD_NODE_OPTION_PRESERVE_ORIGINAL;
  else if ($("dlgAddNode.optionreplace").checked) this.Option = ADD_NODE_OPTION_REPLACE;
  else this.Option = ADD_NODE_OPTION_DUPLICATE;

  this.Description = $("dlgAddNode.description").value;
  this.Result = this.DataImporter.getResult();

  this.hide();

  if (this.onAccept) this.onAccept();
};

//==================================================================
CGDialogAddNode.prototype.atCancel = function () {
  this.hide();
  this.destroy();
  this.input = null;
  if (this.onCancel) this.onCancel();
};

//==================================================================
CGDialogAddNode.prototype.atPreviousStep = function () {
  var sBranch = $("dlgAddNode.addfromclipboard").checked ? $("dlgAddNode.addfromclipboard").value : $("dlgAddNode.addfromfile").value;

  this.Wizard.previousStep(sBranch);

  if ($("dlgAddNode.addfromclipboard").checked) {
    if (this.Wizard.getActiveStep().id == 2) this.DataImporter.renderPanelClipboard();
    else if (this.Wizard.getActiveStep().id == 3) this.DataImporter.renderPanelLayout();
  }

};

//==================================================================
CGDialogAddNode.prototype.atNextStep = function () {
  var sBranch = $("dlgAddNode.addfromclipboard").checked ? $("dlgAddNode.addfromclipboard").value : $("dlgAddNode.addfromfile").value;

  this.Wizard.nextStep(sBranch);

  if ($("dlgAddNode.addfromclipboard").checked) {
    if (this.Wizard.getActiveStep().id == 2) this.DataImporter.renderPanelClipboard();
    else if (this.Wizard.getActiveStep().id == 3) this.DataImporter.renderPanelLayout();
  }

};

//==================================================================
CGDialogAddNode.prototype.atSelectAddBlankNodeType = function (ComboBox, Record, Index) {
  this.NodeType.Code = Record.data.code;
  this.NodeType.Caption = Record.data.caption;
  this.Wizard.enableFinishButton();
};

//==================================================================
CGDialogAddNode.prototype.atSelectFromClipboardNodeType = function (ComboBox, Record, Index) {
  var Action = new CGActionAddNode();

  $("dlgAddNode.loadingnodetype").style.display = "block";
  $("dlgAddNode.nodetype").style.display = "none";
  this.NodeType.Code = Record.data.code;
  this.NodeType.Caption = Record.data.caption;
  this.Wizard.disableNextButton();

  Action.refresh(this);
};

//==================================================================
CGDialogAddNode.prototype.atAddBlankClick = function () {
  this.activateOptionAddBlank();
};

//==================================================================
CGDialogAddNode.prototype.atAddFromFileClick = function () {
  this.activateOptionAddFromFile();
};

//==================================================================
CGDialogAddNode.prototype.atAddFromClipboardClick = function () {
  this.activateOptionAddFromClipboard();
};

CGDialogEditNodeDocument = function () {
  this.base = CGDialog;
  this.base("dlgEditNodeDocument");
  this.bDownloaded = false;
};

//------------------------------------------------------------------
CGDialogEditNodeDocument.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogEditNodeDocument.prototype.init = function (DOMLayer) {
  this.extLayer = Ext.get(DOMLayer);
  this.initWizard(DOMLayer);

  var extDownloadDocumentList = this.extLayer.select("a.download");
  extDownloadDocumentList.each(function (extDownloadDocument) {
    extDownloadDocument.on("click", this.atDownloadDocument, this);
  }, this);

  var extContinueEdition = this.extLayer.select("a.continue").first();
  extContinueEdition.on("click", this.atContinueEdition, this);

  var extReplaceDocument = this.extLayer.select("a.replace").first();
  extReplaceDocument.on("click", this.atReplaceDocument, this);

  var extFinishEditing = this.extLayer.select("a.finish").first();
  extFinishEditing.on("click", this.atFinishEditing, this);

  var extCancelList = this.extLayer.select("a.cancel");
  extCancelList.each(function (extCancel) {
    extCancel.on("click", this.atCancel, this);
  }, this);

  var extFile = Ext.get("DialogEditNodeDocument.form").select(".file").first();
  extFile.on("change", this.atFileChange, this);
};

//------------------------------------------------------------------
CGDialogEditNodeDocument.prototype.initWizard = function (DOMLayer) {
  var html = AppTemplate.DialogEditNodeDocument;

  this.Wizard = new CGWizard();
  this.Wizard.init(translate(html, Lang.DialogEditNodeDocument), DOMLayer, false);
  this.Wizard.onCancel = this.atCancel.bind(this);
  this.Wizard.onAccept = this.atAccept.bind(this);
  this.Wizard.onNextStep = this.atNextStep.bind(this);
};

//------------------------------------------------------------------
CGDialogEditNodeDocument.prototype.show = function () {
  var extStatus = Ext.get("dlgEditNodeDocument.status");
  extStatus.hide();
};

//------------------------------------------------------------------
CGDialogEditNodeDocument.prototype.refresh = function () {
};

//------------------------------------------------------------------
CGDialogEditNodeDocument.prototype.check = function () {
  var sMessage = EMPTY;
  var extForm = Ext.get("DialogEditNodeDocument.form");
  var extFile = extForm.select(".file").first();

  extFile.removeClass("error");
  if (extFile.dom.value == "") {
    sMessage += "<li>" + Lang.DialogEditNodeDocument.Error.FileRequired + "</li>";
    extFile.addClass("error");
  }

  if (sMessage != EMPTY) {
    this.showStatus("<ul>" + sMessage + "</ul>");
  }
  else this.hideStatus();

  return (sMessage == EMPTY);
};

CGDialogEditNodeDocument.prototype.nextStep = function () {
  this.Wizard.nextStep();
};

//==================================================================
CGDialogEditNodeDocument.prototype.atAccept = function () {
  if (!this.check()) return;

  this.DownloadPreference = false;
  this.EditPreference = false;
  this.FileForm = $("DialogEditNodeDocument.form");

  this.hide();

  if (this.onAccept) this.onAccept();
};

CGDialogEditNodeDocument.prototype.atCancel = function () {
  this.hide();
  this.destroy();
  if (this.onCancel) this.onCancel();
};

CGDialogEditNodeDocument.prototype.atNextStep = function () {
  if (this.Wizard.getActiveStep().id == 2 && !this.bDownloaded) {
    CommandListener.throwCommand("downloadnode(" + this.Target.IdNode + ")");
    this.bDownloaded = true;
  }
};

CGDialogEditNodeDocument.prototype.atDownloadDocument = function () {
  CommandListener.throwCommand("downloadnode(" + this.Target.IdNode + ")");

  if (this.autoStepTimeout)
    window.clearTimeout(this.autoStepTimeout);

  this.autoStepTimeout = window.setTimeout(this.nextStep.bind(this), 5000);

  if (this.bDownloaded)
    return;

  this.bDownloaded = true;
  window.setTimeout(this.nextStep.bind(this), 800);
};

CGDialogEditNodeDocument.prototype.atContinueEdition = function () {
  this.bDownloaded = true;
  this.Wizard.showStep(4);
};

CGDialogEditNodeDocument.prototype.atReplaceDocument = function () {
  this.Wizard.nextStep();
};

CGDialogEditNodeDocument.prototype.atFinishEditing = function () {
  this.atAccept();
};

CGDialogEditNodeDocument.prototype.atFileChange = function () {
  this.check();
};

CGDialogGenerateReport = function () {
  this.base = CGDialog;
  this.base("dlgGenerateReport");
  this.aSelectedNodeTypes = new Array();
};

//------------------------------------------------------------------
CGDialogGenerateReport.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogGenerateReport.prototype.init = function () {
  var html;

  html = AppTemplate.DialogGenerateReport;
  html = translate(html, Lang.DialogGenerateReport);

  this.layer = new Insertion.Bottom(document.body, html).element.immediateDescendants().last();

  this.initDialog();
  this.initNodeTypeListView();
  this.initNodeTypeSelector();
  this.initFilters();
};

//------------------------------------------------------------------
CGDialogGenerateReport.prototype.initNodeTypeListView = function () {
  var template = AppTemplate.DialogGenerateReportType;
  template = translate(template, Lang.DialogGenerateReportType);

  this.NodeTypeListView = new TListView();
  this.NodeTypeListView.init($("dlgGenerateReport.filtertypelist"), "");
  this.NodeTypeListView.setTemplate(template);
  this.NodeTypeListView.removeAllElements();
};

//------------------------------------------------------------------
CGDialogGenerateReport.prototype.initNodeTypeSelector = function () {
  var Store = new Ext.data.SimpleStore({fields: ['code', 'caption']});

  this.NodeTypeSelector = new Ext.form.ComboBox({
    store: Store,
    displayField: 'caption',
    emptyText: Lang.DialogGenerateReport.SelectOne,
    typeAhead: true,
    triggerAction: 'all',
    hideTrigger: false,
    mode: 'local',
    resizable: true,
    width: 500,
    listWidth: 500,
    tpl: new Ext.Template("<div>{caption}</div>")
  });

  this.NodeTypeSelector.applyTo('dlgGenerateReport.filtertypeselector');
  this.NodeTypeSelector.on('select', this.atSelectNodeTypeClick, this);
  this.NodeTypeSelector.on('focus', this.atNodeTypeFocus, this);
};

//------------------------------------------------------------------
CGDialogGenerateReport.prototype.initFilters = function () {

  this.extDateFrom = new Ext.form.DateField({
    format: 'd/m/Y',
    altFormats: 'd-m-y|d/m/y|d-m-Y|Y-m-d|Y/m/d|Y-m|Y/m|m-Y|m/Y|Y',
    minLength: 4
  });
  this.extDateFrom.applyTo($("dlgGenerateReport.filterdatesfrom"));
  this.extDateFrom.on('focus', this.atDateFocus, this);

  this.extDateTo = new Ext.form.DateField({
    format: 'd/m/Y',
    altFormats: 'd-m-y|d/m/y|d-m-Y|Y-m-d|Y/m/d|Y-m|Y/m|m-Y|m/Y|Y',
    minLength: 4
  });
  this.extDateTo.applyTo($("dlgGenerateReport.filterdatesto"));
  this.extDateTo.on('focus', this.atDateFocus, this);

};

//------------------------------------------------------------------
CGDialogGenerateReport.prototype.refreshOptions = function () {
  var CurrentNode = NodesCache.getCurrent();
  var extOption = Ext.get("dlgGenerateReport.optionselection").up(".option");
  var aSelectedNodes = State.getSelectedNodesReferences(CurrentNode.getId());

  $("dlgGenerateReport.optionselection").disabled = (!aSelectedNodes || (aSelectedNodes.size() <= 0)) ? true : false;
  $("dlgGenerateReport.optionselection").checked = (aSelectedNodes && (aSelectedNodes.size() > 0)) ? true : false;

  if (extOption) {
    if (!aSelectedNodes || (aSelectedNodes.size() <= 0)) extOption.addClass("disabled");
    else extOption.removeClass("disabled");
  }
};

//------------------------------------------------------------------
CGDialogGenerateReport.prototype.refreshNodeTypeSelector = function () {
  var RecordDefinition = new Ext.data.Record.create({id: 'code'}, {name: 'caption'});

  this.NodeTypeSelector.store.removeAll();
  for (var iPos = 0; iPos < this.Target.NodeTypes.length; iPos++) {
    var NodeType = this.Target.NodeTypes[iPos];
    var record = new RecordDefinition({code: NodeType.Code, caption: NodeType.Caption});
    this.NodeTypeSelector.store.add(record);
  }
};

//------------------------------------------------------------------
CGDialogGenerateReport.prototype.refresh = function () {
  if (!this.dialog) return false;
  this.refreshOptions();
  this.refreshNodeTypeSelector();
};

//------------------------------------------------------------------
CGDialogGenerateReport.prototype.addBehaviours = function (DOMElement) {
  var extElement = Ext.get(DOMElement);
  aLinks = extElement.select("a");

  aLinks.each(function (extLink) {
    Event.observe(extLink.dom, "click", CGDialogGenerateReport.prototype.atDeleteNodeTypeClick.bind(this, extLink.dom));
  }, this);
};

//==================================================================
CGDialogGenerateReport.prototype.atAccept = function () {
  var extDlgShareNode;
  var aInputs;

  if (!this.check()) return;

  if ($("dlgGenerateReport.optionall").checked) this.Option = OPTION_ALL;
  else this.Option = OPTION_SELECTION;

  this.Filters = new Array();

  if ($("dlgGenerateReport.filtertype").checked) {
    this.Filters[FILTER_NODE_TYPES] = this.aSelectedNodeTypes;
  }

  if ($("dlgGenerateReport.filterdates").checked) {
    this.Filters[FILTER_DATES] = new Object();
    this.Filters[FILTER_DATES].From = $("dlgGenerateReport.filterdatesfrom").value;
    this.Filters[FILTER_DATES].To = $("dlgGenerateReport.filterdatesto").value;
  }

  this.hide();

  if (this.onAccept) this.onAccept();
};

//==================================================================
CGDialogGenerateReport.prototype.atNodeTypeFocus = function () {
  $("dlgGenerateReport.filtertype").checked = true;
};

//==================================================================
CGDialogGenerateReport.prototype.atSelectNodeTypeClick = function (ComboBox, Record, Index) {
  if (this.aSelectedNodeTypes[Record.data.code] != null) return;

  var DOMElement = this.NodeTypeListView.addElement({sTitle: Record.data.caption, Id: Record.data.code});
  this.addBehaviours(DOMElement);
  this.aSelectedNodeTypes[Record.data.code] = Record.data.code;

  return false;
};

//==================================================================
CGDialogGenerateReport.prototype.atDeleteNodeTypeClick = function (DOMItem, EventLaunched) {
  var extItem = Ext.get(DOMItem);
  var CommandInfo = new CGCommandInfo(DOMItem.href);
  var aParameters = CommandInfo.getParameters();

  if (DOMItem) {
    extLink = extItem.up("li");
    if (extLink) extLink.remove();
    delete this.aSelectedNodeTypes[aParameters[0]];
  }

  Event.stop(EventLaunched);
  return false;
};

//==================================================================
CGDialogGenerateReport.prototype.atDateFocus = function () {
  $("dlgGenerateReport.filterdates").checked = true;
};

CGDialogShareNode = function () {
  this.base = CGDialog;
  this.base("dlgShareNode");
  this.dlgSearchUsers = new CGDialogSearchUsers();
  this.UserListView = null;
  this.extDate = null;
  this.UserList = new CGUserList();
};

//------------------------------------------------------------------
CGDialogShareNode.prototype = new CGDialog;

//------------------------------------------------------------------
CGDialogShareNode.prototype.init = function () {
  var html;

  html = AppTemplate.DialogShareNode;
  html = translate(html, Lang.DialogShareNode);

  this.layer = new Insertion.Bottom(document.body, html).element.immediateDescendants().last();

  this.initDialog();
  this.initUserListView();
  this.initSearchDialog();
  this.initDate();
};

//------------------------------------------------------------------
CGDialogShareNode.prototype.initDialog = function () {
  var EastRegion;

  this.dialog = new Ext.LayoutDialog(this.layer, {
    modal: true, shadow: true, minWidth: 300, minHeight: 300, closable: false,
    center: { autoScroll: true, tabPosition: 'top', alwaysShowTabs: true }
  });

  this.dialog.addKeyListener(27, this.atCancel, this);
  this.dialog.addButton(Lang.Buttons.Accept, this.atAccept, this);
  this.dialog.addButton(Lang.Buttons.Cancel, this.atCancel, this);

  var layout = this.dialog.getLayout();
  var PanelInfo = new Ext.ContentPanel('dlgShareNode.Info', {title: Lang.DialogShareNode.PanelInfo});
  var PanelUsers = new Ext.ContentPanel('dlgShareNode.Users', {title: Lang.DialogShareNode.PanelUsers});

  PanelInfo.Id = "dlgShareNode.Info";
  PanelUsers.Id = "dlgShareNode.Users";

  layout.beginUpdate();
  layout.add('center', PanelInfo);
  layout.add('center', PanelUsers);
  layout.getRegion('center').showPanel('dlgShareNode.Info');
  layout.endUpdate();
  layout.getRegion('center').on("panelactivated", this.atPanelActivated.bind(this));
};

//------------------------------------------------------------------
CGDialogShareNode.prototype.initUserListView = function () {
  var template = AppTemplate.DialogShareNodeUser;
  template = translate(template, Lang.DialogShareNodeUser);

  this.UserListView = new TListView();
  this.UserListView.init($("dlgShareNode.UserList"), Lang.DialogShareNode.NoUsers);
  this.UserListView.setTemplate(template);
  this.UserListView.removeAllElements();
};

//------------------------------------------------------------------
CGDialogShareNode.prototype.initSearchDialog = function () {
  this.dlgSearchUsers.init('dlgShareNode.DialogSearchUsers');
  this.dlgSearchUsers.onAccept = this.atAddUsers.bind(this);
};

//------------------------------------------------------------------
CGDialogShareNode.prototype.initDate = function () {
  this.extDate = new Ext.form.DateField({
    format: 'd/m/Y',
    altFormats: 'd-m-y|d/m/y|d-m-Y|Y-m-d|Y/m/d|Y-m|Y/m|m-Y|m/Y|Y',
    minLength: 4
  });

  this.extDate.applyTo($("dlgShareNode.ExpireDate"));
};

//------------------------------------------------------------------
CGDialogShareNode.prototype.destroy = function () {
  this.dlgSearchUsers.destroy();
  this.dialog.destroy(true);
};

//------------------------------------------------------------------
CGDialogShareNode.prototype.show = function () {
  var DOMStatus = $(this.sName + ".status");
  var extLayout = Ext.get(this.sName);
  var extInput;

  if (this.dialog == null) return;
  if (!DOMStatus) return;
  if (!extLayout) return;

  DOMStatus.style.display = "none";
  this.dialog.show();
};

//------------------------------------------------------------------
CGDialogShareNode.prototype.refresh = function () {
};

//------------------------------------------------------------------
CGDialogShareNode.prototype.addListeners = function (DOMElement) {
  var extElement = Ext.get(DOMElement);
  aLinks = extElement.select("a");

  aLinks.each(function (extLink) {
    Event.observe(extLink.dom, "click", CGDialogShareNode.prototype.atUserItemClick.bind(this, extLink.dom));
  }, this);
};

//==================================================================
CGDialogShareNode.prototype.atPanelActivated = function (LayoutRegion, Panel) {
  if (Panel.Id == "dlgShareNode.Info") $("dlgShareNode.Description").focus();
};

//==================================================================
CGDialogShareNode.prototype.atAccept = function () {
  var extDlgShareNode;
  var aInputs;

  if (!this.check()) return;

  this.Description = $("dlgShareNode.Description").value;
  this.ExpireDate = $("dlgShareNode.ExpireDate").value;

  this.hide();

  if (this.onAccept) this.onAccept();
};

//==================================================================
CGDialogShareNode.prototype.atUserItemClick = function (DOMItem, EventLaunched) {
  var extItem = Ext.get(DOMItem);
  var CommandInfo = new CGCommandInfo(DOMItem.href);
  var aParameters = CommandInfo.getParameters();

  if (DOMItem) {
    extLink = extItem.up("li");
    if (extLink) extLink.remove();
    this.UserList.deleteUser(aParameters[0]);
  }

  Event.stop(EventLaunched);
  return false;
};

//==================================================================
CGDialogShareNode.prototype.atAddUsers = function () {
  var UserList = this.dlgSearchUsers.Target;
  var aSelectedUsers = this.dlgSearchUsers.Users;

  for (var iPos in aSelectedUsers) {
    if (isFunction(aSelectedUsers[iPos])) continue;
    var User = aSelectedUsers[iPos];

    if (this.UserList.getUser(User.getId()) != null) continue;

    var aUser = User.toArray();
    var DOMElement = this.UserListView.addElement(aUser);

    this.UserList.addUser(User);
    this.addListeners(DOMElement);
  }

  return false;
};

CGViewNode = function () {
  this.base = CGView;
  this.base();
  this.Type = VIEW_NODE;
  this.aEditors = new Array();
};

CGViewNode.prototype = new CGView;

CGViewNode.prototype.selectNodesReferences = function (aNodes) {
  if (this.DOMLayer == null) return false;
  if (!this.DOMLayer.setSelectedNodesReferences) return false;
  return this.DOMLayer.setSelectedNodesReferences(aNodes);
};

CGViewNode.prototype.refreshNode = function () {
  EventManager.disableNotifications();
  if (this.DOMLayer.init) this.DOMLayer.init(ViewerSidebar.getHelper(Helper.EDITORS));
  this.DOMLayer.onFieldFocus = CGViewNode.prototype.atNodeFieldFocus.bind(this);
  this.DOMLayer.onFieldChange = CGViewNode.prototype.atNodeFieldChange.bind(this);
  this.DOMLayer.onFieldBlur = CGViewNode.prototype.atNodeFieldBlur.bind(this);
  this.DOMLayer.onTabFocus = CGViewNode.prototype.atNodeTabFocus.bind(this);
  EventManager.enableNotifications();
};

CGViewNode.prototype.parseMonetLinks = function (sContent) {
  var Expression = new RegExp(MONET_LINK_PATTERN, "g");
  var aResult = Expression.exec(sContent);

  while (aResult != null) {
    sContent = sContent.replace(aResult[0], "<a class='command' href='" + getMonetLinkAction(sContent) + "'>" + Lang.ViewNode.Show + "</a>");
    aResult = Expression.exec(sContent);
  }

  return sContent;
};

CGViewNode.prototype.refresh = function () {
  var extLayer, IdDOMLayer;
  var Styles, DOMLayer;
  var sContent = this.Target.getContent();

  if (!this.Target) return;
  if (sContent != null && sContent !== "") {
    this.Target.setContent("");

    extLayer = Ext.get(this.DOMLayer);
    IdDOMLayer = (this.DOMLayer.id) ? this.DOMLayer.id : Ext.id();
    Styles = extLayer.getStyles("position", "visibility", "left", "top");

    sContent = setIdToElementContent(IdDOMLayer, sContent);
    sContent = this.parseMonetLinks(sContent);
    extLayer.dom = replaceDOMElement(extLayer.dom, sContent);
    DOMLayer = $(IdDOMLayer);

    if (DOMLayer == null) return;
    this.setDOMLayer(DOMLayer);

    extLayer = Ext.get(this.DOMLayer);
    if (this.ViewContainer == null) extLayer.applyStyles(Styles);
  }

  if (this.Mode != null) {
    var Constructor = Extension.getNodeConstructor();
    Constructor.onSelectNodeReference = CGViewNode.prototype.atSelectNodeReference.bind(this);
    Constructor.init(this.DOMLayer);

    if (sContent != null && sContent !== "")
      CommandListener.capture(this.DOMLayer);

    BehaviourDispatcher.apply(BehaviourViewNode, this.DOMLayer);
  }

  this.refreshNode();
};

// #############################################################################################################

CGViewNode.prototype.atSelectNodeReference = function (IdCollection, IdSelectedNode, bSelected) {
  if (bSelected) State.addNodeReferenceToSelection(IdCollection, IdSelectedNode);
  else delete State.deleteSelectedNodeReference(IdCollection, IdSelectedNode);
};

CGViewNode.prototype.atNodeFieldFocus = function (DOMField) {
  EventManager.notify(EventManager.FOCUS_FIELD, {"Node": this.Target, "DOMNode": this.DOMLayer, "DOMField": DOMField});
};

CGViewNode.prototype.atNodeFieldChange = function (DOMField) {
  EventManager.notify(EventManager.CHANGE_FIELD, {"Node": this.Target, "DOMNode": this.DOMLayer, "DOMField": DOMField});
};

CGViewNode.prototype.atNodeFieldBlur = function (DOMField) {
  var helper = ViewerSidebar.getHelper(Helper.EDITORS);
  EventManager.notify(EventManager.BLUR_FIELD, {"Node": this.Target, "DOMNode": this.DOMLayer, "DOMField": DOMField});
  helper.hideCurrentEditor();
};

CGViewNode.prototype.atNodeTabFocus = function (DOMNode, DOMTab, DOMView) {
  ViewerSidebar.hide();
  EventManager.notify(EventManager.FOCUS_NODE_VIEW, {"Node": this.Target, "DOMNode": DOMView});
};

CGViewTask = function () {
  this.base = CGView;
  this.base();
  this.Type = VIEW_TASK;
  this.lastTab = null;
};

CGViewTask.ViewOrders = "orders";

CGViewTask.prototype = new CGView;

CGViewTask.prototype.refreshTask = function () {

  EventManager.disableNotifications();

  this.DOMLayer.init();
  this.DOMLayer.onTabFocus = CGViewTask.prototype.atTaskTabFocus.bind(this);

  EventManager.enableNotifications();
};

CGViewTask.prototype.refresh = function () {
  var extLayer, IdDOMLayer;
  var Styles;
  var sContent = this.Target.getContent();

  if (!this.Target) return;

  if (sContent != null && sContent != "") {
    this.Target.setContent("");

    extLayer = Ext.get(this.DOMLayer);
    IdDOMLayer = (this.DOMLayer.id) ? this.DOMLayer.id : Ext.id();
    Styles = extLayer.getStyles("position", "visibility", "left", "top");

    sContent = setIdToElementContent(IdDOMLayer, sContent);
    extLayer.dom = replaceDOMElement(extLayer.dom, sContent);
    this.setDOMLayer($(IdDOMLayer));

    extLayer = Ext.get(this.DOMLayer);
    extLayer.applyStyles(Styles);
    extLayer.dom.IdView = this.Id;
  }

  if (this.Mode != null) {
    Constructor = Extension.getTaskConstructor();
    Constructor.init(this.DOMLayer);
    CommandListener.capture(this.DOMLayer);
    BehaviourDispatcher.apply(BehaviourViewTask, this.DOMLayer);
  }

  this.refreshTask();
};

CGViewTask.prototype.atTaskTabFocus = function (DOMTask, DOMTab, DOMView) {
  ViewerSidebar.hide();
  var DOMTaskTabList = Ext.get(DOMTab).select(".task");
  if (DOMTaskTabList.elements.length > 0) {
    var DOMTaskTab = DOMTaskTabList.elements[0];
    DOMTaskTab.style.display = "block";
    DOMTaskTab.style.height = "calc(100% - 63px)";
    this.resizeNodes();
  }
  if (DOMTask != null) EventManager.notify(EventManager.FOCUS_TASK_VIEW, {"Task": this.Target, "DOMTask": DOMTask});
};

CGViewTask.prototype.resizeNodes = function() {
  var nodes = Ext.get(this.DOMLayer).select(".node").elements;
  for (var i=0; i<nodes.length; i++) {
    nodes[i].style.height = "100%";
    nodes[i].style.display = "block";
  }
};

CGTeam = function () {
  this.Id = "team";
  this.sContent = EMPTY;
};




CGTeam.prototype.getId = function () {
  return this.Id;
};

CGTeam.prototype.setId = function (Id) {
  this.Id = Id;
};

CGTeam.prototype.getContent = function () {
  return this.sContent;
};

CGTeam.prototype.setContent = function (sContent) {
  this.sContent = sContent;
};

CGTeam.prototype.unserializeFromJSON = function (ItemStructure) {
  this.Id = ItemStructure.id;
  this.sContent = ItemStructure.content;
};

CGTeam.prototype.unserialize = function (serialized) {
  var jsonData = Ext.util.JSON.decode(serialized);
  this.unserializeFromJSON(jsonData);
};

CGViewTeam = function () {
  this.base = CGView;
  this.base();
  this.Type = VIEW_TEAM;
};

CGViewTeam.prototype = new CGView;

CGViewTeam.prototype.refreshTeam = function () {
  EventManager.disableNotifications();
  this.DOMLayer.init();
  EventManager.enableNotifications();
};

CGViewTeam.prototype.refresh = function () {
  var extLayer, IdDOMLayer;
  var Styles;
  var sContent = this.Target.getContent();

  if (!this.Target) return;

  if (sContent != null && sContent != "") {
    this.Target.setContent("");

    extLayer = Ext.get(this.DOMLayer);
    IdDOMLayer = (this.DOMLayer.id) ? this.DOMLayer.id : Ext.id();
    Styles = extLayer.getStyles("position", "visibility", "left", "top");

    sContent = setIdToElementContent(IdDOMLayer, sContent);
    extLayer.dom = replaceDOMElement(extLayer.dom, sContent);
    this.setDOMLayer($(IdDOMLayer));

    extLayer = Ext.get(this.DOMLayer);
    extLayer.applyStyles(Styles);
    extLayer.dom.IdView = this.Id;
  }

  if (this.Mode != null) {
    Constructor = Extension.getTeamConstructor();
    Constructor.init(this.DOMLayer);
    CommandListener.capture(this.DOMLayer);
  }

  this.refreshTeam();
};

//#############################################################################################################

PAGE_CONTROL_MAX_PAGES = 10;

function CGPageControl(Layout, sRegion, iMaxPages) {
  this.Layout = Layout;
  this.sRegion = sRegion;
  this.aPages = new Array();
  this.aPagesActivations = new Array();
  this.aPagesLocked = new Array();
  this.iMaxPages = (iMaxPages != null) ? iMaxPages : PAGE_CONTROL_MAX_PAGES;
  this.Layout.getRegion(this.sRegion).on("panelactivated", this.atPageActivated, this);
};

//---------------------------------------------------------------------
CGPageControl.prototype.existsPage = function (Id) {
  return (this.aPages[Id]) ? true : false;
};

//---------------------------------------------------------------------
CGPageControl.prototype.syncHeight = function (Page) {
  var extElement = Ext.get(Page.el.dom);
  extElement = extElement.up(".x-tabs-body.x-layout-tabs-body");
  if (extElement) {
    extElement.dom.style.height = (this.Layout.getRegion(this.sRegion).el.getHeight()) + "px";
    extElement.dom.style.overflow = "hidden";
  }
};

//---------------------------------------------------------------------
CGPageControl.prototype.addPage = function (Config) {
  var Page, Background;

  if (this.aPages[Config.Id]) return false;

  bCloseable = (this.aPages.length != 0);
  Background = (Config.Background) ? Config.Background : false;

  if (this.aPages.size() > this.iMaxPages) {
    this.deleteLesserActivatedPage();
  }

  Page = new Ext.ContentPanel(Config.Id, {autoCreate: true, closable: bCloseable, background: Background});
  Page.Id = Config.Id;
  this.Layout.add(this.sRegion, Page);
  this.aPages[Config.Id] = Config.Id;
  this.aPagesActivations[Page.Id] = 1;
  if (Config.Locked) this.aPagesLocked[Config.Id] = Config.Id;

  this.syncHeight(Page);

  if (!Background) this.showPage(Config.Id);

  return Page;
};

//---------------------------------------------------------------------
CGPageControl.prototype.deleteLesserActivatedPage = function () {
  var IdPage = null;
  var iMinActivations = 1000000;
  for (var IdCurrentPage in this.aPagesActivations) {
    if (isFunction(this.aPagesActivations[IdCurrentPage])) continue;
    if ((this.aPagesActivations[IdCurrentPage] < iMinActivations) && (this.aPagesLocked[IdCurrentPage] == null)) {
      IdPage = IdCurrentPage;
      iMinActivations = this.aPagesActivations[IdCurrentPage];
    }
  }
  if (IdPage != null) this.deletePage(IdPage);
};

//---------------------------------------------------------------------
CGPageControl.prototype.deletePage = function (Id) {
  if (!this.aPages[Id]) return false;

  if (this.aPages[Id]) delete this.aPages[Id];
  if (this.aPagesActivations[Id]) delete this.aPagesActivations[Id];
  if (this.aPagesLocked[Id]) delete this.aPagesLocked[Id];

  this.Layout.getRegion(this.sRegion).hidePanel(Id);
  this.Layout.getRegion(this.sRegion).remove(Id);
};

//---------------------------------------------------------------------
CGPageControl.prototype.setPageTitle = function (Id, sTitle) {
  if (!this.aPages[Id]) return false;
  this.Layout.getRegion(this.sRegion).getPanel(Id).setTitle(sTitle);
};

//---------------------------------------------------------------------
CGPageControl.prototype.getActivePage = function () {
  return this.Layout.getRegion(this.sRegion).getActivePanel();
};

//---------------------------------------------------------------------
CGPageControl.prototype.hidePages = function (extLayout) {
  var extBody = extLayout.el.down(".x-layout-panel-body .x-layout-tabs-body");
  if (extBody == null) return;

  var extPanels = extBody.select("> div");
  extPanels.each(function (extPanel) {
    extPanel.dom.style.display = "none";
  });
};

//---------------------------------------------------------------------
CGPageControl.prototype.showPage = function (Id) {
  var extPanel, extElement, extLayout;

  if (!this.aPages[Id]) return false;

  extLayout = this.Layout.getRegion(this.sRegion);
  this.hidePages(extLayout);

  extLayout.showPanel(Id);
  extPanel = extLayout.getPanel(Id);
  extPanel.el.dom.style.display = "block";
  extElement = Ext.get(extPanel.el.dom);
  extElement = extElement.up(".x-layout-panel-body.x-tabs-top");
  if (extElement) extElement.dom.style.position = "relative";
};

//---------------------------------------------------------------------
CGPageControl.prototype.hidePage = function (Id) {
  if (!this.aPages[Id]) return false;
  this.Layout.getRegion(this.sRegion).hidePanel(Id);
};

//---------------------------------------------------------------------
CGPageControl.prototype.atPageActivated = function () {
  var Page = this.getActivePage();
  this.aPagesActivations[Page.Id] = this.aPagesActivations[Page.Id] + 1;
};

Operation = new Object;
Operation.ADD = "ADD";
Operation.COPY = "COPY";
Operation.DOWNLOAD = "DOWNLOAD";
Operation.PRINT = "PRINT";
Operation.TOOL = "TOOL";
Operation.CUSTOM = "CUSTOM";
Operation.WIDGET = "WIDGET";
Operation.EDIT = "EDIT";
Operation.HELP = "HELP";
Operation.OBSERVER = "OBSERVER";
Operation.CONTEXT = "CONTEXT";
Operation.NAVIGATION = "NAVIGATION";

function CGViewerToolbar() {
  this.extLayer = null;
  this.templates = new Object();
}

CGViewerToolbar.prototype.init = function () {
  this.templates.navigation = new Template(translate(AppTemplate.ViewerHelperToolbarNavigation, Lang.ViewerHelperToolbar));
  this.templates.add = new Template(translate(AppTemplate.ViewerHelperToolbarAdd, Lang.ViewerHelperToolbar));
  this.templates.copy = new Template(translate(AppTemplate.ViewerHelperToolbarCopy, Lang.ViewerHelperToolbar));
  this.templates.download = new Template(translate(AppTemplate.ViewerHelperToolbarDownload, Lang.ViewerHelperToolbar));
  this.templates.print = new Template(translate(AppTemplate.ViewerHelperToolbarPrint, Lang.ViewerHelperToolbar));
  this.templates.edit = new Template(translate(AppTemplate.ViewerHelperToolbarEdit, Lang.ViewerHelperToolbar));
  this.templates.tool = new Template(translate(AppTemplate.ViewerHelperToolbarTool, Lang.ViewerHelperToolbar));
  this.templates.custom = new Template(translate(AppTemplate.ViewerHelperToolbarCustom, Lang.ViewerHelperToolbar));
  this.templates.multiple = new Template(translate(AppTemplate.ViewerHelperToolbarMultiple, Lang.ViewerHelperToolbar));
  this.templates.multipleItem = new Template(translate(AppTemplate.ViewerHelperToolbarMultipleItem, Lang.ViewerHelperToolbar));
  this.templates.simple = new Template(translate(AppTemplate.ViewerHelperToolbarSimple, Lang.ViewerHelperToolbar));
};

CGViewerToolbar.prototype.setTarget = function (target) {
  this.target = target;
};

CGViewerToolbar.prototype.hide = function () {
  this.extLayer.hide();
};

CGViewerToolbar.prototype.show = function () {
  this.extLayer.show();
};

CGViewerToolbar.prototype.renderOperations = function (operations, label, collapsed) {
  var result = "";
  var className = "";

  if (operations.length == 0) return;

  if (operations.length == 1) {
    result = this.templates.simple.evaluate({operation: operations[0]});
    className = "";
  }
  else {
    if (collapsed) {
      var operationsValue = "";
      for (var i = 0; i < operations.length; i++)
        operationsValue += this.templates.multipleItem.evaluate({operation: operations[i]});
      result = this.templates.multiple.evaluate({label: label, operations: operationsValue});
      className = "selector";
    }
    else {
      for (var i = 0; i < operations.length; i++)
        result += this.templates.simple.evaluate({operation: operations[i]});
      className = "";
    }
  }

  var extRow = this.extLayer.select("table tr").first();
  var extPivotColumn = this.extLayer.select("table tr td.pivot").first();
  var DOMColumn = document.createElement("td");
  DOMColumn.innerHTML = result;
  DOMColumn.className = className;
  extRow.dom.insertBefore(DOMColumn, extPivotColumn.dom);
};

CGViewerToolbar.prototype.render = function (extLayer) {
  this.extLayer = extLayer;
  this.refresh();
};

CGViewerToolbar.prototype.getTemplate = function (operation) {

  if (operation.parameters.command != null)
    return this.templates.custom;

  if (operation.type == Operation.NAVIGATION) return this.templates.navigation;
  else if (operation.type == Operation.ADD) return this.templates.add;
  else if (operation.type == Operation.COPY) return this.templates.copy;
  else if (operation.type == Operation.DOWNLOAD) return this.templates.download;
  else if (operation.type == Operation.PRINT) return this.templates.print;
  else if (operation.type == Operation.EDIT) return this.templates.edit;
  else if (operation.type == Operation.TOOL) return this.templates.tool;
  else if (operation.type == Operation.CUSTOM) return this.templates.custom;
  else if (operation.type == Operation.CONTEXT) return this.templates.custom;

  return null;
};

CGViewerToolbar.prototype.refresh = function () {

  if (this.target == null) return;

  var navigationOperations = new Array();
  var addOperations = new Array();
  var copyOperations = new Array();
  var downloadOperations = new Array();
  var printOperations = new Array();
  var editOperations = new Array();
  var toolOperations = new Array();
  var customOperations = new Array();
  var contextOperations = new Array();

  this.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperToolbar, Lang.ViewerHelperToolbar);

  var count = 0;
  for (var i = 0; i < this.target.operationSet.length; i++) {
    var operation = this.target.operationSet[i];
    if (operation.type == Operation.ADD) count++;
  }

  labelAdd = null;
  if (count <= 1) labelAdd = Lang.ViewerHelperToolbar.Add;

  this.target.operationSet = this.target.operationSet.sort(function(Operation1, Operation2) {
    if (Operation1.label == null || Operation2.label == null)
      return -1;
    return Operation1.label.localeCompare(Operation2.label);
  });

  for (var i = 0; i < this.target.operationSet.length; i++) {
    var operation = this.target.operationSet[i];
    var parameters = operation.parameters;
    var template = this.getTemplate(operation);

    parameters.label = operation.label;
    parameters.display = operation.visible == null || operation.visible ? "inline-block" : "none";

    if (operation.type == Operation.ADD && labelAdd != null) parameters.label = labelAdd;
    if (parameters.code == null) parameters.code = "";

    if (operation.type == Operation.CONTEXT) parameters.css = "context";

    if (operation.type == Operation.NAVIGATION)
      navigationOperations.push(template.evaluate(parameters));
    else if (operation.type == Operation.ADD)
      addOperations.push(template.evaluate(parameters));
    else if (operation.type == Operation.COPY)
      copyOperations.push(template.evaluate(parameters));
    else if (operation.type == Operation.DOWNLOAD)
      downloadOperations.push(template.evaluate(parameters));
    else if (operation.type == Operation.PRINT)
      printOperations.push(template.evaluate(parameters));
    else if (operation.type == Operation.EDIT)
      editOperations.push(template.evaluate(parameters));
    else if (operation.type == Operation.TOOL)
      toolOperations.push(template.evaluate(parameters));
    else if (operation.type == Operation.CUSTOM)
      customOperations.push(template.evaluate(parameters));
    else if (operation.type == Operation.CONTEXT)
      contextOperations.push(template.evaluate(parameters));
  }

  addOperations = addOperations.concat(copyOperations);
  downloadOperations = downloadOperations.concat(printOperations);
  toolOperations = toolOperations.concat(customOperations);

  this.renderOperations(navigationOperations, "", false);
  this.renderOperations(addOperations, Lang.ViewerHelperToolbar.Add, true);
  this.renderOperations(downloadOperations, Lang.ViewerHelperToolbar.Download, true);
  this.renderOperations(toolOperations, Lang.ViewerHelperToolbar.Tools, true);
  this.renderOperations(editOperations, "", false);
  this.renderOperations(contextOperations, "", false);

  var aBehaviours = this.extLayer.select(".behaviour");
  aBehaviours.each(function (extBehaviour) {
    DOMBehaviour = extBehaviour.dom;
    Event.observe(DOMBehaviour, 'click', CGViewerToolbar.prototype.atBehaviourClick.bind(this, DOMBehaviour));
  }, this);

  var extSelectorOptionsList = this.extLayer.select(CSS_SELECTOR + BLANK + CSS_OPTIONS + " a");
  extSelectorOptionsList.each(function (extSelectorOption) {
    var DOMSelectorOption = extSelectorOption.dom;
    Event.observe(DOMSelectorOption, 'click', CGViewerToolbar.prototype.atSelectorOptionClick.bind(this, DOMSelectorOption));
  }, this);

  this.refreshBackTaskCommand();
  this.refreshBackLinkCommand();

  CommandListener.capture(this.extLayer);
};

CGViewerToolbar.prototype.showBackTaskCommand = function (IdTask, TargetNode, TargetView) {
  var extCommand = this.extLayer.select(".command.backtask").first();
  if (extCommand) {
    extCommand.dom.style.display = "block";
    extCommand.dom.onclick = CGViewerToolbar.prototype.doShowBackTaskCommand.bind(this, IdTask, TargetNode, TargetView);//href = getMonetLinkAction(TargetNode != null ? "ml://node." + TargetNode + "." + TargetView : "ml://task." + IdTask);
  }
};

CGViewerToolbar.prototype.doShowBackTaskCommand = function(IdTask, TargetNode, TargetView) {
  var action = TargetNode != null ? new CGActionShowNode() : new CGActionShowTask();
  // getMonetLinkAction(TargetNode != null ? "ml://node." + TargetNode + "." + TargetView : "ml://task." + IdTask);
  action.Id = TargetNode != null ? TargetNode : IdTask;
  action.execute();
  if (TargetView == null) return;
  window.setTimeout(function() { Desktop.Main.Center.Body.getContainerView(VIEW_NODE, TargetNode).getDOM().activateTab(TargetView); }, 1000);
};

CGViewerToolbar.prototype.refreshBackTaskCommand = function () {
  var node = NodesCache.getCurrent();
  if (node == null) return;

  var viewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, node.getId());
  if (viewNode == null) return;

  var DOMNode = viewNode.getDOM();
  if (DOMNode == null) return;

  if (State.TaskNode != null) {
    if ((DOMNode.getId() != State.TaskNode.IdNode) && (!DOMNode.isChild(State.TaskNode.IdNode))) {
      this.hideBackTaskCommand();
      State.TaskNode = null;
    } else
      this.showBackTaskCommand(State.TaskNode.IdTask, State.TaskNode.TargetNode, State.TaskNode.TargetView);
  } else
    this.hideBackTaskCommand();
};

CGViewerToolbar.prototype.hideBackTaskCommand = function () {
  var extCommand = this.extLayer.select(".command.backtask").first();
  if (extCommand) extCommand.dom.style.display = "none";
};

CGViewerToolbar.prototype.showBackLinkCommand = function (IdNode) {
  var extCommand = this.extLayer.select(".command.backlink").first();
  if (extCommand) {
    extCommand.dom.style.display = "block";
    extCommand.dom.href = getMonetLinkAction("ml://node." + IdNode);
  }
};

CGViewerToolbar.prototype.showOperation = function (name) {
  var extCommand = this.extLayer.select(".command." + name).first();
  if (extCommand) extCommand.dom.style.display = "block";
};

CGViewerToolbar.prototype.hideOperation = function (name) {
  var extCommand = this.extLayer.select(".command." + name).first();
  if (extCommand) extCommand.dom.style.display = "none";
};

CGViewerToolbar.prototype.enableOperation = function (name) {
  var extCommand = this.extLayer.select(".command." + name).first();
  if (extCommand) extCommand.removeClass(CLASS_DISABLED);
};

CGViewerToolbar.prototype.disableOperation = function (name) {
  var extCommand = this.extLayer.select(".command." + name).first();
  if (extCommand) extCommand.addClass(CLASS_DISABLED);
};

CGViewerToolbar.prototype.refreshBackLinkCommand = function () {
  var node = NodesCache.getCurrent();
  if (node == null) return;

  var viewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, node.getId());
  if (viewNode == null) return;

  var DOMNode = viewNode.getDOM();
  if (DOMNode == null) return;

  if (State.LinkNode != null) {
    if ((DOMNode.getId() != State.LinkNode.IdLink) && (!DOMNode.isChild(State.LinkNode.IdLink))) {
      this.hideBackLinkCommand();
      State.LinkNode = null;
    } else
      this.showBackLinkCommand(State.LinkNode.IdNode);
  } else
    this.hideBackLinkCommand();
};

CGViewerToolbar.prototype.hideBackLinkCommand = function () {
  var extCommand = this.extLayer.select(".command.backlink").first();
  if (extCommand) extCommand.dom.style.display = "none";
};

CGViewerToolbar.prototype.showSelectorOptions = function (DOMSelector, DOMOptions) {
  DOMOptions.style.display = "block";

  Ext.get(document.body).on("click", this.atHideSelectorOptions, this);
  this.DOMOptions = DOMOptions;

  if (DOMOptions.hasClassName("top")) {
    DOMOptions.style.marginTop = "-" + (DOMSelector.getHeight() + DOMOptions.getHeight() - 1) + "px";
  }

  if (DOMSelector.getWidth() > DOMOptions.getWidth()) {
    var extOptions = Ext.get(DOMOptions);
    extOptions.setWidth(DOMSelector.getWidth());
  }
};

CGViewerToolbar.prototype.hideSelectorOptions = function (DOMOptions) {
  if (!DOMOptions) DOMOptions = this.DOMOptions;
  DOMOptions.style.display = "none";
  this.DOMOptions = null;
  Ext.get(document.body).un("click", this.atHideSelectorOptions);
};

CGViewerToolbar.prototype.toggleSelectorOptions = function (DOMSelector, DOMOptions) {
  var isVisible = DOMOptions.style.display == "block";
  if (isVisible) this.hideSelectorOptions(DOMOptions);
  else this.showSelectorOptions(DOMSelector, DOMOptions);
};

CGViewerToolbar.prototype.atHideSelectorOptions = function () {
  this.hideSelectorOptions();
};

CGViewerToolbar.prototype.atSelectorOptionClick = function (DOMSelectorOption, EventLaunched) {
  this.hideSelectorOptions();
};

CGViewerToolbar.prototype.atBehaviourClick = function (DOMBehaviour, EventLaunched) {
  var BehaviourInfo = new CGCommandInfo(DOMBehaviour.href);

  if (BehaviourInfo.getOperation() == "toggleselector") {
    if ((DOMOptions = DOMBehaviour.next("ul.options")) != null) {
      this.toggleSelectorOptions(DOMBehaviour, DOMOptions);
    }
  }

  Event.stop(EventLaunched);

  return false;
};

CGViewNodeNotes = function () {
  this.base = CGView;
  this.base();
  this.Type = VIEW_NODE_TYPE_NODE;

  this.noteTemplate = new Ext.Template(translate(AppTemplate.ViewNodeNotesItem, Lang.ViewNodeNotes));
  this.noteTemplate.compile();
};

CGViewNodeNotes.prototype = new CGView;

CGViewNodeNotes.prototype.initBehaviours = function () {
  var extLayer = Ext.get(this.DOMLayer);
  var extDialog = extLayer.select(".dialog").first();
  var extAddButton = extDialog.select("a.addnote").first();
  Event.observe(extDialog.select(".name").first().dom, "keypress", CGViewNodeNotes.prototype.atDialogKeyPress.bind(this));
  Event.observe(extDialog.select(".value").first().dom, "keypress", CGViewNodeNotes.prototype.atDialogKeyPress.bind(this));
  Event.observe(extAddButton.dom, "click", CGViewNodeNotes.prototype.atAddNote.bind(this));
};

CGViewNodeNotes.prototype.init = function () {
  this.DOMLayer.innerHTML = translate(AppTemplate.ViewNodeNotes, Lang.ViewNodeNotes);
  this.initBehaviours();
};

CGViewNodeNotes.prototype.setTarget = function (target) {
  this.nodeId = target.nodeId;
  this.notes = target.notes;
  this.options = target.options;
};

CGViewNodeNotes.prototype.addNote = function (note) {
  this.notes[note.name] = note.value;
  this.refresh();
  CommandListener.throwCommand("addnodenote(" + this.nodeId + "," + escape(utf8Encode(note.name)) + "," + escape(utf8Encode(note.value)) + ")");
};

CGViewNodeNotes.prototype.deleteNote = function (name) {
  delete(this.notes[name]);
  this.refresh();
  CommandListener.throwCommand("deletenodenote(" + this.nodeId + "," + escape(utf8Encode(name)) + ")");
};

CGViewNodeNotes.prototype.refreshNote = function (note) {
  var extLayer = Ext.get(this.DOMLayer);
  var extNotes = extLayer.select("ul.notes").first();
  var extNote = this.noteTemplate.append(extNotes, {name: note.name, value: note.value, readonly: this.options.Editable ? "" : "readonly"}, true);

  Event.observe(extNote.select(".name").first().dom, "change", CGViewNodeNotes.prototype.atSaveNote.bind(this, extNote, note));
  Event.observe(extNote.select(".value").first().dom, "change", CGViewNodeNotes.prototype.atSaveNote.bind(this, extNote, note));
  Event.observe(extNote.select(".delete").first().dom, "click", CGViewNodeNotes.prototype.atDeleteNote.bind(this, note.name));
};

CGViewNodeNotes.prototype.refresh = function () {
  var extLayer = Ext.get(this.DOMLayer);
  var extNotes = extLayer.select("ul.notes").first();
  var hasNotes = false;

  if (!this.options.Editable)
    extLayer.select(".node.notes").addClass("readonly");

  extNotes.removeClass("empty");
  extNotes.dom.innerHTML = "";
  for (var name in this.notes) {
    if (isFunction(this.notes[name])) continue;
    hasNotes = true;
    this.refreshNote({name: name, value: this.notes[name]});
  }

  if (!hasNotes) {
    extNotes.addClass("empty");
    extNotes.dom.innerHTML = Lang.ViewNodeNotes.Empty;
  }
};

// #############################################################################################################
CGViewNodeNotes.prototype.atAddNote = function () {
  var extLayer = Ext.get(this.DOMLayer);
  var extDialog = extLayer.select(".dialog").first();
  var extName = extDialog.select(".name").first();
  var extValue = extDialog.select(".value").first();
  var name = extName.dom.value;
  var value = extValue.dom.value;

  if (name == "" || value == "")
    return;

  this.addNote({name: name, value: value});

  extName.dom.value = "";
  extValue.dom.value = "";

  extName.dom.focus();
};

CGViewNodeNotes.prototype.atSaveNote = function (DOMNote, note) {
  var extNote = Ext.get(DOMNote);
  var extName = extNote.select(".name").first();
  var extValue = extNote.select(".value").first();
  var name = extName.dom.value;
  var value = extValue.dom.value;

  if (name == "" || value == "")
    return;

  this.deleteNote(note.name);
  this.addNote({name: name, value: value});
};

CGViewNodeNotes.prototype.atDeleteNote = function (name) {
  this.deleteNote(name);
};

CGViewNodeNotes.prototype.atDialogKeyPress = function (event) {
  if (event.keyCode == 13)
    this.atAddNote();
};

NODE_TAB_PREFIX = "nodetab_";
TASK_TAB_PREFIX = "tasktab_";
SOURCE_TAB_PREFIX = "sourcetab_";
TEAM_TAB_PREFIX = "teamtab_";

VIEW_NODE = "vn";
VIEW_TASK = "vt";
VIEW_SOURCE = "vth";
VIEW_TEAM = "vte";

CGLayoutMainCenterBody = function () {
  this.aPanels = null;
  this.aSystemViews = new Array();

  this.aViews = new Array();
  this.aViewsOfContainer = new Array();

  this.aContainerViews = new Array();
  this.aContainerViews[VIEW_NODE] = new Array();
  this.aContainerViews[VIEW_TASK] = new Array();
  this.aContainerViews[VIEW_SOURCE] = new Array();
  this.aContainerViews[VIEW_TEAM] = new Array();

  this.bNotify = true;
  this.scrollListeners = new Object();
  this.scrollViewports = new Object();
};

CGLayoutMainCenterBody.prototype.init = function (InnerLayout) {
  this.InnerLayout = InnerLayout;

  this.PageControl = new CGPageControl(InnerLayout, 'center');

  this.InnerLayout.getRegion('center').on("beforeremove", this.atRemovePanel, this);
  this.InnerLayout.getRegion('center').on("panelactivated", this.atPanelActivated, this);

  this.ViewNotificationList = this.PageControl.addPage({Id: Literals.Views.NotificationList, Locked: true});
  this.ViewTaskList = this.PageControl.addPage({Id: Literals.Views.TaskList, Locked: true});
  this.ViewTrash = this.PageControl.addPage({Id: Literals.Views.Trash, Locked: true});
  this.ViewDashboard = this.PageControl.addPage({Id: Literals.Views.Dashboard, Locked: true});
  this.ViewAnalysisboard = this.PageControl.addPage({Id: Literals.Views.Analysisboard, Locked: true});
  this.ViewSourceList = this.PageControl.addPage({Id: Literals.Views.SourceList, Locked: true});
  this.ViewSource = this.PageControl.addPage({Id: Literals.Views.Source, Locked: true});
  this.ViewRoleList = this.PageControl.addPage({Id: Literals.Views.RoleList, Locked: true});
  this.ViewRole = this.PageControl.addPage({Id: Literals.Views.Role, Locked: true});
  this.ViewPageNews = this.PageControl.addPage({Id: Literals.Views.PageNews, Locked: true});

  ViewNotificationList.init(Literals.Views.NotificationList);
  ViewTaskList.init(Literals.Views.TaskList);
  ViewTrash.init(Literals.Views.Trash);
  ViewDashboard.init(Literals.Views.Dashboard);
  ViewAnalysisboard.init(Literals.Views.Analysisboard);
  ViewSourceList.init(Literals.Views.SourceList);
  ViewSource.init(Literals.Views.Source);
  ViewRoleList.init(Literals.Views.RoleList);
  ViewRole.init(Literals.Views.Role);
  ViewPageNews.init(Literals.Views.PageNews);
};

CGLayoutMainCenterBody.prototype.activateNotificationList = function () {
  this.PageControl.showPage(Literals.Views.NotificationList);
};

CGLayoutMainCenterBody.prototype.activateTeam = function () {
  this.PageControl.showPage(Literals.Views.Team);
};

CGLayoutMainCenterBody.prototype.activateSourceList = function () {
  this.PageControl.showPage(Literals.Views.SourceList);
};

CGLayoutMainCenterBody.prototype.activateSource = function () {
  this.PageControl.showPage(Literals.Views.Source);
};

CGLayoutMainCenterBody.prototype.activateRoleList = function () {
  this.PageControl.showPage(Literals.Views.RoleList);
};

CGLayoutMainCenterBody.prototype.activateRole = function () {
  this.PageControl.showPage(Literals.Views.Role);
};

CGLayoutMainCenterBody.prototype.activateTaskList = function () {
  this.PageControl.showPage(Literals.Views.TaskList);
};

CGLayoutMainCenterBody.prototype.activateTrash = function () {
  this.PageControl.showPage(Literals.Views.Trash);
};

CGLayoutMainCenterBody.prototype.activateDashboard = function () {
  this.PageControl.showPage(Literals.Views.Dashboard);
};

CGLayoutMainCenterBody.prototype.activateAnalysisboard = function () {
  this.PageControl.showPage(Literals.Views.Analysisboard);
};

CGLayoutMainCenterBody.prototype.activateNews = function () {
  this.PageControl.showPage(Literals.Views.PageNews);
};

CGLayoutMainCenterBody.prototype.enableNotifications = function () {
  this.bNotify = true;
};

CGLayoutMainCenterBody.prototype.disableNotifications = function () {
  this.bNotify = false;
};

CGLayoutMainCenterBody.prototype.atRemovePanel = function (Region, ContentPanel, EventManager) {

  if (!this.bNotify) {
    EventManager.cancel = true;
    return;
  }

  if (ContentPanel.Id.indexOf(NODE_TAB_PREFIX) != -1) CommandListener.throwCommand("closenode(" + ContentPanel.Id.replace(NODE_TAB_PREFIX, "") + ")");
  else if (ContentPanel.Id.indexOf(TASK_TAB_PREFIX) != -1) CommandListener.throwCommand("closetask(" + ContentPanel.Id.replace(TASK_TAB_PREFIX, "") + ")");
  else if (ContentPanel.Id.indexOf(SOURCE_TAB_PREFIX) != -1) CommandListener.throwCommand("closesource(" + ContentPanel.Id.replace(SOURCE_TAB_PREFIX, "") + ")");

  EventManager.cancel = false;
};

CGLayoutMainCenterBody.prototype.atPanelActivated = function (Region, ContentPanel) {
  if (!this.bNotify) return;

  if (ContentPanel.Id.indexOf(NODE_TAB_PREFIX) != -1) CommandListener.throwCommand("activatenode(" + ContentPanel.Id.replace(NODE_TAB_PREFIX, "") + ")");
  else if (ContentPanel.Id.indexOf(TASK_TAB_PREFIX) != -1) CommandListener.throwCommand("activatetask(" + ContentPanel.Id.replace(TASK_TAB_PREFIX, "") + ")");
  else if (ContentPanel.Id.indexOf(SOURCE_TAB_PREFIX) != -1) CommandListener.throwCommand("activatesource(" + ContentPanel.Id.replace(SOURCE_TAB_PREFIX, "") + ")");
};

CGLayoutMainCenterBody.prototype.existsView = function (IdView) {
  return (this.aViews[IdView] != null);
};

CGLayoutMainCenterBody.prototype.getView = function (Type, IdView) {
  if (this.aViews[IdView] == null) return false;
  return this.aViews[IdView];
};

CGLayoutMainCenterBody.prototype.getViews = function (Type, ViewType, IdTarget) {
  var aResult = new Array();
  var aViewsToRemove = new Array();

  if (Type == VIEW_NODE) Type = VIEW_NODE_TYPE_NODE;
  else if (Type == VIEW_TASK) Type = VIEW_TASK_TYPE_TASK;
  else if (Type == VIEW_SOURCE) Type = VIEW_SOURCE_TYPE_SOURCE;
  else if (Type == VIEW_TEAM) Type = VIEW_TEAM_TYPE_TEAM;

  for (IdView in this.aViews) {
    var View = this.aViews[IdView];
    if (isFunction(View)) continue;
    var DOMLayer = View.getDOM();
    if (DOMLayer != null && $(DOMLayer.id) == null) {
      aViewsToRemove.push(DOMLayer.id);
      continue;
    }
    if ((ViewType != null) && (ViewType != Type) && (View.getType() != ViewType)) continue;
    if ((IdTarget != null) && (View.getTarget().getId() != IdTarget)) continue;
    aResult.push(View);
  }

  for (var i = 0; i < aViewsToRemove.length; i++)
    this.deleteView(Type, aViewsToRemove[i]);

  return aResult;
};

CGLayoutMainCenterBody.prototype.isContainerView = function (View) {
  return (View.ViewContainer == null);
};

CGLayoutMainCenterBody.prototype.getContainerView = function (Type, IdTarget) {
  if (this.aContainerViews[Type][IdTarget] == null) return null;
  return this.aContainerViews[Type][IdTarget];
};

CGLayoutMainCenterBody.prototype.addView = function (Type, View) {
  var ViewContainer;

  this.aViews[View.getId()] = View;

  if ((ViewContainer = View.getContainer()) != null) {
    if (this.aViewsOfContainer[ViewContainer.getId()] == null) this.aViewsOfContainer[ViewContainer.getId()] = new Array();
    this.aViewsOfContainer[ViewContainer.getId()].push(View.getId());
  }
  else {
    var Target = View.getTarget();
    if ((Target != null) && (Target.getId)) this.aContainerViews[Type][Target.getId()] = View;
  }
};

CGLayoutMainCenterBody.prototype.deleteView = function (Type, Id) {
  var Target;

  if (this.aViews[Id] == null) return true;

  if (this.aViews[Id].getContainer() == null) {
    Target = this.aViews[Id].getTarget();
    if ((Target != null) && (Target.getId)) {
      delete this.aContainerViews[Type][Target.getId()];
    }
  }

  if (this.aViewsOfContainer[Id] != null) {
    for (var iPos = 0; iPos < this.aViewsOfContainer[Id].length; iPos++) {
      this.deleteView(this.aViewsOfContainer[Id][iPos]);
    }
    delete this.aViewsOfContainer[Id];
  }

  delete this.aViews[Id];

  return true;
};

CGLayoutMainCenterBody.prototype.deleteViewsOfContainer = function (Type, IdContainer) {
  if (this.aViews[IdContainer] == null) return true;

  if (this.aViewsOfContainer[IdContainer] != null) {
    for (var iPos = 0; iPos < this.aViewsOfContainer[IdContainer].length; iPos++) {
      this.deleteView(this.aViewsOfContainer[IdContainer][iPos]);
    }
    delete this.aViewsOfContainer[IdContainer];
  }

  return true;
};

CGLayoutMainCenterBody.prototype.getTabId = function (Type, Id) {
  var sPrefix = "";

  if (Type == VIEW_NODE) sPrefix = NODE_TAB_PREFIX;
  else if (Type == VIEW_TASK) sPrefix = TASK_TAB_PREFIX;
  else if (Type == VIEW_SOURCE) sPrefix = SOURCE_TAB_PREFIX;
  else if (Type == VIEW_TEAM) sPrefix = TEAM_TAB_PREFIX;

  return sPrefix + Id;
};

CGLayoutMainCenterBody.prototype.existsTab = function (Type, Id) {
  return this.PageControl.existsPage(this.getTabId(Type, Id));
};

CGLayoutMainCenterBody.prototype.getActiveTab = function (Type) {
  return this.getTabId(Type, this.PageControl.getActivePage().Id);
};

CGLayoutMainCenterBody.prototype.isTabActive = function (Type, Id) {
  var IdCurrentTab = this.PageControl.getActivePage().Id;
  return (IdCurrentTab == this.getTabId(Type, Id));
};

CGLayoutMainCenterBody.prototype.activateTab = function (Type, Id) {
  if (this.isTabActive(Type, Id)) return;
  return this.PageControl.showPage(this.getTabId(Type, Id));
};

CGLayoutMainCenterBody.prototype.addTab = function (Type, Config) {
  var IdPage = this.getTabId(Type, Config.Id);
  Config.Id = IdPage;
  this.PageControl.addPage(Config);
  return IdPage;
};

CGLayoutMainCenterBody.prototype.updateTab = function (Type, Id, sTitle) {
  this.PageControl.setPageTitle(this.getTabId(Type, Id), sTitle);
};

CGLayoutMainCenterBody.prototype.deleteTab = function (Type, Id) {
  this.PageControl.deletePage(this.getTabId(Type, Id));
};

CGLayoutMainCenterBody.prototype.refresh = function () {
  this.aViews.each(function (View) {
    if (!View) return;
    if (View.refresh) View.refresh();
  });
};

//---------------------------------------------------------------------
CGLayoutMainCenterBody.prototype.atScroll = function (Event, Obj) {
  var IdTab = this.getActiveTab(VIEW_NODE);
  if (this.scrollListeners[IdTab]) {
    this.scrollListeners[IdTab](Event, Obj);
  }
};

//---------------------------------------------------------------------
CGLayoutMainCenterBody.prototype.setScrollListener = function (IdView, delegate, DOMLayer) {

  if (DOMLayer != null) {
    var extViewPort = this.getViewport(DOMLayer);
    extViewPort.on('scroll', this.atScroll, this);
    this.scrollListeners[IdView] = delegate;
    this.scrollViewports[IdView] = extViewPort;
  }
  else {
    if (this.scrollViewports[IdView]) this.scrollViewports[IdView].un('scroll', this.atScroll, this);
    delete this.scrollListeners[IdView];
    delete this.scrollViewports[IdView];
  }

};

//---------------------------------------------------------------------
CGLayoutMainCenterBody.prototype.getViewport = function (DOMLayer) {
  var extResult = Ext.get(DOMLayer).up(".x-tabs-item-body");
  if (extResult == null) extResult = Ext.get(DOMLayer).up(".x-tabs-body").down(".x-tabs-item-body");
  if (extResult == null) return this.InnerLayout.el.select(".x-tabs-body.x-layout-tabs-body").first();
  return extResult;
};

CGLayoutMainCenter = function () {
  this.Header = null;
  this.Body = null;
};

CGLayoutMainCenter.prototype.init = function (InnerLayout) {

  this.innerLayout = new Ext.BorderLayout($(Literals.Layout.MainCenter), {
    north: { split: false, initialSize: Widths.Layout.MainCenterHeader, titlebar: false },
    center: { initialSize: Widths.Layout.MainCenterBody, titlebar: false, autoScroll: true, closeOnTab: true, hideTabs: true, tabPosition: 'top' }
  });

  this.nestedPanel = new Ext.NestedLayoutPanel(this.innerLayout, Literals.Layout.MainCenter);
  this.nestedPanel.setTitle(Lang.LayoutMainCenter.Title);
  InnerLayout.add('center', this.nestedPanel);

  this.initLayout();
};

CGLayoutMainCenter.prototype.initLayout = function () {

  this.innerLayout.beginUpdate();

  this.Header = new CGLayoutMainCenterHeader();
  this.Header.init(this.innerLayout);

  this.Body = new CGLayoutMainCenterBody();
  this.Body.init(this.innerLayout);

  this.innerLayout.restoreState();
  this.innerLayout.endUpdate();

};

CGLayoutMainCenter.prototype.refresh = function () {
  this.Header.refresh();
  this.Body.refresh();
};

CGPage = function () {
  this.sName = EMPTY;
  this.sContent = EMPTY;
};




CGPage.prototype.getName = function () {
  return this.sName;
};

CGPage.prototype.setName = function (sName) {
  this.sName = sName;
};

CGPage.prototype.getContent = function () {
  return this.sContent;
};

CGPage.prototype.setContent = function (sContent) {
  this.sContent = sContent;
};

CGPage.prototype.unserialize = function (serialized) {
  var jsonData = Ext.util.JSON.decode(serialized);
  if (jsonData == null) return;
  this.sName = jsonData.name != null ? jsonData.name : "";
  this.sContent = jsonData.content != null ? jsonData.content : "";
};

ViewerHelperPage = new Object;

ViewerHelperPage.extLayer = null;
ViewerHelperPage.Page = null;

ViewerHelperPage.init = function (extLayer) {
  ViewerHelperPage.extLayer = extLayer;
  ViewerHelperPage.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperPage, Lang.ViewerHelperPage);
};

ViewerHelperPage.getTarget = function () {
  return ViewerHelperPage.Page;
};

ViewerHelperPage.setTarget = function (Page) {
  ViewerHelperPage.Page = Page;
};

ViewerHelperPage.show = function () {
  ViewerHelperPage.extLayer.dom.style.display = "block";
};

ViewerHelperPage.hide = function () {
  ViewerHelperPage.extLayer.dom.style.display = "none";
};

ViewerHelperPage.refresh = function () {
  if (ViewerHelperPage.Page == null) return;
  var extPage = ViewerHelperPage.extLayer.select(".page").first();
  extPage.dom.innerHTML = ViewerHelperPage.Page.getContent();
  CommandListener.capture(extPage.dom);
};

EDITOR_MAX_PAGE_ITEMS = 20;

CGEditor = function () {
  this.extEditor = null;
  this.Configuration = null;
  this.aDialogs = new Array();
  this.sDialogMain = null;
  this.onShow = null;
  this.onHide = null;
  this.IdField = null;
  this.bShowHelp = false;
};

//private
CGEditor.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  this.extLoadDefaultValue = this.extEditor.select(CSS_EDITOR_LOAD_DEFAULT_VALUE).first();
  if (this.extLoadDefaultValue) Event.observe(this.extLoadDefaultValue.dom, "click", CGEditor.prototype.atLoadDefaultValue.bind(this));

  this.extAddDefaultValue = this.extEditor.select(CSS_EDITOR_ADD_DEFAULT_VALUE).first();
  if (this.extAddDefaultValue) Event.observe(this.extAddDefaultValue.dom, "click", CGEditor.prototype.atAddDefaultValue.bind(this));

  this.extClearField = this.extEditor.select(CSS_EDITOR_CLEAR_FIELD).first();
  if (this.extClearField) Event.observe(this.extClearField.dom, "click", CGEditor.prototype.atClearValue.bind(this));

  this.extMessage = this.extEditor.select(CSS_EDITOR_EMESSAGE).first();

  var extHelp = this.extEditor.select(CSS_EDITOR_HELP).first();
  if (extHelp) Event.observe(extHelp.dom, "click", CGEditor.prototype.atHelp.bind(this));
};

//public
CGEditor.prototype.getDOM = function () {
  return this.extEditor.dom;
};

CGEditor.prototype.getFocus = function () {
  this.extFilter.dom.focus();
};

CGEditor.prototype.getDialogMain = function () {
  return this.aDialogs[this.sDialogMain];
};

CGEditor.prototype.setDialogMain = function (sName) {
  this.sDialogMain = sName;
};

CGEditor.prototype.getContextContent = function (Context) {
  var sContent;

  if ((Context == null) || (Context.length <= 0)) return "";

  sContent = "<li><a class='command' href='firstfield()'>" + Context[Context.length - 1].Title + "</a></li>";
  for (var iPos = Context.length - 2; iPos >= 0; iPos--) {
    sContent += "<li style='color:green;'>/</li>";
    sContent += "<li><a class='command' href='gotofield(" + Context[iPos].Path + ")'>" + Context[iPos].Title + "</a></li>";
  }

  return "<ul>" + sContent + "</ul>";
};

CGEditor.prototype.setInfo = function (Info) {
  var extDescription = this.extEditor.select(CSS_EDITOR_INFO_DESCRIPTION).first();
  var extEHelp = this.extEditor.select(CSS_EDITOR_INFO_EHELP).first();

  this.IdField = Info.Id;

  if (extDescription) {
    if (Info.Description != null) extDescription.dom.innerHTML = Info.Description;
    else extDescription.dom.innerHTML = EMPTY;
  }

  if (extEHelp) {
    if (Info.eHelp != null) {
      var sCommand = "loadhelperpage(" + Info.eHelp + ")";
      extEHelp.dom.innerHTML = "<a class='command' href='" + sCommand + "'>" + Lang.Editor.MoreInfo + "</a>";
      CommandListener.capture(extEHelp.dom);
    }
    else extEHelp.dom.innerHTML = EMPTY;
  }

};

CGEditor.prototype.getDialog = function (sName) {
  return this.aDialogs[sName];
};

CGEditor.prototype.show = function () {
  this.extEditor.dom.style.display = "block";
  for (var iPos in this.aDialogs) {
    if (isFunction(this.aDialogs[iPos])) continue;
    this.aDialogs[iPos].show();
  }
  if (this.onShow) this.onShow(this);
};

CGEditor.prototype.hide = function () {
  this.extEditor.dom.style.display = "none";
  for (var iPos in this.aDialogs) {
    if (isFunction(this.aDialogs[iPos])) continue;
    this.aDialogs[iPos].hide();
  }
  if (this.onHide) this.onHide(this);
};

CGEditor.prototype.showValidationError = function (codeError) {
  var extValidationError = this.extEditor.select(CSS_EDITOR_VALIDATION_ERROR + DOT + codeError).first();
  if (extValidationError) {
    extValidationError.dom.style.display = "block";
  }
};

CGEditor.prototype.hideValidationError = function (codeError) {
  var extValidationError = this.extEditor.select(CSS_EDITOR_VALIDATION_ERROR + DOT + codeError).first();
  if (extValidationError) {
    extValidationError.dom.style.display = "none";
  }
};

CGEditor.prototype.setConfiguration = function (Config) {
  this.Configuration = Config;
  if (this.Configuration.Field) this.Configuration.Field = null;
  for (var iPos in Config.Dialogs) {
    if (isFunction(Config.Dialogs[iPos])) continue;
    var CurrentConfig = Config.Dialogs[iPos];
    if (this.aDialogs[CurrentConfig.sName]) this.aDialogs[CurrentConfig.sName].setConfiguration(CurrentConfig);
  }
};

CGEditor.prototype.moveUp = function (Sender) {
  if (this.aDialogs[this.sDialogMain]) this.aDialogs[this.sDialogMain].moveUp(Sender);
};

CGEditor.prototype.moveDown = function (Sender) {
  if (this.aDialogs[this.sDialogMain]) this.aDialogs[this.sDialogMain].moveDown(Sender);
};

CGEditor.prototype.getData = function () {
  if (this.aDialogs[this.sDialogMain]) this.aDialogs[this.sDialogMain].getData();
};

CGEditor.prototype.setData = function (Data) {
  for (var iPos in this.aDialogs) {
    if (isFunction(this.aDialogs[iPos])) continue;
    this.aDialogs[iPos].setData(Data);
  }
};

CGEditor.prototype.setItemsPerPage = function (iItemsPerPage) {
  for (var iPos in this.aDialogs) {
    if (isFunction(this.aDialogs[iPos])) continue;
    this.aDialogs[iPos].setItemsPerPage(iItemsPerPage);
  }
};

CGEditor.prototype.showOtherDialog = function (oEvent) {
  Event.stop(oEvent);
  Ext.Msg.show({
    title: Lang.Editor.Dialogs.Other.Title,
    msg: Lang.Editor.Dialogs.Other.Description,
    width: 300,
    buttons: Ext.MessageBox.OKCANCEL,
    prompt: true,
    fn: CGEditor.prototype.atSelectOther.bind(this),
    value: (this.extFilter) ? this.extFilter.dom.value : ""
  });
  return false;
};

CGEditor.prototype.refresh = function () {
  for (var iPos in this.aDialogs) {
    if (isFunction(this.aDialogs[iPos])) continue;
    this.aDialogs[iPos].refresh();
  }
};

CGEditor.prototype.normalizeDataList = function (dataList) {
  for (var i=0; i<dataList.length; i++)
    dataList[i] = this.normalizeData(dataList[i]);
  return dataList;
};

CGEditor.prototype.normalizeData = function (data) {
  data.code = HtmlUtil.decode(data.code);
  if (data.value.unescapeHTML) data.value = data.value.unescapeHTML();
  data.value = HtmlUtil.decode(data.value);
  data.label = data.value;
  return data;
};

CGEditor.prototype.lock = function () {
  if (this.onLock) this.onLock();
};

CGEditor.prototype.unLock = function () {
  if (this.onUnLock) this.onUnLock();
};

// #############################################################################################################
CGEditor.prototype.atSelect = function (Data) {
  Data = this.normalizeData(Data);
  var DialogSource = this.getDialog(SOURCE);
  if (this.onSelect) this.onSelect(Data, DialogSource != null ? DialogSource.getData() : null);
};

CGEditor.prototype.atSelectMultiple = function (dataList) {
  dataList = this.normalizeDataList(dataList);
  var DialogSource = this.getDialog(SOURCE);
  if (this.onSelectMultiple) this.onSelectMultiple(dataList, DialogSource != null ? DialogSource.getData() : null);
};

CGEditor.prototype.atSelectOther = function (ButtonResult, sValue) {
  if (ButtonResult == BUTTON_RESULT_OK) {
    var Data = { code: "", value: sValue };
    var DialogSource = this.getDialog(SOURCE);
    if (this.onSelectOther) this.onSelectOther(Data, DialogSource != null ? DialogSource.getData() : null);
  }
};

CGEditor.prototype.atFilter = function (sValue) {
  if (this.onFilter) this.onFilter(sValue);
};

CGEditor.prototype.atLoadDefaultValue = function (oEvent) {
  Event.stop(oEvent);
  if (this.onLoadDefaultValue) this.onLoadDefaultValue();
  return false;
};

CGEditor.prototype.atAddDefaultValue = function (oEvent) {
  Event.stop(oEvent);
  if (this.onAddDefaultValue) this.onAddDefaultValue();
  return false;
};

CGEditor.prototype.atClearValue = function (oEvent) {
  Event.stop(oEvent);
  if (this.onClearValue) this.onClearValue(this);
  return false;
};

CGEditor.prototype.atHelp = function (oEvent) {
  Event.stop(oEvent);
  var sStyle = this.extMessage.dom.style.display;
  this.extMessage.dom.style.display = (sStyle == "block") ? "none" : "block";
  bShowHelp = (this.extMessage.dom.style.display == "block");
  return false;
};

CGEditorDialog = function (extLayer) {
  this.extLayer = extLayer;
  this.Data = null;
  this.Configuration = null;
};

//private
CGEditorDialog.prototype.init = function () {
};

//public
CGEditorDialog.prototype.getLayer = function () {
  return this.extLayer;
};

CGEditorDialog.prototype.getConfiguration = function () {
  return this.Configuration;
};

CGEditorDialog.prototype.setConfiguration = function (Config) {
  this.Configuration = Config;
  if (this.Configuration.Field) this.Configuration.Field = null;
};

CGEditorDialog.prototype.showLoading = function () {
  if (this.extLoading) this.extLoading.dom.style.display = "block";
};

CGEditorDialog.prototype.hideLoading = function () {
  if (this.extLoading) this.extLoading.dom.style.display = "none";
};

CGEditorDialog.prototype.isVisible = function () {
  return (this.extLayer.dom.style.position != "absolute");
};

CGEditorDialog.prototype.show = function () {
  this.extLayer.dom.style.display = "block";
};

CGEditorDialog.prototype.hide = function () {
  this.extLayer.dom.style.display = "none";
};

CGEditorDialog.prototype.getData = function () {
  return this.Data;
};

CGEditorDialog.prototype.setData = function (Data) {
  this.Data = Data;
};

CGEditorDialog.prototype.normalizeData = function (Data, isFlatten) {
  var CodeValueColumn = "label";

  if (this.ColumnModel.CodeValueColumn != null) CodeValueColumn = this.ColumnModel.CodeValueColumn;
  else if (isFlatten) CodeValueColumn = "flatten_label";

  Data.code = HtmlUtil.decode(Data.code);
  Data.value = HtmlUtil.decode(eval("Data." + CodeValueColumn).unescapeHTML());
  Data.label = Data.value;

  return Data;
};

CGEditorDialog.prototype.moveUp = function () {
};

CGEditorDialog.prototype.moveDown = function () {
};

CGEditorDialog.prototype.focus = function () {
};

CGEditorDialog.prototype.refresh = function () {
};

// #############################################################################################################

CGEditorDialogGrid = function (extLayer) {
  this.base = CGEditorDialog;
  this.base(extLayer);
  this.extGrid = null;
  this.extEmpty = null;
  this.sFilter = EMPTY;
  this.Store = null;
  this.ColumnModel = null;
  this.sLastQuery = EMPTY;
  this.iItemsPerPage = EDITOR_MAX_PAGE_ITEMS;
  this.bGridRendered = false;
  this.bRenderFooter = true;
  this.init();
};

CGEditorDialogGrid.prototype = new CGEditorDialog;

//private
CGEditorDialogGrid.prototype.init = function () {
  var DOMGrid;

  this.Store = new Ext.data.SimpleStore({fields: ['label', 'code'],remoteSort:true});
  this.ColumnModel = new Ext.grid.ColumnModel([
    {header: Lang.Editor.Code, dataIndex: 'code', hidden: true},
    {header: Lang.Editor.Option, dataIndex: 'label', sortable: true, width: this.extLayer.getWidth() - 10}
  ]);
  this.ColumnModel.defaultSortable = true;
  this.ColumnModel.sortable = true;

  if (!(DOMGrid = (this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_GRID).first()).dom)) return;
  this.extGrid = new Ext.grid.Grid(DOMGrid, {
    ds: this.Store,
    cm: this.ColumnModel,
    selModel: new Ext.grid.RowSelectionModel({singleSelect: true}),
    autoSizeColumns: true,
    loadMask: true
  });

  this.extGrid.on("keypress", this.atGridKeyPress, this);
  this.extGrid.on("click", this.atSelect, this);

  this.extLoading = Ext.get($(new Insertion.Bottom(this.extLayer.dom, "<div class='loading'></div>").element.descendants().last()));
  this.extEmpty = Ext.get($(new Insertion.Bottom(this.extLayer.dom, "<div class='empty'>" + Lang.Editor.Empty + "</div>").element.descendants().last()));
};

CGEditorDialogGrid.prototype.renderGrid = function () {
  var extGridFooter;

  if (this.bGridRendered) return;

  this.extGrid.render();

  if (this.bRenderFooter) {
    extGridFooter = this.extGrid.getView().getFooterPanel(true);
    this.extPaging = new Ext.PagingToolbar(extGridFooter, this.Store, {
      pageSize: EDITOR_MAX_PAGE_ITEMS,
      displayInfo: true
    });
  }

  this.bGridRendered = true;
};

CGEditorDialogGrid.prototype.doRefreshColumns = function () {
  this.ColumnModel.setHidden(0, !this.Store.ShowCode);

  var offset = this.Store.ShowCode ? 0 : 1;
  var numColumns = this.ColumnModel.getColumnCount();
  var columnsWidth = (this.extLayer.getWidth() - 5) / (numColumns - offset);

  for (var i = offset; i < numColumns; i++)
    this.ColumnModel.setColumnWidth(i, columnsWidth);
};

CGEditorDialogGrid.prototype.doRefresh = function () {

  if (this.Configuration.Store == null) {
    this.hideLoading();
    this.idTimeoutRefresh = null;
    return;
  }

  if (this.Configuration.Store == this.Store) {
    this.hideLoading();
    this.doQuery(this.sFilter);
    this.idTimeoutRefresh = null;
    return;
  }

  if (this.Configuration.Store != null) this.Store = this.Configuration.Store;

  if (this.Configuration.ColumnModel != null) this.ColumnModel = this.Configuration.ColumnModel;
  else {
    if (this.Store.isFlatten) this.ColumnModel = new Ext.grid.ColumnModel([
      {header: Lang.Editor.Code, dataIndex: 'code', hidden: true},
      {header: Lang.Editor.Option, dataIndex: 'flatten_label', width: this.extLayer.getWidth() - 10}
    ]);
    else this.ColumnModel = new Ext.grid.ColumnModel([
      {header: Lang.Editor.Code, dataIndex: 'code', hidden: true},
      {header: Lang.Editor.Option, dataIndex: 'label', width: this.extLayer.getWidth() - 10}
    ]);
  }

  this.loadSorting();
  this.doRefreshColumns();
  this.renderGrid();

  this.Store.un("beforeload", this.atDataBeforeLoad, this);
  this.Store.on("beforeload", this.atDataBeforeLoad, this);

  this.Store.un("load", this.atDataLoad, this);
  this.Store.on("load", this.atDataLoad, this);

  this.extGrid.reconfigure(this.Store, this.ColumnModel);
  if (this.extPaging) this.extPaging.bind(this.Store);

  this.idTimeoutRefresh = null;
  this.hideLoading();
  this.doQuery(this.sFilter);
};

CGEditorDialogGrid.prototype.doQuery = function (sQuery) {
  var DataSource = this.extGrid.getDataSource();
  if (sQuery == null) sQuery = this.sLastQuery;
  this.sLastQuery = sQuery;
  DataSource.load({params: {query: sQuery, start: 0}});
  if (!DataSource.isRemote()) DataSource.filter("label", sQuery, true);
};

//public
CGEditorDialogGrid.prototype.focus = function () {
};

CGEditorDialogGrid.prototype.show = function (bShowPageControl) {
  this.extLayer.dom.style.display = "block";

  var extElement = this.extGrid.getView().el;
  if (extElement) extElement.dom.style.display = "block";

  if (this.Store.getCount() > 0) {
    this.extEmpty.dom.style.display = "none";
  }
  else {
    this.extEmpty.dom.style.display = "block";
  }
};

CGEditorDialogGrid.prototype.hide = function () {

  if (this.idTimeoutRefresh) {
    window.clearTimeout(this.idTimeoutRefresh);
    this.idTimeoutRefresh = null;
  }

  this.hideLoading();
  this.extLayer.dom.style.display = "none";
  var extElement = this.extGrid.getView().el;
  if (extElement) extElement.dom.style.display = "none";
};

CGEditorDialogGrid.prototype.moveUp = function (Sender) {
  this.extGrid.container.focus();
  if (Sender != null) this.Sender = Sender;
  var SelectionModel = this.extGrid.getSelectionModel();
  if (this.Store.getTotalCount() > 0) {
    if (SelectionModel.getSelected() != null) SelectionModel.selectPrevious();
    else SelectionModel.selectLastRow();
  }
};

CGEditorDialogGrid.prototype.moveDown = function (Sender) {
  this.extGrid.container.focus();
  if (Sender != null) this.Sender = Sender;
  var SelectionModel = this.extGrid.getSelectionModel();
  if (this.Store.getTotalCount() > 0) {
    if (SelectionModel.getSelected() != null) SelectionModel.selectNext();
    else SelectionModel.selectFirstRow();
  }
};

CGEditorDialogGrid.prototype.getData = function () {
  var Record = this.extGrid.getSelectionModel().getSelected();
  var DataSource = this.extGrid.getDataSource();
  if (Record) return this.normalizeData(Record.data, DataSource.isFlatten);
  return null;
};

CGEditorDialogGrid.prototype.setData = function (Data) {
  this.sFilter = Data;
};

CGEditorDialogGrid.prototype.setItemsPerPage = function (iItemsPerPage) {
  this.iItemsPerPage = iItemsPerPage;
};

CGEditorDialogGrid.prototype.setRenderFooter = function (bValue) {
  this.bRenderFooter = bValue;
};

CGEditorDialogGrid.prototype.setStoreSourceId = function (SourceId) {
  if (this.extGrid.getDataSource().setSourceId) {
    this.extGrid.getDataSource().setSourceId(SourceId);
    this.Configuration.Store.SourceId = SourceId;
  }
};

CGEditorDialogGrid.prototype.refresh = function () {

  if (this.idTimeoutRefresh != null)
    window.clearTimeout(this.idTimeoutRefresh);

  this.showLoading();
  this.Store.removeAll();
  this.idTimeoutRefresh = window.setTimeout(this.doRefresh.bind(this), 300);
};

// #############################################################################################################
CGEditorDialogGrid.prototype.atSelect = function (oEvent) {
  var Record = this.extGrid.getSelectionModel().getSelected();
  var DataSource = this.extGrid.getDataSource();
  if (!Record) return false;
  var Data = this.normalizeData(Record.data, DataSource.isFlatten);
  if (this.onSelect) this.onSelect(Data);
  return true;
};

CGEditorDialogGrid.prototype.atDataBeforeLoad = function (Store, Options) {
  this.showLoading();
  if (Options) {
    if (!Options.params) Options.params = new Object();
    if (!Options.params.query) Options.params.query = this.sLastQuery;
    if (Store.SourceId != null) Options.params.id = Store.SourceId;
    if (Store.From != null) Options.params.from = Store.From;
    if (Store.Filters != null) Options.params.filters = Store.Filters;
    Options.params.list = this.extGrid.getDataSource().list;
    Options.params.limit = this.iItemsPerPage;
  }
  if (this.Configuration.Parameters) {
    for (var code in this.Configuration.Parameters) {
      if (isFunction(this.Configuration.Parameters[code])) continue;
      eval("Options.params." + code + "='" + this.Configuration.Parameters[code] + "';");
    }
  }
};

CGEditorDialogGrid.prototype.atDataLoad = function (e) {
  this.hideLoading();
  this.saveSorting(e.sortInfo);
  if (this.extGrid.getDataSource().getCount() > 0) {
    this.extEmpty.dom.style.display = "none";
  }
  else {
    this.extEmpty.dom.style.display = "block";
  }
};

CGEditorDialogGrid.prototype.atGridKeyPress = function (oEvent) {
  var codeKey = oEvent.keyCode;
  var Sender = this.Sender;

  if (Sender == null) return true;

  if (codeKey == oEvent.ENTER) {
    this.atSelect();
    Sender.focus();
    this.Sender = null;
  }
  else if (codeKey == oEvent.ESCAPE) {
    Sender.focus();
    this.Sender = null;
  }

  if (this.onKeyPress) this.onKeyPress(oEvent, codeKey);

  Event.stop(oEvent);
  return false;
};

CGEditorDialogGrid.prototype.saveSorting = function(sortInfo) {
    if (sortInfo == null) return;
    var name = this.ColumnModel.name;
    if (name == null || name === "") return;
    var businessUnit = Context.Config.BusinessUnit;
    setCookie(businessUnit + "grid_editordialog_sorting_" + name, sortInfo.field);
    setCookie(businessUnit + "grid_editordialog_sorting_dir_" + name, sortInfo.direction);
};

CGEditorDialogGrid.prototype.loadSorting = function () {
    var name = this.ColumnModel.name;
    if (name == null || name === "") return;
    var businessUnit = Context.Config.BusinessUnit;
    var sorting = getCookie(businessUnit + "grid_editordialog_sorting_" + name);
    if (sorting == null || sorting === "" || sorting === "undefined") return;
    this.Store.sortInfo = { field: sorting, direction: getCookie(businessUnit + "grid_editordialog_sorting_dir_" + name) };
};

CGEditorBoolean = function () {
  this.base = CGEditor;
  this.base();
};

CGEditorBoolean.prototype = new CGEditor;

//private
CGEditorBoolean.prototype.addBehaviours = function () {
  this.aDialogs[SOURCE_STORE].onSelect = this.atSelect.bind(this);
};

//public
CGEditorBoolean.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  var extDialogSourceStore = this.extEditor.select(CSS_EDITOR_DIALOG_SOURCE_STORE).first();

  this.aDialogs[SOURCE_STORE] = new CGEditorDialogGrid(extDialogSourceStore);
  this.aDialogs[SOURCE_STORE].setRenderFooter(false);
  this.setDialogMain(SOURCE_STORE);

  CGEditor.prototype.init.call(this, DOMEditor);

  this.addBehaviours();
};

CGEditorBoolean.prototype.refresh = function () {
  this.aDialogs[SOURCE_STORE].refresh();
};

// #############################################################################################################

CGEditorCheck = function () {
  this.base = CGEditor;
  this.base();
};

CGEditorCheck.prototype = new CGEditor;

//private
CGEditorCheck.prototype.addBehaviours = function () {
  this.aDialogs[HISTORY].onSelect = this.atSelect.bind(this);
  this.aDialogs[SOURCE].onSelect = this.atSelectSource.bind(this);
};

//public
CGEditorCheck.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  var extDialogSource = this.extEditor.select(CSS_EDITOR_DIALOG_SOURCE).first();
  var extDialogHistory = this.extEditor.select(CSS_EDITOR_DIALOG_HISTORY).first();

  this.aDialogs[SOURCE] = new CGEditorDialogSource(extDialogSource);
  this.aDialogs[HISTORY] = new CGEditorDialogGrid(extDialogHistory);
  this.setDialogMain(HISTORY);

  this.extFilter = this.extEditor.select(CSS_EDITOR_FILTER).first();
  this.extFilter.on("keyup", this.atFilterKeyUp, this);
  this.extFilter.on("focus", this.atFilterFocus, this);
  this.extFilter.on("blur", this.atFilterBlur, this);
  new Insertion.After(this.extFilter.dom, "<span class='empty'>" + Lang.Editor.FilterEmptyHistory + "</span>");
  this.extFilterEmpty = this.extEditor.select('.filter .empty').first();
  Event.observe(this.extFilterEmpty.dom, "click", CGEditorCheck.prototype.atFilterEmptyClick.bind(this));

  CGEditor.prototype.init.call(this, DOMEditor);

  this.extToggleCheck = this.extEditor.select(CSS_EDITOR_TOGGLE_CHECK).first();
  if (this.extToggleCheck) Event.observe(this.extToggleCheck.dom, "click", CGEditorCheck.prototype.atToggleCheck.bind(this));

  this.addBehaviours();
};

CGEditorCheck.prototype.clearFilter = function () {
  this.extFilter.dom.value = "";
};

CGEditorCheck.prototype.filter = function () {
  var DialogMain = this.getDialogMain();
  DialogMain.setData(this.extFilter.dom.value);
  DialogMain.setStoreSourceId(this.getSourceId());
  DialogMain.refresh();
};

CGEditorCheck.prototype.setConfiguration = function (Config) {
  this.Configuration = Config;
  if (Config.Field) {
    Config.Field.onKeyPress = CGEditorCheck.prototype.atFieldKeyPress.bind(this);
    this.Configuration.Field = null;
  }
  for (var iPos in Config.Dialogs) {
    if (isFunction(Config.Dialogs[iPos])) continue;
    var CurrentConfig = Config.Dialogs[iPos];
    if (this.aDialogs[CurrentConfig.sName]) this.aDialogs[CurrentConfig.sName].setConfiguration(CurrentConfig);
  }
};

CGEditorCheck.prototype.refresh = function () {
  if (this.aDialogs[HISTORY].getConfiguration().Store == null) {
    this.extEditor.addClass(CLASS_NO_HISTORY);
    this.extFilter.dom.style.display = "none";
    this.extFilterEmpty.dom.style.display = "none";
    this.aDialogs[HISTORY].hide();
  }
  else {
    this.extEditor.removeClass(CLASS_NO_HISTORY);
    this.extFilter.dom.style.display = "block";
    this.aDialogs[HISTORY].show();
    this.extFilter.dom.value = "";
    this.extFilterEmpty.dom.style.display = "block";
    this.filter();
  }
  if (this.extToggleCheck) this.extToggleCheck.dom.innerHTML = (this.Configuration.Checked) ? Lang.Editor.Uncheck : Lang.Editor.Check;
  this.aDialogs[SOURCE].refresh();
};

CGEditorCheck.prototype.getSourceId = function () {
  var Dialog = this.getDialog(SOURCE);
  return Dialog.getData();
};

// #############################################################################################################
CGEditorCheck.prototype.atSelectSource = function (SourceId) {
  this.clearFilter();
  this.filter();
  if (this.onSelectSource) this.onSelectSource(SourceId);
};

CGEditorCheck.prototype.atSelect = function (Data) {
  Data = this.normalizeData(Data);
  var DialogSource = this.getDialog(SOURCE);
  this.clearFilter();
  this.filter();
  if (this.onSelect) this.onSelect(Data, DialogSource != null ? DialogSource.getData() : null);
};

CGEditorCheck.prototype.atFieldKeyPress = function (sValue) {
  window.clearTimeout(this.idTimeoutFilter);
  this.extFilter.dom.value = sValue;
  if (!this.extEditor.hasClass(CLASS_NO_HISTORY)) this.extFilterEmpty.dom.style.display = (this.extFilter.dom.value.length <= 0) ? "block" : "none";
  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 300);
};

CGEditorCheck.prototype.atFilterKeyUp = function (oEvent) {
  var codeKey = oEvent.keyCode;

  window.clearTimeout(this.idTimeoutFilter);

  if (codeKey == oEvent.UP) {
    this.moveUp(this.extFilter);
    return;
  }
  else if (codeKey == oEvent.DOWN) {
    this.moveDown(this.extFilter);
    return;
  }
  else if ((codeKey == oEvent.ENTER) || (codeKey == oEvent.LEFT) || (codeKey == oEvent.RIGHT) || (codeKey == oEvent.SHIFT)) return;

  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 300);
};

CGEditorCheck.prototype.atFilterFocus = function () {
  this.extFilterEmpty.dom.style.display = "none";
  this.extFilter.dom.select();
};

CGEditorCheck.prototype.atFilterBlur = function () {
  if (this.extEditor.hasClass(CLASS_NO_HISTORY)) return;
  var sFilter = this.extFilter.dom.value;
  this.extFilterEmpty.dom.style.display = (sFilter.length <= 0) ? "block" : "none";
};

CGEditorCheck.prototype.atFilterEmptyClick = function () {
  this.extFilter.focus();
};

CGEditorCheck.prototype.atToggleCheck = function (oEvent) {
  Event.stop(oEvent);
  if (this.onToggleCheck) this.onToggleCheck();
  return false;
};

var DATE_PICKER_WINDOW_SIZE = 10;
var DIALOG_HOURS = "dhours";
var DIALOG_SECONDS = "dseconds";
var DIALOG_MINUTES = "dminutes";
var DIALOG_DAYS = "ddays";
var DIALOG_MONTHS = "dmonths";
var DIALOG_YEARS = "dyears";
var DATE_FORMAT_DAYS = "fdays";
var DATE_FORMAT_MONTHS = "fmonths";
var DATE_FORMAT_YEARS = "fyears";
var DATE_FORMAT_HOURS = "fhours";
var DATE_FORMAT_MINUTES = "fminutes";
var DATE_FORMAT_SECONDS = "fseconds";
var DATE_PRECISION_DAYS = "days";
var DATE_PRECISION_MONTHS = "months";
var DATE_PRECISION_YEARS = "years";
var DATE_PRECISION_HOURS = "hours";
var DATE_PRECISION_MINUTES = "minutes";
var DATE_PRECISION_SECONDS = "seconds";
var DATE_MODE_RELATIVE = "relative";
var DATE_MODE_ABSOLUTE = "absolute";
var DatePickerLanguage = "es";
var DATE_CLASS_ACTIVE = "active";
var DATE_CLASS_INACTIVE = "inactive";

var aDatePickerTemplates = new Array();
aDatePickerTemplates["es"] = new Array();
aDatePickerTemplates["es"]["MAIN_TEMPLATE"] = "<table><tr><td width='1px'><div class='date'><table class='toolbar'><tr><td><div class='button up' title='atrás'></div></td></tr><tr><td><div class='border'></div></td></tr></table><div class='dialog days'><ul class='list'></ul></div><div class='dialog months'><ul class='list'></ul></div><div class='dialog years'><ul class='list'></ul></div><table class='dialog selected'><tr><td class='daycell' width='57px'><div class='day'></div><div class='weekday'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td><td class='monthcell' width='140px'><div class='month'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td><td class='yearcell' width='59px'><div class='year'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td></tr></table><table class='toolbar bottom'><tr><td><div class='button down' title='adelante'></div></td></tr><tr><td><div class='border'></div></td></tr></table></div></td><td><div class='time'><table class='toolbar'><tr><td><div class='button up' title='atrás'></div></td></tr><tr><td><div class='border'></div></td></tr></table><div class='dialog hours'><ul class='list'></ul></div><div class='dialog minutes'><ul class='list'></ul></div><div class='dialog seconds'><ul class='list'></ul></div><table class='dialog selected' width='100%'><tr><td class='hourcell'><div class='hour'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td><td class='minutecell'><div class='minute'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td><td class='secondcell'><div class='second'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td></tr></table><table class='toolbar bottom'><tr><td><div class='button down' title='adelante'></div></td></tr><tr><td><div class='border'></div></td></tr></table></div></td></tr><tr><td colspan='2'><div class='behaviours'><div class='label'>Opciones</div><div class='setmode'><input type='checkbox' id='dpsetmode'/><label for='dpsetmode'>Usar un comportamiento circular al cambiar de fecha</label></div><div class='setprecision'><label>Cambiar la precisión de la fecha a</label><select href='javascript:void()'><option value='years'>años</option><option value='months'>meses</option><option value='days'>días</option><option value='hours'>horas</option><option value='minutes'>minutos</option><option value='seconds'>segundos</option></select></div></div></td></tr></table>";
aDatePickerTemplates["en"] = new Array();
aDatePickerTemplates["en"]["MAIN_TEMPLATE"] = "<table><tr><td width='1px'><div class='date'><table class='toolbar'><tr><td><div class='button up' title='back'></div></td></tr><tr><td><div class='border'></div></td></tr></table><div class='dialog days'><ul class='list'></ul></div><div class='dialog months'><ul class='list'></ul></div><div class='dialog years'><ul class='list'></ul></div><table class='dialog selected'><tr><td class='daycell' width='57px'><div class='day'></div><div class='weekday'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td><td class='monthcell' width='140px'><div class='month'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td><td class='yearcell' width='59px'><div class='year'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td></tr></table><table class='toolbar bottom'><tr><td><div class='button down' title='forward'></div></td></tr><tr><td><div class='border'></div></td></tr></table></div></td><td><div class='time'><table class='toolbar'><tr><td><div class='button up' title='back'></div></td></tr><tr><td><div class='border'></div></td></tr></table><div class='dialog hours'><ul class='list'></ul></div><div class='dialog minutes'><ul class='list'></ul></div><div class='dialog seconds'><ul class='list'></ul></div><table class='dialog selected' width='100%'><tr><td class='hourcell'><div class='hour'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td><td class='minutecell'><div class='minute'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td><td class='secondcell'><div class='second'></div><div class='buttons'><a class='button up' href='javascript:void(null)'></a><a class='button down' href='javascript:void(null)'></a></div></td></tr></table><table class='toolbar bottom'><tr><td><div class='button down' title='forward'></div></td></tr><tr><td><div class='border'></div></td></tr></table></div></td></tr><tr><td colspan='2'><div class='behaviours'><div class='label'>Options</div><div class='setmode'><input type='checkbox' id='dpsetmode'/><label for='dpsetmode'>Use circular behaviour to define the date</label></div><div class='setprecision'><label>Set date precision to</label><select href='javascript:void()'><option value='years'>years</option><option value='months'>months</option><option value='days'>days</option><option value='hours'>hours</option><option value='minutes'>minutes</option><option value='seconds'>seconds</option></select></div></div></td></tr></table>";

var aDatePickerMonths = {
  "es": ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
  "en": ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};

var aDatePickerDays = {
  "es": ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
  "en": ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};

function DatePicker() {
  this.extLayer = null;
  this.dtSelected = null;
  this.dtStartAnimation = null;
  this.ActiveDateDialog = DIALOG_DAYS;
  this.ActiveTimeDialog = DIALOG_SECONDS;
}

DatePicker.prototype.initBehaviours = function () {
  var extMonthsDialog = this.extLayer.select(".dialog.months").first();
  var extYearsDialog = this.extLayer.select(".dialog.years").first();

  extMonthsDialog.on("click", this.atMonthsDialogClick, this);
  extYearsDialog.on("click", this.atYearsDialogClick, this);

  this.extSelectedHourCell.on("click", this.atSelectedHourClick, this);
  this.extSelectedMinuteCell.on("click", this.atSelectedMinuteClick, this);
  this.extSelectedSecondCell.on("click", this.atSelectedSecondClick, this);
  this.extSelectedDayCell.on("click", this.atSelectedDayClick, this);
  this.extSelectedDayCell.on("mouseover", this.atSelectedDayOver, this);
  this.extSelectedMonthCell.on("click", this.atSelectedMonthClick, this);
  this.extSelectedMonthCell.on("mouseover", this.atSelectedMonthOver, this);
  this.extSelectedYearCell.on("click", this.atSelectedYearClick, this);
  this.extSelectedYearCell.on("mouseover", this.atSelectedYearOver, this);

  var extDateDialogSelected = this.extLayer.select(".date .dialog.selected").first();
  var extTimeDialogSelected = this.extLayer.select(".time .dialog.selected").first();

  var aExtButtonsUp = this.extLayer.select(".button");
  aExtButtonsUp.each(function (extButton) {
    extButton.on("click", this.atButtonClick, this);
  }, this);

  extDateDialogSelected.removeClass("mac");
  extTimeDialogSelected.removeClass("mac");
  if (Ext.isMac) {
    extDateDialogSelected.addClass("mac");
    extTimeDialogSelected.addClass("mac");
  }

  this.extSetMode.on("change", this.atSetModeChange, this);
  this.extSetPrecision.on("change", this.atSetPrecisionChange, this);
};

DatePicker.prototype.init = function (IdLayer, Language) {

  this.Language = Language;
  this.extLayer = Ext.get(IdLayer);
  this.extLayer.dom.innerHTML = aDatePickerTemplates[this.Language]["MAIN_TEMPLATE"];
  this.extLayer.addClass("datepicker");
  this.extLayer.addClass(this.Precision);

  var extTimeSelectedDialog = this.extLayer.select(".time .dialog.selected").first();
  this.extSelectedHourCell = extTimeSelectedDialog.select(".hourcell").first();
  this.extSelectedHour = extTimeSelectedDialog.select(".hour").first();
  this.extSelectedMinuteCell = extTimeSelectedDialog.select(".minutecell").first();
  this.extSelectedMinute = extTimeSelectedDialog.select(".minute").first();
  this.extSelectedSecondCell = extTimeSelectedDialog.select(".secondcell").first();
  this.extSelectedSecond = extTimeSelectedDialog.select(".second").first();

  var extDateSelectedDialog = this.extLayer.select(".date .dialog.selected").first();
  this.extSelectedDayCell = extDateSelectedDialog.select(".daycell").first();
  this.extSelectedDay = extDateSelectedDialog.select(".day").first();
  this.extSelectedWeekDay = extDateSelectedDialog.select(".weekday").first();
  this.extSelectedMonthCell = extDateSelectedDialog.select(".monthcell").first();
  this.extSelectedMonth = extDateSelectedDialog.select(".month").first();
  this.extSelectedYearCell = extDateSelectedDialog.select(".yearcell").first();
  this.extSelectedYear = extDateSelectedDialog.select(".year").first();

  this.extSetMode = this.extLayer.select(".behaviours .setmode input").first();
  this.extSetPrecision = this.extLayer.select(".behaviours .setprecision select").first();

  this.setPrecision(DATE_PRECISION_DAYS);
  this.setMode(DATE_MODE_ABSOLUTE);

  this.initBehaviours();
};

DatePicker.prototype.registerListBehaviours = function (extDialog) {
  var extItemList = extDialog.select("li");
  extItemList.each(function (extItem) {
    extItem.on("click", DatePicker.prototype.atDialogListItemClick, this);
  }, this);
};

DatePicker.prototype.unregisterListBehaviours = function (extDialog) {
  var extItemList = extDialog.select("li");
  extItemList.each(function (extItem) {
    extItem.un("click", DatePicker.prototype.atDialogListItemClick, this);
  }, this);
};

DatePicker.prototype.getDateTimeStamp = function (dtDate, Precision) {
  if (this.Mode == DATE_MODE_RELATIVE) return dtDate.valueOf();
  if (Precision == DATE_PRECISION_HOURS) return dtDate.getHours();
  if (Precision == DATE_PRECISION_MINUTES) return dtDate.getMinutes();
  if (Precision == DATE_PRECISION_SECONDS) return dtDate.getSeconds();
  if (Precision == DATE_PRECISION_DAYS) return dtDate.getDate();
  if (Precision == DATE_PRECISION_MONTHS) return dtDate.getMonth();
  if (Precision == DATE_PRECISION_YEARS) return dtDate.getFullYear();
};

DatePicker.prototype.getFormattedTime = function (dtDate, Format) {
  var sResult = "";
  var sHour = (dtDate.getHours() < 10 ? "0" + dtDate.getHours() : dtDate.getHours());
  var sMinute = (dtDate.getMinutes() < 10 ? "0" + dtDate.getMinutes() : dtDate.getMinutes());
  var sSecond = (dtDate.getSeconds() < 10 ? "0" + dtDate.getSeconds() : dtDate.getSeconds());

  if (Format == DATE_FORMAT_HOURS) return sHour;
  else if (Format == DATE_FORMAT_MINUTES) return sMinute;
  else if (Format == DATE_FORMAT_SECONDS) return sSecond;

  return sResult;
};

DatePicker.prototype.getFormattedDate = function (dtDate, Format) {
  var sFormat = "";

  Date.dayNames = eval("aDatePickerDays." + this.Language);
  Date.monthNames = eval("aDatePickerMonths." + this.Language);

  if (this.Mode == DATE_MODE_ABSOLUTE) {
    if (Format == DATE_FORMAT_DAYS) sFormat = "d";
    else if (Format == DATE_FORMAT_MONTHS) sFormat = "F";
    else if (Format == DATE_FORMAT_YEARS) sFormat = "Y";
  }
  else {
    switch (this.Language) {
      case "es" :
        if (Format == DATE_FORMAT_DAYS) sFormat = "d F Y";
        else if (Format == DATE_FORMAT_MONTHS) sFormat = "F Y";
        else if (Format == DATE_FORMAT_YEARS) sFormat = "Y";
        break;
      case "en" :
        if (Format == DATE_FORMAT_DAYS) sFormat = "l, F d, Y";
        else if (Format == DATE_FORMAT_MONTHS) sFormat = "F, Y";
        else if (Format == DATE_FORMAT_YEARS) sFormat = "Y";
        break;
      default:
        if (Format == DATE_FORMAT_DAYS) sFormat = "l, d \\d\\e F \\d\\e Y";
        else if (Format == DATE_FORMAT_MONTHS) sFormat = "F \\d\\e Y";
        else if (Format == DATE_FORMAT_YEARS) sFormat = "Y";
    }
  }

  return dtDate.format(sFormat);
};

DatePicker.prototype.updateDateFromId = function (dtDate, sId) {
  var sNewDate = sId.replace("h", "").replace("M", "").replace("s", "").replace("d", "").replace("m", "").replace("y", "");
  ;

  if (this.Mode == DATE_MODE_RELATIVE) dtDate.setTime(sNewDate);
  else {
    if (sId.indexOf("h") != -1) dtDate.setHours(sNewDate);
    else if (sId.indexOf("M") != -1) dtDate.setMinutes(sNewDate);
    else if (sId.indexOf("s") != -1) dtDate.setSeconds(sNewDate);
    else if (sId.indexOf("d") != -1) dtDate.setDate(sNewDate);
    else if (sId.indexOf("m") != -1) dtDate.setMonth(sNewDate);
    else if (sId.indexOf("y") != -1) dtDate.setFullYear(sNewDate);
  }

  this.setDate(dtDate);
  if (this.onChange) this.onChange(this);
};

DatePicker.prototype.setDate = function (dtDate) {
  this.dtSelected = dtDate;
};

DatePicker.prototype.setRange = function (dtFromDate, dtToDate) {
  this.DateRange = {from: dtFromDate, to: dtToDate};
};

DatePicker.prototype.updateDate = function (dtDate) {
  this.setDate(dtDate);
  this.refresh();
  if (this.onChange) this.onChange(this);
};

DatePicker.prototype.getDate = function () {
  return this.dtSelected;
};

DatePicker.prototype.isHoliday = function (dtDate) {
  if (this.Precision != DATE_PRECISION_DAYS && this.Precision != DATE_PRECISION_HOURS && this.Precision != DATE_PRECISION_MINUTES && this.Precision != DATE_PRECISION_SECONDS) return false;
  var weekDay = dtDate.getDay();
  return (weekDay == 0 || weekDay == 6);
};

DatePicker.prototype.isInvalid = function (dtDate) {
  if (this.DateRange == null) return false;

  var time = dtDate.getTime();

  var fromTime = this.DateRange.from.getTime();
  if (time < fromTime) return true;

  if (this.DateRange.to == null) return false;

  var toTime = this.DateRange.to.getTime();
  if (time > toTime) return true;

  return false;
};

DatePicker.prototype.getStartHour = function () {
  var dtStart = new Date();

  dtStart.setTime(this.dtSelected.valueOf());
  dtStart.setHours(dtStart.getHours() - (DATE_PICKER_WINDOW_SIZE / 2));

  return dtStart;
};

DatePicker.prototype.getStartMinute = function () {
  var dtStart = new Date();

  dtStart.setTime(this.dtSelected.valueOf());
  dtStart.setMinutes(dtStart.getMinutes() - (DATE_PICKER_WINDOW_SIZE / 2));

  return dtStart;
};

DatePicker.prototype.getStartSecond = function () {
  var dtStart = new Date();

  dtStart.setTime(this.dtSelected.valueOf());
  dtStart.setSeconds(dtStart.getSeconds() - (DATE_PICKER_WINDOW_SIZE / 2));

  return dtStart;
};

DatePicker.prototype.getStartDay = function () {
  var dtStart = new Date();

  dtStart.setTime(this.dtSelected.valueOf());
  dtStart.setDate(dtStart.getDate() - (DATE_PICKER_WINDOW_SIZE / 2));

  return dtStart;
};

DatePicker.prototype.getStartMonth = function () {
  var dtStart = new Date();

  dtStart.setTime(this.dtSelected.valueOf());
  dtStart.setMonth(dtStart.getMonth() - (DATE_PICKER_WINDOW_SIZE / 2));

  return dtStart;
};

DatePicker.prototype.getStartYear = function () {
  var dtStart = new Date();

  dtStart.setTime(this.dtSelected.valueOf());
  dtStart.setFullYear(dtStart.getFullYear() - (DATE_PICKER_WINDOW_SIZE / 2));

  return dtStart;
};

DatePicker.prototype.getPreviousSecond = function (dtDate) {
  var iSeconds = dtDate.getSeconds() - 1;

  if (iSeconds < 0) {
    dtDate.setSeconds(59);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getPreviousMinute(dtDate);
  }
  else dtDate.setSeconds(iSeconds);

  return dtDate;
};

DatePicker.prototype.getNextSecond = function (dtDate) {
  var iSeconds = dtDate.getSeconds() + 1;

  if (iSeconds > 59) {
    dtDate.setSeconds(0);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getNextMinute(dtDate);
  }
  else dtDate.setSeconds(iSeconds);

  return dtDate;
};

DatePicker.prototype.getPreviousMinute = function (dtDate) {
  var iMinutes = dtDate.getMinutes() - 1;

  if (iMinutes < 0) {
    dtDate.setMinutes(59);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getPreviousHour(dtDate);
  }
  else dtDate.setMinutes(iMinutes);

  return dtDate;
};

DatePicker.prototype.getNextMinute = function (dtDate) {
  var iMinutes = dtDate.getMinutes() + 1;

  if (iMinutes > 59) {
    dtDate.setMinutes(0);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getNextHour(dtDate);
  }
  else dtDate.setMinutes(iMinutes);

  return dtDate;
};

DatePicker.prototype.getPreviousHour = function (dtDate) {
  var iHours = dtDate.getHours() - 1;

  if (iHours < 0) {
    dtDate.setHours(23);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getPreviousDay(dtDate);
  }
  else dtDate.setHours(iHours);

  return dtDate;
};

DatePicker.prototype.getNextHour = function (dtDate) {
  var iHours = dtDate.getHours() + 1;

  if (iHours > 23) {
    dtDate.setHours(0);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getNextDay(dtDate);
  }
  else dtDate.setHours(iHours);

  return dtDate;
};

DatePicker.prototype.getPreviousDay = function (dtDate) {
  var iDay = dtDate.getDate() - 1;

  if (iDay < 1) {
    var iMonthDays = getMonthDays(dtDate);
    dtDate.setDate(iMonthDays);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getPreviousMonth(dtDate);
  }
  else dtDate.setDate(iDay);

  return dtDate;
};

DatePicker.prototype.getNextDay = function (dtDate) {
  var iDay = dtDate.getDate() + 1;
  var iMonthDays = getMonthDays(dtDate);

  if (iDay > iMonthDays) {
    dtDate.setDate(1);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getNextMonth(dtDate);
  }
  else dtDate.setDate(iDay);

  return dtDate;
};

DatePicker.prototype.getPreviousMonth = function (dtDate) {
  var iMonth = dtDate.getMonth() - 1;

  if (iMonth < 0) {
    dtDate.setMonth(11);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getPreviousYear(dtDate);
  }
  else dtDate.setMonth(iMonth);

  return dtDate;
};

DatePicker.prototype.getNextMonth = function (dtDate) {
  var iMonth = dtDate.getMonth() + 1;

  if (iMonth > 11) {
    dtDate.setMonth(0);
    if (this.Mode == DATE_MODE_RELATIVE) dtDate = this.getNextYear(dtDate);
  }
  else dtDate.setMonth(iMonth);

  return dtDate;
};

DatePicker.prototype.getPreviousYear = function (dtDate) {
  dtDate.setFullYear(dtDate.getFullYear() - 1);
  return dtDate;
};

DatePicker.prototype.getNextYear = function (dtDate) {
  dtDate.setFullYear(dtDate.getFullYear() + 1);
  return dtDate;
};

DatePicker.prototype.setPrecision = function (Precision) {
  this.extLayer.removeClass(this.Precision);
  this.Precision = Precision;
  this.extLayer.addClass(this.Precision);
  this.extSetPrecision.dom.value = Precision;
};

DatePicker.prototype.setMode = function (Mode) {
  this.extLayer.removeClass(this.Mode);
  this.Mode = Mode;
  this.extLayer.addClass(this.Mode);
  this.extSetMode.dom.checked = (Mode == DATE_MODE_RELATIVE);
};

DatePicker.prototype.refreshSelectedDialog = function () {
  var extDateDialogSelected = this.extLayer.select(".date .dialog.selected").first();

  this.extSelectedSecond.dom.innerHTML = this.dtSelected.getSeconds() >= 10 ? this.dtSelected.getSeconds() : "0" + this.dtSelected.getSeconds();
  this.extSelectedMinute.dom.innerHTML = this.dtSelected.getMinutes() >= 10 ? this.dtSelected.getMinutes() : "0" + this.dtSelected.getMinutes();
  this.extSelectedHour.dom.innerHTML = this.dtSelected.getHours() >= 10 ? this.dtSelected.getHours() : "0" + this.dtSelected.getHours();
  this.extSelectedDay.dom.innerHTML = this.dtSelected.getDate();
  this.extSelectedWeekDay.dom.innerHTML = aDatePickerDays[this.Language][this.dtSelected.getDay()];
  this.extSelectedMonth.dom.innerHTML = aDatePickerMonths[this.Language][this.dtSelected.getMonth()];
  this.extSelectedYear.dom.innerHTML = this.dtSelected.getFullYear();

  extDateDialogSelected.removeClass("holiday");
  if (this.isHoliday(this.dtSelected)) extDateDialogSelected.addClass("holiday");

  extDateDialogSelected.removeClass("valid");
  if (this.isInvalid(this.dtSelected)) extDateDialogSelected.addClass("invalid");
};

DatePicker.prototype.refreshHoursDialog = function () {
  var extActive;
  var sHours = "";
  var dtStart = this.getStartHour();
  var extHoursDialog = this.extLayer.select(".dialog.hours .list").first();

  if (this.Mode == DATE_MODE_RELATIVE && this.Precision != DATE_PRECISION_HOURS && this.Precision != DATE_PRECISION_MINUTES && this.Precision != DATE_PRECISION_SECONDS) {
    extHoursDialog.dom.style.display = "none";
    return;
  }

  extHoursDialog.dom.style.display = "block";

  this.unregisterListBehaviours(extHoursDialog);
  for (var i = 0; i <= DATE_PICKER_WINDOW_SIZE; i++) {
    sInvalid = (this.isInvalid(dtStart)) ? " invalid" : "";
    sHours += "<li class='h" + this.getDateTimeStamp(dtStart, DATE_PRECISION_HOURS) + sInvalid + "'>" + this.getFormattedTime(dtStart, DATE_FORMAT_HOURS) + "</li>";
    dtStart = this.getNextHour(dtStart);
  }
  extHoursDialog.dom.innerHTML = sHours;
  this.registerListBehaviours(extHoursDialog);

  extActive = extHoursDialog.select(".h" + this.getDateTimeStamp(this.dtSelected, DATE_PRECISION_HOURS)).first();
  if (extActive != null) extActive.addClass(DATE_CLASS_ACTIVE);
};

DatePicker.prototype.refreshMinutesDialog = function () {
  var extActive;
  var sMinutes = "";
  var dtStart = this.getStartMinute();
  var extMinutesDialog = this.extLayer.select(".dialog.minutes .list").first();

  if (this.Mode == DATE_MODE_RELATIVE && this.Precision != DATE_PRECISION_MINUTES && this.Precision != DATE_PRECISION_SECONDS) {
    extMinutesDialog.dom.style.display = "none";
    return;
  }

  extMinutesDialog.dom.style.display = "block";

  this.unregisterListBehaviours(extMinutesDialog);
  for (var i = 0; i <= DATE_PICKER_WINDOW_SIZE; i++) {
    sInvalid = (this.isInvalid(dtStart)) ? " invalid" : "";
    sMinutes += "<li class='M" + this.getDateTimeStamp(dtStart, DATE_PRECISION_MINUTES) + sInvalid + "'>" + this.getFormattedTime(dtStart, DATE_FORMAT_MINUTES) + "</li>";
    dtStart = this.getNextMinute(dtStart);
  }
  extMinutesDialog.dom.innerHTML = sMinutes;
  this.registerListBehaviours(extMinutesDialog);

  extActive = extMinutesDialog.select(".M" + this.getDateTimeStamp(this.dtSelected, DATE_PRECISION_MINUTES)).first();
  if (extActive != null) extActive.addClass(DATE_CLASS_ACTIVE);
};

DatePicker.prototype.refreshSecondsDialog = function () {
  var extActive;
  var sSeconds = "";
  var dtStart = this.getStartSecond();
  var extSecondsDialog = this.extLayer.select(".dialog.seconds .list").first();

  if (this.Mode == DATE_MODE_RELATIVE && this.Precision != DATE_PRECISION_SECONDS) {
    extSecondsDialog.dom.style.display = "none";
    return;
  }

  extSecondsDialog.dom.style.display = "block";

  this.unregisterListBehaviours(extSecondsDialog);
  for (var i = 0; i <= DATE_PICKER_WINDOW_SIZE; i++) {
    sInvalid = (this.isInvalid(dtStart)) ? " invalid" : "";
    sSeconds += "<li class='s" + this.getDateTimeStamp(dtStart, DATE_PRECISION_SECONDS) + sInvalid + "'>" + this.getFormattedTime(dtStart, DATE_FORMAT_SECONDS) + "</li>";
    dtStart = this.getNextSecond(dtStart);
  }
  extSecondsDialog.dom.innerHTML = sSeconds;
  this.registerListBehaviours(extSecondsDialog);

  extActive = extSecondsDialog.select(".s" + this.getDateTimeStamp(this.dtSelected, DATE_PRECISION_SECONDS)).first();
  if (extActive != null) extActive.addClass(DATE_CLASS_ACTIVE);
};

DatePicker.prototype.refreshDaysDialog = function () {
  var extActive;
  var sDays = "";
  var dtStart = this.getStartDay();
  var extDaysDialog = this.extLayer.select(".dialog.days .list").first();

  if (this.Mode == DATE_MODE_RELATIVE && this.ActiveDateDialog != DIALOG_DAYS) {
    extDaysDialog.dom.style.display = "none";
    return;
  }

  extDaysDialog.dom.style.display = "block";

  this.unregisterListBehaviours(extDaysDialog);
  for (var i = 0; i <= DATE_PICKER_WINDOW_SIZE; i++) {
    sHolidays = (this.isHoliday(dtStart)) ? " holiday" : "";
    sInvalid = (this.isInvalid(dtStart)) ? " invalid" : "";
    sDays += "<li class='d" + this.getDateTimeStamp(dtStart, DATE_PRECISION_DAYS) + sHolidays + sInvalid + "'>" + this.getFormattedDate(dtStart, DATE_FORMAT_DAYS) + "</li>";
    dtStart = this.getNextDay(dtStart);
  }
  extDaysDialog.dom.innerHTML = sDays;
  this.registerListBehaviours(extDaysDialog);

  extActive = extDaysDialog.select(".d" + this.getDateTimeStamp(this.dtSelected, DATE_PRECISION_DAYS)).first();
  if (extActive != null) extActive.addClass(DATE_CLASS_ACTIVE);
};

DatePicker.prototype.refreshMonthsDialog = function () {
  var extActive;
  var sMonths = "";
  var dtStart = this.getStartMonth();
  var extMonthsList = this.extLayer.select(".dialog.months .list").first();

  if (this.Mode == DATE_MODE_RELATIVE && this.ActiveDateDialog != DIALOG_MONTHS) {
    extMonthsList.dom.style.display = "none";
    return;
  }

  extMonthsList.dom.style.display = "block";

  this.unregisterListBehaviours(extMonthsList);
  for (var i = 0; i <= DATE_PICKER_WINDOW_SIZE; i++) {
    sInvalid = (this.isInvalid(dtStart)) ? " invalid" : "";
    sMonths += "<li class='m" + this.getDateTimeStamp(dtStart, DATE_PRECISION_MONTHS) + sInvalid + "'>" + this.getFormattedDate(dtStart, DATE_FORMAT_MONTHS) + "</li>";
    dtStart = this.getNextMonth(dtStart);
  }
  extMonthsList.dom.innerHTML = sMonths;
  this.registerListBehaviours(extMonthsList);

  extActive = extMonthsList.select(".m" + this.getDateTimeStamp(this.dtSelected, DATE_PRECISION_MONTHS)).first();
  if (extActive != null) extActive.addClass(DATE_CLASS_ACTIVE);
};

DatePicker.prototype.refreshYearsDialog = function () {
  var extActive;
  var sYears = "";
  var dtStart = this.getStartYear();
  var extYearsDialog = this.extLayer.select(".dialog.years .list").first();

  if (this.Mode == DATE_MODE_RELATIVE && this.ActiveDateDialog != DIALOG_YEARS) {
    extYearsDialog.dom.style.display = "none";
    return;
  }

  extYearsDialog.dom.style.display = "block";

  this.unregisterListBehaviours(extYearsDialog);
  for (var i = 0; i <= DATE_PICKER_WINDOW_SIZE; i++) {
    sInvalid = (this.isInvalid(dtStart)) ? " invalid" : "";
    sYears += "<li class='y" + this.getDateTimeStamp(dtStart, DATE_PRECISION_YEARS) + sInvalid + "'>" + this.getFormattedDate(dtStart, DATE_FORMAT_YEARS) + "</li>";
    dtStart = this.getNextYear(dtStart);
  }
  extYearsDialog.dom.innerHTML = sYears;
  this.registerListBehaviours(extYearsDialog);

  extActive = extYearsDialog.select(".y" + this.getDateTimeStamp(this.dtSelected, DATE_PRECISION_YEARS)).first();
  if (extActive != null) extActive.addClass(DATE_CLASS_ACTIVE);
};

DatePicker.prototype.isVisible = function () {
  return this.extLayer.dom.style.display != "none";
};

DatePicker.prototype.show = function () {
  this.extLayer.dom.style.display = "block";
};

DatePicker.prototype.hide = function () {
  this.extLayer.dom.style.display = "none";
};

DatePicker.prototype.refresh = function () {
  this.ActiveDateDialog = DIALOG_DAYS;
  this.ActiveTimeDialog = DIALOG_SECONDS;

  if (this.dtSelected == null) this.dtSelected = new Date();

  if (this.Precision == DATE_PRECISION_MINUTES && this.ActiveTimeDialog == DIALOG_SECONDS) {
    this.ActiveTimeDialog = DIALOG_MINUTES;
  }
  else if (this.Precision == DATE_PRECISION_HOURS && this.ActiveTimeDialog != DIALOG_HOURS) {
    this.ActiveTimeDialog = DIALOG_HOURS;
  }

  if (this.Precision == DATE_PRECISION_MONTHS && this.ActiveDateDialog == DIALOG_DAYS) {
    this.ActiveDateDialog = DIALOG_MONTHS;
  }
  else if (this.Precision == DATE_PRECISION_YEARS && this.ActiveDateDialog != DIALOG_YEARS) {
    this.ActiveDateDialog = DIALOG_YEARS;
  }

  this.refreshSelectedDialog();
  this.refreshHoursDialog();
  this.refreshMinutesDialog();
  this.refreshSecondsDialog();
  this.refreshDaysDialog();
  this.refreshMonthsDialog();
  this.refreshYearsDialog();
};

DatePicker.prototype.getTimeoutMilliseconds = function () {

  if (!this.dtStartAnimation) return 300;

  var dtNow = new Date();
  var iLeft = dtNow.valueOf() - this.dtStartAnimation.valueOf();

  if (iLeft < 2000) return 300;
  if (iLeft < 4000) return 100;

  return 10;
};

DatePicker.prototype.decreaseDate = function () {

  if (this.ActiveDateDialog == DIALOG_DAYS) this.dtSelected = this.getPreviousDay(this.dtSelected);
  else if (this.ActiveDateDialog == DIALOG_MONTHS) this.dtSelected = this.getPreviousMonth(this.dtSelected);
  else if (this.ActiveDateDialog == DIALOG_YEARS) this.dtSelected = this.getPreviousYear(this.dtSelected);

  if (this.onChange) this.onChange(this);
  this.refresh();

  if (!this.dtStartAnimation) return;

  var iMilliseconds = this.getTimeoutMilliseconds();
  this.IdTimeout = window.setTimeout(DatePicker.prototype.decreaseDate.bind(this), iMilliseconds);
};

DatePicker.prototype.increaseDate = function () {

  if (this.ActiveDateDialog == DIALOG_DAYS) this.dtSelected = this.getNextDay(this.dtSelected);
  else if (this.ActiveDateDialog == DIALOG_MONTHS) this.dtSelected = this.getNextMonth(this.dtSelected);
  else if (this.ActiveDateDialog == DIALOG_YEARS) this.dtSelected = this.getNextYear(this.dtSelected);

  if (this.onChange) this.onChange(this);
  this.refresh();

  if (!this.dtStartAnimation) return;

  var iMilliseconds = this.getTimeoutMilliseconds();
  this.IdTimeout = window.setTimeout(DatePicker.prototype.increaseDate.bind(this), iMilliseconds);
};

DatePicker.prototype.decreaseTime = function () {

  if (this.ActiveTimeDialog == DIALOG_HOURS) this.dtSelected = this.getPreviousHour(this.dtSelected);
  else if (this.ActiveTimeDialog == DIALOG_MINUTES) this.dtSelected = this.getPreviousMinute(this.dtSelected);
  else if (this.ActiveTimeDialog == DIALOG_SECONDS) this.dtSelected = this.getPreviousSecond(this.dtSelected);

  if (this.onChange) this.onChange(this);
  this.refresh();

  if (!this.dtStartAnimation) return;

  var iMilliseconds = this.getTimeoutMilliseconds();
  this.IdTimeout = window.setTimeout(DatePicker.prototype.decreaseTime.bind(this), iMilliseconds);
};

DatePicker.prototype.increaseTime = function () {

  if (this.ActiveTimeDialog == DIALOG_HOURS) this.dtSelected = this.getNextHour(this.dtSelected);
  else if (this.ActiveTimeDialog == DIALOG_MINUTES) this.dtSelected = this.getNextMinute(this.dtSelected);
  else if (this.ActiveTimeDialog == DIALOG_SECONDS) this.dtSelected = this.getNextSecond(this.dtSelected);

  if (this.onChange) this.onChange(this);
  this.refresh();

  if (!this.dtStartAnimation) return;

  var iMilliseconds = this.getTimeoutMilliseconds();
  this.IdTimeout = window.setTimeout(DatePicker.prototype.increaseTime.bind(this), iMilliseconds);
};

// ---------------------------------------------------------------------------------
DatePicker.prototype.atDialogListItemClick = function (EventLaunched, DOMItem) {
  var sClassName = DOMItem.className.replace("active", "").replace("holiday", "").replace("invalid", "");
  this.updateDateFromId(this.dtSelected, sClassName);
  this.refresh();
};

DatePicker.prototype.atButtonClick = function (EventLaunched, DOMButton) {
  var extButton = Ext.get(DOMButton);
  var extParent = extButton.up("td");

  window.clearTimeout(this.IdTimeout);

  if (extParent.hasClass("daycell")) this.ActiveDateDialog = DIALOG_DAYS;
  else if (extParent.hasClass("monthcell")) this.ActiveDateDialog = DIALOG_MONTHS;
  else if (extParent.hasClass("yearcell")) this.ActiveDateDialog = DIALOG_YEARS;
  else if (extParent.hasClass("hourcell")) this.ActiveTimeDialog = DIALOG_HOURS;
  else if (extParent.hasClass("minutecell")) this.ActiveTimeDialog = DIALOG_MINUTES;
  else if (extParent.hasClass("secondcell")) this.ActiveTimeDialog = DIALOG_SECONDS;

  if (extButton.hasClass("up")) {
    if (extParent.hasClass("daycell") || extParent.hasClass("monthcell") || extParent.hasClass("yearcell"))
      this.decreaseDate();
    else
      this.decreaseTime();
  }
  else {
    if (extParent.hasClass("daycell") || extParent.hasClass("monthcell") || extParent.hasClass("yearcell"))
      this.increaseDate();
    else
      this.increaseTime();
  }

};

DatePicker.prototype.atSelectedHourClick = function () {

  if (this.onChange) this.onChange(this);

  if (this.extSelectedHourCell.hasClass(DATE_CLASS_ACTIVE)) {
    this.extSelectedHourCell.removeClass(DATE_CLASS_ACTIVE);
    this.ActiveTimeDialog = DIALOG_SECONDS;
  }
  else {
    this.ActiveTimeDialog = DIALOG_HOURS;
    this.extSelectedHourCell.addClass(DATE_CLASS_ACTIVE);
  }

  this.extSelectedMinuteCell.removeClass(DATE_CLASS_ACTIVE);
  this.extSelectedSecondCell.removeClass(DATE_CLASS_ACTIVE);

  this.refresh();
};

DatePicker.prototype.atSelectedMinuteClick = function () {

  if (this.onChange) this.onChange(this);

  if (this.extSelectedMinuteCell.hasClass(DATE_CLASS_ACTIVE)) {
    this.extSelectedMinuteCell.removeClass(DATE_CLASS_ACTIVE);
    this.ActiveTimeDialog = DIALOG_SECONDS;
  }
  else {
    this.ActiveTimeDialog = DIALOG_MINUTES;
    this.extSelectedMinuteCell.addClass(DATE_CLASS_ACTIVE);
  }

  this.extSelectedHourCell.removeClass(DATE_CLASS_ACTIVE);
  this.extSelectedSecondCell.removeClass(DATE_CLASS_ACTIVE);

  this.refresh();
};

DatePicker.prototype.atSelectedSecondClick = function () {

  if (this.onChange) this.onChange(this);

  if (this.extSelectedSecondCell.hasClass(DATE_CLASS_ACTIVE)) this.extSelectedSecondCell.removeClass(DATE_CLASS_ACTIVE);
  else this.extSelectedSecondCell.addClass(DATE_CLASS_ACTIVE);

  this.ActiveTimeDialog = DIALOG_SECONDS;

  this.extSelectedHourCell.removeClass(DATE_CLASS_ACTIVE);
  this.extSelectedMinuteCell.removeClass(DATE_CLASS_ACTIVE);

  this.refresh();
};

DatePicker.prototype.atSelectedDayClick = function () {
  if (this.onChange) this.onChange(this);
};

DatePicker.prototype.atSelectedDayOver = function () {
  if (this.Mode == DATE_MODE_RELATIVE) return;

  this.extSelectedDayCell.removeClass(DATE_CLASS_INACTIVE);
  this.extSelectedMonthCell.removeClass(DATE_CLASS_ACTIVE);
  this.extSelectedMonthCell.removeClass(DATE_CLASS_INACTIVE);
  this.extSelectedYearCell.removeClass(DATE_CLASS_ACTIVE);
  this.extSelectedYearCell.removeClass(DATE_CLASS_INACTIVE);

  if (this.Mode == DATE_MODE_ABSOLUTE) {
    if (this.extSelectedDayCell.hasClass(DATE_CLASS_ACTIVE)) this.extSelectedDayCell.removeClass(DATE_CLASS_ACTIVE);
    else this.extSelectedDayCell.addClass(DATE_CLASS_ACTIVE);

    this.ActiveDateDialog = DIALOG_DAYS;
  }
  else {
    this.ActiveDateDialog = DIALOG_DAYS;
    this.extSelectedDayCell.addClass(DATE_CLASS_ACTIVE);
    this.extSelectedMonthCell.addClass(DATE_CLASS_ACTIVE);
    this.extSelectedYearCell.addClass(DATE_CLASS_ACTIVE);
  }

  this.refresh();
};

DatePicker.prototype.atSelectedMonthClick = function () {
  if (this.onChange) this.onChange(this);
};

DatePicker.prototype.atSelectedMonthOver = function () {
  if (this.Mode == DATE_MODE_RELATIVE) return;

  this.extSelectedDayCell.removeClass(DATE_CLASS_ACTIVE);
  this.extSelectedDayCell.removeClass(DATE_CLASS_INACTIVE);
  this.extSelectedMonthCell.removeClass(DATE_CLASS_INACTIVE);
  this.extSelectedYearCell.removeClass(DATE_CLASS_ACTIVE);
  this.extSelectedYearCell.removeClass(DATE_CLASS_INACTIVE);

  if (this.Mode == DATE_MODE_ABSOLUTE) {
    if (this.extSelectedMonthCell.hasClass(DATE_CLASS_ACTIVE)) {
      this.extSelectedMonthCell.removeClass(DATE_CLASS_ACTIVE);
      this.ActiveDateDialog = DIALOG_DAYS;
    }
    else {
      this.ActiveDateDialog = DIALOG_MONTHS;
      this.extSelectedMonthCell.addClass(DATE_CLASS_ACTIVE);
    }
  }
  else {
    this.ActiveDateDialog = DIALOG_MONTHS;
    this.extSelectedDayCell.addClass(DATE_CLASS_INACTIVE);
    this.extSelectedMonthCell.addClass(DATE_CLASS_ACTIVE);
    this.extSelectedYearCell.addClass(DATE_CLASS_ACTIVE);
  }

  this.refresh();
};

DatePicker.prototype.atSelectedYearClick = function () {
  if (this.onChange) this.onChange(this);
};

DatePicker.prototype.atSelectedYearOver = function () {
  if (this.Mode == DATE_MODE_RELATIVE) return;

  this.extSelectedDayCell.removeClass(DATE_CLASS_ACTIVE);
  this.extSelectedDayCell.removeClass(DATE_CLASS_INACTIVE);
  this.extSelectedMonthCell.removeClass(DATE_CLASS_ACTIVE);
  this.extSelectedMonthCell.removeClass(DATE_CLASS_INACTIVE);
  this.extSelectedYearCell.removeClass(DATE_CLASS_INACTIVE);

  if (this.Mode == DATE_MODE_ABSOLUTE) {
    if (this.extSelectedYearCell.hasClass(DATE_CLASS_ACTIVE)) {
      this.extSelectedYearCell.removeClass(DATE_CLASS_ACTIVE);
      this.ActiveDateDialog = DIALOG_DAYS;
    }
    else {
      this.ActiveDateDialog = DIALOG_YEARS;
      this.extSelectedYearCell.addClass(DATE_CLASS_ACTIVE);
    }
  }
  else {
    this.ActiveDateDialog = DIALOG_YEARS;
    this.extSelectedDayCell.addClass(DATE_CLASS_INACTIVE);
    this.extSelectedMonthCell.addClass(DATE_CLASS_INACTIVE);
    this.extSelectedYearCell.addClass(DATE_CLASS_ACTIVE);
  }

  this.refresh();
};

DatePicker.prototype.atMonthsDialogClick = function (Event) {
  if (!Event.xy || Event.xy[0] >= 85) return;

  this.ActiveDateDialog = DIALOG_DAYS;
  this.refresh();
};

DatePicker.prototype.atYearsDialogClick = function (Event) {
  var iMaxThreshold = 230;

  if (this.Precision == DATE_PRECISION_MONTHS) iMaxThreshold = 210;

  if (!Event.xy || Event.xy[0] >= iMaxThreshold) return;

  if (Event.xy[0] < 85) this.ActiveDateDialog = DIALOG_DAYS;
  else this.ActiveDateDialog = DIALOG_MONTHS;

  this.refresh();
};

DatePicker.prototype.atSetModeChange = function (Event) {
  this.setMode(this.extSetMode.dom.checked ? DATE_MODE_RELATIVE : DATE_MODE_ABSOLUTE);
  this.refresh();
};

DatePicker.prototype.atSetPrecisionChange = function (Event) {
  this.setPrecision(this.extSetPrecision.dom.value);
  this.refresh();
};

EDITOR_DIALOG_DATE_WINDOW_SIZE = 14;
INIT = "ini";
BEFORE = "bef";
AFTER = "aft";

CGEditorDialogDate = function (extLayer) {
  this.base = CGEditorDialog;
  this.base(extLayer);
  this.init();
  this.timeout = null;
};

CGEditorDialogDate.prototype = new CGEditorDialog;

CGEditorDialogDate.prototype.init = function () {

  this.dtSelected = new Date();

  this.datePicker = new DatePicker();
  this.datePicker.onChange = CGEditorDialogDate.prototype.atDatePickerChange.bind(this);
  this.datePicker.init(this.extLayer.select(".datepicker").first(), Context.Config.Language);
  this.datePicker.setDate(this.dtSelected);
};

CGEditorDialogDate.prototype.isTimeHour = function () {
  var oRegExp = new RegExp(/H/g);
  return (oRegExp.exec(this.Configuration.Format) != null);
};

CGEditorDialogDate.prototype.isTimeMinute = function () {
  var oRegExp = new RegExp(/i/g);
  return (oRegExp.exec(this.Configuration.Format) != null);
};

CGEditorDialogDate.prototype.isTimeSecond = function () {
  var oRegExp = new RegExp(/s/g);
  return (oRegExp.exec(this.Configuration.Format) != null);
};

CGEditorDialogDate.prototype.isDateYear = function () {
  var oRegExp = new RegExp(/L|Y|y/g);
  return (oRegExp.exec(this.Configuration.Format) != null);
};

CGEditorDialogDate.prototype.isDateMonth = function () {
  var oRegExp = new RegExp(/W|F|m|M|n|t/g);
  return (oRegExp.exec(this.Configuration.Format) != null);
};

CGEditorDialogDate.prototype.isDateDay = function () {
  var oRegExp = new RegExp(/d|D|j|l|S|w|z/g);
  return (oRegExp.exec(this.Configuration.Format) != null);
};

CGEditorDialogDate.prototype.refresh = function () {
  var Precision = DATE_PRECISION_HOURS;
  var Mode = DATE_MODE_RELATIVE;

  if (this.Configuration.Edition == "random")
    Mode = DATE_MODE_ABSOLUTE;

  if (this.isTimeSecond()) Precision = DATE_PRECISION_SECONDS;
  else if (this.isTimeMinute()) Precision = DATE_PRECISION_MINUTES;
  else if (this.isTimeHour()) Precision = DATE_PRECISION_HOURS;
  else if (this.isDateDay()) Precision = DATE_PRECISION_DAYS;
  else if (this.isDateMonth()) Precision = DATE_PRECISION_MONTHS;
  else if (this.isDateYear()) Precision = DATE_PRECISION_YEARS;

  this.datePicker.setDate(this.dtSelected);
  this.datePicker.setPrecision(Precision);
  this.datePicker.setMode(Mode);
  this.datePicker.refresh();
};

CGEditorDialogDate.prototype.getDateAsString = function () {
  return this.dtSelected.format(Date.getPattern(this.Configuration.Format));
};

CGEditorDialogDate.prototype.updateSelectedDate = function (iDay, iMonth, iYear, sTime) {
  this.dtSelected = this.datePicker.getDate();
  if (this.onSelect) this.onSelect({code: null, value: this.getDateAsString()});
};

CGEditorDialogDate.prototype.getData = function () {
  return this.getDateAsString();
};

CGEditorDialogDate.prototype.setData = function (Data) {
  if (Data.value == "") return;

  var dtDate = Date.parseDate(Data.value, Date.getPattern(this.Configuration.Format));
  if (dtDate != null) this.dtSelected = dtDate;
};

// #############################################################################################################
CGEditorDialogDate.prototype.atDatePickerChange = function () {
  if (this.timeout != null) window.clearTimeout(this.timeout);
  this.timeout = window.setTimeout(CGEditorDialogDate.prototype.updateSelectedDate.bind(this), 300);
};

CGEditorDate = function () {
  this.base = CGEditor;
  this.base();
};

CGEditorDate.prototype = new CGEditor;

//private
CGEditorDate.prototype.addBehaviours = function () {
  this.aDialogs[DATE].onSelect = this.atSelect.bind(this);
};

//public
CGEditorDate.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  var extDialogDate = this.extEditor.select(CSS_EDITOR_DIALOG_DATE).first();

  this.aDialogs[DATE] = new CGEditorDialogDate(extDialogDate);
  this.setDialogMain(DATE);

  CGEditor.prototype.init.call(this, DOMEditor);

  this.addBehaviours();
};

CGEditorDate.prototype.setConfiguration = function (Config) {
  this.Configuration = Config;
  if (Config.Field) {
    Config.Field.onKeyPress = CGEditorDate.prototype.atFieldKeyPress.bind(this);
    this.Configuration.Field = null;
  }
  for (var iPos in Config.Dialogs) {
    if (isFunction(Config.Dialogs[iPos])) continue;
    var CurrentConfig = Config.Dialogs[iPos];
    if (this.aDialogs[CurrentConfig.sName]) this.aDialogs[CurrentConfig.sName].setConfiguration(CurrentConfig);
  }
};

// #############################################################################################################
CGEditorDate.prototype.atFieldKeyPress = function (sInputValue) {
  this.aDialogs[DATE].setData({code: null, value: sInputValue});
  this.aDialogs[DATE].refresh();
};

CGEditorDialogFileUpload = function (extLayer) {
  this.base = CGEditorDialog;
  this.base(extLayer);
  this.extForm = null;
  this.Limit = "-1";
  this.init();
};

CGEditorDialogFileUpload.prototype = new CGEditorDialog;

CGEditorDialogFileUpload.prototype.showUploading = function () {
  this.extUploading.dom.innerHTML = WidgetWaitingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'cls': CLASS_EDITOR_WAITING_MESSAGE, 'message': Lang.Editor.Dialogs.FileUpload.Uploading});
  this.extUploading.dom.style.display = "block";
};

CGEditorDialogFileUpload.prototype.checkFileSize = function () {
    var limit = this.Limit;
    if (limit == null || limit == "-1" || limit === "") return true;
    var files = this.extInputFile.dom.files;
    var size = 0;
    for (var i=0; i<files.length; i++) size += files[i].size;
    return size <= (limit * 1024 * 1024);
};

CGEditorDialogFileUpload.prototype.showFileSizeExceeded = function () {
    this.extFileSizeExceeded.dom.innerHTML = WidgetFileSizeExceededTemplate.evaluate({'size': this.Limit});
    this.extFileSizeExceeded.dom.style.display = "block";
};

CGEditorDialogFileUpload.prototype.hideFileSizeExceeded = function () {
    this.extFileSizeExceeded.dom.style.display = "none";
};

CGEditorDialogFileUpload.prototype.showUploadingError = function () {
  this.extUploading.dom.innerHTML = WidgetWaitingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'cls': CLASS_EDITOR_WAITING_ERROR, 'message': Lang.Editor.Dialogs.FileUpload.UploadingFailed});
  setTimeout(this.hideUploadingError.bind(this), 1000, this);
};

CGEditorDialogFileUpload.prototype.hideUploadingError = function () {
  this.extUploading.dom.style.display = "none";
};

//public
CGEditorDialogFileUpload.prototype.init = function () {
  var extDialog;

  if (!this.extLayer) return;

  extDialog = (this.extLayer.down(CSS_EDITOR_DIALOG_ELEMENT_DIALOG));

  this.extLabel = extDialog.down("div " + CSS_EDITOR_DIALOG_ELEMENT_LABEL);
  this.extForm = extDialog.down("div " + CSS_EDITOR_DIALOG_ELEMENT_FORM);
  this.extInputFile = this.extForm.down(CSS_EDITOR_DIALOG_ELEMENT_INPUT_FILE);
  this.extUploading = extDialog.down(CSS_EDITOR_DIALOG_ELEMENT_UPLOADING);
  this.extFileSizeExceeded = extDialog.down(CSS_EDITOR_DIALOG_ELEMENT_FILE_SIZE_EXCEEDED);

  this.extLabel.on("change", this.atLabelChange, this);
  this.extInputFile.on("change", this.atUploadFile, this);
  this.extInputFile.dom.multiple = false;
};

CGEditorDialogFileUpload.prototype.setConfiguration = function (Config) {
  this.Limit = Config.Limit;
  this.extForm.dom.action = Config.Action;
  this.extLabel.dom.value = Config.Label;
  this.extInputFile.dom.multiple = Config.MultipleSelection;
};

CGEditorDialogFileUpload.prototype.isMultiple = function(files) {
  return files.length > 1;
};

CGEditorDialogFileUpload.prototype.notifySelect = function(files, label) {
  var event = this.isMultiple(files) ? this.onSelectMultiple : this.onSelect;
  var values = this.createValues(files, label);

  if (event == null)
    return;

  event(this.isMultiple(files) ? values : values[0]);
};

CGEditorDialogFileUpload.prototype.createValues = function(files, label) {
  var result = new Array();

  for (var i=0; i<files.length; i++) {
    var fieldId = HtmlUtil.decode(files[i]);
    result.push({code: fieldId, value: i == 0 ? label : fieldId });
  }

  return result;
};

// #############################################################################################################

CGEditorDialogFileUpload.prototype.atUploadFile = function () {
  var fileInfo = null;

  if(!this.checkFileSize()) {
      this.showFileSizeExceeded();
      return;
  }

  this.hideFileSizeExceeded();
  this.showUploading();

  Ext.Ajax.request({
    url: this.extForm.dom.action,
    method: "POST",
    success: function (response, options) {
      fileInfo = eval('(' + response.responseText + ')');
      if (fileInfo.status == 0) {
        this.extUploading.dom.style.display = 'none';
        this.extInputFile.dom.value = "";
        this.extLabel.dom.value = "";
        this.notifySelect(fileInfo.files, this.extLabel.getValue());
      }
      else {
        this.showUploadingError();
      }
    },
    failure: function (response, options) {
      this.showUploadingError();
    },
    isUpload: true,
    form: this.extForm.dom,
    scope: this
  });

};

CGEditorDialogFileUpload.prototype.atLabelChange = function () {
  if (this.onLabelChange) this.onLabelChange(this.extLabel.dom.value);
};

CGEditorFile = function () {
  this.base = CGEditor;
  this.base();
};

CGEditorFile.prototype = new CGEditor;

//private
CGEditorFile.prototype.addBehaviours = function () {
  this.aDialogs[FILE_UPLOAD].onSelect = this.atSelect.bind(this);
  this.aDialogs[FILE_UPLOAD].onSelectMultiple = this.atSelectMultiple.bind(this);
  this.aDialogs[FILE_UPLOAD].onLabelChange = this.atLabelChange.bind(this);
};

//public
CGEditorFile.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  var extDialogFileUpload = this.extEditor.select(CSS_EDITOR_DIALOG_FILE_UPLOAD).first();

  this.aDialogs[FILE_UPLOAD] = new CGEditorDialogFileUpload(extDialogFileUpload);
  this.setDialogMain(FILE_UPLOAD);

  CGEditor.prototype.init.call(this, DOMEditor);

  this.extDownload = this.extEditor.select(CSS_EDITOR_DOWNLOAD).first();
  if (this.extDownload) Event.observe(this.extDownload.dom, "click", CGEditorFile.prototype.atDownload.bind(this));

  this.addBehaviours();
};

// #############################################################################################################
CGEditorFile.prototype.atDownload = function (oEvent) {
  this.extDownload.dom.target = "_blank";
  if (this.onDownload) this.onDownload(this.extDownload.dom);
  if (this.extDownload.dom.stop) {
    Event.stop(oEvent);
    return false;
  }
  return true;
};

CGEditorFile.prototype.atLabelChange = function (label) {
  if (this.onLabelChange) this.onLabelChange(label);
};

CGEditorDialogSource = function (extLayer) {
  this.base = CGEditorDialog;
  this.base(extLayer);
  this.selectedOption = null;
  this.init();
};

CGEditorDialogSource.prototype = new CGEditorDialog;

//private
CGEditorDialogSource.prototype.init = function () {
  this.SelectedSourceId = null;
  this.Sources = new Array();
  this.SourcesMap = new Array();

  this.extSelect = this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_SELECT).first();

  Event.observe(this.extSelect.dom, "change", CGEditorDialogSource.prototype.atChangeSource.bind(this));
};

CGEditorDialogSource.prototype.setConfiguration = function (Config) {
  if ((Config.Sources != null) && (Config.Sources == this.Sources) &&
      (Config.SelectedSourceId != null) && (Config.SelectedSourceId == this.SelectedSourceId)) {
    return;
  }
  this.SelectedSourceId = Config.SelectedSourceId;
  this.Sources = Config.Sources;
  this.refreshSourcesMap();
};

CGEditorDialogSource.prototype.refreshSourcesMap = function () {
  for (var i = 0; i < this.Sources.length; i++) {
    var Source = this.Sources[i];
    this.SourcesMap[Source.id] = Source;
  }
};

//public
CGEditorDialogSource.prototype.hide = function () {
  this.hideLoading();
  this.extLayer.dom.style.display = "none";
};

CGEditorDialogSource.prototype.getData = function () {
  return this.SelectedSourceId;
};

CGEditorDialogSource.prototype.setData = function (SourceId) {
  this.SelectedSourceId = SourceId;
};

CGEditorDialogSource.prototype.refresh = function () {

  if (this.Sources.length <= 1) this.hide();
  else this.show();

  this.extSelect.dom.innerHTML = "";
  for (var i = 0; i < this.Sources.length; i++) {
    var Source = this.Sources[i];
    var selected = false;
    if (this.SelectedSourceId == null && i == 0) selected = true;
    else if (Source.id == this.SelectedSourceId) selected = true;
    addSelectOption(this.extSelect.dom, Source.id, Source.label, selected);
  }
  ;
};

// #############################################################################################################

CGEditorDialogSource.prototype.atChangeSource = function () {
  var id = this.extSelect.dom.options[this.extSelect.dom.selectedIndex].value;
  var Source = this.SourcesMap[id];
  this.SelectedSourceId = Source.id;
  if (this.onSelect) this.onSelect(Source.id);
};

CGEditorSelect = function () {
  this.base = CGEditor;
  this.base();
  this.Configuration = null;
  this.bShowHistory = true;
  this.dispatchingOnSelect = false;
};

CGEditorSelect.prototype = new CGEditor;

//private
CGEditorSelect.prototype.addBehaviours = function () {
  this.aDialogs[HISTORY].onSelect = this.atSelect.bind(this);
  this.aDialogs[SOURCE].onSelect = this.atSelectSource.bind(this);
  this.aDialogs[SOURCE_STORE].onSelect = this.atSelect.bind(this);
};

//public
CGEditorSelect.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  var extDialogSource = this.extEditor.select(CSS_EDITOR_DIALOG_SOURCE).first();
  var extDialogSourceStore = this.extEditor.select(CSS_EDITOR_DIALOG_SOURCE_STORE).first();
  var extDialogHistory = this.extEditor.select(CSS_EDITOR_DIALOG_HISTORY).first();

  this.aDialogs[SOURCE] = new CGEditorDialogSource(extDialogSource);
  this.aDialogs[SOURCE_STORE] = new CGEditorDialogGrid(extDialogSourceStore);
  this.aDialogs[HISTORY] = new CGEditorDialogGrid(extDialogHistory);
  this.setDialogMain(SOURCE_STORE);

  this.extToggleHistory = this.extEditor.select(CSS_EDITOR_TOGGLE_HISTORY).first();
  if (this.extToggleHistory) {
    this.extToggleHistory.dom.innerHTML = Lang.Editor.ShowHistory;
    Event.observe(this.extToggleHistory.dom, "click", CGEditorSelect.prototype.atToggleHistoryClick.bind(this));
  }

  this.extSelectOther = this.extEditor.select(CSS_EDITOR_SELECT_OTHER).first();
  if (this.extSelectOther) Event.observe(this.extSelectOther.dom, "click", CGEditorSelect.prototype.showOtherDialog.bind(this));

  this.extFilter = this.extEditor.select(CSS_EDITOR_FILTER).first();
  this.extFilter.on("keyup", this.atFilterKeyUp, this);
  this.extFilter.on("focus", this.atFilterFocus, this);
  this.extFilter.on("blur", this.atFilterBlur, this);
  new Insertion.After(this.extFilter.dom, "<span class='empty'>" + Lang.Editor.FilterEmpty + "</span>");
  this.extFilterEmpty = this.extEditor.select('.filter .empty').first();
  Event.observe(this.extFilterEmpty.dom, "click", CGEditorSelect.prototype.atFilterEmptyClick.bind(this));

  CGEditor.prototype.init.call(this, DOMEditor);

  this.addBehaviours();
};

CGEditorSelect.prototype.showHistory = function () {
  this.aDialogs[HISTORY].show();
  this.aDialogs[SOURCE_STORE].hide();
  this.setDialogMain(HISTORY);
  this.extToggleHistory.dom.innerHTML = Lang.Editor.HideHistory;
};

CGEditorSelect.prototype.hideHistory = function () {

  if (this.getDialogMain() != this.aDialogs[HISTORY])
    return;

  this.aDialogs[HISTORY].hide();
  this.aDialogs[SOURCE_STORE].show();
  this.setDialogMain(SOURCE_STORE);
  this.extToggleHistory.dom.innerHTML = Lang.Editor.ShowHistory;
};

CGEditorSelect.prototype.clearFilter = function () {
  var sFilter = this.extFilter.dom.value;
  sFilter = (sFilter.substring(0, 1) == "+") ? "+" : "";
  this.extFilter.dom.value = sFilter;
};

CGEditorSelect.prototype.filter = function () {
  var sFilter = this.extFilter.dom.value;

  if (sFilter.substring(0, 1) == "+") {
    sFilter = sFilter.substring(1, sFilter.length);
    this.showHistory();
  }
  else {
    this.hideHistory();
  }

  var DialogMain = this.getDialogMain();
  DialogMain.setData(sFilter);

  if (DialogMain.setStoreSourceId)
    DialogMain.setStoreSourceId(this.getSourceId());

  DialogMain.refresh();
};

CGEditorSelect.prototype.show = function () {
  this.extEditor.dom.style.display = "block";
  this.aDialogs[HISTORY].hide();
  this.aDialogs[SOURCE_STORE].show();
  if (this.onShow) this.onShow(this);
};

CGEditorSelect.prototype.refresh = function () {
  if (this.dispatchingOnSelect) return;

  if (this.Configuration.allowOthers) this.extSelectOther.dom.style.display = "inline";
  else this.extSelectOther.dom.style.display = "none";

  if (this.extToggleHistory) this.extToggleHistory.dom.style.display = this.bShowHistory ? "inline" : "none";

  this.extFilter.dom.value = "";
  this.extFilterEmpty.dom.style.display = "block";

  this.aDialogs[SOURCE].refresh();
  this.aDialogs[HISTORY].hide();
  this.aDialogs[SOURCE_STORE].show();

  this.filter();
};

CGEditorSelect.prototype.setConfiguration = function (Config) {
  this.Configuration = Config;
  if (Config.Field) {
    Config.Field.onKeyPress = CGEditorSelect.prototype.atFieldKeyPress.bind(this);
    this.Configuration.Field = null;
  }
  for (var iPos in Config.Dialogs) {
    if (isFunction(Config.Dialogs[iPos])) continue;
    var CurrentConfig = Config.Dialogs[iPos];
    if (this.aDialogs[CurrentConfig.sName]) {
      if (CurrentConfig.sName == HISTORY) this.bShowHISTORY = (CurrentConfig.Store != null);
      this.aDialogs[CurrentConfig.sName].setConfiguration(CurrentConfig);
    }
  }
};

CGEditorSelect.prototype.getSourceId = function () {
  var Dialog = this.getDialog(SOURCE);
  return Dialog.getData();
};

CGEditorSelect.prototype.getData = function () {
  var dialog = this.getDialog(SOURCE_STORE);
  if (!dialog.isVisible()) dialog = this.getDialog(HISTORY);
  return dialog.getData();
};

CGEditorSelect.prototype.setDialogStoreSourceId = function (dialogName, SourceId) {
  this.getDialog(dialogName).setStoreSourceId(SourceId);
};

// #############################################################################################################
CGEditorSelect.prototype.atSelectSource = function (SourceId) {
  this.setDialogStoreSourceId(SOURCE_STORE, SourceId);
  this.clearFilter();
  this.filter();
};

CGEditorSelect.prototype.atSelect = function (Data) {

  Data = this.normalizeData(Data);
  var DialogSource = this.getDialog(SOURCE);
  //this.clearFilter();
  //this.filter();

  this.dispatchingOnSelect = true;
  if (this.onSelect) this.onSelect(Data, DialogSource != null ? DialogSource.getData() : null);
  this.dispatchingOnSelect = false;
};

CGEditorSelect.prototype.atFieldKeyPress = function (sValue) {
  window.clearTimeout(this.idTimeoutFilter);
  this.extFilter.dom.value = sValue;
  this.extFilterEmpty.dom.style.display = (this.extFilter.dom.value.length <= 0) ? "block" : "none";
  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 200);
};

CGEditorSelect.prototype.atToggleHistoryClick = function (oEvent) {
  var sFilter = this.extFilter.dom.value;

  Event.stop(oEvent);

  if (sFilter.substring(0, 1) == "+") {
    this.extFilter.dom.value = sFilter.substring(1, sFilter.length);
  }
  else this.extFilter.dom.value = "+" + sFilter;

  this.extFilterEmpty.dom.style.display = (this.extFilter.dom.value.length <= 0) ? "block" : "none";

  this.filter();

  return false;
};

CGEditorSelect.prototype.atFilterKeyUp = function (oEvent) {
  var codeKey = oEvent.keyCode;

  window.clearTimeout(this.idTimeoutFilter);

  if (codeKey == oEvent.UP) {
    this.moveUp(this.extFilter);
    return;
  }
  else if (codeKey == oEvent.DOWN) {
    this.moveDown(this.extFilter);
    return;
  }
  else if ((codeKey == oEvent.ENTER) || (codeKey == oEvent.LEFT) || (codeKey == oEvent.RIGHT) || (codeKey == oEvent.SHIFT)) return;

  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 200);
};

CGEditorSelect.prototype.atFilterFocus = function () {
  this.extFilterEmpty.dom.style.display = "none";
  this.extFilter.dom.select();
};

CGEditorSelect.prototype.atFilterBlur = function () {
  var sFilter = this.extFilter.dom.value;
  this.extFilterEmpty.dom.style.display = (sFilter.length <= 0) ? "block" : "none";
};

CGEditorSelect.prototype.atFilterEmptyClick = function () {
  this.extFilter.focus();
};

CGEditorDialogLocations = function (extLayer) {
  this.base = CGEditorDialog;
  this.base(extLayer);
  this.init();
  this.map = null;
};

CGEditorDialogLocations.prototype = new CGEditorDialog;

CGEditorDialogLocations.prototype.init = function () {
};

CGEditorDialogLocations.prototype.show = function() {
  CGEditorDialog.prototype.show.call(this);
  this.createMapLayer();
};

CGEditorDialogLocations.prototype.doRefresh = function() {
  this.idTimeoutRefresh = null;
  this.map.filter(this.Data);
};

CGEditorDialogLocations.prototype.refresh = function() {

  if (this.idTimeoutRefresh != null)
    window.clearTimeout(this.idTimeoutRefresh);

  this.idTimeoutRefresh = window.setTimeout(this.doRefresh.bind(this), 300);
};

CGEditorDialogLocations.prototype.createMapLayer = function () {
  var options = {
    editable : false,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    place: "",
    infoTemplate: "<div class='infowindow'><div class='label'>\{label\}</div></div>"
  };

  if (this.map == null) {
    var extMapLayer = this.extLayer.select(".map").first();

    this.map = new CGViewMapLayer();
    this.map.setCenter(Context.Config.DefaultLocation.Latitude, Context.Config.DefaultLocation.Longitude);
    this.map.setDOMLayer(extMapLayer.dom);
    this.map.init(options);
    this.map.onLocationClick = CGEditorDialogLocations.prototype.atSelectLocation.bind(this);
  }

  this.map.setTarget({ infoUrl: this.Configuration.Store.sourceCountUrl, url: this.Configuration.Store.sourceUrl });
  this.map.render();
}

// #############################################################################################################
CGEditorDialogLocations.prototype.atSelectLocation = function (location) {
  if (this.onSelect) this.onSelect(location);
};

CGEditorLink = function (DOMEditor) {
  this.base = CGEditorSelect;
  this.base(DOMEditor);
  this.allowLocations = false;
};

CGEditorLink.prototype = new CGEditorSelect;
// #############################################################################################################
CGEditorLink.prototype.addBehaviours = function () {
  CGEditorSelect.prototype.addBehaviours.call(this);
  this.aDialogs[LOCATION].onSelect = this.atSelect.bind(this);
};

CGEditorLink.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);
  var extDialogLocation = this.extEditor.select(CSS_EDITOR_DIALOG_LOCATION).first();
  this.aDialogs[LOCATION] = new CGEditorDialogLocations(extDialogLocation);

  CGEditorSelect.prototype.init.call(this, DOMEditor);

  this.extTableView = this.extEditor.select(CSS_EDITOR_VIEW_TABLE).first();
  if (this.extTableView) Event.observe(this.extTableView.dom, "click", CGEditorLink.prototype.atViewTable.bind(this));

  this.extLocationsView = this.extEditor.select(CSS_EDITOR_VIEW_LOCATIONS).first();
  if (this.extLocationsView) Event.observe(this.extLocationsView.dom, "click", CGEditorLink.prototype.atViewLocations.bind(this));
};

CGEditorLink.prototype.refresh = function () {
  if (this.dispatchingOnSelect) return;

  CGEditorSelect.prototype.refresh.call(this);
  this.aDialogs[LOCATION].hide();
  this.refreshToolbar();
};

CGEditorLink.prototype.refreshToolbar = function() {
  if (this.allowLocations) {
    this.extTableView.show();
    this.extLocationsView.show();

    this.extTableView.addClass(CLASS_ACTIVE);
    this.extLocationsView.removeClass(CLASS_ACTIVE);
  }
  else {
    this.extTableView.hide();
    this.extLocationsView.hide();
  }
};

CGEditorLink.prototype.showHistory = function () {
  CGEditorSelect.prototype.showHistory.call(this);
  this.aDialogs[LOCATION].hide();
};

CGEditorLink.prototype.hideHistory = function () {
  CGEditorSelect.prototype.hideHistory.call(this);

  if (this.getDialogMain() != this.aDialogs[HISTORY])
    return;

  this.aDialogs[LOCATION].hide();
};

CGEditorLink.prototype.show = function () {
  CGEditorSelect.prototype.show.call(this);
  this.aDialogs[LOCATION].hide();
};

CGEditorLink.prototype.showLocations = function () {
  var data = this.getDialogMain().getData();

  this.aDialogs[HISTORY].hide();
  this.aDialogs[SOURCE_STORE].hide();
  this.aDialogs[LOCATION].show();
  this.setDialogMain(LOCATION);

  if (data != null)
    this.filter(data);

  this.extLocationsView.addClass(CLASS_ACTIVE);
  this.extTableView.removeClass(CLASS_ACTIVE);
};

CGEditorLink.prototype.showTable = function () {
  var data = this.getDialogMain().getData();

  this.aDialogs[HISTORY].hide();
  this.aDialogs[SOURCE_STORE].show();
  this.aDialogs[LOCATION].hide();
  this.setDialogMain(SOURCE_STORE);

  if (data != null)
    this.filter(data);

  this.extLocationsView.removeClass(CLASS_ACTIVE);
  this.extTableView.addClass(CLASS_ACTIVE);
};

CGEditorLink.prototype.setConfiguration = function (Config) {

  if (Config.Field)
    this.allowLocations = Config.Field.getDataLinkLocations() != null;

  CGEditorSelect.prototype.setConfiguration.call(this, Config);
};

// ------------------------------------------------------------------------------------

CGEditorLink.prototype.atViewLocations = function () {
  this.showLocations();
};

CGEditorLink.prototype.atViewTable = function () {
  this.showTable();
};

CGEditorNode = function (DOMEditor) {
  this.base = CGEditor;
  this.base(DOMEditor);
};

CGEditorNode.prototype = new CGEditor;
// #############################################################################################################

function Position(x, y) {
  this.X = x;
  this.Y = y;

  this.Add = function (val) {
    var newPos = new Position(this.X, this.Y);
    if (val != null) {
      if (!isNaN(val.X))
        newPos.X += val.X;
      if (!isNaN(val.Y))
        newPos.Y += val.Y;
    }
    return newPos;
  };

  this.Subtract = function (val) {
    var newPos = new Position(this.X, this.Y);
    if (val != null) {
      if (!isNaN(val.X))
        newPos.X -= val.X;
      if (!isNaN(val.Y))
        newPos.Y -= val.Y;
    }
    return newPos;
  };

  this.Min = function (val) {
    var newPos = new Position(this.X, this.Y);
    if (val == null)
      return newPos;

    if (!isNaN(val.X) && this.X > val.X)
      newPos.X = val.X;
    if (!isNaN(val.Y) && this.Y > val.Y)
      newPos.Y = val.Y;

    return newPos;
  };

  this.Max = function (val) {
    var newPos = new Position(this.X, this.Y);
    if (val == null)
      return newPos;

    if (!isNaN(val.X) && this.X < val.X)
      newPos.X = val.X;
    if (!isNaN(val.Y) && this.Y < val.Y)
      newPos.Y = val.Y;

    return newPos;
  };

  this.Bound = function (lower, upper) {
    var newPos = this.Max(lower);
    return newPos.Min(upper);
  };

  this.Check = function () {
    var newPos = new Position(this.X, this.Y);
    if (isNaN(newPos.X))
      newPos.X = 0;
    if (isNaN(newPos.Y))
      newPos.Y = 0;
    return newPos;
  };

  this.Apply = function (element) {
    if (typeof(element) == "string")
      element = document.getElementById(element);
    if (element == null)
      return;
    if (!isNaN(this.X))
      element.style.left = this.X + 'px';
    if (!isNaN(this.Y))
      element.style.top = this.Y + 'px';
  };
};

function hookEvent(element, eventName, callback) {
  if (typeof(element) == "string")
    element = document.getElementById(element);
  if (element == null)
    return;
  if (element.addEventListener) {
    element.addEventListener(eventName, callback, false);
  }
  else if (element.attachEvent)
    element.attachEvent("on" + eventName, callback);
};

function unhookEvent(element, eventName, callback) {
  if (typeof(element) == "string")
    element = document.getElementById(element);
  if (element == null)
    return;
  if (element.removeEventListener)
    element.removeEventListener(eventName, callback, false);
  else if (element.detachEvent)
    element.detachEvent("on" + eventName, callback);
};

function cancelEvent(e) {
  e = e ? e : window.event;
  if (e.stopPropagation)
    e.stopPropagation();
  if (e.preventDefault)
    e.preventDefault();
  e.cancelBubble = true;
  e.cancel = true;
  e.returnValue = false;
  if (Event) Event.stop(e);
  return false;
};

function getEventTarget(e) {
  e = e ? e : window.event;
  return e.target ? e.target : e.srcElement;
};

function absoluteCursorPostion(eventObj) {
  eventObj = eventObj ? eventObj : window.event;

  if (isNaN(window.scrollX))
    return new Position(eventObj.clientX + document.documentElement.scrollLeft + document.body.scrollLeft,
        eventObj.clientY + document.documentElement.scrollTop + document.body.scrollTop);
  else
    return new Position(eventObj.clientX + window.scrollX, eventObj.clientY + window.scrollY);
};

function dragObject(element, attachElement, lowerBound, upperBound, startCallback, moveCallback, endCallback, attachLater) {
  if (typeof(element) == "string")
    element = document.getElementById(element);
  if (element == null)
    return;

  if (lowerBound != null && upperBound != null) {
    var temp = lowerBound.Min(upperBound);
    upperBound = lowerBound.Max(upperBound);
    lowerBound = temp;
  }

  var cursorStartPos = null;
  var elementStartPos = null;
  var dragging = false;
  var listening = false;
  var disposed = false;

  function dragStart(eventObj) {
    if (dragging || !listening || disposed) return;
    dragging = true;

    if (startCallback != null)
      startCallback(eventObj, element);

    cursorStartPos = absoluteCursorPostion(eventObj);

    elementStartPos = new Position(parseInt(element.style.left), parseInt(element.style.top));

    elementStartPos = elementStartPos.Check();

    hookEvent(document, "mousemove", dragGo);
    hookEvent(document, "mouseup", dragStopHook);

    return cancelEvent(eventObj);
  }

  function dragGo(eventObj) {
    if (!dragging || disposed) return;

    var newPos = absoluteCursorPostion(eventObj);
    newPos = newPos.Add(elementStartPos).Subtract(cursorStartPos);
    newPos = newPos.Bound(lowerBound, upperBound);
    newPos.Apply(element);
    if (moveCallback != null)
      moveCallback(newPos, element, eventObj);

    return cancelEvent(eventObj);
  }

  function dragStopHook(eventObj) {
    dragStop();
    return cancelEvent(eventObj);
  }

  function dragStop() {
    if (!dragging || disposed) return;
    unhookEvent(document, "mousemove", dragGo);
    unhookEvent(document, "mouseup", dragStopHook);
    cursorStartPos = null;
    elementStartPos = null;
    if (endCallback != null)
      endCallback(element);
    dragging = false;
  }

  this.Dispose = function () {
    if (disposed) return;
    this.StopListening(true);
    element = null;
    attachElement = null;
    lowerBound = null;
    upperBound = null;
    startCallback = null;
    moveCallback = null;
    endCallback = null;
    disposed = true;
  };

  this.StartListening = function () {
    if (listening || disposed) return;
    listening = true;
    hookEvent(attachElement, "mousedown", dragStart);
  };

  this.StopListening = function (stopCurrentDragging) {
    if (!listening || disposed) return;
    unhookEvent(attachElement, "mousedown", dragStart);
    listening = false;

    if (stopCurrentDragging && dragging)
      dragStop();
  };

  this.IsDragging = function () {
    return dragging;
  };
  this.IsListening = function () {
    return listening;
  };
  this.IsDisposed = function () {
    return disposed;
  };

  if (typeof(attachElement) == "string")
    attachElement = document.getElementById(attachElement);
  if (attachElement == null)
    attachElement = element;

  if (!attachLater)
    this.StartListening();
};

CGEditorDialogList = function (extLayer) {
  this.base = CGEditorDialog;
  this.base(extLayer);
  this.aSelectedItems = new Array();
  this.extEmpty = null;
  this.extList = null;
  this.init();
};

CGEditorDialogList.prototype = new CGEditorDialog;

//private
CGEditorDialogList.prototype.init = function () {
  this.Items = new Array();
  this.extList = this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_ITEMS).first();

  new Insertion.After(this.extList.dom, "<div class='loading'></div>");
  this.extLoading = this.extLayer.select(".loading").first();
  new Insertion.After(this.extList.dom, "<div class='empty'>" + Lang.Editor.Empty + "</div>");
  this.extEmpty = this.extLayer.select(".empty").first();

  var extBehaviourList = this.extLayer.select(".behaviour");
  extBehaviourList.each(function (extBehaviour) {
    Event.observe(extBehaviour.dom, "click", CGEditorDialogList.prototype.atBehaviourClick.bind(this, extBehaviour.dom));
  }, this);

  this.extDeleteItems = this.extLayer.select(".deleteitems").first();
  Event.observe(this.extDeleteItems.dom, "click", CGEditorDialogList.prototype.atItemsDeleteClick.bind(this));

  this.DOMDragDropHolder = $(new Insertion.Bottom(this.extList.dom, "<div style='display:none;border:1px solid #ccc;background:rgb(225,225,225);'></div>").element.descendants().last());
  this.DOMDragDropHolder.DOMElement = null;
};

CGEditorDialogList.prototype.registerElements = function () {
  var extElements = this.extList.select("li");
  extElements.each(function (extElement) {
    this.registerElement(extElement);
  }, this);
};

CGEditorDialogList.prototype.registerElement = function (extElement) {
  var DOMDeleteOption, DOMMoveOption;

  if ((extInput = extElement.select(HTML_INPUT).first()) == null) return;
  if ((extOptions = extElement.select(CSS_EDITOR_DIALOG_ELEMENT_ITEM_OPTIONS).first()) == null) return;

  Event.observe(extInput.dom, 'click', this.atItemClick.bindAsEventListener(this, extInput.dom));

  DOMDeleteOption = extOptions.down(CSS_EDITOR_DIALOG_ELEMENT_ITEM_DELETE).dom;
  Event.observe(DOMDeleteOption, 'click', this.atItemDeleteClick.bindAsEventListener(this, extInput.dom));

  DOMMoveOption = extOptions.down(CSS_EDITOR_DIALOG_ELEMENT_ITEM_MOVE).dom;
  extElement.dom.style.height = extElement.getHeight() + "px";
  new dragObject(extElement.dom, DOMMoveOption, new Position(0, -30), new Position(0, this.extList.getBottom() - 30), CGEditorDialogList.prototype.atItemDragStart.bind(this, DOMMoveOption), CGEditorDialogList.prototype.atItemDragMove.bind(this), CGEditorDialogList.prototype.atItemDragEnd.bind(this, DOMMoveOption), false);
};

//public
CGEditorDialogList.prototype.hide = function () {
  this.hideLoading();
  this.extLayer.dom.style.display = "none";
};

CGEditorDialogList.prototype.setConfiguration = function (Config) {
  if ((Config.Items != null) && (Config.Items == this.Items)) {
    return;
  }
  this.aSelectedItems = new Array();
  this.Items = Config.Items;
};

CGEditorDialogList.prototype.moveUp = function (Sender) {
};

CGEditorDialogList.prototype.moveDown = function (Sender) {
};

CGEditorDialogList.prototype.getData = function () {
};

CGEditorDialogList.prototype.setData = function (Data) {
  this.Items = Data;
};

CGEditorDialogList.prototype.getSelected = function () {
  var aResult = new Array();
  var extInputList = this.extList.select(HTML_INPUT);

  extInputList.each(function (extInput) {
    if (extInput.checked) aResult.push(extInput.name);
  }, this);

  return aResult;
};

CGEditorDialogList.prototype.deleteItems = function () {
  var aItems = new Array();
  for (var Id in this.aSelectedItems) {
    if (isFunction(this.aSelectedItems[Id])) continue;
    aItems.push(this.aSelectedItems[Id]);
  }
  if (this.onDelete) this.onDelete(aItems);
};

CGEditorDialogList.prototype.deleteItem = function (Id) {
  if (this.onDelete) this.onDelete([Id]);
};

CGEditorDialogList.prototype.getOrder = function () {
  var aResult = new Array();
  var extInputList = this.extList.select(HTML_INPUT);

  extInputList.each(function (extInput) {
    aResult.push(extInput.dom.name);
  }, this);

  return aResult;
};

CGEditorDialogList.prototype.reorder = function (Id) {
  if (this.onReorder) this.onReorder(this.getOrder());
};

CGEditorDialogList.prototype.refreshItems = function () {
  var sContent = "";

  this.extList.dom.innerHTML = "";
  for (var iPos = 0; iPos < this.Items.length; iPos++) {
    sContent += EditorDialogListItemTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'id': this.Items[iPos].id, 'title': this.Items[iPos].title});
  }
  this.extList.dom.innerHTML = sContent;

  this.registerElements();

  this.aSelectedItems = new Array();
  this.selectNone();
  this.extDeleteItems.addClass("disabled");

  if (this.Items.length > 0) {
    this.extEmpty.dom.style.display = "none";
  }
  else {
    this.extEmpty.dom.style.display = "block";
  }
};

CGEditorDialogList.prototype.refreshToolbar = function () {
  if (this.aSelectedItems.size() > 0) this.extDeleteItems.removeClass("disabled");
  else this.extDeleteItems.addClass("disabled");
};

CGEditorDialogList.prototype.refresh = function () {
  this.refreshItems();
  this.refreshToolbar();
};

CGEditorDialogList.prototype.select = function (Id) {
  this.aSelectedItems[Id] = Id;
  this.refreshToolbar();
};

CGEditorDialogList.prototype.unSelect = function (Id) {
  delete this.aSelectedItems[Id];
  this.refreshToolbar();
};

CGEditorDialogList.prototype.selectAll = function () {
  var extInputList = this.extList.select(HTML_INPUT);

  this.aSelectedItems = new Array();
  extInputList.each(function (extInput) {
    this.aSelectedItems[extInput.dom.name] = extInput.dom.name;
  }, this);

  selectAll(extInputList);
  this.refreshToolbar();
};

CGEditorDialogList.prototype.selectNone = function () {
  var extInputList = this.extList.select(HTML_INPUT);

  this.aSelectedItems = new Array();
  selectNone(extInputList);

  this.refreshToolbar();
};

CGEditorDialogList.prototype.selectInvert = function () {
  var extInputList = this.extList.select(HTML_INPUT);

  selectInvert(extInputList);
  extInputList = this.extList.select(HTML_INPUT);

  this.aSelectedItems = new Array();
  extInputList.each(function (extInput) {
    if (extInput.dom.checked) this.aSelectedItems[extInput.dom.name] = extInput.dom.name;
  }, this);

  this.refreshToolbar();
};

// #############################################################################################################

CGEditorDialogList.prototype.atSelect = function (oEvent) {
};

CGEditorDialogList.prototype.atBehaviourClick = function (DOMBehaviour, oEvent) {
  var CommandInfo = new CGCommandInfo(DOMBehaviour.href);
  var sOperation = CommandInfo.getOperation();

  Event.stop(oEvent);

  if (sOperation == "selectall") this.selectAll();
  else if (sOperation == "selectnone") this.selectNone();
  else if (sOperation == "selectinvert") this.selectInvert();
  else if (sOperation == "additem") if (this.onAdd) this.onAdd();

  return false;
};

CGEditorDialogList.prototype.atItemsDeleteClick = function (oEvent) {
  Event.stop(oEvent);

  if (this.aSelectedItems.size() == 0) return false;
  else this.deleteItems();

  return false;
};

CGEditorDialogList.prototype.atItemClick = function (oEvent, DOMInput) {
  if (DOMInput.checked) this.select(DOMInput.name);
  else this.unSelect(DOMInput.name);
};

CGEditorDialogList.prototype.atItemDeleteClick = function (oEvent, DOMInput) {
  this.deleteItem(DOMInput.name);
};

CGEditorDialogList.prototype.atItemDragStart = function (DOMMoveOption, oEvent, DOMElement) {
  var iHeight = Ext.get(DOMElement).getHeight();
  this.extList.addClass("draglist");
  Ext.get(DOMMoveOption).addClass("grabbing");
  DOMElement.style.top = DOMElement.offsetTop + 'px';
  DOMElement.style.left = DOMElement.offsetLeft + 'px';
  DOMElement.className = "drag";
  this.DOMDragDropHolder.style.display = "block";
  this.DOMDragDropHolder.style.height = iHeight + "px";
  this.extList.dom.insertBefore(this.DOMDragDropHolder, DOMElement);
  this.DOMDragDropHolder.DOMElement = DOMElement;
};

CGEditorDialogList.prototype.atItemDragMove = function (oPosition, DOMElement, oEvent) {
  var yPos = oPosition.Y + (oEvent.layerY ? oEvent.layerY : oEvent.offsetY);
  var temp;
  var bestItem = "end";

  for (var i = 0; i < this.extList.dom.childNodes.length; i++) {
    if (this.extList.dom.childNodes[i].className == "element") {
      temp = parseInt(Ext.get(this.extList.dom.childNodes[i]).getHeight());
      if (temp / 2 >= yPos) {
        bestItem = this.extList.dom.childNodes[i];
        break;
      }
      yPos -= temp;
    }
  }

  if (bestItem == this.DOMDragDropHolder || bestItem == this.DOMDragDropHolder.DOMElement) return;

  this.DOMDragDropHolder.DOMElement = bestItem;
  if (bestItem != "end") this.extList.dom.insertBefore(this.DOMDragDropHolder, this.extList.dom.childNodes[i]);
  else this.extList.dom.appendChild(this.DOMDragDropHolder);
};

CGEditorDialogList.prototype.atItemDragEnd = function (DOMMoveOption, DOMElement) {

  Ext.get(DOMMoveOption).removeClass("grabbing");

  this.DOMDragDropHolder.style.display = "none";

  if (this.DOMDragDropHolder.DOMElement != null) {
    this.DOMDragDropHolder.DOMElement = null;
    this.extList.dom.replaceChild(DOMElement, this.DOMDragDropHolder);
  }

  DOMElement.className = 'element';
  DOMElement.style.top = '0px';
  DOMElement.style.left = '0px';
  this.extList.removeClass("draglist");

  this.reorder();
};

CGEditorDialogList.prototype.atItemListKeyPress = function (oEvent) {
  var codeKey = oEvent.keyCode;
  var Sender = this.Sender;

  if ((Sender == null) && (this.extFilter)) Sender = this.extFilter.dom;
  if (Sender == null) return true;

  if (codeKey == oEvent.ENTER) {
    this.atSelect();
    Sender.focus();
    this.Sender = null;
  }
  else if (codeKey == oEvent.ESCAPE) {
    Sender.focus();
    this.Sender = null;
  }
  Event.stop(oEvent);
  return false;
};

CGEditorList = function () {
  this.base = CGEditor;
  this.base();
};

CGEditorList.prototype = new CGEditor;

//private
CGEditorList.prototype.addBehaviours = function () {
  this.aDialogs[LIST].onSelect = this.atSelect.bind(this);
};

//public
CGEditorList.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  var DOMGrid;
  var extDialogList = this.extEditor.select(CSS_EDITOR_DIALOG_LIST).first();

  this.aDialogs[LIST] = new CGEditorDialogList(extDialogList);
  this.setDialogMain(LIST);

  CGEditor.prototype.init.call(this, DOMEditor);

  this.addBehaviours();
};

// #############################################################################################################

CGEditorNumber = function () {
  this.base = CGEditor;
  this.base();
  this.extFormat = null;
  this.extIncrements = null;
  this.extRange = null;
  this.extUnit = null;
};

CGEditorNumber.prototype = new CGEditor;

//private
CGEditorNumber.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  this.extFormat = this.extEditor.select(CSS_EDITOR_NUMBER_FORMAT).first();
  this.extIncrements = this.extEditor.select(CSS_EDITOR_NUMBER_INCREMENTS).first();
  this.extRange = this.extEditor.select(CSS_EDITOR_NUMBER_RANGE).first();
  this.extEquivalences = this.extEditor.select(CSS_EDITOR_NUMBER_EQUIVALENCES).first();

  CGEditor.prototype.init.call(this, DOMEditor);

  this.extIncrement = this.extEditor.select(CSS_EDITOR_INCREMENT).first();
  if (this.extIncrement) Event.observe(this.extIncrement.dom, "click", CGEditorNumber.prototype.atIncrement.bind(this));

  this.extDecrement = this.extEditor.select(CSS_EDITOR_DECREMENT).first();
  if (this.extDecrement) Event.observe(this.extDecrement.dom, "click", CGEditorNumber.prototype.atDecrement.bind(this));
};

CGEditorNumber.prototype.refresh = function () {

  if (this.Configuration.Format.length > 1) {
    this.extFormat.dom.style.display = "block";
    if (this.Configuration.Format[1] != "0") this.extFormat.dom.innerHTML = Lang.Editor.Dialogs.Accepts + this.Configuration.Format[1] + Lang.Editor.Dialogs.Decimals;
    else if (this.Configuration.Format[1] == INFINITE) this.extFormat.dom.innerHTML = Lang.Editor.Dialogs.MultipleDecimals;
    else this.extFormat.dom.style.display = "none";
  }
  else {
    this.extFormat.dom.innerHTML = EMPTY;
  }

  this.extIncrements.dom.innerHTML = (this.Configuration.Increments != null) ? Lang.Editor.Dialogs.Number.Increments.replace('#count#', this.Configuration.Increments) : EMPTY;

  if (this.Configuration.Range.length > 1) {
    var sMessage = Lang.Editor.Dialogs.Number.Range;
    sMessage = sMessage.replace('#min#', this.Configuration.Range[0]);
    sMessage = sMessage.replace('#max#', this.Configuration.Range[1]);
    this.extRange.dom.innerHTML = sMessage;
  }
  else this.extRange.dom.innerHTML = EMPTY;
};

CGEditorNumber.prototype.calculateEquivalences = function (iValue) {
  var sContent = "";

  if ((this.Configuration.Metrics == null) || (this.Configuration.Metrics.length == 0)) {
    this.extEquivalences.dom.innerHTML = sContent;
    return;
  }

  sContent += "<ul>";
  for (var i = 0; i < this.Configuration.Metrics.length; i++) {
    var Metric = this.Configuration.Metrics[i];
    var Equivalence = Metric.Equivalence;
    if (Metric.IsDefault) Equivalence = 1;
    sContent += "<li>" + (iValue * Equivalence) + "&nbsp;" + Metric.Label + "</li>";
  }
  sContent += "</ul>";

  this.extEquivalences.dom.innerHTML = Lang.Editor.Dialogs.Number.Equivalences.replace("#equivalences#", sContent);
};

CGEditorNumber.prototype.setConfiguration = function (Config) {
  this.Configuration = Config;
  if (Config.Field) {
    Config.Field.onKeyPress = CGEditorNumber.prototype.atFieldKeyPress.bind(this);
    this.calculateEquivalences(Config.Field.getNumberFromFormattedValue(Config.Field.getValue()));
    this.Configuration.Field = null;
  }
  for (var iPos in Config.Dialogs) {
    if (isFunction(Config.Dialogs[iPos])) continue;
    var CurrentConfig = Config.Dialogs[iPos];
    if (this.aDialogs[CurrentConfig.sName]) {
      if (CurrentConfig.sName == HISTORY) this.bShowHISTORY = (CurrentConfig.Store != null);
      this.aDialogs[CurrentConfig.sName].setConfiguration(CurrentConfig);
    }
  }
};

// #############################################################################################################
CGEditorNumber.prototype.atIncrement = function (oEvent) {
  Event.stop(oEvent);
  if (this.onIncrement) this.onIncrement();
  return false;
};

CGEditorNumber.prototype.atDecrement = function (oEvent) {
  Event.stop(oEvent);
  if (this.onDecrement) this.onDecrement();
  return false;
};

CGEditorNumber.prototype.atFieldKeyPress = function (iValue) {
  this.calculateEquivalences(iValue);
};



var ImageCropLayer = null;

var cropToolBorderWidth = 1;	// Width of dotted border around crop rectangle
var smallSquareWidth = 7;	// Size of small squares used to resize crop rectangle

var crop_minimumPercent = 10;	// Minimum percent - resize
var crop_maximumPercent = 200;	// Maximum percent -resize

var crop_minimumWidthHeight = 15;	// Minimum width and height of crop area

var updateFormValuesAsYouDrag = true;	// This variable indicates if form values should be updated as we drag. This process could make the script work a little bit slow. That's why this option is set as a variable.
if (!document.all) updateFormValuesAsYouDrag = false;	// Enable this feature only in IE

var crop_script_alwaysPreserveAspectRatio = false;
var crop_script_fixedRatio = false;	 // Fixed aspect ratio(example of value: 1.5). Width of cropping area relative to height(1.5 means that the width is 150% of the height)
// Set this variable to false if you don't want a fixed aspect ratio

var crop_script_browserIsOpera = navigator.userAgent.indexOf('Opera') >= 0 ? true : false;
var cropDiv_left = false;
var cropDiv_top = false;
var cropDiv_right = false;
var cropDiv_bottom = false;
var cropDiv_dotted = false;

var crop_currentResizeType = false;

var cropEvent_posX;
var cropEvent_posY;

var cropEvent_eventX;
var cropEvent_eventY;
var crop_resizeCounter = -1;
var crop_moveCounter = -1;

var crop_imageDiv = false;
var imageDiv_currentWidth = false;
var imageDiv_currentHeight = false;
var imageDiv_currentLeft = false;
var imageDiv_currentTop = false;

var smallSquare_tl;
var smallSquare_tc;
var smallSquare_tr;
var smallSquare_lc;
var smallSquare_rc;
var smallSquare_bl;
var smallSquare_bc;
var smallSquare_br;

var offsetSmallSquares = Math.floor(smallSquareWidth / 2);

var cropScriptAjaxObjects = new Array();
var preserveAspectRatio = false;
var cropWidthRatio = false;	// width of cropping area relative to height

function crop_getElementsByClassName(DOMElement, TagName, sClassName) {
  if (DOMElement.getElementsByClassName) return DOMElement.getElementsByClassName(sClassName);
  else {
    aResult = new Array();
    aDOMElements = DOMElement.getElementsByTagName(TagName);
    for (var iPos = 0; iPos < aDOMElements.length; iPos++) {
      DOMElement = aDOMElements[iPos];
      if (DOMElement.className.indexOf(sClassName) != -1) {
        aResult.push(DOMElement);
      }
    }
    return aResult;
  }
}

function crop_createDivElements() {
  crop_imageDiv = crop_getElementsByClassName(ImageCropLayer, "div", "imageContainer")[0];

  cropDiv_left = document.createElement('DIV');
  cropDiv_left.className = 'crop_transparentDiv';
  cropDiv_left.style.visibility = 'visible';
  cropDiv_left.style.left = '0px';
  cropDiv_left.style.top = '0px';
  cropDiv_left.style.height = crop_imageHeight + 'px';
  cropDiv_left.style.width = '0px';
  cropDiv_left.innerHTML = '<span></span>';
  crop_imageDiv.appendChild(cropDiv_left);

  cropDiv_top = document.createElement('DIV');
  cropDiv_top.className = 'crop_transparentDiv';
  cropDiv_top.style.visibility = 'visible';
  cropDiv_top.style.left = '0px';
  cropDiv_top.style.top = '0px';
  cropDiv_top.style.height = '0px';
  cropDiv_top.style.width = crop_imageWidth + 'px';
  cropDiv_top.innerHTML = '<span></span>';
  crop_imageDiv.appendChild(cropDiv_top);

  cropDiv_right = document.createElement('DIV');
  cropDiv_right.className = 'crop_transparentDiv';
  cropDiv_right.style.visibility = 'visible';
  cropDiv_right.style.left = (crop_imageWidth) + 'px';
  cropDiv_right.style.top = '0px';
  cropDiv_right.style.height = crop_imageHeight + 'px';
  cropDiv_right.style.width = '0px';
  cropDiv_right.innerHTML = '<span></span>';
  crop_imageDiv.appendChild(cropDiv_right);

  cropDiv_bottom = document.createElement('DIV');
  cropDiv_bottom.className = 'crop_transparentDiv';
  cropDiv_bottom.style.visibility = 'visible';
  cropDiv_bottom.style.left = '0px';
  cropDiv_bottom.style.top = (crop_imageHeight) + 'px';
  cropDiv_bottom.style.height = '0px';
  cropDiv_bottom.style.width = crop_imageWidth + 'px';
  cropDiv_bottom.innerHTML = '<span></span>';
  crop_imageDiv.appendChild(cropDiv_bottom);

  cropDiv_dotted = document.createElement('DIV');
  cropDiv_dotted.className = 'crop_dottedDiv';
  cropDiv_dotted.style.left = '0px';
  cropDiv_dotted.style.top = '0px';
  cropDiv_dotted.style.width = (crop_imageWidth - (cropToolBorderWidth * 2)) + 'px';
  cropDiv_dotted.style.height = (crop_imageHeight - (cropToolBorderWidth * 2)) + 'px';
  cropDiv_dotted.innerHTML = '<div></div>';
  cropDiv_dotted.style.cursor = 'move';

  if (crop_script_browserIsOpera) {
    var div = cropDiv_dotted.getElementsByTagName('DIV')[0];
    div.style.backgroundColor = 'transparent';
    cropDiv_bottom.style.backgroundColor = 'transparent';
    cropDiv_right.style.backgroundColor = 'transparent';
    cropDiv_top.style.backgroundColor = 'transparent';
    cropDiv_left.style.backgroundColor = 'transparent';

  }

  cropDiv_dotted.onmousedown = cropScript_initMove;

  smallSquare_tl = document.createElement('IMG');
  smallSquare_tl.src = Context.Config.ImagesPath + '/icons/small_square.gif';
  smallSquare_tl.style.position = 'absolute';
  smallSquare_tl.style.left = (-offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tl.style.top = (-offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tl.style.cursor = 'nw-resize';
  smallSquare_tl.id = 'nw-resize';
  smallSquare_tl.onmousedown = cropScript_initResize;
  cropDiv_dotted.appendChild(smallSquare_tl);

  smallSquare_tr = document.createElement('IMG');
  smallSquare_tr.src = Context.Config.ImagesPath + '/icons/small_square.gif';
  smallSquare_tr.style.position = 'absolute';
  smallSquare_tr.style.left = (crop_imageWidth - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tr.style.top = (-offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tr.style.cursor = 'ne-resize';
  smallSquare_tr.id = 'ne-resize';
  smallSquare_tr.onmousedown = cropScript_initResize;
  cropDiv_dotted.appendChild(smallSquare_tr);

  smallSquare_bl = document.createElement('IMG');
  smallSquare_bl.src = Context.Config.ImagesPath + '/icons/small_square.gif';
  smallSquare_bl.style.position = 'absolute';
  smallSquare_bl.style.left = (-offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_bl.style.top = (crop_imageHeight - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_bl.style.cursor = 'sw-resize';
  smallSquare_bl.id = 'sw-resize';
  smallSquare_bl.onmousedown = cropScript_initResize;
  cropDiv_dotted.appendChild(smallSquare_bl);

  smallSquare_br = document.createElement('IMG');
  smallSquare_br.src = Context.Config.ImagesPath + '/icons/small_square.gif';
  smallSquare_br.style.position = 'absolute';
  smallSquare_br.style.left = (crop_imageWidth - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_br.style.top = (crop_imageHeight - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_br.style.cursor = 'se-resize';
  smallSquare_br.id = 'se-resize';
  smallSquare_br.onmousedown = cropScript_initResize;
  cropDiv_dotted.appendChild(smallSquare_br);

  smallSquare_tc = document.createElement('IMG');
  smallSquare_tc.src = Context.Config.ImagesPath + '/icons/small_square.gif';
  smallSquare_tc.style.position = 'absolute';
  smallSquare_tc.style.left = (Math.floor(crop_imageWidth / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tc.style.top = (-offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tc.style.cursor = 's-resize';
  smallSquare_tc.id = 'n-resize';
  smallSquare_tc.onmousedown = cropScript_initResize;
  cropDiv_dotted.appendChild(smallSquare_tc);

  smallSquare_bc = document.createElement('IMG');
  smallSquare_bc.src = Context.Config.ImagesPath + '/icons/small_square.gif';
  smallSquare_bc.style.position = 'absolute';
  smallSquare_bc.style.left = (Math.floor(crop_imageWidth / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_bc.style.top = (crop_imageHeight - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_bc.style.cursor = 's-resize';
  smallSquare_bc.id = 's-resize';
  smallSquare_bc.onmousedown = cropScript_initResize;
  cropDiv_dotted.appendChild(smallSquare_bc);

  smallSquare_lc = document.createElement('IMG');
  smallSquare_lc.src = Context.Config.ImagesPath + '/icons/small_square.gif';
  smallSquare_lc.style.position = 'absolute';
  smallSquare_lc.style.left = (-offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_lc.style.top = (Math.floor(crop_imageHeight / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_lc.style.cursor = 'e-resize';
  smallSquare_lc.id = 'w-resize';
  smallSquare_lc.onmousedown = cropScript_initResize;
  cropDiv_dotted.appendChild(smallSquare_lc);

  smallSquare_rc = document.createElement('IMG');
  smallSquare_rc.src = Context.Config.ImagesPath + '/icons/small_square.gif';
  smallSquare_rc.style.position = 'absolute';
  smallSquare_rc.style.left = (crop_imageWidth - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_rc.style.top = (Math.floor(crop_imageHeight / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_rc.style.cursor = 'e-resize';
  smallSquare_rc.id = 'e-resize';
  smallSquare_rc.onmousedown = cropScript_initResize;
  cropDiv_dotted.appendChild(smallSquare_rc);

  crop_imageDiv.appendChild(cropDiv_dotted);
}

function cropScript_initMove(e) {
  if (document.all)e = event;

  if (e.target) source = e.target;
  else if (e.srcElement) source = e.srcElement;
  if (source.nodeType == 3) // defeat Safari bug
    source = source.parentNode;

  if (source.id && source.id.indexOf('resize') >= 0)return;

  imageDiv_currentLeft = cropDiv_dotted.style.left.replace('px', '') / 1;
  imageDiv_currentTop = cropDiv_dotted.style.top.replace('px', '') / 1;
  imageDiv_currentWidth = cropDiv_dotted.style.width.replace('px', '') / 1;
  imageDiv_currentHeight = cropDiv_dotted.style.height.replace('px', '') / 1;
  cropEvent_eventX = e.clientX;
  cropEvent_eventY = e.clientY;

  crop_moveCounter = 0;
  cropScript_timerMove();
  return false;
}

function cropScript_timerMove() {
  if (crop_moveCounter >= 0 && crop_moveCounter < 10) {
    crop_moveCounter++;
    setTimeout('cropScript_timerMove()', 1);
    return;
  }

}

function cropScript_initResize(e) {
  if (document.all)e = event;

  cropDiv_dotted.style.cursor = 'default';
  crop_currentResizeType = this.id;

  cropEvent_eventX = e.clientX;
  cropEvent_eventY = e.clientY;
  crop_resizeCounter = 0;
  imageDiv_currentWidth = cropDiv_dotted.style.width.replace('px', '') / 1;
  imageDiv_currentHeight = cropDiv_dotted.style.height.replace('px', '') / 1;
  imageDiv_currentLeft = cropDiv_dotted.style.left.replace('px', '') / 1;
  imageDiv_currentTop = cropDiv_dotted.style.top.replace('px', '') / 1;


  cropWidthRatio = cropDiv_dotted.offsetWidth / cropDiv_dotted.offsetHeight;
  if (crop_script_fixedRatio)cropWidthRatio = crop_script_fixedRatio;

  if (document.all) {
    var div = cropDiv_dotted.getElementsByTagName('DIV')[0];
    div.style.display = 'none';
  }

  cropScript_timerResize();
  return false;

}

function cropScript_timerResize() {
  if (crop_resizeCounter >= 0 && crop_resizeCounter < 10) {
    crop_resizeCounter = crop_resizeCounter + 1;
    setTimeout('cropScript_timerResize()', 1);
    return;
  }


}

function crop_cancelEvent(e) {
  if (document.all)e = event;
  if (e.target) source = e.target;
  else if (e.srcElement) source = e.srcElement;
  if (source.nodeType == 3) // defeat Safari bug
    source = source.parentNode;

  if (source.tagName && source.tagName.toLowerCase() == 'input')return true;
  return false;
}

var mouseMoveEventInProgress = false;
function getAdjustedCoordinates(coordinates, currentCoordinates, aspectRatio, currentResize) {
  currentResize = currentResize.replace('-resize', '');


  var minWidth = aspectRatio ? crop_minimumWidthHeight * aspectRatio : crop_minimumWidthHeight;
  var minHeight = aspectRatio ? crop_minimumWidthHeight / aspectRatio : crop_minimumWidthHeight;

  if (coordinates.left + coordinates.width + 2 > crop_imageWidth) {
    coordinates.width = crop_imageWidth - coordinates.left - 2;
  }
  if (coordinates.top + coordinates.height + 2 > crop_imageHeight) {
    coordinates.height = crop_imageHeight - coordinates.top - 2;
  }

  if (coordinates.height < minHeight) {
    coordinates.height = currentCoordinates.height;
    coordinates.top = currentCoordinates.top;
  }

  if (coordinates.width < minWidth) {
    coordinates.width = currentCoordinates.width;
    coordinates.left = currentCoordinates.left;
  }


  if (aspectRatio) {


    var currentRatio = coordinates.width / coordinates.height;

    switch (currentResize) {
      case 'n':
        // Height is being resized - set new left coordinate
        var newWidth = Math.round(coordinates.height * aspectRatio);
        coordinates.left += (coordinates.width - newWidth);
        coordinates.width = newWidth;
        break;
      case 'w':
      case 'nw':
      case 'ne':
        // Width is being resized - Set new top coordinate
        var newHeight = Math.round(coordinates.width / aspectRatio);
        coordinates.top += (coordinates.height - newHeight);
        coordinates.height = newHeight;
        break;
      case 'e':
      case 'se':
        coordinates.height = Math.round(coordinates.width / aspectRatio);
        break;
      case 's':
        coordinates.width = Math.round(coordinates.height * aspectRatio);
        break;
      default:
    }

    if (coordinates.left < 0) {

      coordinates.width += coordinates.left;
      coordinates.height = coordinates.width / aspectRatio;
      coordinates.left = 0;
    }
    if (coordinates.top < 0) {
      var origWidth = coordinates.width;
      coordinates.height += coordinates.top;
      coordinates.width = coordinates.height * aspectRatio;
      coordinates.top = 0;
      if (currentResize == 'nw') {
        coordinates.left += (origWidth - coordinates.width);
      }
    }
    if (coordinates.width < minWidth) {
      coordinates.width = minWidth;
      coordinates.height = coordinates.width / aspectRatio;
    }
    if (coordinates.height < minHeight) {
      coordinates.height = minHeight;
      coordinates.width = coordinates.height * aspectRatio;
    }
    if (coordinates.left + coordinates.width + 2 > crop_imageWidth) {
      coordinates.width = crop_imageWidth - coordinates.left - 2;
      coordinates.height = Math.round(coordinates.width / aspectRatio);
    }
    if (coordinates.top + coordinates.height + 2 > crop_imageHeight) {
      coordinates.height = crop_imageHeight - coordinates.top - 2;
      coordinates.width = Math.round(coordinates.height * aspectRatio);
    }


  }
  if (coordinates.height < minHeight) {
    coordinates.height = currentCoordinates.height;
    coordinates.top = currentCoordinates.top;
  }

  if (coordinates.width < minWidth) {
    coordinates.width = currentCoordinates.width;
    coordinates.left = currentCoordinates.left;
  }
  return coordinates;

}

function cropScript_mouseMove(e) {
  if (crop_moveCounter < 10 && crop_resizeCounter < 10)return;
  if (mouseMoveEventInProgress)return;
  if (document.all)mouseMoveEventInProgress = true;
  if (document.all)e = event;

  if (crop_resizeCounter == 10) {
    var cropStyleObj = cropDiv_dotted.style;
    if (e.ctrlKey || crop_script_alwaysPreserveAspectRatio)preserveAspectRatio = true; else preserveAspectRatio = false;

    var currentCoordinates = {
      left: cropStyleObj.left.replace('px', '') / 1,
      top: cropStyleObj.top.replace('px', '') / 1,
      width: cropDiv_dotted.clientWidth,
      height: cropDiv_dotted.clientHeight
    };
    // crop_imageHeight = max y
    // crop_imageWidth = max x
    var newCoordinates = {};
    newCoordinates.left = currentCoordinates.left;
    newCoordinates.top = currentCoordinates.top;
    newCoordinates.width = currentCoordinates.width;
    newCoordinates.height = currentCoordinates.height;

    if (crop_currentResizeType == 'e-resize' || crop_currentResizeType == 'ne-resize' || crop_currentResizeType == 'se-resize') {  
      newCoordinates.width = Math.max(crop_minimumWidthHeight, (imageDiv_currentWidth + e.clientX - cropEvent_eventX));
    }
    if (crop_currentResizeType == 's-resize' || crop_currentResizeType == 'sw-resize' || crop_currentResizeType == 'se-resize') {
      newCoordinates.height = Math.max(crop_minimumWidthHeight, (imageDiv_currentHeight + e.clientY - cropEvent_eventY));
    }

    if (crop_currentResizeType == 'n-resize' || crop_currentResizeType == 'nw-resize' || crop_currentResizeType == 'ne-resize') {
      var newTop = Math.max(0, (imageDiv_currentTop + e.clientY - cropEvent_eventY));
      newCoordinates.height += (currentCoordinates.top - newTop);
      newCoordinates.top = newTop;
    }

    if (crop_currentResizeType == 'w-resize' || crop_currentResizeType == 'sw-resize' || crop_currentResizeType == 'nw-resize') {
      var newLeft = Math.max(0, (imageDiv_currentLeft + e.clientX - cropEvent_eventX));
      newCoordinates.width += (currentCoordinates.left - newLeft);
      newCoordinates.left = newLeft;
    }


    if (newCoordinates && (newCoordinates.left || newCoordinates.top || newCoordinates.width || newCoordinates.height)) {
      newCoordinates = getAdjustedCoordinates(newCoordinates, currentCoordinates, preserveAspectRatio ? cropWidthRatio : false, crop_currentResizeType);

    }
    if (newCoordinates) {
      cropStyleObj.left = newCoordinates.left + 'px';
      cropStyleObj.top = newCoordinates.top + 'px';
      cropStyleObj.width = newCoordinates.width + 'px';
      cropStyleObj.height = newCoordinates.height + 'px';

    }


    if (!crop_script_fixedRatio && !e.ctrlKey)cropWidthRatio = cropDiv_dotted.offsetWidth / cropDiv_dotted.offsetHeight;


  }

  if (crop_moveCounter == 10) {
    var tmpLeft = imageDiv_currentLeft + e.clientX - cropEvent_eventX;
    if (tmpLeft < 0)tmpLeft = 0;
    if ((tmpLeft + imageDiv_currentWidth + (cropToolBorderWidth * 2)) > crop_imageWidth)tmpLeft = crop_imageWidth - imageDiv_currentWidth - (cropToolBorderWidth * 2);
    cropDiv_dotted.style.left = tmpLeft + 'px';
    var tmpTop = imageDiv_currentTop + e.clientY - cropEvent_eventY;
    if (tmpTop < 0)tmpTop = 0;
    if ((tmpTop + imageDiv_currentHeight + (cropToolBorderWidth * 2)) > crop_imageHeight)tmpTop = crop_imageHeight - imageDiv_currentHeight - (cropToolBorderWidth * 2);
    cropDiv_dotted.style.top = tmpTop + 'px';

  }

  repositionSmallSquares();
  resizeTransparentSquares();
  if (updateFormValuesAsYouDrag)cropScript_updateFormValues();
  mouseMoveEventInProgress = false;
}

function repositionSmallSquares() {
  smallSquare_tc.style.left = (Math.floor((cropDiv_dotted.style.width.replace('px', '') / 1 + (cropToolBorderWidth * 2)) / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_bc.style.left = (Math.floor((cropDiv_dotted.style.width.replace('px', '') / 1 + (cropToolBorderWidth * 2)) / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tr.style.left = (cropDiv_dotted.style.width.replace('px', '') / 1 + (cropToolBorderWidth * 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_rc.style.left = (cropDiv_dotted.style.width.replace('px', '') / 1 + (cropToolBorderWidth * 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_br.style.left = (cropDiv_dotted.style.width.replace('px', '') / 1 + (cropToolBorderWidth * 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';

  smallSquare_br.style.top = (cropDiv_dotted.style.height.replace('px', '') / 1 + (cropToolBorderWidth * 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_bc.style.top = (cropDiv_dotted.style.height.replace('px', '') / 1 + (cropToolBorderWidth * 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_bl.style.top = (cropDiv_dotted.style.height.replace('px', '') / 1 + (cropToolBorderWidth * 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_lc.style.top = (Math.floor((cropDiv_dotted.style.height.replace('px', '') / 1 + cropToolBorderWidth) / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_rc.style.top = (Math.floor((cropDiv_dotted.style.height.replace('px', '') / 1 + cropToolBorderWidth) / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
}

function resizeTransparentSquares() {
  cropDiv_left.style.width = cropDiv_dotted.style.left;
  cropDiv_right.style.width = Math.max(0, crop_imageWidth - (cropToolBorderWidth * 2) - (cropDiv_dotted.style.width.replace('px', '') / 1 + cropDiv_dotted.style.left.replace('px', '') / 1)) + 'px';
  cropDiv_right.style.left = (cropDiv_dotted.style.width.replace('px', '') / 1 + (cropToolBorderWidth * 2) + cropDiv_dotted.style.left.replace('px', '') / 1) + 'px';
  cropDiv_bottom.style.height = Math.max(0, crop_imageHeight - (cropToolBorderWidth * 2) - (cropDiv_dotted.style.height.replace('px', '') / 1 + cropDiv_dotted.style.top.replace('px', '') / 1)) + 'px';
  cropDiv_bottom.style.top = (cropDiv_dotted.style.height.replace('px', '') / 1 + (cropToolBorderWidth * 2) + cropDiv_dotted.style.top.replace('px', '') / 1) + 'px';

  cropDiv_top.style.height = cropDiv_dotted.style.top;

  cropDiv_bottom.style.left = cropDiv_dotted.style.left;
  cropDiv_bottom.style.width = (cropDiv_dotted.style.width.replace('px', '') / 1 + (cropToolBorderWidth * 2)) + 'px';
  cropDiv_top.style.left = cropDiv_dotted.style.left;
  cropDiv_top.style.width = (cropDiv_dotted.style.width.replace('px', '') / 1 + (cropToolBorderWidth * 2)) + 'px';

  if (cropDiv_left.style.width == '0px')cropDiv_left.style.visibility = 'hidden'; else cropDiv_left.style.visibility = 'visible';
  if (cropDiv_right.style.width == '0px')cropDiv_right.style.visibility = 'hidden'; else cropDiv_right.style.visibility = 'visible';
  if (cropDiv_bottom.style.width == '0px')cropDiv_bottom.style.visibility = 'hidden'; else cropDiv_bottom.style.visibility = 'visible';

}

function cropScript_updateFormValues() {
  crop_getElementsByClassName(ImageCropLayer, "input", "slicex")[0].value = Math.round(cropDiv_dotted.style.left.replace('px', '') / 1 * (crop_originalImageWidth / crop_imageWidth));
  crop_getElementsByClassName(ImageCropLayer, "input", "slicey")[0].value = Math.round(cropDiv_dotted.style.top.replace('px', '') / 1 * (crop_originalImageHeight / crop_imageHeight));
  crop_getElementsByClassName(ImageCropLayer, "input", "slicewidth")[0].value = Math.round((cropDiv_dotted.style.width.replace('px', '') / 1 + (cropToolBorderWidth * 2)) * (crop_originalImageWidth / crop_imageWidth));
  crop_getElementsByClassName(ImageCropLayer, "input", "sliceheight")[0].value = Math.round((cropDiv_dotted.style.height.replace('px', '') / 1 + (cropToolBorderWidth * 2)) * (crop_originalImageHeight / crop_imageHeight));
  if (crop_getElementsByClassName(ImageCropLayer, "input", "slicex")[0].onChange) crop_getElementsByClassName(ImageCropLayer, "input", "slicex")[0].onChange();
}

function cropScript_stopResizeMove() {
  crop_resizeCounter = -1;
  crop_moveCounter = -1;
  cropDiv_dotted.style.cursor = 'move';
  cropScript_updateFormValues();
  if (document.all) {
    var div = cropDiv_dotted.getElementsByTagName('DIV')[0];
    div.style.display = 'block';
  }
}

function cropScript_setCropSizeByInput() {
  var obj_x = crop_getElementsByClassName(ImageCropLayer, "input", "slicex")[0];
  var obj_y = crop_getElementsByClassName(ImageCropLayer, "input", "slicey")[0];
  var obj_width = crop_getElementsByClassName(ImageCropLayer, "input", "slicewidth")[0];
  var obj_height = crop_getElementsByClassName(ImageCropLayer, "input", "sliceheight")[0];

  obj_x.value = obj_x.value.replace(/[^0-9]/gi, '');
  obj_y.value = obj_y.value.replace(/[^0-9]/gi, '');
  obj_width.value = obj_width.value.replace(/[^0-9]/gi, '');
  obj_height.value = obj_height.value.replace(/[^0-9]/gi, '');

  if (obj_x.value.length == 0)obj_x.value = 0;
  if (obj_y.value.length == 0)obj_y.value = 0;
  if (obj_width.value.length == 0)obj_width.value = crop_originalImageWidth;
  if (obj_height.value.length == 0)obj_height.value = crop_originalImageHeight;

  if (obj_x.value > (crop_originalImageWidth - crop_minimumWidthHeight))obj_x.value = crop_originalImageWidth - crop_minimumWidthHeight;
  if (obj_y.value > (crop_originalImageHeight - crop_minimumWidthHeight))obj_y.value = crop_originalImageHeight - crop_minimumWidthHeight;

  if (obj_width.value / 1 > crop_originalImageWidth)obj_width.value = crop_originalImageWidth - obj_x.value / 1;
  if (obj_height.value / 1 > crop_originalImageHeight)obj_height.value = crop_originalImageHeight - obj_y.value / 1;

  if (obj_x.value / 1 + obj_width.value / 1 > crop_originalImageWidth)obj_width.value = crop_originalImageWidth - obj_x.value;
  if (obj_y.value / 1 + obj_height.value / 1 > crop_originalImageHeight)obj_height.value = crop_originalImageHeight - obj_y.value;

  cropDiv_dotted.style.left = Math.round((obj_x.value / 1) * (crop_imageWidth / crop_originalImageWidth)) + 'px';
  cropDiv_dotted.style.top = Math.round((obj_y.value / 1) * (crop_imageHeight / crop_originalImageHeight)) + 'px';

  var iWidth = Math.round(((obj_width.value / 1) - (cropToolBorderWidth * 2)) * (crop_imageWidth / crop_originalImageWidth));
  if (iWidth > 0) cropDiv_dotted.style.width = iWidth + 'px';

  var iHeight = Math.round(((obj_height.value / 1) - (cropToolBorderWidth * 2)) * (crop_imageHeight / crop_originalImageHeight));
  if (iHeight > 0) cropDiv_dotted.style.height = iHeight + 'px';

  repositionSmallSquares();
  resizeTransparentSquares();
}

function cropScript_setBasicEvents() {
  document.documentElement.ondragstart = crop_cancelEvent;
  document.documentElement.onselectstart = crop_cancelEvent;
  document.documentElement.onmousemove = cropScript_mouseMove;
  document.documentElement.onmouseup = cropScript_stopResizeMove;

  crop_getElementsByClassName(ImageCropLayer, "input", "slicex")[0].onblur = cropScript_setCropSizeByInput;
  crop_getElementsByClassName(ImageCropLayer, "input", "slicey")[0].onblur = cropScript_setCropSizeByInput;
  crop_getElementsByClassName(ImageCropLayer, "input", "slicewidth")[0].onblur = cropScript_setCropSizeByInput;
  crop_getElementsByClassName(ImageCropLayer, "input", "sliceheight")[0].onblur = cropScript_setCropSizeByInput;
}

function cropScript_validatePercent() {
  this.value = this.value.replace(/[^0-9]/gi, '');
  if (this.value.length == 0)this.value = '1';
  if (this.value / 1 > crop_maximumPercent)this.value = '100';
  if (this.value / 1 < crop_minimumPercent)this.value = crop_minimumPercent;
}

function cropScript_updateImageSize() {
  cropDiv_top.style.width = crop_imageWidth + 'px';
  cropDiv_right.style.left = (crop_imageWidth) + 'px';
  cropDiv_bottom.style.width = crop_imageWidth + 'px';
  cropDiv_dotted.style.width = (crop_imageWidth - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tr.style.left = (crop_imageWidth - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_br.style.left = (crop_imageWidth - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tc.style.left = (Math.floor(crop_imageWidth / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_bc.style.left = (Math.floor(crop_imageWidth / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_rc.style.left = (crop_imageWidth - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';

  cropDiv_top.style.width = crop_imageWidth + 'px';
  cropDiv_right.style.left = (crop_imageWidth) + 'px';
  cropDiv_bottom.style.width = crop_imageWidth + 'px';
  cropDiv_dotted.style.width = (crop_imageWidth - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tr.style.left = (crop_imageWidth - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_br.style.left = (crop_imageWidth - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_tc.style.left = (Math.floor(crop_imageWidth / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_bc.style.left = (Math.floor(crop_imageWidth / 2) - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';
  smallSquare_rc.style.left = (crop_imageWidth - offsetSmallSquares - (cropToolBorderWidth * 2)) + 'px';

  repositionSmallSquares();
  resizeTransparentSquares();
}

function crop_progressBar() {
  var div = document.getElementById('crop_progressBar');

  var subDiv = document.createElement('DIV');
  div.appendChild(subDiv);
  subDiv.style.position = 'absolute';
  subDiv.className = 'crop_progressBar_parentBox';
  subDiv.style.left = '0px';
  var progressBarSquare = document.createElement('DIV');
  progressBarSquare.className = 'progressBar_square';
  subDiv.appendChild(progressBarSquare);
  var progressBarSquare = document.createElement('DIV');
  progressBarSquare.className = 'progressBar_square';
  subDiv.appendChild(progressBarSquare);
  var progressBarSquare = document.createElement('DIV');
  progressBarSquare.className = 'progressBar_square';
  subDiv.appendChild(progressBarSquare);
  crop_progressBarMove();
  crop_hideProgressBar();

}

function crop_hideProgressBar() {
  document.getElementById('crop_progressBar').style.visibility = 'hidden';

}

function crop_startProgressBar() {
  var div = document.getElementById('crop_progressBar').getElementsByTagName('DIV')[0];
  div.style.left = '0px';
  document.getElementById('crop_progressBar').style.visibility = 'visible';
}

function crop_progressBarMove() {
  var div = document.getElementById('crop_progressBar').getElementsByTagName('DIV')[0];
  var left = div.style.left.replace('px', '') / 1;
  left = left + 1;
  if (left > div.parentNode.clientWidth)left = 0 - div.clientWidth;
  div.style.left = left + 'px';

  setTimeout('crop_progressBarMove()', 20);

}

function crop_initFixedRatio() {
  if (crop_script_fixedRatio > 1) {
    crop_getElementsByClassName(ImageCropLayer, "input", "sliceheight")[0].value = Math.round(crop_getElementsByClassName(ImageCropLayer, "input", "slicewidth")[0].value) / crop_script_fixedRatio;

  } else {
    crop_getElementsByClassName(ImageCropLayer, "input", "slicewidth")[0].value = Math.round(crop_getElementsByClassName(ImageCropLayer, "input", "sliceheight")[0].value) / crop_script_fixedRatio;

  }
  cropScript_setCropSizeByInput();
}

function init_imageCrop(DOMLayer) {
  ImageCropLayer = DOMLayer;
  cropScript_setBasicEvents();
  crop_createDivElements();
  cropScript_updateFormValues();
  if (crop_script_fixedRatio && crop_script_alwaysPreserveAspectRatio) {
    crop_initFixedRatio();
  }

}

CGEditorDialogPictureUpload = function (extLayer) {
  this.base = CGEditorDialog;
  this.base(extLayer);
  this.extToolbarUpload = null;
  this.extForm = null;
  this.init();
  this.bCropInitalized = false;
  this.CropBox = new Object();
  this.Limit = "-1";
  this.downloadActionTemplate = null;
};

CGEditorDialogPictureUpload.prototype = new CGEditorDialog;

//public
CGEditorDialogPictureUpload.prototype.init = function () {
  var extDialog;

  extDialog = (this.extLayer.down(CSS_EDITOR_DIALOG_ELEMENT_DIALOG));

  this.extInputFile = extDialog.select(CSS_EDITOR_DIALOG_ELEMENT_INPUT_FILE).first();
  this.extCropLayer = extDialog.select(CSS_EDITOR_DIALOG_ELEMENT_CROP_LAYER).first();
  this.extForm = extDialog.down(CSS_EDITOR_DIALOG_ELEMENT_FORM);
  this.extUploading = this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_UPLOADING).first();
  this.extFileSizeExceeded = this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_FILE_SIZE_EXCEEDED).first();

  this.extButtonUpload = extDialog.select(CSS_EDITOR_DIALOG_ELEMENT_BUTTON_UPLOAD).first();
  this.extButtonUpload.on("click", this.atButtonUploadClick, this);

  this.extPreview = this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_PREVIEW).first();
  this.extPreview.on("load", CGEditorDialogPictureUpload.prototype.atLoadPicture.bind(this));
  this.extPreview.dom.style.maxHeight = 330 + "px";
  this.extPreview.dom.style.maxSize = 550 + "px";

  this.extSliceX = this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_SLICE_X).first();
  this.extSliceY = this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_SLICE_Y).first();
  this.extSliceWidth = this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_SLICE_WIDTH).first();
  this.extSliceHeight = this.extLayer.select(CSS_EDITOR_DIALOG_ELEMENT_SLICE_HEIGHT).first();

  this.extSliceX.dom.onChange = CGEditorDialogPictureUpload.prototype.atCoordinatesChange.bind(this);
  this.extSliceX.on("change", this.atCoordinatesChange, this);

  this.extInputFile.on("change", this.atUploadFile, this);
  this.extInputFile.dom.multiple = false;
};

CGEditorDialogPictureUpload.prototype.setCropSize = function () {
  crop_imageWidth = this.extPreview.getWidth();
  crop_imageHeight = this.extPreview.getHeight();
  crop_originalImageWidth = this.extPreview.getWidth();
  crop_originalImageHeight = this.extPreview.getHeight();
  crop_script_alwaysPreserveAspectRatio = this.PreserveAspectRatio;
  this.extSliceX.dom.value = 0;
  this.extSliceY.dom.value = 0;
  this.extSliceWidth.dom.value = this.CropSize.Width;
  this.extSliceHeight.dom.value = this.CropSize.Height;
};

CGEditorDialogPictureUpload.prototype.initCropLayer = function () {
  if (this.bCropInitialized) return;

  this.setCropSize();
  init_imageCrop(this.extLayer.dom);
  cropScript_setCropSizeByInput();

  this.bCropInitialized = true;
};

CGEditorDialogPictureUpload.prototype.refreshCropLayer = function (FileInfo) {
  if (!this.bCropInitialized) this.initCropLayer();
  else {
    this.setCropSize();
    cropScript_setCropSizeByInput();
  }
};

CGEditorDialogPictureUpload.prototype.showCropLayer = function (Config) {
  this.extCropLayer.dom.style.display = "block";
  this.extPreview.dom.style.display = "block";
};

CGEditorDialogPictureUpload.prototype.hideCropLayer = function (Config) {
  this.extCropLayer.dom.style.display = "none";
  this.extPreview.dom.style.display = "none";
};

CGEditorDialogPictureUpload.prototype.setConfiguration = function (Config) {
  this.Limit = Config.Limit;
  if (this.extForm.dom.action == Config.Action) return;
  this.CropSize = Config.Size;
  this.PreserveAspectRatio = Config.PreserveAspectRatio;
  this.extForm.dom.action = Config.Action;
  this.downloadActionTemplate = Config.DownloadActionTemplate;

  this.extInputFile.dom.multiple = Config.MultipleSelection;
};

CGEditorDialogPictureUpload.prototype.getPicture = function (sSource) {
  return {Source: (sSource) ? sSource : this.extPreview.dom.src, Position: {X: this.extSliceX.dom.value, Y: this.extSliceY.dom.value, Width: this.extSliceWidth.dom.value, Height: this.extSliceHeight.dom.value}};
};

CGEditorDialogPictureUpload.prototype.updateForm = function (x, y, iWidth, iHeight) {
  this.extSliceX.dom.value = x;
  this.extSliceY.dom.value = y;
  this.extSliceWidth.dom.value = iWidth;
  this.extSliceHeight.dom.value = iHeight;
};

CGEditorDialogPictureUpload.prototype.checkFileSize = function () {
    var limit = this.Limit;
    if (limit == null || limit == "-1" || limit === "") return true;
    var files = this.extInputFile.dom.files;
    var size = 0;
    for (var i=0; i<files.length; i++) size += files[i].size;
    return size <= (limit * 1024 * 1024);
};

CGEditorDialogPictureUpload.prototype.showFileSizeExceeded = function () {
    this.extFileSizeExceeded.dom.innerHTML = WidgetFileSizeExceededTemplate.evaluate({'size': this.Limit});
    this.extFileSizeExceeded.dom.style.display = "block";
};

CGEditorDialogPictureUpload.prototype.hideFileSizeExceeded = function () {
    this.extFileSizeExceeded.dom.style.display = "none";
};

CGEditorDialogPictureUpload.prototype.showUploading = function (sMessage) {
  this.extUploading.dom.innerHTML = WidgetWaitingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'cls': CLASS_EDITOR_WAITING_MESSAGE, 'message': sMessage});
  this.extUploading.dom.style.display = "block";
  this.hideCropLayer();
};

CGEditorDialogPictureUpload.prototype.showUploadingError = function () {
  this.extUploading.dom.innerHTML = WidgetWaitingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'cls': CLASS_EDITOR_WAITING_ERROR, 'message': Lang.Editor.Dialogs.PictureUpload.UploadingFailed});
  this.hideCropLayer();
};

CGEditorDialogPictureUpload.prototype.hideUploadingError = function () {
  this.extUploading.dom.style.display = "none";
};

CGEditorDialogPictureUpload.prototype.setPicture = function (Source, iWidth, iHeight) {
  this.Picture = new Object();
  this.Picture.Source = Source;
  this.Picture.Width = iWidth;
  this.Picture.Height = iHeight;
  this.Picture.Slice = new Object();
  this.Picture.Slice.X = this.extSliceX.dom.value;
  this.Picture.Slice.Y = this.extSliceY.dom.value;
  this.Picture.Slice.Width = this.extSliceWidth.dom.value;
  this.Picture.Slice.Height = this.extSliceHeight.dom.value;
};

CGEditorDialogPictureUpload.prototype.calculateSelection = function (Source, iWidth, iHeight) {
  var Result = new Object();
  var iPreviewWidth = parseInt(this.extPreview.getWidth());
  var iPreviewHeight = parseInt(this.extPreview.getHeight());

  Result.X = Math.floor((this.Picture.Slice.X * this.Picture.Width) / iPreviewWidth);
  Result.Y = Math.floor((this.Picture.Slice.Y * this.Picture.Height) / iPreviewHeight);
  Result.Width = Math.floor((this.Picture.Slice.Width * this.Picture.Width) / iPreviewWidth);
  Result.Height = Math.floor((this.Picture.Slice.Height * this.Picture.Height) / iPreviewHeight);

  return Result;
};

CGEditorDialogPictureUpload.prototype.refresh = function () {
  this.extInputFile.dom.value = "";
  this.hideCropLayer();
};

CGEditorDialogPictureUpload.prototype.isMultiple = function(images) {
  return images.length > 1;
};

CGEditorDialogPictureUpload.prototype.notifySelect = function(image) {
  if (this.onSelect == null)
    return;

  this.onSelect(this.createValue(image));
};

CGEditorDialogPictureUpload.prototype.notifyMultipleSelect = function(images) {
  if (this.onSelectMultiple == null)
    return;

  var values = this.createValues(images);
  this.onSelectMultiple(values);
};

CGEditorDialogPictureUpload.prototype.createValue = function(image) {
  return {code: null, value: HtmlUtil.decode(image)};
};

CGEditorDialogPictureUpload.prototype.createValues = function(images) {
  var result = new Array();

  for (var i=0; i<images.length; i++)
    result.push(this.createValue(images[i]));

  return result;
};

// #############################################################################################################
CGEditorDialogPictureUpload.prototype.atUploadFile = function () {
    if (this.extInputFile.dom.value === "") // FIX IE BUG
        return;

  var fileInfo = null;

  if(!this.checkFileSize()) {
    this.showFileSizeExceeded();
    return;
  }

  this.hideFileSizeExceeded();
  this.hideUploadingError();
  this.showUploading(Lang.Editor.Dialogs.PictureUpload.Processing);
  this.updateForm(0, 0, -1, -1);

  var cropSizeWidth = this.PreserveAspectRatio?this.CropSize.Width:-1;
  var cropSizeHeight = this.PreserveAspectRatio?this.CropSize.Height:-1;
  var sActionUrl = this.extForm.dom.action + ((this.extForm.dom.action.indexOf("?") == -1) ? "?" : "&") + "width=" + cropSizeWidth + "&height=" + cropSizeHeight;

  Ext.Ajax.request({
    url: sActionUrl,
    method: "POST",
    success: function (response, options) {
      fileInfo = eval('(' + response.responseText + ')');
      if (fileInfo.status == 0) {
        this.extUploading.dom.style.display = 'none';

        if (this.isMultiple(fileInfo.images)) {
          this.notifyMultipleSelect(fileInfo.images);
          return;
        }

        var sSource = this.downloadActionTemplate.replace(TAG_URL_ID, fileInfo.images[0]);
        sSource = HtmlUtil.decode(sSource);
        this.setPicture(sSource, fileInfo.width, fileInfo.height);
        this.extPreview.dom.src = sSource;
      }
      else {
        this.showUploadingError();
      }
    },
    failure: function (response, options) {
      this.showUploadingError();
    },
    isUpload: true,
    form: this.extForm.dom,
    scope: this
  });

};

CGEditorDialogPictureUpload.prototype.atLoadPicture = function () {
  this.showCropLayer();
  this.refreshCropLayer();
  this.extCropLayer.dom.style.display = "block";
  if (this.onChange) this.onChange(this.Picture);
};

CGEditorDialogPictureUpload.prototype.atCoordinatesChange = function () {
  this.Picture.Slice.X = this.extSliceX.dom.value;
  this.Picture.Slice.Y = this.extSliceY.dom.value;
  this.Picture.Slice.Width = this.extSliceWidth.dom.value;
  this.Picture.Slice.Height = this.extSliceHeight.dom.value;
  if (this.onChange) this.onChange(this.Picture);
};

CGEditorDialogPictureUpload.prototype.atButtonUploadClick = function (oEvent) {
  Event.stop(oEvent);

  var oFileInfo = null;
  var Selection = null;
  var X = this.extSliceX.dom.value;
  var Y = this.extSliceY.dom.value;
  var Width = this.extSliceWidth.dom.value;
  var Height = this.extSliceHeight.dom.value;

  Selection = this.calculateSelection();
  this.extSliceX.dom.value = Selection.X;
  this.extSliceY.dom.value = Selection.Y;
  this.extSliceWidth.dom.value = Selection.Width;
  this.extSliceHeight.dom.value = Selection.Height;

  this.showUploading(Lang.Editor.Dialogs.PictureUpload.Uploading);

  var cropSizeWidth = this.PreserveAspectRatio?this.CropSize.Width:-1;
  var cropSizeHeight = this.PreserveAspectRatio?this.CropSize.Height:-1;

  Ext.Ajax.request({
    url: this.extForm.dom.action + ((this.extForm.dom.action.indexOf("?") == -1) ? "?" : "&") + "width=" + cropSizeWidth + "&height=" + cropSizeHeight,
    method: "POST",
    success: function (response, options) {
      fileInfo = eval('(' + response.responseText + ')');
      if (fileInfo.status == 0) {
        this.notifySelect(fileInfo.images[0]);
        this.extUploading.dom.style.display = 'none';
        this.extInputFile.dom.value = "";
        this.extPreview.dom.src = "";
        this.hideCropLayer();
      }
      else {
        this.showUploadingError();
      }
      this.extSliceX.dom.value = X;
      this.extSliceY.dom.value = Y;
      this.extSliceWidth.dom.value = Width;
      this.extSliceHeight.dom.value = Height;
    },
    failure: function (response, options) {
      this.showUploadingError();
      this.extSliceX.dom.value = X;
      this.extSliceY.dom.value = Y;
      this.extSliceWidth.dom.value = Width;
      this.extSliceHeight.dom.value = Height;
    },
    isUpload: true,
    form: this.extForm.dom,
    scope: this
  });

  return false;
};

CGEditorPicture = function () {
  this.base = CGEditor;
  this.base();
};

CGEditorPicture.prototype = new CGEditor;

//private
CGEditorPicture.prototype.addBehaviours = function () {
  this.aDialogs[PICTURE_UPLOAD].onSelect = this.atSelect.bind(this);
  this.aDialogs[PICTURE_UPLOAD].onSelectMultiple = this.atSelectMultiple.bind(this);
};

//public
CGEditorPicture.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  var extDialogPictureUpload = this.extEditor.select(CSS_EDITOR_DIALOG_PICTURE_UPLOAD).first();

  this.aDialogs[PICTURE_UPLOAD] = new CGEditorDialogPictureUpload(extDialogPictureUpload);
  this.setDialogMain(PICTURE_UPLOAD);

  CGEditor.prototype.init.call(this, DOMEditor);

  this.extDownload = this.extEditor.select(CSS_EDITOR_DOWNLOAD).first();
  if (this.extDownload) Event.observe(this.extDownload.dom, "click", CGEditorPicture.prototype.atDownload.bind(this));

  this.addBehaviours();
};

// #############################################################################################################
CGEditorPicture.prototype.atDownload = function (oEvent) {
  this.extDownload.dom.target = "_blank";
  if (this.onDownload) this.onDownload(this.extDownload.dom);
  if (this.extDownload.dom.stop) {
    Event.stop(oEvent);
    return false;
  }
  return true;
};

CGEditorComposite = function () {
  this.base = CGEditor;
  this.base();
};

CGEditorComposite.prototype = new CGEditor;

// #############################################################################################################

CGEditorText = function () {
  this.base = CGEditor;
  this.base();
  this.extLength = null;
};

CGEditorText.prototype = new CGEditor;

//private
CGEditorText.prototype.addBehaviours = function () {
  this.aDialogs[HISTORY].onSelect = this.atSelect.bind(this);
};

//public
CGEditorText.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  var extDialogHistory = this.extEditor.select(CSS_EDITOR_DIALOG_HISTORY).first();

  this.aDialogs[HISTORY] = new CGEditorDialogGrid(extDialogHistory);
  this.setDialogMain(HISTORY);

  this.extLength = this.extEditor.select(CSS_EDITOR_LENGTH).first();
  this.extFilter = this.extEditor.select(CSS_EDITOR_FILTER).first();
  this.extFilter.on("keyup", this.atFilterKeyUp, this);
  this.extFilter.on("focus", this.atFilterFocus, this);
  this.extFilter.on("blur", this.atFilterBlur, this);
  new Insertion.After(this.extFilter.dom, "<span class='empty'>" + Lang.Editor.FilterEmptyHistory + "</span>");
  this.extFilterEmpty = this.extEditor.select('.filter .empty').first();
  Event.observe(this.extFilterEmpty.dom, "click", CGEditorText.prototype.atFilterEmptyClick.bind(this));

  this.extPreview = this.extEditor.select(CSS_EDITOR_PREVIEW).first();
  this.extPreview.dom.style.display = "none";

  CGEditor.prototype.init.call(this, DOMEditor);

  this.extSupIndex = this.extEditor.select(CSS_EDITOR_SUP_INDEX).first();
  if (this.extSupIndex) Event.observe(this.extSupIndex.dom, "click", CGEditorText.prototype.atFormatClick.bind(this, "sup"));

  this.extSubIndex = this.extEditor.select(CSS_EDITOR_SUB_INDEX).first();
  if (this.extSubIndex) Event.observe(this.extSubIndex.dom, "click", CGEditorText.prototype.atFormatClick.bind(this, "sub"));

  this.extBold = this.extEditor.select(CSS_EDITOR_BOLD).first();
  if (this.extBold) Event.observe(this.extBold.dom, "click", CGEditorText.prototype.atFormatClick.bind(this, "bold"));

  this.extItalic = this.extEditor.select(CSS_EDITOR_ITALIC).first();
  if (this.extItalic) Event.observe(this.extItalic.dom, "click", CGEditorText.prototype.atFormatClick.bind(this, "italic"));

  this.addBehaviours();
};

CGEditorText.prototype.clearFilter = function () {
  this.extFilter.dom.value = "";
};

CGEditorText.prototype.filter = function () {
  var DialogMain = this.getDialogMain();
  DialogMain.setData(this.extFilter.dom.value);
  DialogMain.refresh();
};

CGEditorText.prototype.setConfiguration = function (Config) {
  this.Configuration = Config;
  if (Config.Field) {
    Config.Field.onKeyPress = CGEditorText.prototype.atFieldKeyPress.bind(this);
    Config.Field.onFormat = CGEditorText.prototype.atFieldFormat.bind(this);
    this.updatePreview(Config.Field.getValue());
    this.Configuration.Field = null;
  }
  for (var iPos in Config.Dialogs) {
    if (isFunction(Config.Dialogs[iPos])) continue;
    var CurrentConfig = Config.Dialogs[iPos];
    if (this.aDialogs[CurrentConfig.sName]) this.aDialogs[CurrentConfig.sName].setConfiguration(CurrentConfig);
  }
};

CGEditorText.prototype.updatePreview = function (sValue) {
  if (sValue != "") this.extPreview.dom.style.display = "block";
  else this.extPreview.dom.style.display = "none";
  this.extPreview.dom.innerHTML = HtmlUtil.encode(sValue).replace(/\n/g, "<br/>");
};

CGEditorText.prototype.refresh = function () {
  if (this.aDialogs[HISTORY].getConfiguration().Store == null) {
    this.extEditor.addClass(CLASS_NO_HISTORY);
    this.extFilter.dom.style.display = "none";
    this.extFilterEmpty.dom.style.display = "none";
    this.aDialogs[HISTORY].hide();
  }
  else {
    this.extEditor.removeClass(CLASS_NO_HISTORY);
    this.extFilter.dom.style.display = "block";
    this.aDialogs[HISTORY].show();
    this.extFilter.dom.value = "";
    this.extFilterEmpty.dom.style.display = "block";
    this.filter();
  }

  if ((this.Configuration.Length.min != 0) || (this.Configuration.Length.max != 0)) {
    var sMessage = Lang.Editor.Dialogs.Text.Length;
    sMessage = sMessage.replace('#min#', this.Configuration.Length.min);
    sMessage = sMessage.replace('#max#', (this.Configuration.Length.max != 0) ? this.Configuration.Length.max : Lang.Editor.Dialogs.Text.Undefined);
    this.extLength.dom.innerHTML = sMessage;
  }
  else this.extLength.dom.innerHTML = EMPTY;

};

// #############################################################################################################
CGEditorText.prototype.atSelect = function (Data) {
  Data = this.normalizeData(Data);
  this.clearFilter();
  this.filter();
  if (this.onSelect) this.onSelect(Data);
};

CGEditorText.prototype.atFieldKeyPress = function (sValue) {
  window.clearTimeout(this.idTimeoutFilter);
  this.extFilter.dom.value = sValue;
  if (!this.extEditor.hasClass(CLASS_NO_HISTORY)) this.extFilterEmpty.dom.style.display = (this.extFilter.dom.value.length <= 0) ? "block" : "none";
  this.updatePreview(sValue);
  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 300);
};

CGEditorText.prototype.atFieldFormat = function (sValue) {
  this.updatePreview(sValue);
};

CGEditorText.prototype.atFilterKeyUp = function (oEvent) {
  var codeKey = oEvent.keyCode;
  var sFilter = this.extFilter.dom.value;

  window.clearTimeout(this.idTimeoutFilter);

  if (codeKey == oEvent.UP) {
    this.moveUp(this.extFilter);
    return;
  }
  else if (codeKey == oEvent.DOWN) {
    this.moveDown(this.extFilter);
    return;
  }
  else if ((codeKey == oEvent.ENTER) || (codeKey == oEvent.LEFT) || (codeKey == oEvent.RIGHT) || (codeKey == oEvent.SHIFT)) return;

  this.idTimeoutFilter = window.setTimeout(this.filter.bind(this), 300);
};

CGEditorText.prototype.atFilterFocus = function () {
  this.extFilterEmpty.dom.style.display = "none";
  this.extFilter.dom.select();
};

CGEditorText.prototype.atFilterBlur = function () {
  if (this.extEditor.hasClass(CLASS_NO_HISTORY)) return;
  var sFilter = this.extFilter.dom.value;
  this.extFilterEmpty.dom.style.display = (sFilter.length <= 0) ? "block" : "none";
};

CGEditorText.prototype.atFilterEmptyClick = function () {
  this.extFilter.focus();
};

CGEditorText.prototype.atFormatClick = function (sFormat, EventLaunched) {
  Event.stop(EventLaunched);
  if (this.onFormat) this.onFormat(sFormat);
  return false;
};

CGEditorSerial = function (DOMEditor) {
  this.base = CGEditor;
  this.base(DOMEditor);
};

CGEditorSerial.prototype = new CGEditor;

CGEditorDialogLocation = function (extLayer) {
  this.base = CGEditorDialog;
  this.base(extLayer);
  this.init();
};

CGEditorDialogLocation.prototype = new CGEditorDialog;

CGEditorDialogLocation.prototype.init = function () {

  var Options = new Object();
  Options.mapTypeId = (typeof google != "undefined") ? google.maps.MapTypeId.ROADMAP : null;

  var extMapLayer = this.extLayer.select(".map").first();
  var extInfoLayer = this.extLayer.select(".info").first();

  this.locationPicker = new LocationPicker();
  this.locationPicker.onSelect = CGEditorDialogLocation.prototype.atSelectLocation.bind(this);
  this.locationPicker.init(Options, extMapLayer, extInfoLayer);
};

CGEditorDialogLocation.prototype.setConfiguration = function (Config) {
  this.Configuration = Config;
  this.locationPicker.setLocation(Config.Location);
};

// #############################################################################################################
CGEditorDialogLocation.prototype.atSelectLocation = function (locationPicker, location) {
  if (this.onSelect) this.onSelect(location);
};

CGEditorLocation = function () {
  this.base = CGEditor;
  this.base();
};

CGEditorLocation.prototype = new CGEditor;

//private
CGEditorLocation.prototype.addBehaviours = function () {
  this.aDialogs[LOCATION].onSelect = this.atSelect.bind(this);
};

//public
CGEditorLocation.prototype.init = function (DOMEditor) {
  this.extEditor = Ext.get(DOMEditor);

  var extDialogLocation = this.extEditor.select(CSS_EDITOR_DIALOG_LOCATION).first();

  this.aDialogs[LOCATION] = new CGEditorDialogLocation(extDialogLocation);
  this.setDialogMain(LOCATION);

  CGEditor.prototype.init.call(this, DOMEditor);

  this.addBehaviours();
};

CGEditorLocation.prototype.setConfiguration = function (Config) {
  this.Configuration = Config;
  if (Config.Field) {
    this.Configuration.Field = null;
  }
  for (var iPos in Config.Dialogs) {
    if (isFunction(Config.Dialogs[iPos])) continue;
    var CurrentConfig = Config.Dialogs[iPos];
    if (this.aDialogs[CurrentConfig.sName]) this.aDialogs[CurrentConfig.sName].setConfiguration(CurrentConfig);
  }
};

CGEditorSummation = function () {
  this.base = CGEditor;
  this.base();
};

CGEditorSummation.prototype = new CGEditor;

//private

//public

var EditorsFactory = new Object();

EditorsFactory.init = function () {
  EditorsFactory.aEditors = new Array();
  EditorDialogListItemTemplate = new Template(Lang.Editor.Templates.DialogListItem);
};

EditorsFactory.register = function (sName, Editor) {
  EditorsFactory.aEditors[sName] = Editor;
};

EditorsFactory.get = function (sName) {
  return EditorsFactory.aEditors[sName];
};

ViewerHelperEditors = new Object();

ViewerHelperEditors.extLayer = null;
ViewerHelperEditors.CurrentEditor = null;
ViewerHelperEditors.Target = null;

ViewerHelperEditors.init = function (extLayer) {
  ViewerHelperEditors.extLayer = extLayer;

  ViewerHelperEditors.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperEditors, Lang.ViewerHelperEditors);
  ViewerHelperEditors.CurrentEditor = null;

  CommandListener.capture(ViewerHelperEditors.extLayer.dom);

  ViewerHelperEditors.initEditors();
  ViewerHelperEditors.hideAllEditors();
};

ViewerHelperEditors.registerEvents = function (Editor) {
  Editor.onShow = ViewerHelperEditors.atEditorShow.bind(ViewerHelperEditors);
  Editor.onHide = ViewerHelperEditors.atEditorHide.bind(ViewerHelperEditors);
  Editor.onLock = ViewerHelperEditors.atEditorLock.bind(ViewerHelperEditors);
  Editor.onUnLock = ViewerHelperEditors.atEditorUnLock.bind(ViewerHelperEditors);
};

ViewerHelperEditors.initEditors = function () {
  var sDisplay = this.extLayer.dom.style.display;
  var zIndex = this.extLayer.dom.style.zIndex;

  this.extLayer.dom.style.zIndex = -1000000;
  this.extLayer.dom.style.display = "block";

  EditorsFactory.init();

  var EditorBoolean = new CGEditorBoolean();
  ViewerHelperEditors.registerEvents(EditorBoolean);
  EditorBoolean.init(ViewerHelperEditors.getLayer(FIELD_TYPE_BOOLEAN));
  EditorsFactory.register(FIELD_TYPE_BOOLEAN, EditorBoolean);

  var EditorCheck = new CGEditorCheck();
  ViewerHelperEditors.registerEvents(EditorCheck);
  EditorCheck.init(ViewerHelperEditors.getLayer(FIELD_TYPE_CHECK));
  EditorsFactory.register(FIELD_TYPE_CHECK, EditorCheck);

  var EditorDate = new CGEditorDate();
  ViewerHelperEditors.registerEvents(EditorDate);
  EditorDate.init(ViewerHelperEditors.getLayer(FIELD_TYPE_DATE));
  EditorsFactory.register(FIELD_TYPE_DATE, EditorDate);

  var EditorFile = new CGEditorFile();
  ViewerHelperEditors.registerEvents(EditorFile);
  EditorFile.init(ViewerHelperEditors.getLayer(FIELD_TYPE_FILE));
  EditorsFactory.register(FIELD_TYPE_FILE, EditorFile);

  var EditorLink = new CGEditorLink();
  ViewerHelperEditors.registerEvents(EditorLink);
  EditorLink.init(ViewerHelperEditors.getLayer(FIELD_TYPE_LINK));
  EditorsFactory.register(FIELD_TYPE_LINK, EditorLink);

  var EditorList = new CGEditorList();
  ViewerHelperEditors.registerEvents(EditorList);
  EditorList.init(ViewerHelperEditors.getLayer(FIELD_TYPE_LIST));
  EditorsFactory.register(FIELD_TYPE_LIST, EditorList);

  var EditorNumber = new CGEditorNumber();
  ViewerHelperEditors.registerEvents(EditorNumber);
  EditorNumber.init(ViewerHelperEditors.getLayer(FIELD_TYPE_NUMBER));
  EditorsFactory.register(FIELD_TYPE_NUMBER, EditorNumber);

  var EditorPicture = new CGEditorPicture();
  ViewerHelperEditors.registerEvents(EditorPicture);
  EditorPicture.init(ViewerHelperEditors.getLayer(FIELD_TYPE_PICTURE));
  EditorsFactory.register(FIELD_TYPE_PICTURE, EditorPicture);

  var EditorComposite = new CGEditorComposite();
  ViewerHelperEditors.registerEvents(EditorComposite);
  EditorComposite.init(ViewerHelperEditors.getLayer(FIELD_TYPE_COMPOSITE));
  EditorsFactory.register(FIELD_TYPE_COMPOSITE, EditorComposite);

  var EditorSelect = new CGEditorSelect();
  ViewerHelperEditors.registerEvents(EditorSelect);
  EditorSelect.init(ViewerHelperEditors.getLayer(FIELD_TYPE_SELECT));
  EditorsFactory.register(FIELD_TYPE_SELECT, EditorSelect);

  var EditorText = new CGEditorText();
  ViewerHelperEditors.registerEvents(EditorText);
  EditorText.init(ViewerHelperEditors.getLayer(FIELD_TYPE_TEXT));
  EditorsFactory.register(FIELD_TYPE_TEXT, EditorText);

  var EditorNode = new CGEditorNode();
  ViewerHelperEditors.registerEvents(EditorNode);
  EditorNode.init(ViewerHelperEditors.getLayer(FIELD_TYPE_NODE));
  EditorsFactory.register(FIELD_TYPE_NODE, EditorNode);

  var EditorSerial = new CGEditorSerial();
  ViewerHelperEditors.registerEvents(EditorSerial);
  EditorSerial.init(ViewerHelperEditors.getLayer(FIELD_TYPE_SERIAL));
  EditorsFactory.register(FIELD_TYPE_SERIAL, EditorSerial);

  var EditorLocation = new CGEditorLocation();
  ViewerHelperEditors.registerEvents(EditorLocation);
  EditorLocation.init(ViewerHelperEditors.getLayer(FIELD_TYPE_LOCATION));
  EditorsFactory.register(FIELD_TYPE_LOCATION, EditorLocation);

  var EditorSummation = new CGEditorSummation();
  ViewerHelperEditors.registerEvents(EditorSummation);
  EditorSummation.init(ViewerHelperEditors.getLayer(FIELD_TYPE_SUMMATION));
  EditorsFactory.register(FIELD_TYPE_SUMMATION, EditorSummation);

  this.extLayer.dom.style.display = sDisplay;
  this.extLayer.dom.style.zIndex = zIndex;
};

ViewerHelperEditors.getLayer = function (Type) {
  var extEditorLayer = ViewerHelperEditors.extLayer.select(CSS_EDITOR + DOT + "e" + Type.toLowerCase()).first();
  if (extEditorLayer == null) return null;
  return extEditorLayer.dom;
};

ViewerHelperEditors.show = function () {
  ViewerHelperEditors.extLayer.dom.style.display = "block";
};

ViewerHelperEditors.hide = function () {
  ViewerHelperEditors.extLayer.dom.style.display = "none";
};

ViewerHelperEditors.getCurrentEditor = function () {
  if (ViewerHelperEditors.CurrentEditor == null) return;
  return ViewerHelperEditors.CurrentEditor;
};

ViewerHelperEditors.showEditor = function (Type) {
  var Editor = EditorsFactory.get(Type);
  if (!Editor) return;

  var CurrentEditor = ViewerHelperEditors.getCurrentEditor();
  if (CurrentEditor != null) CurrentEditor.hide();

  ViewerHelperEditors.CurrentEditor = Editor;
  ViewerHelperEditors.CurrentEditor.show();
};

ViewerHelperEditors.hideEditor = function (Type) {
  var Editor = EditorsFactory.get(Type);
  if (!Editor) return;
  Editor.hide();
};

ViewerHelperEditors.hideCurrentEditor = function () {
  if (ViewerHelperEditors.CurrentEditor == null) return;
  ViewerHelperEditors.CurrentEditor.hide();
  ViewerHelperEditors.CurrentEditor = null;
};

ViewerHelperEditors.hideAllEditors = function () {
  var EditorList = ViewerHelperEditors.extLayer.select(CSS_EDITOR);
  EditorList.each(function (Editor) {
    Editor.dom.style.display = "none";
  }, this);
};

ViewerHelperEditors.refresh = function () {
  var CurrentEditor = ViewerHelperEditors.getCurrentEditor();
  if (CurrentEditor == null) return;
  CurrentEditor.refresh();
};

// #############################################################################################################

ViewerHelperEditors.atEditorShow = function (Editor) {
  if ((ViewerHelperEditors.CurrentEditor != null) && (ViewerHelperEditors.CurrentEditor != Editor)) ViewerHelperEditors.CurrentEditor.hide();
  ViewerHelperEditors.CurrentEditor = Editor;
};

ViewerHelperEditors.atEditorHide = function (Editor) {
  ViewerHelperEditors.CurrentEditor = null;
};

ViewerHelperEditors.atEditorLock = function (Editor) {
  if (this.onLock) this.onLock();
  ViewerHelperEditors.extLayer.dom.style.overflow = "hidden";
};

ViewerHelperEditors.atEditorUnLock = function (Editor) {
  if (this.onUnLock) this.onUnLock();
  ViewerHelperEditors.extLayer.dom.style.overflow = "hidden";
};

ViewerHelperPreview = new Object;

ViewerHelperPreview.init = function (extLayer) {
  ViewerHelperPreview.extLayer = extLayer;
  ViewerHelperPreview.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperPreview, Lang.ViewerHelperPreview);
};

ViewerHelperPreview.show = function () {
  ViewerHelperPreview.extLayer.dom.style.display = "block";
};

ViewerHelperPreview.hide = function () {
  ViewerHelperPreview.extLayer.dom.style.display = "none";
};

ViewerHelperPreview.refresh = function () {
};

ViewerHelperObservers = new Object;
ViewerHelperObservers.extLayer = null;

ViewerHelperObservers.init = function (extLayer) {
  ViewerHelperObservers.extLayer = extLayer;
  ViewerHelperObservers.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperObservers, Lang.ViewerHelperObservers);
};

ViewerHelperObservers.getTarget = function () {
  return ViewerHelperObservers.Target;
};

ViewerHelperObservers.setTarget = function (Target) {
  ViewerHelperObservers.Target = Target;
};

ViewerHelperObservers.show = function () {
  var doShow = true;
  if (this.onBeforeShow) doShow = this.onBeforeShow();
  if (doShow) ViewerHelperObservers.extLayer.dom.style.display = "block";
};

ViewerHelperObservers.hide = function () {
  ViewerHelperObservers.extLayer.dom.style.display = "none";
};

ViewerHelperObservers.refresh = function () {
  var extObservers = ViewerHelperObservers.extLayer.select(".observers").first();
  var aObservers = ViewerHelperObservers.Target;
  var sObservers = "";
  var itemTemplate = new Template(translate(AppTemplate.ViewerHelperObserversItem, Lang.ViewerHelperObservers));

  for (var i = 0; i < aObservers.length; i++)
    sObservers += itemTemplate.evaluate({color: getColor(i), fullname: aObservers[i].fullname, field: (aObservers[i].field != null && aObservers[i].field != "") ? "&nbsp;(" + Lang.ViewerHelperObservers.Editing + ")" : ""});

  extObservers.dom.innerHTML = sObservers;
};

ViewerHelperRevisionList = new Object;
ViewerHelperRevisionList.extLayer = null;

ViewerHelperRevisionList.init = function (extLayer) {
  ViewerHelperRevisionList.extLayer = extLayer;
  ViewerHelperRevisionList.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperRevisionList, Lang.ViewerHelperRevisionList);
};

ViewerHelperRevisionList.getListViewerLayer = function () {
  return $("RevisionListViewer");
};

ViewerHelperRevisionList.show = function () {
  ViewerHelperRevisionList.extLayer.dom.style.display = "block";
};

ViewerHelperRevisionList.hide = function () {
  ViewerHelperRevisionList.extLayer.dom.style.display = "none";
};

ViewerHelperRevisionList.refresh = function () {
};

ViewerHelperChat = new Object;
ViewerHelperChat.extLayer = null;
ViewerHelperChat.itemsPerPage = 40;
ViewerHelperChat.currentPage = 1;

ViewerHelperChat.init = function (extLayer) {
  ViewerHelperChat.extLayer = extLayer;
  ViewerHelperChat.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperChat, Lang.ViewerHelperChat);
  ViewerHelperChat.extLayer.select("textarea").first().on("keyup", ViewerHelperChat.atChange.bind(ViewerHelperChat));
  ViewerHelperChat.extLayer.select(".sendmessage").first().on("click", ViewerHelperChat.atSendMessage.bind(ViewerHelperChat));
};

ViewerHelperChat.show = function () {
  ViewerHelperChat.extLayer.dom.style.display = "block";
};

ViewerHelperChat.hide = function () {
  ViewerHelperChat.extLayer.dom.style.display = "none";
};

ViewerHelperChat.addItem = function (item) {
  var template = AppTemplate.ViewerHelperChatItem;
  var extList = ViewerHelperChat.extLayer.select(".items").first();
  var extItem = Ext.get(new Insertion.Bottom(extList.dom, template).element.immediateDescendants().last());

  extItem.dom.id = "chatitem_" + item.id;
  extItem.select(".date .value").first().dom.innerHTML = getFormattedDateTime(parseServerDate(item.date), Context.Config.Language, false);

  if (item.sent)
    extItem.select(".state").first().addClass("sent");
  else
    extItem.select(".state").first().removeClass("sent");

  extItem.select(".message").first().dom.innerHTML = item.message;
  extItem.addClass(item.type);

  return extItem;
};

ViewerHelperChat.load = function (clearItems) {
  var iStart = (ViewerHelperChat.currentPage * ViewerHelperChat.itemsPerPage) - ViewerHelperChat.itemsPerPage;
  Ext.Ajax.request({
    url: ViewerHelperChat.target.loader,
    params: "start=" + iStart + "&limit=-1",
    method: "GET",
    callback: function (sOptions, bSuccess, Response) {
      eval("var data = " + Response.responseText);
      ViewerHelperChat.update(data, clearItems);
    },
    scope: this
  });
};

ViewerHelperChat.update = function (data, clearItems) {
  var extList = ViewerHelperChat.extLayer.select(".items").first();

  if (clearItems) {
    if (data.rows.length == 0) extList.dom.innerHTML = translate(AppTemplate.ViewerHelperChatNoItems, Lang.ViewerHelperChat);
    else extList.dom.innerHTML = "";
  }

  for (var i = 0; i < data.rows.length; i++) {
    var item = data.rows[i];
    this.addItem(item);
  }

  extList.scroll("bottom", (extList.down("li").getHeight() * data.nrows) + 10);
};

ViewerHelperChat.refresh = function () {
  if (ViewerHelperChat.target == null) return;
  if (ViewerHelperChat.target.loader == null) return;

  var extToolbar = ViewerHelperChat.extLayer.select(".toolbar").first();
  if (this.target.closed) extToolbar.hide();
  else extToolbar.show();

  ViewerHelperChat.load(true);
};

ViewerHelperChat.sendMessage = function (message) {
  CommandListener.throwCommand("sendtaskorderchatmessage(" + this.target.idTask + "," + this.target.idOrder + "," + escape(message) + ")");
};

ViewerHelperChat.atChange = function (event) {
  var extTextArea = ViewerHelperChat.extLayer.select("textarea").first();
  var codeKey = event.getKey();
  var message = extTextArea.dom.value;

  if (codeKey == event.ENTER && !event.shiftKey && message != "") {
    ViewerHelperChat.sendMessage(message);
    extTextArea.dom.value = "";
  }

  Event.stop(event);
  return false;
};

ViewerHelperChat.atSendMessage = function () {
  var extTextArea = ViewerHelperChat.extLayer.select("textarea").first();
  var message = extTextArea.dom.value;
  if (message == "") return;
  ViewerHelperChat.sendMessage(message);
  extTextArea.dom.value = "";
};

ViewerHelperMap = new Object;
ViewerHelperMap.extLayer = null;

ViewerHelperMap.init = function (extLayer) {
  ViewerHelperMap.extLayer = extLayer;

  var html = AppTemplate.ViewerHelperMap;
  html = translate(html, Lang.ViewerHelperMap);

  ViewerHelperMap.extLayer.dom.innerHTML = html;
};

ViewerHelperMap.getEditionToolbarLayer = function () {
  return ViewerHelperMap.extLayer.select(".edition .toolbar").first().dom;
};

ViewerHelperMap.getInfoLayer = function () {
  return ViewerHelperMap.extLayer.select(".edition .info").first().dom;
};

ViewerHelperMap.getNavigationToolbarLayer = function () {
  return ViewerHelperMap.extLayer.select(".navigation .toolbar").first().dom;
};

ViewerHelperMap.getSearchLayer = function () {
  return ViewerHelperMap.extLayer.select(".navigation .search").first().dom;
};

ViewerHelperMap.showEditionLayer = function () {
  var extEditionLayer = ViewerHelperMap.extLayer.select(".edition").first();
  extEditionLayer.dom.style.display = "block";
};

ViewerHelperMap.hideEditionLayer = function () {
  var extEditionLayer = ViewerHelperMap.extLayer.select(".edition").first();
  extEditionLayer.dom.style.display = "none";
};

ViewerHelperMap.show = function () {
  ViewerHelperMap.extLayer.dom.style.display = "block";
};

ViewerHelperMap.hide = function () {
  ViewerHelperMap.extLayer.dom.style.display = "none";
};

ViewerHelperMap.refresh = function () {
};

ViewerHelperSource = new Object;
ViewerHelperSource.extLayer = null;
ViewerHelperSource.AddedTermTemplate = "<li><input id='#{id}' type='checkbox' name='addedterm' value='#{code}'><label for='#{id}'>#{label}</label></input></li>";
ViewerHelperSource.termExists = false;

ViewerHelperSource.init = function (extLayer) {
	ViewerHelperSource.extLayer = extLayer;
	ViewerHelperSource.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperSource, Lang.ViewerHelperSource);
	this.addListeners();
};

ViewerHelperSource.addListeners = function () {
	var extDialogTerm = ViewerHelperSource.extLayer.select(".dialog.term").first();
	var extDialogChildren = ViewerHelperSource.extLayer.select(".dialog.children").first();

	var extPublish = ViewerHelperSource.extLayer.select(".button.publish").first();
	extPublish.on("click", ViewerHelperSource.atPublish, ViewerHelperSource);

	var extSelectAll = ViewerHelperSource.extLayer.select("a.selectall").first();
	extSelectAll.on("click", ViewerHelperSource.atSelectAll, ViewerHelperSource);

	var extSelectNone = ViewerHelperSource.extLayer.select("a.selectnone").first();
	extSelectNone.on("click", ViewerHelperSource.atSelectNone, ViewerHelperSource);

	var extLabel = extDialogTerm.select(".field.label .component").first();
	extLabel.on("change", ViewerHelperSource.atLabelChange, ViewerHelperSource);

	var extEnable = ViewerHelperSource.extLayer.select(".button.enable").first();
	extEnable.on("click", ViewerHelperSource.atEnableTerm, ViewerHelperSource);

	var extDisable = ViewerHelperSource.extLayer.select(".button.disable").first();
	extDisable.on("click", ViewerHelperSource.atDisableTerm, ViewerHelperSource);

	var extDelete = ViewerHelperSource.extLayer.select(".button.delete").first();
	extDelete.on("click", ViewerHelperSource.atDeleteTerm, ViewerHelperSource);

	var extSuperTerm = extDialogTerm.select(".field.superterm .component").first();
	extSuperTerm.on("change", ViewerHelperSource.atSuperTermChange, ViewerHelperSource);

	var extChildCode = extDialogChildren.select(".field.childcode .component").first();
	extChildCode.on("keyup", ViewerHelperSource.atChildKeyUp, ViewerHelperSource);
	extChildCode.on("change", ViewerHelperSource.atChildCodeChange, ViewerHelperSource);

	var extChildLabel = extDialogChildren.select(".field.childlabel .component").first();
	extChildLabel.on("keyup", ViewerHelperSource.atChildKeyUp, ViewerHelperSource);

	var extTypeList = extDialogTerm.select(".field.type .component .type");
	extTypeList.each(function (extType) {
		extType.on("change", ViewerHelperSource.atTypeChange, ViewerHelperSource);
	}, this);

	var extAddTag = ViewerHelperSource.extLayer.select(".addtag").first();
	extAddTag.on("click", ViewerHelperSource.atAddTag, ViewerHelperSource);

	var extAddTerm = ViewerHelperSource.extLayer.select(".button.add").first();
	extAddTerm.on("click", ViewerHelperSource.atAddTerm, ViewerHelperSource);
};

ViewerHelperSource.getTarget = function () {
	return this.Target;
};

ViewerHelperSource.setTarget = function (Target) {
	this.Target = Target;
};

ViewerHelperSource.show = function () {
	ViewerHelperSource.extLayer.dom.style.display = "block";
};

ViewerHelperSource.hide = function () {
	ViewerHelperSource.extLayer.dom.style.display = "none";
};

ViewerHelperSource.refreshPublishDialog = function (NewTermList) {

	if (NewTermList == null) return;

	var extDialogPublish = ViewerHelperSource.extLayer.select(".dialog.publish").first();
	var extContainer = extDialogPublish.select(".container").first();
	var extButtonPublish = extDialogPublish.select(".button.publish").first();
	var AddedTermTemplate = new Template(ViewerHelperSource.AddedTermTemplate);

	extDialogPublish.dom.style.display = NewTermList.rows.length > 0 ? "block" : "none";
	extButtonPublish.dom.disabled = true;

	extContainer.dom.innerHTML = "";
	for (var i = 0; i < NewTermList.rows.length; i++) {
		var Term = NewTermList.rows[i];
		var idInput = Ext.id();
		new Insertion.Bottom(extContainer.dom, AddedTermTemplate.evaluate({id: idInput, code: Term.code, label: Term.label}));
		Ext.get(idInput).on("change", ViewerHelperSource.atNewTermChange, ViewerHelperSource);
	}
};

ViewerHelperSource.refreshTermDialog = function (Term) {
	var extDialogTerm = ViewerHelperSource.extLayer.select(".dialog.term").first();
	var extCode = extDialogTerm.select(".field.code .component").first();
	var extLabel = extDialogTerm.select(".field.label .component").first();
	var extButtonEnable = extDialogTerm.select(".button.enable").first();
	var extButtonDisable = extDialogTerm.select(".button.disable").first();
	var extButtonDelete = extDialogTerm.select(".button.delete").first();
	var extTypeList = ViewerHelperSource.extLayer.select(".field.type .component .type");
	var extSuperTerm = ViewerHelperSource.extLayer.select(".field.superterm .component").first();

	if (this.Target.Source == null || (this.Target.Source != null && !this.Target.Source.Editable) || Term == null) {
		extDialogTerm.dom.style.display = "none";
		return;
	}

	extDialogTerm.dom.style.display = "block";

	extTypeList.each(function (extType) {
		if (Term.Type == CGTerm.SUPER_TERM && extType.dom.value == CGTerm.TERM) extType.dom.checked = true;
		else if (Term.Type == extType.dom.value) extType.dom.checked = true;
		else extType.dom.checked = false;
	}, this);

	extCode.dom.value = Term.Code;
	extLabel.dom.value = Term.sLabel;
	extSuperTerm.dom.checked = (Term.Type == CGTerm.SUPER_TERM || Term.Type == CGTerm.CATEGORY);
	extSuperTerm.dom.disabled = (Term.Type == CGTerm.CATEGORY);

	if (this.Target.Source.Type == CGSource.Type.Glossary) {
		this.setFieldDisplay(extDialogTerm, "code", "none");
		this.setFieldDisplay(extDialogTerm, "label", "none");
		this.setFieldDisplay(extDialogTerm, "type", "none");
		this.setFieldDisplay(extDialogTerm, "superterm", "none");
	}
	else {
		this.setFieldDisplay(extDialogTerm, "code", "");
		this.setFieldDisplay(extDialogTerm, "label", "");
		this.setFieldDisplay(extDialogTerm, "type", "");
		this.setFieldDisplay(extDialogTerm, "superterm", "");
	}

	extButtonEnable.dom.style.display = (Term.Enable) ? "none" : "block";
	extButtonDisable.dom.style.display = (!Term.IsNew && Term.Enable) ? "block" : "none";
	extButtonDelete.dom.style.display = (Term.IsNew) ? "block" : "none";

	this.refreshTermDialogTags(Term);
};

ViewerHelperSource.setFieldDisplay = function (dialog, field, display) {
	dialog.select(".field." + field).first().dom.style.display = display;
};

ViewerHelperSource.refreshTermDialogTags = function (Term) {
	var extFieldTags = ViewerHelperSource.extLayer.select(".field.tags").first();
	var extTags = extFieldTags.select(".component ul").first();

	extTags.dom.innerHTML = "";

	if (Term != null) {
		for (var key in Term.aTags) {
			if (isFunction(Term.aTags[key])) continue;
			this.addTag(Term.aTags[key]);
		}
	}

	this.checkNoTags();
};

ViewerHelperSource.getDefaultChildCode = function (Term) {
	if (Term == null) return "";
	return Term.Code + ".";
};

ViewerHelperSource.refreshChildrenDialog = function (Term) {
	var extDialogChildren = ViewerHelperSource.extLayer.select(".dialog.children").first();
	var isThesaurus = this.Target.Source != null && this.Target.Source.Type == CGSource.Type.Thesaurus && this.Target.Source.Editable;

	extDialogChildren.dom.style.display = (isThesaurus && (Term == null || Term.Type != CGTerm.TERM)) ? "block" : "none";
};

ViewerHelperSource.refresh = function () {
	var extDialogTerm = ViewerHelperSource.extLayer.select(".dialog.term").first();
	var extDialogChildren = ViewerHelperSource.extLayer.select(".dialog.children").first();
	var extTitleTerm = extDialogTerm.select(".title").first();
	var extTitleChildren = extDialogChildren.select(".title").first();
	var extMessageList = ViewerHelperSource.extLayer.select(".message");

	if (this.Target == null) {
		ViewerHelperSource.extLayer.dom.style.display = "none";
		return;
	}

	ViewerHelperSource.extLayer.dom.style.display = "block";

	this.refreshPublishDialog(this.Target.NewTermList);
	this.refreshTermDialog(this.Target.Term);
	this.refreshChildrenDialog(this.Target.Term);

	extMessageList.each(function (extMessage) {
		extMessage.dom.style.display = "none";
	}, this);

	if (this.Target.Source == null) return;

	var sLabel = this.Target.Term != null ? this.Target.Term.sLabel : this.Target.Source.sLabel;
	extTitleTerm.dom.innerHTML = sLabel;
	extTitleChildren.dom.innerHTML = Lang.ViewerHelperSource.AddTo + sLabel;
};

ViewerHelperSource.checkNoTags = function () {
	var data = this.getTagsSerialization();
	if (data == "") {
		var extFieldTags = ViewerHelperSource.extLayer.select(".field.tags").first();
		var extList = extFieldTags.select(".component ul").first();
		extList.dom.innerHTML = Lang.ViewerHelperSource.NoTags;
		extFieldTags.addClass("empty");
	}
};

ViewerHelperSource.addTag = function (sTag) {
	var extFieldTags = ViewerHelperSource.extLayer.select(".field.tags").first();
	var extList = extFieldTags.select(".component ul").first();
	var extTemplate = extFieldTags.select(".component .template").first();

	if (extFieldTags.hasClass("empty")) {
		extList.dom.innerHTML = "";
		extFieldTags.removeClass("empty");
	}

	var extTag = Ext.get(new Insertion.Bottom(extList.dom, extTemplate.dom.innerHTML).element.immediateDescendants().last());

	var extTagName = extTag.select("input.name").first();
	extTagName.on("change", ViewerHelperSource.atTagChange, ViewerHelperSource);
	extTagName.on("keydown", ViewerHelperSource.atTagKeyDown, ViewerHelperSource);

	var extTagValue = extTag.select("input.value").first();
	extTagValue.on("change", ViewerHelperSource.atTagChange, ViewerHelperSource);
	extTagValue.on("keydown", ViewerHelperSource.atTagKeyDown, ViewerHelperSource);

	if (sTag != null) {
		aTag = sTag.split("=");
		extTagName.dom.value = aTag.length > 1 ? aTag[0] : "";
		extTagValue.dom.value = aTag.length > 1 ? aTag[1] : aTag[0];
	}

	var extDeleteTag = extTag.select(".deletetag").first();
	extDeleteTag.on("click", ViewerHelperSource.atDeleteTag.bind(this, extDeleteTag), ViewerHelperSource);

	extTagName.dom.focus();
};

ViewerHelperSource.deleteTag = function (extDeleteTag) {
	var extTag = extDeleteTag.up("li");
	extTag.dom.remove();
	this.checkNoTags();
	this.saveTermAttribute("tags", this.getTagsSerialization());
};

ViewerHelperSource.getTagsSerialization = function () {
	var extTagList = ViewerHelperSource.extLayer.select(".field.tags .component ul li");
	var tags = new Array();

	extTagList.each(function (extTag) {
		var extTagName = extTag.select("input.name").first();
		var extTagValue = extTag.select("input.value").first();
		var value = extTagName.dom.value;
		if (value != "") value += "=";
		tags.push(value + extTagValue.dom.value);
	}, this);

	return SerializerData.serializeSet(tags);
};

ViewerHelperSource.addTerm = function () {
	var extChildCode = ViewerHelperSource.extLayer.select(".field.childcode .component").first();
	var extChildLabel = ViewerHelperSource.extLayer.select(".field.childlabel .component").first();
	var Code = this.getDefaultChildCode(this.Target.Term) + extChildCode.dom.value;
	var sLabel = extChildLabel.dom.value;

	if (ViewerHelperSource.termExists) return;
	if (sLabel == "") return;

	CommandListener.throwCommand("addsourceterm(" + this.Target.Source.Id + "," + Code + "," + escape(sLabel) + ")");
	extChildCode.dom.value = "";
	extChildLabel.dom.value = "";
	extChildCode.focus();
};

ViewerHelperSource.saveTermAttribute = function (Code, sValue) {
	CommandListener.throwCommand("savesourcetermattribute(" + this.Target.Term.IdSource + "," + this.Target.Term.Code + "," + Code + "," + escape(sValue) + ")");
};

ViewerHelperSource.saveTermType = function (PreviousType, Type) {
	CommandListener.throwCommand("savesourcetermtype(" + this.Target.Term.IdSource + "," + this.Target.Term.Code + "," + PreviousType + "," + Type + ")");
	this.Target.Term.Type = Type;
};

ViewerHelperSource.deleteTerm = function () {
	CommandListener.throwCommand("deletesourceterm(" + this.Target.Term.IdSource + "," + this.Target.Term.Code + ")");
};

ViewerHelperSource.checkExistsTerm = function (Code) {
	CommandListener.throwCommand("checkexistssourceterm(" + this.Target.Source.Id + "," + Code + ")");
};

ViewerHelperSource.publish = function (Code, sValue) {
	var extContainer = ViewerHelperSource.extLayer.select(".dialog.publish .container").first();
	var extInputList = extContainer.select("input");
	var terms = "";

	extInputList.each(function (extInput) {
		if (extInput.dom.checked) terms += extInput.dom.value + ",";
	}, this);
	if (terms.length > 0) terms = terms.substring(0, terms.length - 1);

	CommandListener.throwCommand("publishsourceterms(" + this.Target.Source.Id + "," + escape(terms) + ")");
};

ViewerHelperSource.showTermExists = function () {
	var extMessageExists = ViewerHelperSource.extLayer.select(".message.term.exists").first();
	extMessageExists.dom.style.display = "inline";
	ViewerHelperSource.termExists = true;
};

ViewerHelperSource.hideTermExists = function () {
	var extMessageExists = ViewerHelperSource.extLayer.select(".message.term.exists").first();
	extMessageExists.dom.style.display = "none";
	ViewerHelperSource.termExists = false;
};

//#############################################################################################################

ViewerHelperSource.atAddTag = function () {
	this.addTag();
};

ViewerHelperSource.atDeleteTag = function (extTag) {
	this.deleteTag(extTag);
};

ViewerHelperSource.atTagChange = function (extInput) {
	this.saveTermAttribute("tags", this.getTagsSerialization());
};

ViewerHelperSource.atTagKeyDown = function (oEvent, DOMInput) {
	var extInput = Ext.get(DOMInput);
	var codeKey = oEvent.getKey();

	if (codeKey != oEvent.TAB) return;
	if (oEvent.shiftKey) return;
	if (DOMInput.value == "") return;

	if (extInput.hasClass("value")) {
		var extTag = extInput.up("li");
		if (extTag.getNextSibling() == null) {
			this.addTag();
			return false;
		}
	}

};

ViewerHelperSource.atAddTerm = function () {
	this.addTerm();
};

ViewerHelperSource.atLabelChange = function () {
	var sLabel = ViewerHelperSource.extLayer.select(".field.label .component").first().dom.value;
	this.saveTermAttribute("label", sLabel);
};

ViewerHelperSource.atTypeChange = function () {
	var extTypeList = ViewerHelperSource.extLayer.select(".field.type .component .type");
	var extDialogChildren = ViewerHelperSource.extLayer.select(".dialog.children").first();
	var extSuperTerm = ViewerHelperSource.extLayer.select(".field.superterm .component").first();
	var Type = "";

	extTypeList.each(function (extType) {
		if (extType.dom.checked) Type = extType.dom.value;
	}, this);

	extSuperTerm.dom.checked = (Type == 2);
	extSuperTerm.dom.disabled = (Type == 2);

	extDialogChildren.dom.style.display = (Type != CGTerm.TERM) ? "block" : "none";
	this.saveTermType(this.Target.Term.Type, Type);
};

ViewerHelperSource.atSuperTermChange = function () {
	var extDialogChildren = ViewerHelperSource.extLayer.select(".dialog.children").first();
	var Checked = ViewerHelperSource.extLayer.select(".field.superterm .component").first().dom.checked;

	if (Checked) this.saveTermType(this.Target.Term.Type, CGTerm.SUPER_TERM);
	else this.saveTermType(this.Target.Term.Type, CGTerm.TERM);

	extDialogChildren.dom.style.display = (Checked) ? "block" : "none";
};

ViewerHelperSource.atChildKeyUp = function (oEvent) {
	var codeKey = oEvent.getKey();
	if (codeKey == oEvent.ENTER) this.addTerm();
	return false;
};

ViewerHelperSource.atChildCodeChange = function () {
	var Code = ViewerHelperSource.extLayer.select(".field.childcode .component").first().dom.value;
	this.hideTermExists();
	this.checkExistsTerm(Code);
};

ViewerHelperSource.atPublish = function () {
	this.publish();
};

ViewerHelperSource.atEnableTerm = function () {
	this.saveTermAttribute("enable", true);
};

ViewerHelperSource.atDisableTerm = function () {
	this.saveTermAttribute("enable", false);
};

ViewerHelperSource.atDeleteTerm = function () {
	this.deleteTerm();
};

ViewerHelperSource.atNewTermChange = function () {
	var extDialogPublish = ViewerHelperSource.extLayer.select(".dialog.publish").first();
	var extNewTermList = extDialogPublish.select(".container input");
	var extButtonPublish = extDialogPublish.select(".button.publish").first();
	var disabled = true;

	for (var i = 0; i < extNewTermList.elements.length; i++) {
		var DOMNewTerm = extNewTermList.elements[i];
		if (DOMNewTerm.checked) {
			disabled = false;
			break;
		}
	}

	extButtonPublish.dom.disabled = disabled;
};

ViewerHelperSource.atSelectAll = function () {
	var extDialogPublish = ViewerHelperSource.extLayer.select(".dialog.publish").first();
	var extNewTermList = extDialogPublish.select(".container input");
	var extButtonPublish = extDialogPublish.select(".button.publish").first();

	for (var i = 0; i < extNewTermList.elements.length; i++) {
		var DOMNewTerm = extNewTermList.elements[i];
		DOMNewTerm.checked = true;
	}

	extButtonPublish.dom.disabled = false;
};

ViewerHelperSource.atSelectNone = function () {
	var extDialogPublish = ViewerHelperSource.extLayer.select(".dialog.publish").first();
	var extNewTermList = extDialogPublish.select(".container input");
	var extButtonPublish = extDialogPublish.select(".button.publish").first();

	for (var i = 0; i < extNewTermList.elements.length; i++) {
		var DOMNewTerm = extNewTermList.elements[i];
		DOMNewTerm.checked = false;
	}

	extButtonPublish.dom.disabled = true;
};

ViewerHelperRole = new Object;
ViewerHelperRole.extLayer = null;

ViewerHelperRole.init = function (extLayer) {
  ViewerHelperRole.extLayer = extLayer;
  ViewerHelperRole.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperRole, Lang.ViewerHelperRole);

  var extExpires = ViewerHelperRole.extLayer.select(".field.expiredate .expires").first();
  extExpires.on("change", ViewerHelperRole.atExpiresChange.bind(this, extExpires.dom));

  this.initType();
  this.initDefinitionTypes();
  this.initUsers();
  this.initPartners();
  this.initDatePickers();
  this.initToolbar();
};

ViewerHelperRole.initType = function () {
  var extTypeList = ViewerHelperRole.extLayer.select(".field.type .component .type");
  extTypeList.each(function (extType) {
    extType.on("change", ViewerHelperRole.atTypeChange, ViewerHelperRole);
  }, this);
};

ViewerHelperRole.initDefinitionTypes = function (Target) {
  var extSelector = ViewerHelperRole.extLayer.select(".field.definitiontype .component").first();
  extSelector.on("change", ViewerHelperRole.atDefinitionTypeChange.bind(this));
  extSelector.on("focus", ViewerHelperRole.atDefinitionTypeFocus.bind(this));
};

ViewerHelperRole.initUsers = function () {

  var Options = new Object();
  Options.DataSource = { Remote: true };
  Options.itemsPerPage = 6;
  Options.selfScroller = true;
  Options.Templates = new Object();
  Options.Templates.Item = "&lt;div class='label'&gt;\#\{label\}&lt;/div&gt;&lt;div class='body email'&gt;\#\{email\}&lt;/div&gt;";
  Options.Templates.NoItems = "&lt;div class='noitems'&gt;" + Lang.ViewerHelperRole.NoUsers + "&lt;/div&gt;";
  Options.Templates.CountItems = "\#\{count\} " + Lang.ViewerHelperRole.Users;

  this.usersViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
  this.usersViewer.setWizardLayer(null);
  this.usersViewer.layerId = Ext.id();
  this.usersViewer.setDataSourceUrls(Kernel.getLoadFederationUsersLink(), null);
  this.usersViewer.onBoundItem = ViewerHelperRole.atBoundUser.bind(this);
  this.usersViewer.onShowItem = ViewerHelperRole.atSelectUser.bind(this);

  ViewerHelperRole.extLayer.select(".dialog.users .usersbox").first().dom.id = this.usersViewer.layerId;
};

ViewerHelperRole.initPartners = function () {
  this.initServices();
  this.initFeeders();
};

ViewerHelperRole.initServices = function () {
  var Options = new Object();
  Options.DataSource = { Remote: false };
  Options.itemsPerPage = 6;
  Options.selfScroller = true;
  Options.Templates = new Object();
  Options.Templates.Item = "&lt;div class='label'&gt;\#\{label\}&lt;/div&gt;&lt;div class='body'&gt;&lt;/div&gt;";
  Options.Templates.NoItems = "&lt;div class='noitems'&gt;" + Lang.ViewerHelperRole.NoServices + "&lt;/div&gt;";
  Options.Templates.CountItems = "\#\{count\} " + Lang.ViewerHelperRole.Services;

  this.servicesViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
  this.servicesViewer.setWizardLayer(null);
  this.servicesViewer.layerId = Ext.id();
  this.servicesViewer.Options.DataSource.Items = { rows: [], nrows: 0 };
  this.servicesViewer.Options.DataSource.Groups = [];
  this.servicesViewer.State.CurrentPage = 1;
  this.servicesViewer.onShowItem = ViewerHelperRole.atSelectPartnerService.bind(this);

  ViewerHelperRole.extLayer.select(".dialog.services .servicesbox").first().dom.id = this.servicesViewer.layerId;
};

ViewerHelperRole.initFeeders = function () {
  var Options = new Object();
  Options.DataSource = { Remote: false };
  Options.itemsPerPage = 6;
  Options.selfScroller = true;
  Options.Templates = new Object();
  Options.Templates.Item = "&lt;div class='label'&gt;\#\{label\}&lt;/div&gt;&lt;div class='body'&gt;&lt;/div&gt;";
  Options.Templates.NoItems = "&lt;div class='noitems'&gt;" + Lang.ViewerHelperRole.NoFeeders + "&lt;/div&gt;";
  Options.Templates.CountItems = "\#\{count\} " + Lang.ViewerHelperRole.Feeders;

  this.feedersViewer = new CGListViewer(Options, Context.Config.Language, Context.Config.ImagesPath);
  this.feedersViewer.setWizardLayer(null);
  this.feedersViewer.layerId = Ext.id();
  this.feedersViewer.Options.DataSource.Items = { rows: [], nrows: 0 };
  this.feedersViewer.Options.DataSource.Groups = [];
  this.feedersViewer.State.CurrentPage = 1;
  this.feedersViewer.onShowItem = ViewerHelperRole.atSelectPartnerFeeder.bind(this);

  ViewerHelperRole.extLayer.select(".dialog.feeders .feedersbox").first().dom.id = this.feedersViewer.layerId;
};

ViewerHelperRole.initDatePickers = function (Target) {

  this.beginPicker = new DatePicker();
  this.beginPicker.onChange = ViewerHelperRole.atBeginDateChange.bind(this);
  this.beginPicker.init(ViewerHelperRole.extLayer.select(".field.begindate .picker").first(), Context.Config.Language);
  this.beginPicker.setDate(new Date());
  this.beginPicker.setPrecision(DATE_PRECISION_SECONDS);
  this.beginPicker.refresh();
  this.beginPicker.hide();

  var extBeginComponent = ViewerHelperRole.extLayer.select(".field.begindate .component").first();
  extBeginComponent.on("click", ViewerHelperRole.atBeginDateClick.bind(this, extBeginComponent));
  extBeginComponent.on("blur", ViewerHelperRole.atBeginDateBlur.bind(this));

  this.expirePicker = new DatePicker();
  this.expirePicker.onChange = ViewerHelperRole.atExpireDateChange.bind(this);
  this.expirePicker.init(ViewerHelperRole.extLayer.select(".field.expiredate .picker").first(), Context.Config.Language);
  this.expirePicker.setDate(new Date());
  this.expirePicker.setPrecision(DATE_PRECISION_SECONDS);
  this.expirePicker.refresh();
  this.expirePicker.hide();

  var extExpiresComponent = ViewerHelperRole.extLayer.select(".field.expiredate .component").first();
  extExpiresComponent.on("click", ViewerHelperRole.atExpireDateClick.bind(this, extExpiresComponent));
  extExpiresComponent.on("blur", ViewerHelperRole.atExpireDateBlur.bind(this));
};

ViewerHelperRole.initToolbar = function (Target) {

  var extAddButton = ViewerHelperRole.extLayer.select(".toolbar .add");
  extAddButton.on("click", ViewerHelperRole.atAddButtonClick.bind(this));

  var extAddOtherButton = ViewerHelperRole.extLayer.select(".toolbar .addother");
  extAddOtherButton.on("click", ViewerHelperRole.atAddOtherButtonClick.bind(this));

  var extSaveButton = ViewerHelperRole.extLayer.select(".toolbar .save");
  extSaveButton.on("click", ViewerHelperRole.atSaveButtonClick.bind(this));
};

ViewerHelperRole.setTarget = function (Target) {
  this.Target = Target;
};

ViewerHelperRole.show = function () {
  ViewerHelperRole.extLayer.dom.style.display = "block";
};

ViewerHelperRole.hide = function () {
  ViewerHelperRole.extLayer.dom.style.display = "none";
};

ViewerHelperRole.refreshHeader = function () {
  var extDialog = ViewerHelperRole.extLayer.select(".dialog").first();
  var extTitle = extDialog.select(".title").first();
  var extSubtitle = extDialog.select(".subtitle").first();
  var extStates = extDialog.select(".states").first();
  var extDates = extDialog.select(".dates").first();

  if (this.Target.View == "save") {
    var extSubtitleSpan = extSubtitle.select("span").first();
    extTitle.dom.innerHTML = Lang.ViewerHelperRole.Save;
    extSubtitleSpan.dom.innerHTML = this.Role.sLabel;
    extSubtitle.dom.style.display = "block";
    extStates.dom.style.display = "inline";
    extDates.dom.style.display = "block";

    extDialog.removeClass("expires_true");
    extDialog.removeClass("expires_false");
    extDialog.removeClass("expired_true");
    extDialog.removeClass("expired_false");
    extDialog.removeClass("began_true");
    extDialog.removeClass("began_false");
    extDialog.addClass(this.Role.expires ? "expires_true" : "expires_false");
    extDialog.addClass(this.Role.expired ? "expired_true" : "expired_false");
    extDialog.addClass(this.Role.began ? "began_true" : "began_false");

    var formattedBeginDate = getFormattedDateTime(this.Role.dtBeginDate, Context.Config.Language, false);
    var formattedExpireDate = getFormattedDateTime(this.Role.dtExpireDate, Context.Config.Language, false);
    extDialog.select(".dates .date.pending").first().dom.innerHTML = Lang.ViewerHelperRole.DatePending.replace("\#\{formattedBeginDate\}", formattedBeginDate);
    extDialog.select(".dates .date.active").first().dom.innerHTML = Lang.ViewerHelperRole.DateActive.replace("\#\{formattedBeginDate\}", formattedBeginDate);
    extDialog.select(".dates .date.expires").first().dom.innerHTML = Lang.ViewerHelperRole.DateExpires.replace("\#\{formattedExpireDate\}", formattedExpireDate);
    extDialog.select(".dates .date.expired.begin").first().dom.innerHTML = Lang.ViewerHelperRole.DateExpiredBegin.replace("\#\{formattedBeginDate\}", formattedBeginDate);
    extDialog.select(".dates .date.expired.end").first().dom.innerHTML = Lang.ViewerHelperRole.DateExpiredEnd.replace("\#\{formattedExpireDate\}", formattedExpireDate);
  }
  else {
    extStates.dom.style.display = "none";
    extDates.dom.style.display = "none";

    extTitle.dom.innerHTML = Lang.ViewerHelperRole.Add;
    extSubtitle.dom.style.display = "none";
  }
};

ViewerHelperRole.enableUser = function () {
  Ext.get("role_type_user").dom.checked = true;
  ViewerHelperRole.extLayer.select(".dialog.users").first().dom.style.display = "block";
};

ViewerHelperRole.enableService = function () {
  Ext.get("role_type_service").dom.checked = true;
  ViewerHelperRole.extLayer.select(".dialog.services").first().dom.style.display = "block";
};

ViewerHelperRole.enableFeeder = function () {
  Ext.get("role_type_feeder").dom.checked = true;
  ViewerHelperRole.extLayer.select(".dialog.feeders").first().dom.style.display = "block";
};

ViewerHelperRole.disableUser = function () {
  Ext.get("role_type_user").dom.checked = false;
  ViewerHelperRole.extLayer.select(".dialog.users").first().dom.style.display = "none";
};

ViewerHelperRole.disableService = function () {
  Ext.get("role_type_service").dom.checked = false;
  ViewerHelperRole.extLayer.select(".dialog.services").first().dom.style.display = "none";
};

ViewerHelperRole.disableFeeder = function () {
  Ext.get("role_type_feeder").dom.checked = false;
  ViewerHelperRole.extLayer.select(".dialog.feeders").first().dom.style.display = "none";
};

ViewerHelperRole.refreshType = function () {
  var Type = this.Role.Type;

  this.disableUser();
  this.disableService();
  this.disableFeeder();

  if (Type == "user") this.enableUser();
  else if (Type == "service") this.enableService();
  else if (Type == "feeder") this.enableFeeder();
};

ViewerHelperRole.refreshDefinitionTypes = function () {
  var extSelector = ViewerHelperRole.extLayer.select(".field.definitiontype .component").first();
  var extSubtitle = ViewerHelperRole.extLayer.select(".subtitle .definitiontype").first();
  var rows = State.RoleDefinitionList.rows;

  extSelector.dom.innerHTML = "";
  for (var i = 0; i < rows.length; i++) {
    var Role = rows[i];

    if (this.Role.Code == Role.code) extSubtitle.dom.innerHTML = Role.label;

    var DOMOption = document.createElement("option");
    DOMOption.value = Role.code;
    DOMOption.selected = (this.Role.Code == Role.code);
    DOMOption.text = Role.label;
    extSelector.dom.appendChild(DOMOption);
  }

  if (this.Target.View != "save") extSelector.removeClass("readonly");
  else extSelector.addClass("readonly");
};

ViewerHelperRole.refreshUsers = function () {
  var enableUsers = this.Target.Definition.enableUsers;

  Ext.get("role_type_user").dom.style.display = (enableUsers) ? "inline" : "none";
  Ext.get("role_type_user_label").dom.style.display = (enableUsers) ? "inline" : "none";

  if (!enableUsers)
    return;

  this.usersViewer.State.CurrentPage = 1;
  this.usersViewer.render(this.usersViewer.layerId);
};

ViewerHelperRole.refreshPartners = function () {
  var enableServices = this.Target.Definition.PartnerServiceOntologies != null;
  var enableFeeders = this.Target.Definition.PartnerFeederOntologies != null;

  Ext.get("role_type_service").dom.style.display = (enableServices) ? "inline" : "none";
  Ext.get("role_type_service_label").dom.style.display = (enableServices) ? "inline" : "none";

  Ext.get("role_type_feeder").dom.style.display = (enableFeeders) ? "inline" : "none";
  Ext.get("role_type_feeder_label").dom.style.display = (enableFeeders) ? "inline" : "none";

  if (!enableServices && !enableFeeders)
    return;

  var serviceGroups = feederGroups = new Object();
  var serviceItems = feederItems = new Array();
  serviceItems.rows = feederItems.rows = new Array();
  serviceItems.nrows = feederItems.nrows = 0;

  for (var i = 0; i < this.Target.PartnerList.items.length; i++) {
    var partner = this.Target.PartnerList.items[i];
    ViewerHelperRole.refreshServices(partner, arrayToMap(this.Target.Definition.PartnerServiceOntologies), serviceItems, serviceGroups);
    ViewerHelperRole.refreshFeeders(partner, arrayToMap(this.Target.Definition.PartnerFeederOntologies), feederItems, feederGroups);
  }

  this.servicesViewer.Options.DataSource.Items = serviceItems;
  this.servicesViewer.Options.DataSource.Groups = serviceGroups;
  this.servicesViewer.State.CurrentPage = 1;
  this.servicesViewer.render(this.servicesViewer.layerId);

  this.feedersViewer.Options.DataSource.Items = feederItems;
  this.feedersViewer.Options.DataSource.Groups = feederGroups;
  this.feedersViewer.State.CurrentPage = 1;
  this.feedersViewer.render(this.feedersViewer.layerId);
};

ViewerHelperRole.refreshServices = function (partner, ontologies, items, groups) {
  if (ontologies == null) return;

  for (var j = 0; j < partner.services.items.length; j++) {
    var service = partner.services.items[j];
    if (ontologies[service.ontology] == null) continue;
    items.rows.push(service);
    items.nrows++;
    service.group = partner.id;
    if (groups[partner.id] == null)
      groups[partner.id] = partner;
  }
};

ViewerHelperRole.refreshFeeders = function (partner, ontologies, items, groups) {
  if (ontologies == null) return;

  for (var j = 0; j < partner.feeders.items.length; j++) {
    var feeder = partner.feeders.items[j];
    if (ontologies[feeder.ontology] == null) continue;
    items.rows.push(feeder);
    items.nrows++;
    feeder.group = partner.id;
    if (groups[partner.id] == null)
      Groups[partner.id] = partner;
  }
};

ViewerHelperRole.refreshExpireDateStatus = function (expires) {
  var extExpireDate = ViewerHelperRole.extLayer.select(".field.expiredate .component").first();

  if (expires) extExpireDate.dom.style.display = "block";
  else extExpireDate.dom.style.display = "none";
};

ViewerHelperRole.refreshDatePickers = function () {
  var extBeginDate = ViewerHelperRole.extLayer.select(".field.begindate .component").first();
  var extExpires = ViewerHelperRole.extLayer.select(".field.expiredate .expires").first();
  var extExpireDate = ViewerHelperRole.extLayer.select(".field.expiredate .component").first();
  var currentTime = (new Date()).getTime();

  if (this.Role.dtBeginDate.getTime() <= currentTime) extBeginDate.addClass("readonly");
  else extBeginDate.removeClass("readonly");

  if (this.Role.dtExpireDate != null && this.Role.dtExpireDate.getTime() <= currentTime) {
    extExpires.dom.disabled = true;
    extExpireDate.addClass("readonly");
  }
  else {
    extExpires.dom.disabled = false;
    extExpireDate.removeClass("readonly");
  }

  this.beginPicker.setDate(this.Role.dtBeginDate);
  extBeginDate.dom.value = getFormattedDateTime(this.Role.dtBeginDate, Context.Config.Language, true, true, true);

  this.expirePicker.setRange(this.Role.dtBeginDate, null);
  extExpires.dom.checked = this.Role.dtExpireDate != null;
  if (this.Role.dtExpireDate != null) {
    extExpireDate.dom.value = this.Role.dtExpireDate != null ? getFormattedDateTime(this.Role.dtExpireDate, Context.Config.Language, true, true, true) : "";
    this.expirePicker.setDate(this.Role.dtExpireDate);
  }
  else extExpireDate.dom.value = "";

  this.refreshExpireDateStatus(extExpires.dom.checked);
};

ViewerHelperRole.refreshHistoryRoles = function () {
  var extHistoryRoles = ViewerHelperRole.extLayer.select(".historyroles").first();
  var extHistoryRolesItems = ViewerHelperRole.extLayer.select(".historyroles .historyitems").first();

  extHistoryRoles.dom.style.display = (this.Target.View == "add") ? "none" : "";
  if (this.Target.View == "add") return;

  if (this.historyViewer == null) {
    this.historyViewer = new CGListViewer(this.Target.HistoryOptions, Context.Config.Language, Context.Config.ImagesPath);
    this.historyViewer.setWizardLayer(null);
    this.historyViewer.onBoundItem = ViewerHelperRole.atBoundHistoryRole;
  }

  if (extHistoryRolesItems.dom.id == null || extHistoryRolesItems.dom.id == "") extHistoryRolesItems.dom.id = Ext.id();

  this.historyViewer.setDataSourceUrls(Kernel.getLoadGroupedRoleListLink(this.Target.Definition.Code, this.Role.GroupedId), null);
  this.historyViewer.render(extHistoryRolesItems.dom.id);
};

ViewerHelperRole.refreshToolbar = function () {
  var extAddButton = ViewerHelperRole.extLayer.select(".toolbar .button.add").first();
  var extAddOtherButton = ViewerHelperRole.extLayer.select(".toolbar .button.addother").first();
  var extSaveButton = ViewerHelperRole.extLayer.select(".toolbar .button.save").first();

  extAddButton.dom.style.display = (this.Target.View != "save" && !this.Role.expired) ? "block" : "none";
  extAddOtherButton.dom.style.display = (this.Role.expired) ? "block" : "none";
  extSaveButton.dom.style.display = (this.Target.View == "save" && !this.Role.expired) ? "block" : "none";
};

ViewerHelperRole.refresh = function () {
  var extMessageList = ViewerHelperRole.extLayer.select(".message");

  if (this.Target == null) {
    ViewerHelperRole.extLayer.dom.style.display = "none";
    return;
  }

  if (this.Target.Role != null) this.Role = this.Target.Role;
  else {
    var Definition = this.Target.Definition;
    this.Role = new CGRole();
    this.Role.Code = this.Target.Definition.Code;
    if (this.Target.RoleType != null) this.Role.Type = this.Target.RoleType;
    else this.Role.Type = Definition.getType();
  }

  var dtBeginDate = this.Role.dtBeginDate;
  var dtExpireDate = (this.Target.View == "save") ? this.Role.dtExpireDate : null;
  this.Role.dtBeginDate = dtBeginDate;
  this.Role.dtExpireDate = dtExpireDate;

  this.beginPicker.hide();
  this.expirePicker.hide();

  ViewerHelperRole.extLayer.dom.style.display = "block";

  var extDialog = ViewerHelperRole.extLayer.select(".dialog").first();
  extDialog.removeClass("add");
  extDialog.removeClass("save");
  extDialog.addClass(this.Target.View);

  this.refreshHeader();
  this.refreshDefinitionTypes();
  this.refreshType();
  this.refreshUsers();
  this.refreshPartners();
  this.refreshDatePickers();
  this.refreshHistoryRoles();
  this.refreshToolbar();

  extMessageList.each(function (extMessage) {
    extMessage.dom.style.display = "none";
  }, this);
};

ViewerHelperRole.getType = function () {
  var extTypeList = ViewerHelperRole.extLayer.select(".field.type .component .type");
  var Type = "";

  extTypeList.each(function (extType) {
    if (extType.dom.checked) Type = extType.dom.value;
  }, this);

  return Type;
};

ViewerHelperRole.calculateExpireDate = function () {
  var dtBeginDate = this.Role.dtBeginDate;
  var extSelectExpireDate = ViewerHelperRole.extLayer.select(".message.expire").first();

  if (dtBeginDate == null)
    return;

  extSelectExpireDate.dom.style.display = (this.Role.dtExpireDate != null && this.Role.dtExpireDate.getTime() < dtBeginDate.getTime()) ? "block" : "none";
};

ViewerHelperRole.hideBeginPicker = function () {
  this.beginPicker.hide();
};

ViewerHelperRole.hideExpirePicker = function () {
  this.expirePicker.hide();
};

ViewerHelperRole.add = function () {
  var hasErrors = false;
  var command = "";
  var beginDate = toServerDate(this.Role.dtBeginDate);
  var expireDate = toServerDate(this.Role.dtExpireDate);

  var Type = this.getType();
  if (Type == "user") {
    command = "adduserrole(" + this.Role.Code + "," + this.Role.User.getId() + "," + this.Role.User.getName() + "," + beginDate + "," + expireDate + ")";

    var extSelectUser = ViewerHelperRole.extLayer.select(".message.user").first();
    extSelectUser.dom.style.display = "none";
    if (this.Role.User.getId() == null) {
      extSelectUser.dom.style.display = "block";
      hasErrors = true;
    }
  }
  else if (Type == "service") {
    command = "addservicerole(" + this.Role.Code + "," + this.Role.PartnerId + "," + this.Role.PartnerServiceName + "," + beginDate + "," + expireDate + ")";

    var extSelectService = ViewerHelperRole.extLayer.select(".message.service").first();
    extSelectService.dom.style.display = "none";
    if (this.Role.PartnerId == null || this.Role.PartnerServiceName == null) {
      extSelectService.dom.style.display = "block";
      hasErrors = true;
    }
  }
  else {
    command = "addfeederrole(" + this.Role.Code + "," + this.Role.PartnerId + "," + this.Role.PartnerServiceName + "," + beginDate + "," + expireDate + ")";

    var extSelectFeeder = ViewerHelperRole.extLayer.select(".message.feeder").first();
    extSelectFeeder.dom.style.display = "none";
    if (this.Role.PartnerId == null || this.Role.PartnerServiceName == null) {
      extSelectFeeder.dom.style.display = "block";
      hasErrors = true;
    }
  }

  var extSelectBeginDate = ViewerHelperRole.extLayer.select(".message.begin").first();
  if (extSelectBeginDate.dom.style.display != "none") hasErrors = true;

  var extSelectExpireDate = ViewerHelperRole.extLayer.select(".message.expire").first();
  if (extSelectExpireDate.dom.style.display != "none") hasErrors = true;

  if (hasErrors) return;

  this.Role.dtBeginDate.setSeconds(-1);
  this.Role.dtBeginDate.setMinutes(-1);
  this.Role.dtBeginDate.setHours(-1);
  this.Role.dtBeginDate.setDate(this.Role.dtBeginDate.getDate() + 1);

  CommandListener.throwCommand(command);
};

ViewerHelperRole.save = function () {
  if (this.Role.User.getId() == "undefined") return;

  var command = "";
  var Type = this.Role.Type;
  var beginDate = toServerDate(this.Role.dtBeginDate);
  var expireDate = toServerDate(this.Role.dtExpireDate);

  if (Type == "user") {
    command = "saveuserrole";
    CommandListener.throwCommand(command + "(" + this.Role.Id + "," + this.Role.User.getId() + "," + beginDate + "," + expireDate + ")");
  }
  else {
    if (Type == "service") command = "saveservicerole";
    else command = "savefeederrole";
    CommandListener.throwCommand(command + "(" + this.Role.Id + "," + this.Role.PartnerId + "," + this.Role.PartnerServiceName + "," + beginDate + "," + expireDate + ")");
  }
};

ViewerHelperRole.atBoundHistoryRole = function (Sender, Item) {
  if (Item.beginDate) Item.formattedBeginDate = getFormattedDateTime(parseServerDate(Item.beginDate), Context.Config.Language, false);
  if (Item.expireDate) Item.formattedExpireDate = getFormattedDateTime(parseServerDate(Item.expireDate), Context.Config.Language, false);
  else Item.formattedExpireDate = "";
};

ViewerHelperRole.atSearchResultChange = function (record) {
  var extSelectUser = ViewerHelperRole.extLayer.select(".message.user").first();

  extSelectUser.dom.style.display = "none";
  this.Role.User.setId(record.data.id);

  return true;
};

ViewerHelperRole.atBeginDateChange = function (record) {
  var extBeginDate = ViewerHelperRole.extLayer.select(".dialog .field.begindate .component").first();
  var extSelectBeginDate = ViewerHelperRole.extLayer.select(".message.begin").first();

  if (this.beginPickerTimeout) window.clearTimeout(this.beginPickerTimeout);
  extBeginDate.dom.focus();

  extSelectBeginDate.dom.style.display = "none";

  this.Role.dtBeginDate = this.beginPicker.getDate();
  extBeginDate.dom.value = getFormattedDateTime(this.Role.dtBeginDate, Context.Config.Language, true, true, true);

  this.calculateExpireDate();

  this.expirePicker.setRange(this.Role.dtBeginDate, null);
  this.expirePicker.refresh();
};

ViewerHelperRole.atExpireDateChange = function (record) {
  var extExpireDate = ViewerHelperRole.extLayer.select(".field.expiredate .component").first();
  var extSelectExpireDate = ViewerHelperRole.extLayer.select(".message.expire").first();

  if (this.expirePickerTimeout) window.clearTimeout(this.expirePickerTimeout);
  extExpireDate.dom.focus();

  this.Role.dtExpireDate = this.expirePicker.getDate();
  extSelectExpireDate.dom.style.display = (this.Role.dtExpireDate.getTime() < this.Role.dtBeginDate) ? "block" : "none";
  extExpireDate.dom.value = getFormattedDateTime(this.Role.dtExpireDate, Context.Config.Language, true, true, true);
};

ViewerHelperRole.atBeginDateClick = function (extComponent) {
  if (extComponent.hasClass("readonly")) return;
  if (this.beginPickerTimeout) window.clearTimeout(this.beginPickerTimeout);
  if (this.beginPicker.isVisible()) window.setTimeout(ViewerHelperRole.hideBeginPicker.bind(this), 150);
  else this.beginPicker.show();
};

ViewerHelperRole.atBeginDateBlur = function () {
  this.beginPickerTimeout = window.setTimeout(ViewerHelperRole.hideBeginPicker.bind(this), 150);
};

ViewerHelperRole.atExpireDateClick = function (extComponent) {
  if (extComponent.hasClass("readonly")) return;
  if (this.expirePickerTimeout) window.clearTimeout(this.expirePickerTimeout);
  this.expirePicker.setDate(this.Role.dtExpireDate);
  this.expirePicker.refresh();
  if (this.expirePicker.isVisible()) window.setTimeout(ViewerHelperRole.hideExpirePicker.bind(this), 150);
  else this.expirePicker.show();
};

ViewerHelperRole.atExpireDateBlur = function () {
  this.expirePickerTimeout = window.setTimeout(ViewerHelperRole.hideExpirePicker.bind(this), 150);
};

ViewerHelperRole.atExpiresChange = function (DOMExpires) {

  if (DOMExpires.checked)
    this.calculateExpireDate();
  else
    this.Role.dtExpireDate = null;

  this.refreshExpireDateStatus(DOMExpires.checked);
};

ViewerHelperRole.atAddOtherButtonClick = function () {
  var Role = new CGRole();
  Role.clone(this.Role);
  this.Role = Role;
  this.add();
};

ViewerHelperRole.atAddButtonClick = function () {
  this.add();
};

ViewerHelperRole.atSaveButtonClick = function () {
  this.save();
};

ViewerHelperRole.atDefinitionTypeChange = function () {
  var DOMDefinitionType = ViewerHelperRole.extLayer.select(".field.definitiontype .component").first().dom;
  this.Role.Code = DOMDefinitionType.options[DOMDefinitionType.selectedIndex].value;
};

ViewerHelperRole.atDefinitionTypeFocus = function () {
  var DOMDefinitionType = ViewerHelperRole.extLayer.select(".field.definitiontype .component").first().dom;

  if (this.Target.View == "save")
    DOMDefinitionType.blur();
};

ViewerHelperRole.atTypeChange = function () {
  this.Role.Type = this.getType();
  this.refreshType();
};

ViewerHelperRole.atBoundUser = function (listViewer, item) {
  if (item.email == "") item.email = Lang.ViewerHelperRole.EmailNotDefined;
};

ViewerHelperRole.atSelectUser = function (listViewer, item) {
  this.Role.User.setId(item.id);
  this.Role.User.setName(item.name);
};

ViewerHelperRole.atSelectPartnerService = function (listViewer, item) {
  this.Role.PartnerId = item.group;
  this.Role.PartnerServiceName = item.name;
};

ViewerHelperRole.atSelectPartnerFeeder = function (listViewer, item) {
  this.Role.PartnerId = item.group;
  this.Role.PartnerServiceName = item.name;
};

ViewerHelperList = new Object;
ViewerHelperList.extLayer = null;

ViewerHelperList.init = function (extLayer) {
  ViewerHelperList.extLayer = extLayer;
  ViewerHelperList.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperList, Lang.ViewerHelperList);
};

ViewerHelperList.show = function () {
  ViewerHelperList.extLayer.dom.style.display = "block";
};

ViewerHelperList.hide = function () {
  ViewerHelperList.extLayer.dom.style.display = "none";
};

ViewerHelperList.refresh = function () {
};

ViewerSidebar = new Object();
ViewerSidebar.extLayer = null;
ViewerSidebar.activeHelper = null;
ViewerSidebar.templates = new Object();

ViewerSidebar.init = function (extLayer) {
  ViewerSidebar.extLayer = extLayer;

  ViewerSidebar.extLayer.dom.innerHTML = translate(AppTemplate.ViewerHelperSidebar, Lang.ViewerHelperSidebar);
  ViewerSidebar.templates.add = new Template(translate(AppTemplate.ViewerHelperSidebarAdd, Lang.ViewerHelperSidebar));
  ViewerSidebar.templates.copy = new Template(translate(AppTemplate.ViewerHelperSidebarCopy, Lang.ViewerHelperSidebar));
  ViewerSidebar.templates.download = new Template(translate(AppTemplate.ViewerHelperSidebarDownload, Lang.ViewerHelperSidebar));
  ViewerSidebar.templates.print = new Template(translate(AppTemplate.ViewerHelperSidebarPrint, Lang.ViewerHelperSidebar));
  ViewerSidebar.templates.tool = new Template(translate(AppTemplate.ViewerHelperSidebarTool, Lang.ViewerHelperSidebar));
  ViewerSidebar.templates.custom = new Template(translate(AppTemplate.ViewerHelperSidebarCustom, Lang.ViewerHelperSidebar));

  ViewerHelperPage.init(extLayer.down(".help"));
  ViewerHelperEditors.init(extLayer.down(".component").down(".editors"));
  ViewerHelperPreview.init(extLayer.down(".component").down(".preview"));
  ViewerHelperObservers.init(extLayer.down(".observers"));
  ViewerHelperRevisionList.init(extLayer.down(".component").down(".revisionlist"));
  ViewerHelperMap.init(extLayer.down(".component").down(".map"));
  ViewerHelperSource.init(extLayer.down(".component").down(".source"));
  ViewerHelperRole.init(extLayer.down(".component").down(".role"));
  ViewerHelperList.init(extLayer.down(".component").down(".list"));
  ViewerHelperChat.init(extLayer.down(".chat"));

  ViewerHelperObservers.onBeforeShow = ViewerSidebar.atObserversBeforeShow;
};

ViewerSidebar.setTarget = function (target) {
  ViewerSidebar.target = target;
};

ViewerSidebar.isHelperEditorsActive = function () {
  return ViewerSidebar.activeHelper == Helper.EDITORS;
};

ViewerSidebar.isHelperPreviewActive = function () {
  return ViewerSidebar.activeHelper == Helper.PREVIEW;
};

ViewerSidebar.isHelperListActive = function () {
  return ViewerSidebar.activeHelper == Helper.LIST;
};

ViewerSidebar.getHelper = function (name) {
  if (name == Helper.PAGE) return ViewerHelperPage;
  else if (name == Helper.EDITORS) return ViewerHelperEditors;
  else if (name == Helper.PREVIEW) return ViewerHelperPreview;
  else if (name == Helper.OBSERVERS) return ViewerHelperObservers;
  else if (name == Helper.REVISIONLIST) return ViewerHelperRevisionList;
  else if (name == Helper.MAP) return ViewerHelperMap;
  else if (name == Helper.SOURCE) return ViewerHelperSource;
  else if (name == Helper.ROLE) return ViewerHelperRole;
  else if (name == Helper.LIST) return ViewerHelperList;
  else if (name == Helper.CHAT) return ViewerHelperChat;
};

ViewerSidebar.activateHelper = function (name) {
  var helper = ViewerSidebar.getHelper(name);

  if (helper != null) {
    helper.show();
    helper.refresh();
  }

  ViewerSidebar.activeHelper = name;
};

ViewerSidebar.hide = function () {
  var extAddHelper = ViewerSidebar.extLayer.down(".add");
  var extToolsHelper = ViewerSidebar.extLayer.down(".tools");

  extAddHelper.dom.style.display = "none";
  extToolsHelper.dom.style.display = "none";

  ViewerHelperPage.hide();
  ViewerHelperEditors.hide();
  ViewerHelperPreview.hide();
  ViewerHelperObservers.hide();
  ViewerHelperRevisionList.hide();
  ViewerHelperMap.hide();
  ViewerHelperSource.hide();
  ViewerHelperRole.hide();
  ViewerHelperList.hide();
  ViewerHelperChat.hide();
  ViewerSidebar.activateHelper(null);
};

ViewerSidebar.show = function () {
};

ViewerSidebar.refreshHelper = function (itemsContent, style) {
  if (itemsContent != "") {
    var extHelper = ViewerSidebar.extLayer.down(style);
    var extList = extHelper.down("ul");
    extHelper.dom.style.display = "block";
    extList.dom.innerHTML = itemsContent;
    CommandListener.capture(extList);
  }
};

ViewerSidebar.getTemplate = function (operation) {

  if (operation.parameters.command != null)
    return ViewerSidebar.templates.custom;

  if (operation.type == Operation.ADD) return ViewerSidebar.templates.add;
  else if (operation.type == Operation.COPY) return ViewerSidebar.templates.copy;
  else if (operation.type == Operation.DOWNLOAD) return ViewerSidebar.templates.download;
  else if (operation.type == Operation.PRINT) return ViewerSidebar.templates.print;
  else if (operation.type == Operation.TOOL) return ViewerSidebar.templates.tool;
  else if (operation.type == Operation.CUSTOM) return ViewerSidebar.templates.custom;

  return null;
};

ViewerSidebar.refresh = function () {

  if (this.target == null) return;

  var addItems = "";
  var copyItems = "";
  var downloadItems = "";
  var printItems = "";
  var toolItems = "";
  var customItems = "";

  ViewerSidebar.showObserverHelper = false;

  this.target.operationSet = this.target.operationSet.sort(function(Operation1, Operation2) {
    if (Operation1.label == null || Operation2.label == null)
      return -1;
    return Operation1.label.localeCompare(Operation2.label);
  });

  for (var i = 0; i < this.target.operationSet.length; i++) {
    var operation = this.target.operationSet[i];
    var parameters = operation.parameters;
    var template = this.getTemplate(operation);

    parameters.label = operation.label;
    parameters.display = operation.visible == null || operation.visible ? "inline-block" : "none";

    if (parameters.code == null) parameters.code = "";

    if (operation.type == Operation.ADD)
      addItems += template.evaluate(parameters);
    else if (operation.type == Operation.COPY)
      copyItems += template.evaluate(parameters);
    else if (operation.type == Operation.DOWNLOAD)
      downloadItems += template.evaluate(parameters);
    else if (operation.type == Operation.PRINT)
      printItems += template.evaluate(parameters);
    else if (operation.type == Operation.TOOL)
      toolItems += template.evaluate(parameters);
    else if (operation.type == Operation.CUSTOM)
      customItems += template.evaluate(parameters);
    else if (operation.type == Operation.WIDGET) {
      var extComponent = ViewerSidebar.extLayer.down(".component");
      extComponent.show();
    }
    else if (operation.type == Operation.HELP && ViewerHelperPage.getTarget() != null)
      ViewerHelperPage.show();
    else if (operation.type == Operation.OBSERVER)
      ViewerSidebar.showObserverHelper = true;
  }

  addItems = addItems + copyItems;
  toolItems = downloadItems + printItems + toolItems + customItems;

  this.refreshHelper(addItems, ".add");
  this.refreshHelper(toolItems, ".tools");
};

ViewerSidebar.showOperation = function (name) {
  var extCommand = this.extLayer.select(".command." + name).first();
  if (extCommand) extCommand.dom.style.display = "block";
};

ViewerSidebar.hideOperation = function (name) {
  var extCommand = this.extLayer.select(".command." + name).first();
  if (extCommand) extCommand.dom.style.display = "none";
};

ViewerSidebar.enableOperation = function (name) {
  var extCommand = this.extLayer.select(".command." + name).first();
  if (extCommand) extCommand.removeClass(CLASS_DISABLED);
};

ViewerSidebar.disableOperation = function (name) {
  var extCommand = this.extLayer.select(".command." + name).first();
  if (extCommand) extCommand.addClass(CLASS_DISABLED);
};

ViewerSidebar.atObserversBeforeShow = function () {
  return ViewerSidebar.showObserverHelper;
};

// implements event manager methods

ViewerSidebar.nodeBeforeOpened = function (Sender) {
};

ViewerSidebar.nodeFocused = function (Sender) {
  if (!Sender.DOMNode) return;
  CommandListener.throwCommand("loadnodehelperpage(" + Sender.Node.Code + ")");
};

ViewerSidebar.nodeViewFocused = function (Sender) {
  if (!Sender.DOMNode) return;
  CommandListener.throwCommand("loadnodehelperpage(" + Sender.Node.Code + ")");
};

ViewerSidebar.nodeFieldFocused = function (Sender) {
  if (ViewerSidebar.isHelperEditorsActive()) return;
  CommandListener.throwCommand("loadhelpereditors()");
};

ViewerSidebar.nodeFieldBlur = function (Sender) {
};

ViewerSidebar.previewFocused = function (Sender) {
  if (ViewerSidebar.isHelperPreviewActive()) return;
  CommandListener.throwCommand("loadhelperpreview()");
  ViewerSidebar.activateHelper(Helper.PREVIEW);
};

ViewerSidebar.listViewerFocused = function (Sender) {
  if (ViewerSidebar.isHelperListActive()) return;
  CommandListener.throwCommand("loadhelperlistviewer()");
  ViewerSidebar.activateHelper(Helper.LIST);
};

ViewTaskList = new Object;
ViewTaskList.sLayerName = null;

ViewTaskList.init = function (sLayerName) {
  ViewTaskList.DOMLayer = $(sLayerName);
};

ViewTaskList.getDOM = function () {
  return ViewTaskList.DOMLayer;
};

ViewTaskList.show = function () {
  ViewTaskList.DOMLayer.show();
};

ViewTaskList.hide = function () {
  ViewTaskList.DOMLayer.hide();
};

ViewTaskList.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewTaskList.refresh = function () {
  var Constructor;

  if (ViewTaskList.sContent == null) return;

  var extLayer = Ext.get(ViewTaskList.DOMLayer);
  var IdDOMLayer = (ViewTaskList.DOMLayer.id) ? ViewTaskList.DOMLayer.id : Ext.id();

  var sContent = ViewTaskList.sContent;
  sContent = setIdToElementContent(IdDOMLayer, sContent);

  extLayer.dom = replaceDOMElement(extLayer.dom, sContent);
  var DOMLayer = $(IdDOMLayer);

  if (DOMLayer == null) return;
  ViewTaskList.DOMLayer = DOMLayer;

  extLayer = Ext.get(ViewTaskList.DOMLayer);
  ViewTaskList.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewTaskList.DOMLayer);
  CommandListener.capture(ViewTaskList.DOMLayer);

  EventManager.disableNotifications();
  ViewTaskList.DOMLayer.init();
  EventManager.enableNotifications();
};

ViewTrash = new Object;
ViewTrash.sLayerName = null;

//PUBLIC
ViewTrash.init = function (sLayerName) {
  ViewTrash.DOMLayer = $(sLayerName);
};

ViewTrash.getDOM = function () {
  return ViewTrash.DOMLayer;
};

ViewTrash.show = function () {
  ViewTrash.DOMLayer.show();
};

ViewTrash.hide = function () {
  ViewTrash.DOMLayer.hide();
};

ViewTrash.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewTrash.refresh = function () {
  var Constructor;

  if (ViewTrash.sContent == null) return;

  ViewTrash.DOMLayer.innerHTML = ViewTrash.sContent;
  ViewTrash.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewTrash.DOMLayer);
  CommandListener.capture(ViewTrash.DOMLayer);

  EventManager.disableNotifications();
  ViewTrash.DOMLayer.init();
  EventManager.enableNotifications();
};

ViewDashboard = new Object;
ViewDashboard.sLayerName = null;

//PUBLIC
ViewDashboard.init = function (sLayerName) {
  ViewDashboard.DOMLayer = $(sLayerName);
};

ViewDashboard.getDOM = function () {
  return ViewDashboard.DOMLayer;
};

ViewDashboard.show = function () {
  ViewDashboard.DOMLayer.show();
};

ViewDashboard.hide = function () {
  ViewDashboard.DOMLayer.hide();
};

ViewDashboard.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewDashboard.refresh = function () {
  var Constructor;

  if (ViewDashboard.sContent == null) return;

  ViewDashboard.DOMLayer.innerHTML = ViewDashboard.sContent;
  ViewDashboard.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewDashboard.DOMLayer);
  CommandListener.capture(ViewDashboard.DOMLayer);

  EventManager.disableNotifications();
  ViewDashboard.DOMLayer.init();
  EventManager.enableNotifications();
};

ViewAnalysisboard = new Object;
ViewAnalysisboard.sLayerName = null;

//PUBLIC
ViewAnalysisboard.init = function (sLayerName) {
  ViewAnalysisboard.DOMLayer = $(sLayerName);
};

ViewAnalysisboard.getDOM = function () {
  return ViewAnalysisboard.DOMLayer;
};

ViewAnalysisboard.show = function () {
  ViewAnalysisboard.DOMLayer.show();
};

ViewAnalysisboard.hide = function () {
  ViewAnalysisboard.DOMLayer.hide();
};

ViewAnalysisboard.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewAnalysisboard.refresh = function () {
  var Constructor;

  if (ViewAnalysisboard.sContent == null) return;

  ViewAnalysisboard.DOMLayer.innerHTML = ViewAnalysisboard.sContent;
  ViewAnalysisboard.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewAnalysisboard.DOMLayer);
  CommandListener.capture(ViewAnalysisboard.DOMLayer);

  EventManager.disableNotifications();
  ViewAnalysisboard.DOMLayer.init();
  EventManager.enableNotifications();
};

ViewSourceList = new Object;
ViewSourceList.sLayerName = null;

ViewSourceList.init = function (sLayerName) {
  ViewSourceList.DOMLayer = $(sLayerName);
};

ViewSourceList.getDOM = function () {
  return ViewSourceList.DOMLayer;
};

ViewSourceList.show = function () {
  ViewSourceList.DOMLayer.show();
};

ViewSourceList.hide = function () {
  ViewSourceList.DOMLayer.hide();
};

ViewSourceList.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewSourceList.refresh = function () {
  var Constructor;

  if (ViewSourceList.sContent == null) return;

  ViewSourceList.DOMLayer.innerHTML = ViewSourceList.sContent;
  ViewSourceList.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewSourceList.DOMLayer);
  CommandListener.capture(ViewSourceList.DOMLayer);

  EventManager.disableNotifications();
  ViewSourceList.DOMLayer.init();
  EventManager.enableNotifications();
};

ViewSource = new Object;
ViewSource.sLayerName = null;

//PUBLIC
ViewSource.init = function (sLayerName) {
  ViewSource.DOMLayer = $(sLayerName);
};

ViewSource.getDOM = function () {
  return ViewSource.DOMLayer;
};

ViewSource.show = function () {
  ViewSource.DOMLayer.show();
};

ViewSource.hide = function () {
  ViewSource.DOMLayer.hide();
};

ViewSource.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewSource.refresh = function () {
  var Constructor;

  if (ViewSource.sContent == null) return;

  ViewSource.DOMLayer.innerHTML = ViewSource.sContent;
  ViewSource.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewSource.DOMLayer);
  CommandListener.capture(ViewSource.DOMLayer);

  EventManager.disableNotifications();
  ViewSource.DOMLayer.init();
  EventManager.enableNotifications();
};

ViewRoleList = new Object;
ViewRoleList.sLayerName = null;

ViewRoleList.init = function (sLayerName) {
  ViewRoleList.DOMLayer = $(sLayerName);
};

ViewRoleList.getDOM = function () {
  return ViewRoleList.DOMLayer;
};

ViewRoleList.show = function () {
  ViewRoleList.DOMLayer.show();
};

ViewRoleList.hide = function () {
  ViewRoleList.DOMLayer.hide();
};

ViewRoleList.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewRoleList.refresh = function () {
  var Constructor;

  if (ViewRoleList.sContent == null) return;

  ViewRoleList.DOMLayer.innerHTML = ViewRoleList.sContent;
  ViewRoleList.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewRoleList.DOMLayer);
  CommandListener.capture(ViewRoleList.DOMLayer);

  EventManager.disableNotifications();
  ViewRoleList.DOMLayer.init();
  EventManager.enableNotifications();
};

ViewRole = new Object;
ViewRole.sLayerName = null;

//PUBLIC
ViewRole.init = function (sLayerName) {
  ViewRole.DOMLayer = $(sLayerName);
};

ViewRole.getDOM = function () {
  return ViewRole.DOMLayer;
};

ViewRole.show = function () {
  ViewRole.DOMLayer.show();
};

ViewRole.hide = function () {
  ViewRole.DOMLayer.hide();
};

ViewRole.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewRole.refresh = function () {
  var Constructor;

  if (ViewRole.sContent == null) return;

  ViewRole.DOMLayer.innerHTML = ViewRole.sContent;
  ViewRole.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewRole.DOMLayer);
  CommandListener.capture(ViewRole.DOMLayer);

  EventManager.disableNotifications();
  ViewRole.DOMLayer.init();
  EventManager.enableNotifications();
};

ViewNotificationList = new Object;

ViewNotificationList.sLayerName = null;

//PUBLIC
ViewNotificationList.init = function (sLayerName) {
  ViewNotificationList.DOMLayer = $(sLayerName);
};

ViewNotificationList.getDOM = function () {
  return ViewNotificationList.DOMLayer;
};

ViewNotificationList.show = function () {
  ViewNotificationList.DOMLayer.show();
};

ViewNotificationList.hide = function () {
  ViewNotificationList.DOMLayer.hide();
};

ViewNotificationList.setContent = function (sContent) {
  this.sContent = sContent;
};

ViewNotificationList.refresh = function () {
  var Constructor;

  if (ViewNotificationList.sContent == null) return;

  ViewNotificationList.DOMLayer.innerHTML = ViewNotificationList.sContent;
  ViewNotificationList.sContent = "";

  Constructor = Extension.getHelperItemConstructor();
  Constructor.init(ViewNotificationList.DOMLayer);
  CommandListener.capture(ViewNotificationList.DOMLayer);

  EventManager.disableNotifications();
  ViewNotificationList.DOMLayer.init();
  EventManager.enableNotifications();
};

CGLayoutMainRight = function () {
  this.Layout = null;
  this.bCollapsed = false;
  this.bClosed = false;
  this.onCollapseList = new Array();
};

CGLayoutMainRight.EVENT = "_event_";

CGLayoutMainRight.prototype.init = function (InnerLayout) {
  InnerLayout.add("east", new Ext.ContentPanel(Literals.Layout.MainRight, {title: Lang.LayoutMainRight.HelperTitle}));

  this.Layout = InnerLayout;

  this.TabPanel = new Ext.TabPanel(Literals.TabPanels.MainRight);
  this.TabPanel.addTab(Literals.TabPanels.MainRightHelper, Lang.LayoutMainRight.HelperTitle, $(Literals.TabPanels.MainRightHelper).innerHTML);
  this.TabPanel.activate(Literals.TabPanels.MainRightHelper);

  var Region = this.Layout.getRegion("east");
  Region.on("collapsed", this.atCollapsed, this);
  Region.on("expanded", this.atExpanded, this);

  ViewerSidebar.init(Ext.get(Literals.Viewers.HelperSideBar));
  var helper = ViewerSidebar.getHelper(Helper.EDITORS);
  helper.onLock = this.atLock.bind(this);
  helper.onUnLock = this.atUnLock.bind(this);

  $(Literals.Layout.MainRight).style.height = "";
};

CGLayoutMainRight.prototype.loadStateFromCookies = function () {
    var value = getCookie(this.collapseCookie());
    if (value != null && value == "true") this.collapse();
    else this.expand();
};

CGLayoutMainRight.prototype.setPanelTitle = function (sName, sTitle) {
  this.TabPanel.getTab(sName).setText(sTitle);
  this.Layout.getRegion("east").getActivePanel().setTitle(sTitle);
};

CGLayoutMainRight.prototype.activateTab = function (Id) {
  this.TabPanel.activate(Id);
  this.unLock();
};

CGLayoutMainRight.prototype.collapse = function () {
  this.Layout.getRegion('east').collapse();
};

CGLayoutMainRight.prototype.isExpanded = function () {
  if (this.bClosed) return false;
  if (this.bCollapsed) return false;
  return true;
};

CGLayoutMainRight.prototype.expand = function () {
  if (this.bCollapsed) return;
  this.Layout.getRegion('east').show();
  this.Layout.getRegion('east').expand();
  this.bClosed = false;
};

CGLayoutMainRight.prototype.close = function () {
  this.Layout.getRegion('east').hide();
  this.bClosed = true;
};

CGLayoutMainRight.prototype.refresh = function () {
};

CGLayoutMainRight.prototype.lock = function () {
  var extLayer = this.TabPanel.bodyEl.up(".x-layout-panel-body");
  var extLockLayer = extLayer.select(CSS_LOCKED).first();
  if (extLockLayer == null) new Insertion.Bottom(extLayer.dom, "<div class='" + CLASS_LOCKED + "'></div>").element.immediateDescendants().last();
};

CGLayoutMainRight.prototype.unLock = function () {
  var extLayer = this.TabPanel.bodyEl.up(".x-layout-panel-body");
  var extLockLayer = extLayer.select(CSS_LOCKED).first();
  if (extLockLayer != null) extLockLayer.remove();
};

CGLayoutMainRight.prototype.registerCollapse = function (key, onCollapse) {
  this.onCollapseList[CGLayoutMainRight.EVENT + key] = onCollapse;
};

CGLayoutMainRight.prototype.unRegisterCollapse = function (key) {
  delete this.onCollapseList[CGLayoutMainRight.EVENT + key];
};

CGLayoutMainRight.prototype.notifyCollapse = function () {
  for (var key in this.onCollapseList) {
    if (key.indexOf(CGLayoutMainRight.EVENT) != -1)
      this.onCollapseList[key]();
  }
};

CGLayoutMainRight.prototype.atCollapsed = function () {
  this.bCollapsed = true;
  setCookie(this.collapseCookie(), "true", 30);
  this.notifyCollapse();
};

CGLayoutMainRight.prototype.atExpanded = function () {
  this.bCollapsed = false;
  setCookie(this.collapseCookie(), "false", 30);
};

CGLayoutMainRight.prototype.atLock = function () {
  this.lock();
};

CGLayoutMainRight.prototype.atUnLock = function () {
  this.unLock();
};

CGLayoutMainRight.prototype.getHeight = function () {
  return this.Layout.getRegion('east').bodyEl.getHeight();
};

CGLayoutMainRight.prototype.collapseCookie = function () {
    return "monet-mainright-collapse-" + Account.Id;
};

CGLayoutMain = function () {
  this.nestedPanel = null;
  this.innerLayout = null;
  this.Header = null;
  this.Center = null;
  this.Right = null;
};

CGLayoutMain.prototype.init = function (CommonLayout) {
  var iWidth = CommonLayout.el.getWidth();
  var iCenterWidth = Math.floor(iWidth * 60 / 100);
  var iEastWidth = Math.floor(iWidth * 40 / 100);

  this.innerLayout = new Ext.BorderLayout($(Literals.Layout.Main), {
    //north:  { split:false, initialSize: Widths.Layout.MainHeader, titlebar: false },
    center: { initialSize: iCenterWidth, titlebar: false, autoScroll: true, closeOnTab: true },
    east: { split: true, initialSize: iEastWidth, minSize: Widths.Layout.MainRight, maxSize: (iEastWidth * 2), titlebar: true, collapsible: true, animate: true, hideTabs: true, collapsed: true }
  });

  this.nestedPanel = new Ext.NestedLayoutPanel(this.innerLayout, Literals.Layout.Main);
  CommonLayout.add('center', this.nestedPanel);

  this.initLayout();
};

CGLayoutMain.prototype.initLayout = function () {

  this.innerLayout.beginUpdate();

//  this.Header = new CGLayoutMainHeader();
//  this.Header.init(this.innerLayout);

  this.Center = new CGLayoutMainCenter();
  this.Center.init(this.innerLayout);

  this.Right = new CGLayoutMainRight();
  this.Right.init(this.innerLayout);

  this.innerLayout.restoreState();
  this.innerLayout.endUpdate();
};

CGLayoutMain.prototype.refresh = function () {
//  this.Header.refresh();
  this.Center.refresh();
  this.Right.refresh();
};

function Furniture() {
};

Furniture.DESKTOP = "desktop";
Furniture.DASHBOARD = "dashboard";
Furniture.NEWS = "news";
Furniture.ROLES = "roles";
Furniture.TASKBOARD = "taskboard";
Furniture.TASKTRAY = "tasktray";
Furniture.TRASH = "trash";

ViewFurnitureSet = new Object;
ViewFurnitureSet.account = null;
ViewFurnitureSet.banner = false;
ViewFurnitureSet.hideBannerTimeout = null;

ViewFurnitureSet.init = function (DOMLayer) {
  ViewFurnitureSet.DOMLayer = DOMLayer;

  var html = AppTemplate.ViewFurnitureSet;
  html = translate(html, Lang.ViewFurnitureSet);

  $(ViewFurnitureSet.DOMLayer).innerHTML = html;

  this.itemTemplate = new Template(translate(AppTemplate.ViewFurnitureSetItem, Lang.ViewFurnitureSet));
  this.bannerItemTemplate = new Template(translate(AppTemplate.ViewFurnitureSetBannerItem, Lang.ViewFurnitureSet));

  ViewFurnitureSet.initBehaviours();
};

ViewFurnitureSet.initBehaviours = function() {
  var extBanner = Ext.get(ViewFurnitureSet.DOMLayer).select(".banner").first();
  extBanner.on("mouseover", ViewFurnitureSet.stopHideBanner.bind(ViewFurnitureSet));
  extBanner.on("mouseout", ViewFurnitureSet.continueHideBanner.bind(ViewFurnitureSet));
};

ViewFurnitureSet.setTarget = function (target) {
  ViewFurnitureSet.account = target.account;
  ViewFurnitureSet.banner = target.banner;
};

ViewFurnitureSet.show = function () {
  if (!$(ViewFurnitureSet.DOMLayer)) return;
  $(ViewFurnitureSet.DOMLayer).show();
};

ViewFurnitureSet.hide = function () {
  if (!$(ViewFurnitureSet.DOMLayer)) return;
  $(ViewFurnitureSet.DOMLayer).hide();
};

ViewFurnitureSet.refresh = function () {
  if (!ViewFurnitureSet.account) return;

  var content = "";
  var links = ViewFurnitureSet.account.Links;
  var extList = Ext.get(ViewFurnitureSet.DOMLayer).select("ul").first();

  for (var i = 0; i < links.length; i++) {
    var link = links[i];
    var furniture = new Object();
    ViewFurnitureSet.fillFurniture(furniture, link);
    content += this.itemTemplate.evaluate(furniture);
  }

  this.refreshBanner();

  extList.dom.innerHTML = content;
  CommandListener.capture(extList.dom);
};

ViewFurnitureSet.refreshBanner = function () {
  var NotificationList = ViewFurnitureSet.account.getLastNotifications();

  if (NotificationList.unread <= 0 || !ViewFurnitureSet.banner)
    return;

  var bannerContent = "";
  for (var i=0; i<Account.Notifications.rows.length; i++) {
    var Notification = Account.Notifications.rows[i];
    Notification.command = getMonetLinkAction(Notification.target);
    if (!Notification.read) bannerContent += this.bannerItemTemplate.evaluate(Notification);
  }

  var extBanner = Ext.get(ViewFurnitureSet.DOMLayer).select(".banner").first();
  var extBannerList = extBanner.select("ul").first();
  extBannerList.dom.innerHTML = bannerContent;

  ViewFurnitureSet.showBanner();

  CommandListener.capture(extBanner.dom);
};

ViewFurnitureSet.showBanner = function () {
  var extBanner = Ext.get(ViewFurnitureSet.DOMLayer).select(".banner").first();
  extBanner.dom.style.display = "block";
  extBanner.dom.style.marginTop = "0";
  extBanner.dom.style.top = "0";
  extBanner.dom.style.opacity = 1;

  extBanner.dom.style.display = "block";
  new Effect.Move(extBanner.dom, { x: 0, y: "-" + (extBanner.getHeight() + 10), duration: 1 });
  this.hideBannerTimeout = window.setTimeout(ViewFurnitureSet.hideBanner.bind(this), 4000);

  Ext.get(document.body).on("click", ViewFurnitureSet.hideBanner, ViewFurnitureSet);
};

ViewFurnitureSet.hideBanner = function () {
  var extBanner = Ext.get(ViewFurnitureSet.DOMLayer).select(".banner").first();
  new Effect.DropOut(extBanner.dom, { duration: 1 });
  Ext.get(document.body).un("click", ViewFurnitureSet.hideBanner, ViewFurnitureSet);
};

ViewFurnitureSet.stopHideBanner = function () {
  if (this.hideBannerTimeout != null)
    window.clearTimeout(this.hideBannerTimeout);
};

ViewFurnitureSet.continueHideBanner = function() {
  this.hideBannerTimeout = window.setTimeout(ViewFurnitureSet.hideBanner.bind(this), 1000);
};

ViewFurnitureSet.getCommand = function (link) {
	if (link.type == Furniture.DESKTOP) return "showenvironment(" + link.id + ")";
	else if (link.type == Furniture.DASHBOARD) return "showdashboard(" + link.id + "," + link.view + ")";
	else if (link.type == Furniture.NEWS) return "shownews()";
	else if (link.type == Furniture.ROLES) return "showrolelist()";
	else if (link.type == Furniture.TASKBOARD) {
		if (link.view == null)
			link.view = "active";
		return "showtasklist(taskboard," + link.view + ")";
	}
	else if (link.type == Furniture.TASKTRAY) {
		if (link.view == null)
			link.view = "alive";
		return "showtasklist(tasktray," + link.view + ")";
	}
  else if (link.type == Furniture.TRASH) return "showtrash(trash)";
};

ViewFurnitureSet.fillFurniture = function (furniture, link) {

  if (link.type == Furniture.DESKTOP)
    furniture.label = link.label.toLowerCase();
  else if (link.type == Furniture.DASHBOARD)
    furniture.label = link.label.toLowerCase();
  else if (link.type == Furniture.NEWS) {
    var NotificationList = ViewFurnitureSet.account.getLastNotifications();
    furniture.label = Lang.ViewFurnitureSet.News;
    furniture.bubble = NotificationList.unread > 0 ? NotificationList.unread : null;
  }
  else if (link.type == Furniture.ROLES)
    furniture.label = Lang.ViewFurnitureSet.Roles;
  else if (link.type == Furniture.TASKBOARD) {
    var count = ViewFurnitureSet.account.getPendingTasks("taskboard");
    furniture.label = Lang.ViewFurnitureSet.Taskboard;
    furniture.bubble = count > 0 ? count : null;
  }
  else if (link.type == Furniture.TASKTRAY) {
    var count = ViewFurnitureSet.account.getPendingTasks("tasktray");
    furniture.label = Lang.ViewFurnitureSet.Tasktray;
    furniture.bubble = count > 0 ? count : null;
  }
  else if (link.type == Furniture.TRASH)
    furniture.label = Lang.ViewFurnitureSet.Trash;

  furniture.id = link.id;
  furniture.command = ViewFurnitureSet.getCommand(link);
  furniture.type = link.type;
  furniture.fullLabel = furniture.label;
  furniture.shortLabel = shortValue(furniture.label, 10, 5, 2);
  furniture.highlighted = furniture.bubble != null && furniture.bubble > 0 ? "true" : "";
  furniture.active = ViewFurnitureSet.isFurnitureActive(furniture) ? "true" : "";
};

ViewFurnitureSet.isFurnitureActive = function (furniture) {
  var activeFurniture = State.ActiveFurniture;

  if (activeFurniture.type == "desktop" || activeFurniture.type == "dashboard")
    return activeFurniture.id == furniture.id;

  return activeFurniture.type == furniture.type;
};

CGLayoutFooter = function () {
  this.CurrentNode = null;
};

CGLayoutFooter.prototype.initLogos = function () {
  var extFooterLogosPanel = Ext.get(Literals.FooterLogosPanel);

  extFooterLogosPanel.dom.innerHTML = translate(extFooterLogosPanel.dom.innerHTML, Lang.LayoutFooter);

  var extModelImage = extFooterLogosPanel.select(CSS_MODEL_IMAGE).first();
  extModelImage.dom.src = Context.Config.ModelLogoSplashUrl;
  extModelImage.dom.title = Context.Config.ModelLabel;
  extModelImage.dom.alt = Context.Config.ModelLabel;
};

CGLayoutFooter.prototype.init = function (CommonLayout) {
  CommonLayout.add("south", new Ext.ContentPanel(Literals.Layout.Footer, {title: Lang.LayoutFooter.Title}));
  ViewFurnitureSet.init(Literals.Views.FurnitureSet);
  this.initLogos();
};

CGLayoutFooter.prototype.setCurrentNode = function (CurrentNode) {
  this.CurrentNode = CurrentNode;
};

CGLayoutFooter.prototype.refresh = function () {
};

CGWidget = function (extWidget) {
  this.extWidget = extWidget;
  if (this.extWidget) {
    this.extWidget.dom.focus = CGWidget.prototype.focus.bind(this);
    this.extWidget.dom.blur = CGWidget.prototype.blur.bind(this);
    this.extWidget.setVisibilityMode(Element.DISPLAY);
  }
  this.Target = null;
  this.Editor = null;
  this.extMessageEmpty = null;
  this.WidgetRequired = null;
  this.aStores = new Array();
  this.bIsReady = false;
  this.ViewMode = null;
  this.isCustomColumnModel = false;
  this.applyBehaviours();
};

CGWidget.prototype.createOptions = function () {
  new Insertion.Bottom(this.extWidget.dom, WidgetOptionsTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));
  var extOptions = this.extWidget.select(CSS_WIDGET_ELEMENT_OPTIONS).first();
  this.extOptionClearValue = extOptions.select(CSS_WIDGET_ELEMENT_CLEAR_VALUE).first();
  this.extOptionClearValue.on("click", this.atClearValue, this);
  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();
};

CGWidget.prototype.applyBehaviours = function () {
  if (!this.extWidget) return;

  this.extSuper = this.extWidget.down(CSS_WIDGET_ELEMENT_SUPER);
  this.extValue = this.extWidget.down(CSS_WIDGET_ELEMENT_COMPONENT);

  if (this.extValue == null) {
    this.setId(this.extWidget.dom.id);
    return;
  }

  if (this.atFocused) this.extValue.on("focus", this.atFocused, this);
  if (this.atBlur) this.extValue.on("blur", this.atBlur, this);
  if (this.atChange) this.extValue.on('change', this.atChange, this);
  if (this.atKeyDown) this.extValue.on("keydown", this.atKeyDown, this);
  if (this.atKeyPress) this.extValue.on("keypress", this.atKeyPress, this);
  if (this.atKeyUp) this.extValue.on("keyup", this.atKeyUp, this);

  this.setId(this.extValue.dom.id);
};

CGWidget.prototype.destroyOptions = function () {
  if (this.extOptionClearValue) this.extOptionClearValue.un("click", this.atClearValue, this);
};

CGWidget.prototype.destroyBehaviours = function () {
  if (!this.extValue) return;
  if (this.atFocused) this.extValue.un("focus", this.atFocused, this);
  if (this.atBlur) this.extValue.un("blur", this.atBlur, this);
  if (this.atChange) this.extValue.un('change', this.atChange, this);
  if (this.atKeyDown) this.extValue.un("keydown", this.atKeyDown, this);
  if (this.atKeyPress) this.extValue.un("keypress", this.atKeyPress, this);
  if (this.atKeyUp) this.extValue.un("keyup", this.atKeyUp, this);
};

CGWidget.prototype.isReady = function () {
  return this.bIsReady;
};

CGWidget.prototype.init = function () {
  this.bIsReady = true;
};

CGWidget.prototype.destroy = function () {
  this.destroyOptions();
  this.destroyBehaviours();
};

CGWidget.prototype.initStores = function () {
  var HistoryStore, SourceStore, IndexStore, DataLink;

  if (!this.Target) return;

  if ((this.Target.getHistoryStore) && ((HistoryStore = this.Target.getHistoryStore()) != null)) {
    this.initRemoteHistoryStore(HistoryStore);
  }

  if ((this.Target.getSourceStore) && ((SourceStore = this.Target.getSourceStore()) != null)) {
    if (SourceStore.IsRemote) this.initRemoteSourceStore(SourceStore);
    else this.initLocalSourceStore(SourceStore);
  }

  if ((this.Target.getIndexStore) && ((IndexStore = this.Target.getIndexStore()) != null)) {
    this.initRemoteIndexStore(IndexStore);
  }

  if ((this.Target.getDataLink) && ((DataLink = this.Target.getDataLink()) != null)) {
    this.initRemoteDataLink(DataLink);
  }
};

CGWidget.prototype.initRemoteHistoryStore = function (HistoryStore) {
  var sHistoryStoreUrl = WidgetTemplateHistoryStoreUrl.evaluate({'ImagesPath': Context.Config.ImagesPath, 'api': Context.Config.Api, 'code': HistoryStore.Code, 'list': HISTORY});
  this.aStores[HISTORY] = new Ext.data.Store({
    proxy: new Ext.data.HttpProxy({ url: sHistoryStoreUrl }),
    reader: new Ext.data.JsonReader({root: 'rows', totalProperty: 'nrows'}, [
      {name: 'code'},
      {name: 'label'}
    ]),
    remoteSort: true
  });
  this.aStores[HISTORY].isRemote = function () {
    return true;
  };
  this.aStores[HISTORY].list = HISTORY;
  this.aStores[HISTORY].ShowCode = HistoryStore.ShowCode;
};

CGWidget.prototype.refreshStoreFrom = function () {
  if (!this.Target || !this.Target.getStoreFromValue)
    return;

  var value = this.Target.getStoreFromValue();

  if (this.aStores[SOURCE_STORE]) this.aStores[SOURCE_STORE].From = value;
  if (this.aStores[INDEX]) this.aStores[INDEX].From = value;
};

CGWidget.prototype.refreshStoreFilters = function () {
  if (!this.Target || !this.Target.getStoreFiltersValues)
    return;

  var filtersValues = this.Target.getStoreFiltersValues();

  if (this.aStores[INDEX]) this.aStores[INDEX].Filters = filtersValues;
  if (this.aStores[SOURCE_STORE]) this.aStores[SOURCE_STORE].Filters = filtersValues;
  if (this.aStores[DATA_LINK]) this.aStores[DATA_LINK].Filters = filtersValues;
};

CGWidget.prototype.isFlatten = function (SourceStore) {
  return SourceStore.Flatten != null && SourceStore.Flatten != "" && SourceStore.Flatten != "none";
};

CGWidget.prototype.initRemoteSourceStore = function (SourceStore) {
  var isFlatten = this.isFlatten(SourceStore);
  var sSourceURL = WidgetTemplateSourceUrl.evaluate({'ImagesPath': Context.Config.ImagesPath, 'api': Context.Config.Api, 'list': SOURCE_STORE,
    'flatten': SourceStore.Flatten, 'depth': SourceStore.Depth});
  this.aStores[SOURCE_STORE] = new Ext.data.Store({
    proxy: new Ext.data.HttpProxy({ url: sSourceURL }),
    reader: new Ext.data.JsonReader({root: 'rows', totalProperty: 'nrows'}, [
      {name: 'code'},
      {name: isFlatten ? 'flatten_label' : 'label'}
    ]),
    remoteSort: true
  });
  this.aStores[SOURCE_STORE].isRemote = function () {
    return true;
  };
  this.aStores[SOURCE_STORE].getSourceId = function () {
    return this.SourceId;
  };
  this.aStores[SOURCE_STORE].setSourceId = function (SourceId) {
    this.SourceId = SourceId;
  };
  this.aStores[SOURCE_STORE].list = SOURCE_STORE;
  this.aStores[SOURCE_STORE].ShowCode = SourceStore.ShowCode;
  this.aStores[SOURCE_STORE].From = SourceStore.From;
  this.aStores[SOURCE_STORE].isFlatten = isFlatten;
  this.aStores[SOURCE_STORE].setSourceId(SourceStore.Id);
};

CGWidget.prototype.initLocalSourceStore = function (SourceStore) {
  var isFlatten = this.isFlatten(SourceStore);
  this.aStores[SOURCE_STORE] = new Ext.data.Store({
    //fields: ['code','value'],
    proxy: new Ext.data.MemoryProxy(SourceStore.Items),
    reader: new Ext.data.ArrayReader({}, [
      {name: 'code'},
      {name: isFlatten ? 'flatten_label' : 'label'}
    ]),
    remoteSort: false
    //data: SourceStore.Items
  });
  this.aStores[SOURCE_STORE].isRemote = function () {
    return false;
  };
  this.aStores[SOURCE_STORE].getSourceId = function () {
    return this.SourceId;
  };
  this.aStores[SOURCE_STORE].setSourceId = function (SourceId) {
    this.SourceId = SourceId;
  };
  this.aStores[SOURCE_STORE].list = SOURCE_STORE;
  this.aStores[SOURCE_STORE].ShowCode = SourceStore.ShowCode;
  this.aStores[SOURCE_STORE].isFlatten = isFlatten;
  this.aStores[SOURCE_STORE].setSourceId(null);
};

CGWidget.prototype.initRemoteIndexStore = function (IndexStore) {
  var isFlatten = this.isFlatten(IndexStore);
  var sIndexUrl = WidgetTemplateIndexUrl.evaluate({'ImagesPath': Context.Config.ImagesPath, 'api': Context.Config.Api, 'list': INDEX,
    'flatten': SourceStore.Flatten, 'depth': SourceStore.Depth });
  this.aStores[INDEX] = new Ext.data.Store({
    proxy: new Ext.data.HttpProxy({ url: sIndexUrl }),
    reader: new Ext.data.JsonReader({root: 'rows', totalProperty: 'nrows'}, [
      {name: 'code'},
      {name: isFlatten ? 'flatten_label' : 'label'}
    ]),
    remoteSort: true
  });
  this.aStores[INDEX].isRemote = function () {
    return true;
  };
  this.aStores[INDEX].getSourceId = function () {
    return this.SourceId;
  };
  this.aStores[INDEX].setSourceId = function (SourceId) {
    this.SourceId = SourceId;
  };
  this.aStores[INDEX].list = INDEX;
  this.aStores[INDEX].ShowCode = IndexStore.ShowCode;
  this.aStores[INDEX].From = SourceStore.From;
  this.aStores[INDEX].Filters = SourceStore.Filters;
  this.aStores[INDEX].isFlatten = isFlatten;
  this.aStores[INDEX].setSourceId(IndexStore.Id);
};

CGWidget.prototype.initRemoteDataLink = function (DataLink) {
  var sDataLinkURL = WidgetTemplateDataLinkUrl.evaluate({'ImagesPath': Context.Config.ImagesPath, 'api': Context.Config.Api, 'domain': DataLink.Domain, 'code': DataLink.Code, 'list': DATA_LINK});
  this.aStores[DATA_LINK] = new Ext.data.Store({
    proxy: new Ext.data.HttpProxy({ url: sDataLinkURL }),
    reader: this.getReader(),
    remoteSort: true
  });
  this.aStores[DATA_LINK].isRemote = function () {
    return true;
  };
  this.aStores[DATA_LINK].list = DATA_LINK;
  this.aStores[DATA_LINK].Filters = DataLink.Filters;
  this.aStores[DATA_LINK].ShowCode = DataLink.ShowCode;
};

CGWidget.prototype.getReader = function () {
  var sDefaultReader = "new Ext.data.JsonReader({root: 'rows', totalProperty: 'nrows'}, [{name:'code'},{name:'label'},{name:'body'}])";

  if (!this.Target) return eval(sDefaultReader);
  if (!this.Target.getHeader) return eval(sDefaultReader);

  var Header = this.Target.getHeader();
  if (Header.Attributes.length <= 0) return eval(sDefaultReader);

  var sHeaders = "{name:'code'},{name:'label'},";
  for (var i = 0; i < Header.Attributes.length; i++) {
    var Attribute = Header.Attributes[i];
    sHeaders += "{name:'" + Attribute[0] + "'},";
  }
  sHeaders = sHeaders.substring(0, sHeaders.length - 1);

  return eval("new Ext.data.JsonReader({root: 'rows', totalProperty: 'nrows'}, [" + sHeaders + "])");
};

CGWidget.prototype.initColumnModel = function () {
  if (!this.Target) return;
  if (!this.Target.getHeader) return;

  var Header = this.Target.getHeader();
  this.ColumnModel = new Ext.grid.ColumnModel([
    {header: Lang.Editor.Code, dataIndex: 'code'},
    {header: Lang.Editor.Option, sortable: true, dataIndex: 'label'}
  ]);

  if (Header.Attributes.length > 0) {
    var sHeaders = "{header:'" + Lang.Editor.Code + "',dataIndex:'code'},";
    for (var i = 0; i < Header.Attributes.length; i++) {
      var Attribute = Header.Attributes[i];
      sHeaders += "{header:'" + Attribute[1] + "',sortable:true,dataIndex:'" + Attribute[0] + "'},";
    }
    sHeaders = sHeaders.substring(0, sHeaders.length - 1);
    this.ColumnModel = eval("new Ext.grid.ColumnModel([" + sHeaders + "])");
    this.ColumnModel.CodeValueColumn = Header.CodeValueColumn;
    this.isCustomColumnModel = true;
  }

  this.ColumnModel.name = this.Target.getCode();
};

CGWidget.prototype.setId = function (Id) {
  if (this.extValue) this.extValue.dom.id = Id;
  else this.extWidget.dom.id = Id;
  this.Id = Id;
};

CGWidget.prototype.getId = function () {
  return this.Id;
};

CGWidget.prototype.getPath = function () {
  if (this.extValue) return this.extValue.dom.id;
  else return this.extWidget != null ? this.extWidget.dom.id : "";
};

CGWidget.prototype.getCode = function () {
  return this.extWidget.dom.id;
};

CGWidget.prototype.getOrder = function () {
  return (this.extWidget.dom.iOrder != null) ? this.extWidget.dom.iOrder : "-1";
};

CGWidget.prototype.getDOM = function () {
  if (this.extWidget == null) return null;
  return this.extWidget.dom;
};

CGWidget.prototype.getTarget = function () {
  return this.Target;
};

CGWidget.prototype.createRequiredWidget = function () {
  if ((this.Target.isRequired()) && (!this.WidgetRequired)) {
    this.WidgetRequired = WidgetFactory.get(WIDGET_REQUIRED, this.extWidget);
    this.WidgetRequired.setTarget(this.Target);
    this.WidgetRequired.init();
  }
};

CGWidget.prototype.setTarget = function (Target) {
  this.Target = Target;
  this.createRequiredWidget();
  this.createOptions();
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.validate();
  this.addListeners();
  //this.updateData();
};

CGWidget.prototype.addListeners = function() {
  var fields = this.Target.getStoreFiltersFields();
  for (var i=0; i<fields.length; i++) fields[i].onValueChangeListeners.push(this.doClearValue.bind(this));
};

CGWidget.prototype.getViewMode = function () {
  return this.ViewMode;
};

CGWidget.prototype.setViewMode = function (ViewMode) {
  var aExtViews = this.extWidget.select(CSS_WIDGET_ELEMENT_VIEW_MODE);
  if (this.ViewMode) this.extWidget.removeClass(this.ViewMode);
  this.extWidget.addClass(ViewMode);
  this.ViewMode = ViewMode;
  aExtViews.each(function (extView) {
    var extParent = extView.up(CSS_WIDGET);
    if (extParent.dom != this.extWidget.dom) return;
    if (extView.hasClass(ViewMode)) extView.dom.style.display = "block";
    else extView.dom.style.display = "none";
  }, this);
};

CGWidget.prototype.setEditor = function (Editor) {
  this.Editor = Editor;
};

CGWidget.prototype.setReadonly = function (bValue) {
  if (!this.extValue) return;
  this.extValue.dom.readOnly = bValue;
};

CGWidget.prototype.setWidgetRequired = function (WidgetRequired) {
  this.WidgetRequired = WidgetRequired;
};

CGWidget.prototype.setValue = function (sValue) {
  if (!this.extValue) return;
  this.extValue.dom.value = sValue;
};

CGWidget.prototype.getValue = function () {
  if (!this.extValue) return "";
  return this.extValue.dom.value;
};

CGWidget.prototype.getValueCode = function () {
	if (!this.extValue) return "";
	return this.extValue.dom.value;
};

CGWidget.prototype.getSuperId = function () {
  if (!this.extSuper) return "";
  return this.extSuper.dom.value;
};

CGWidget.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;
  if (!this.extValue) return null;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.VALUE, order: 1, value: this.extValue.dom.value});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 2, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

CGWidget.prototype.updateData = function () {
  for (var i=0; i<this.Target.onValueChangeListeners.length; i++) this.Target.onValueChangeListeners[i]();
  if (this.onChange) this.onChange();
};

CGWidget.prototype.setData = function (sData) {
  if (!this.Target) return;
  if (!this.extValue) return;

  var Attribute = new CGAttribute();
  Attribute.unserialize(sData);

  this.extValue.dom.value = "";

  var IndicatorValue = Attribute.getIndicator(CGIndicator.VALUE);
  if (IndicatorValue) this.extValue.dom.value = IndicatorValue.getValue().replace(/<br\/>/g, "\n");

  if (this.extOptionClearValue) {
    if (this.extValue.dom.value != "") this.showClearValue();
    else this.hideClearValue();
  }

  this.validate();

  if (this.onChange) this.onChange();
};

CGWidget.prototype.setDefault = function (sData) {
  this.setData(sData);
};

CGWidget.prototype.validate = function () {
  if (!this.extValue) return;

  if (this.WidgetRequired) {
    if (this.extValue.dom.value != "") this.WidgetRequired.hide();
    else this.WidgetRequired.show();
  }

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";
};

CGWidget.prototype.isFocused = function () {
  if (!this.extValue) return this.bFocused;
  return this.extValue.hasClass(CLASS_FOCUS);
};

CGWidget.prototype.focus = function () {
  if (this.extValue) this.extValue.dom.focus();
  else {
    this.bFocused = true;
    this.extWidget.addClass(CLASS_FOCUS);
    if (this.onFocused) this.onFocused();
  }
};

CGWidget.prototype.blur = function () {
  if (this.extValue) this.extValue.removeClass(CLASS_FOCUS);
  else {
    this.bFocused = false;
    this.extWidget.removeClass(CLASS_FOCUS);
  }
  if (this.onBlur) this.onBlur();
};

CGWidget.prototype.show = function () {
  if (this.extWidget) this.extWidget.show();
};

CGWidget.prototype.lockClearValue = function () {
  if (this.extOptionClearValue) this.extOptionClearValue.locked = true;
};

CGWidget.prototype.showClearValue = function () {
  if ((this.extOptionClearValue) && (!this.extOptionClearValue.locked)) this.extOptionClearValue.dom.style.display = "block";
};

CGWidget.prototype.hideClearValue = function () {
  if ((this.extOptionClearValue) && (!this.extOptionClearValue.locked)) this.extOptionClearValue.dom.style.display = "none";
};

CGWidget.prototype.hide = function () {
  if (this.extWidget) this.extWidget.hide();
};

CGWidget.prototype.setMessageWhenEmpty = function (sMessage) {
  if (!this.Target) return;
  if (!this.extValue) return;

  if ((sMessage == null) || (sMessage == "")) return;

  var id = Ext.id();
  new Insertion.After(this.extValue.dom, "<div id='" + id + "' class='empty'>" + sMessage + "</div>");
  this.extMessageEmpty = Ext.get(id);
  Event.observe(this.extMessageEmpty.dom, "click", CGWidget.prototype.atMessageEmptyClick.bind(this));
};

CGWidget.prototype.isLocked = function () {

  if (this.extWidget.hasClass(CLASS_LOCKED)) return true;

  var extParentWidget = this.extWidget.up(CSS_WIDGET);
  while (extParentWidget != null) {
    if (extParentWidget.hasClass(CLASS_LOCKED)) return true;
    extParentWidget = extParentWidget.up(CSS_WIDGET);
  }

  return false;
};

CGWidget.prototype.lock = function () {
  if (this.extWidget) {
    if (this.extWidget.hasClass(CLASS_FOCUS)) this.extWidget.dom.blur();
    this.extWidget.addClass(CLASS_LOCKED);
  }
  if (this.extValue) this.extValue.dom.disabled = true;
};

CGWidget.prototype.unLock = function () {
  if (!this.Target) return;
  if (this.Target.isLockedByDefinition()) return;
  if (this.extWidget) this.extWidget.removeClass(CLASS_LOCKED);
  if (this.extValue) this.extValue.dom.disabled = false;
  if (this.onUnLock) this.onUnLock();
};

CGWidget.prototype.setObserver = function (Observer, iPos) {
  if (!this.extValue) return;
  var DOMFullname, DOMObserver = this.extValue.getNextSibling();

  if (DOMObserver != null && !DOMObserver.hasClassName(CLASS_OBSERVER)) DOMObserver = null;

  if (!DOMObserver) {
    new Insertion.After(this.extValue.dom, WidgetObserverTemplate.evaluate());
    DOMObserver = this.extValue.getNextSibling();
    DOMFullname = DOMObserver.down("span");
    CommandListener.capture(DOMObserver);
  }
  else DOMFullname = DOMObserver.down("span");

  if (Observer == null) {
    DOMObserver.hide();
    DOMObserver.style.backgroundColor = "";
    this.extValue.dom.style.borderColor = "";
    this.extWidget.dom.style.borderColor = "";
    this.unLock();
  }
  else {
    DOMObserver.show();
    DOMObserver.style.backgroundColor = getColor(iPos);
    DOMFullname.innerHTML = Observer.fullname;
    this.extValue.dom.style.borderColor = getColor(iPos);
    this.extWidget.dom.style.borderColor = getColor(iPos);
    this.lock();
  }
};

CGWidget.prototype.clearValue = function (oEvent) {
  this.focus();
  this.doClearValue();
};

CGWidget.prototype.doClearValue = function () {
  this.extValue.dom.value = "";
  this.hideClearValue();
  this.validate();
  this.updateData();
  if (this.onClearValue) this.onClearValue(this);
};

CGWidget.prototype.reset = function () {
  this.setData("");
};

// #############################################################################################################

CGWidget.prototype.atBlur = function (oEvent) {
  if ((this.extValue) && (this.extMessageEmpty)) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";
};

CGWidget.prototype.atKeyUp = function (oEvent) {
  var codeKey = oEvent.getKey();

  if ((codeKey == oEvent.ESC) && (this.onEscape)) this.onEscape();
  if ((codeKey == oEvent.ENTER) && (this.onEnter)) this.onEnter();

  if ((this.extValue) && (this.extMessageEmpty)) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";

  if ((this.extValue) && (this.extValue.dom.value != "")) this.showClearValue();
  else this.hideClearValue();

  return false;
};

CGWidget.prototype.atLoadDefaultValue = function (oEvent) {
  if (this.onLoadDefaultValue) this.onLoadDefaultValue();
};

CGWidget.prototype.atAddDefaultValue = function (oEvent) {
  if (this.onAddDefaultValue) this.onAddDefaultValue();
};

CGWidget.prototype.atClearValue = function (oEvent) {
  this.clearValue();
  return false;
};

CGWidget.prototype.atMessageEmptyClick = function (oEvent) {
  this.extMessageEmpty.dom.style.display = "none";
  if (this.extValue) this.extValue.focus();
  Event.stop(oEvent);
  return false;
};

CGWidgetSelect = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
  this.Item = new Object();
  this.Item.code = EMPTY;
  this.Item.value = EMPTY;
  this.Item.other = EMPTY;
  this.bIsValueOtherActive = false;
  this.sources = null;

  if (!extWidget) return;

  if (this.extValue) {
    this.Item.code = this.extValue.dom.name;
    this.Item.value = this.extValue.dom.value;
  }

  this.extRadioList = this.extWidget.down(CSS_WIDGET_ELEMENT_RADIO_LIST);
  this.registerRadios();
};

CGWidgetSelect.prototype = new CGWidget;

CGWidgetSelect.prototype.showClearValue = function () {
  if (this.extRadioList != null) this.extOptionClearValue.dom.style.display = "none";
  else if ((this.extOptionClearValue) && (!this.extOptionClearValue.locked)) this.extOptionClearValue.dom.style.display = "block";
};

CGWidgetSelect.prototype.focus = function () {
  if (this.extRadioList == null) this.extValue.dom.focus();
  else {
    this.bFocused = true;
    this.extWidget.addClass(CLASS_FOCUS);
    if (this.onFocused) this.onFocused();
  }
};

CGWidgetSelect.prototype.blur = function () {
  if (this.extRadioList == null) this.extValue.removeClass(CLASS_FOCUS);
  else {
    this.bFocused = false;
    this.extWidget.removeClass(CLASS_FOCUS);
  }
  if (this.onBlur) this.onBlur();
};

CGWidgetSelect.prototype.registerRadio = function (extRadio) {
  var idRadio = Ext.id();
  var extChecker = extRadio.down("input");
  var extLabel = extRadio.down("label");

  if (extChecker == null) return;

  extChecker.dom.id = idRadio;
  extLabel.dom.htmlFor = idRadio;
  Event.observe(extChecker.dom, "click", CGWidgetSelect.prototype.atRadioClick.bind(this, extRadio.dom, extChecker.dom));
  Event.observe(extChecker.dom, "blur", CGWidgetSelect.prototype.blur.bind(this));
};

CGWidgetSelect.prototype.registerRadios = function () {
  if (!this.extRadioList) return;
  var extRadioItems = this.extRadioList.select(CSS_WIDGET_ELEMENT_RADIO);
  extRadioItems.each(function (extRadio) {
    this.registerRadio(extRadio);
  }, this);
};

CGWidgetSelect.prototype.init = function () {
  this.initStores();
  this.bIsReady = true;
};

CGWidgetSelect.prototype.getValue = function () {
  return this.Item.value;
};

CGWidgetSelect.prototype.getValueCode = function () {
  return this.Item.code;
};

CGWidgetSelect.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.CODE, order: 1, value: this.Item.code});
  Result.value.push({code: CGIndicator.SOURCE, order: 1, value: this.SourceId});
  if (this.isValueOtherActive()) {
    Result.value.push({code: CGIndicator.OTHER, order: 2, value: this.Item.other});
  }
  else Result.value.push({code: CGIndicator.VALUE, order: 2, value: this.Item.value});

  if (this.Target.isSuper() && (this.extSuper != null))
    Result.value.push({code: CGIndicator.SUPER, order: 3, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    var OptionAttribute = new CGAttribute();

    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    OptionAttribute.code = CGAttribute.OPTION;
    OptionAttribute.iOrder = 0;

    for (var iPos = 0; iPos < this.value.length; iPos++) {
      OptionAttribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    Attribute.getAttributeList().addAttribute(OptionAttribute);

    return Attribute.serialize();
  };

  return Result;
};

CGWidgetSelect.prototype.setData = function (sData) {
  if (!this.Target) return;

  var Attribute = new CGAttribute();
  Attribute.unserialize(sData);

  var OptionAttribute = Attribute.getAttributeList().getAttribute(CGAttribute.OPTION);
  if (OptionAttribute != null) Attribute = OptionAttribute;

  var code = Attribute.getIndicatorValue(CGIndicator.CODE);
  var sValue = Attribute.getIndicatorValue(CGIndicator.VALUE);
  var sOther = Attribute.getIndicatorValue(CGIndicator.OTHER);
  var sSource = Attribute.getIndicatorValue(CGIndicator.SOURCE);

  if (sData != "" && sSource != "" && this.SourceId != sSource)
    this.SourceId = sSource;

  if (sOther) {
    this.setItem(this.Target.getCodeOnOthers(), EMPTY, sOther);
    this.extValue.dom.value = "";
    this.activateValueOther();
  }
  else {
    this.deactivateValueOther();
    this.setItem(code, sValue, EMPTY);
    this.extValue.dom.value = sValue;

    if (this.extRadioList && code != "") {
      var extRadio = this.extRadioList.select(CSS_WIDGET_ELEMENT_RADIO + " ." + code).first();
      if (extRadio) extRadio.dom.checked = true;
    }
  }

  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();

  this.validate();

  if (this.onChange) this.onChange();
};

CGWidgetSelect.prototype.setItem = function (code, value, other) {
  this.Item.code = code;
  this.Item.value = value;
  this.Item.other = other;
};

CGWidgetSelect.prototype.setTarget = function (Target) {
  this.Target = Target;

  this.createRequiredWidget();
  this.setItem(this.extValue.dom.name, this.extValue.dom.value, EMPTY);

  if (this.extValue.hasClass(CLASS_WIDGET_OTHER)) {
    this.setItem(this.Target.getCodeOnOthers(), EMPTY, this.extValue.dom.value);
    this.extValue.dom.value = "";
    this.activateValueOther();
  }

  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.SourceId = this.extValue.dom.alt;
  this.sources = this.Target.getSources();

  this.createOptions();
  this.validate();
  //this.updateData();
  if (this.extRadioList != null) this.hideClearValue();
};

CGWidgetSelect.prototype.validate = function () {

  if (this.WidgetRequired) {
    if (this.Item.code != "") this.WidgetRequired.hide();
    else this.WidgetRequired.show();
  }

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";
};

CGWidgetSelect.prototype.isValueOtherActive = function () {
  return this.bIsValueOtherActive;
};

CGWidgetSelect.prototype.activateValueOther = function () {
  this.bIsValueOtherActive = true;
  this.extValue.dom.value = this.Item.other + BLANK + LEFT_BRACKET + this.Item.code + RIGHT_BRACKET;
};

CGWidgetSelect.prototype.deactivateValueOther = function () {
  this.bIsValueOtherActive = false;
  this.extValue.dom.value = "";
};

CGWidgetSelect.prototype.select = function (SourceId, Data) {
  this.deactivateValueOther();
  this.SourceId = SourceId;
  this.setItem(Data.code, Data.value, EMPTY);
  this.extValue.dom.value = this.Item.value;
  this.showClearValue();
  this.validate();
  this.updateData();
};

CGWidgetSelect.prototype.selectOther = function (SourceId, sValue) {
  this.setItem(this.Target.getCodeOnOthers(), EMPTY, sValue);
  this.activateValueOther();
  this.SourceId = SourceId;
  this.showClearValue();
  this.validate();
  this.updateData();
};

CGWidgetSelect.prototype.lock = function () {
  if (this.extWidget) {
    if (this.extWidget.hasClass(CLASS_FOCUS)) this.extWidget.dom.blur();
    this.extWidget.addClass(CLASS_LOCKED);
  }
  if (this.extValue) {
    this.extValue.dom.disabled = true;
    this.extValue.dom.readOnly = true;
    this.extValue.addClass(CLASS_READONLY);
  }
  if (this.extRadioList) {
    var extRadioItems = this.extRadioList.select(CSS_WIDGET_ELEMENT_RADIO);
    extRadioItems.each(function (extRadio) {
      extRadio.down("input").dom.disabled = true;
    }, this);
  }
};

CGWidgetSelect.prototype.unLock = function () {
  if (this.Target.isLockedByDefinition()) return;
  if (this.extWidget) this.extWidget.removeClass(CLASS_LOCKED);
  if (this.extValue) {
    this.extValue.dom.disabled = false;
    this.extValue.dom.readOnly = false;
    this.extValue.removeClass(CLASS_READONLY);
  }
  if (this.extRadioList) {
    var extRadioItems = this.extRadioList.select(CSS_WIDGET_ELEMENT_RADIO);
    extRadioItems.each(function (extRadio) {
      extRadio.down("input").dom.disabled = false;
    }, this);
  }
  if (this.onUnLock) this.onUnLock();
};

CGWidgetSelect.prototype.clearValue = function (oEvent) {
  this.focus();
  this.setItem(EMPTY, EMPTY, EMPTY);
  this.extValue.dom.value = "";
  this.hideClearValue();
  this.validate();
  this.updateData();
  if (this.onClearValue) this.onClearValue(this);
};

CGWidgetSelect.prototype.refreshStoreSource = function (callback) {

  if (!this.Target || !this.Target.getStorePartnerContextValue || !this.Target.getSources) {
    callback();
    return;
  }

  var value = this.Target.getStorePartnerContextValue();
  if (value == "") {
    callback();
    return;
  }

  var Process = new CGProcessLoadNodeContext();
  Process.Id = value;
  Process.onComplete = this.onContextLoadedComplete.bind(this, callback);
  Process.execute();
};

CGWidgetSelect.prototype.onContextLoadedComplete = function (callback, context) {
  var sources = this.Target.getSources();

  for (var i = 0; i < sources.length; i++) {
    if (sources[i].partner == context)
      this.SourceId = sources[i].id;
  }

  if (this.aStores[SOURCE_STORE]) this.aStores[SOURCE_STORE].SourceId = this.SourceId;
  if (this.aStores[INDEX]) this.aStores[INDEX].SourceId = this.SourceId;

  callback();
};

// #############################################################################################################
CGWidgetSelect.prototype.atFocused = function () {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  this.refreshStoreFilters();

  this.refreshStoreSource(CGWidgetSelect.prototype.atFocusedCallback.bind(this));
};

CGWidgetSelect.prototype.atFocusedCallback = function () {
  var sendSources = !this.Target.isStorePartnerContextLinked();

  this.refreshStoreFrom();

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target, allowOthers: this.Target.allowOthers(), Dialogs: [
    {sName: HISTORY, Store: this.aStores[HISTORY]},
    {sName: SOURCE, SelectedSourceId: this.SourceId, Sources: sendSources ? this.sources : new Array()},
    {sName: SOURCE_STORE, Store: this.aStores[SOURCE_STORE]}
  ]});
  this.Editor.onSelect = this.atSelect.bind(this);
  this.Editor.onSelectOther = this.atSelectOther.bind(this);
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";
};

CGWidgetSelect.prototype.atSelect = function (Data, Source) {
  this.select(Source, Data);
  if (this.onSelect) this.onSelect(Data);
};

CGWidgetSelect.prototype.atSelectOther = function (Data, Source) {
  this.selectOther(Source, Data.value);
  if (this.onSelect) this.onSelect(Data);
};

CGWidgetSelect.prototype.atChange = function (oEvent) {
  this.setItem(EMPTY, EMPTY, EMPTY);
  this.extValue.dom.value = "";
  this.hideClearValue();
  this.validate();
  this.updateData();
};

CGWidgetSelect.prototype.atClearValue = function (oEvent) {
  this.clearValue();
  return false;
};

CGWidgetSelect.prototype.atKeyUp = function (oEvent) {
  var codeKey = oEvent.getKey();

  if ((codeKey == oEvent.ESC) && (this.onEscape)) this.onEscape();
  else if ((codeKey == oEvent.ENTER) || (codeKey == oEvent.TAB)) {
    var Source = this.Editor.getSourceId();
    var Data = this.Editor.getData();
    if (Data) this.select(Source, Data);
    if ((codeKey == oEvent.ENTER) && (this.onEnter)) this.onEnter();
  }
  else if (codeKey == oEvent.DOWN) this.Editor.moveDown(this.extValue.dom);
  else if (codeKey == oEvent.UP) this.Editor.moveUp(this.extValue.dom);
  else if (this.onKeyPress) this.onKeyPress(this.extValue.dom.value, codeKey);

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";

  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();

  Event.stop(oEvent);
  return false;
};

CGWidgetSelect.prototype.atRadioClick = function (DOMCheck, DOMChecker) {
  this.focus();
  this.setItem(DOMChecker.className, DOMChecker.value, EMPTY);
  this.validate();
  this.updateData();
};

CGWidgetBoolean = function (extWidget) {
  this.base = CGWidgetSelect;
  this.base(extWidget);

  if (!extWidget) return;
};

CGWidgetBoolean.prototype = new CGWidgetSelect;

CGWidgetBoolean.prototype.init = function () {
  this.initStore();
  this.bIsReady = true;
};

CGWidgetBoolean.prototype.initStore = function () {
  sData = [
    ["true", Lang.Widget.Boolean.Yes],
    ["false", Lang.Widget.Boolean.No]
  ];
  this.aStores[SOURCE_STORE] = new Ext.data.SimpleStore({
    fields: ['code', 'label'],
    data: sData
  });
  this.aStores[SOURCE_STORE].isRemote = function () {
    return false;
  };
};

CGWidgetBoolean.prototype.createOptions = function () {
};

CGWidgetBoolean.prototype.destroyOptions = function () {
};

CGWidgetBoolean.prototype.setStateAndUpdate = function (bValue) {
    this.setState(bValue);
    this.updateData();
};

CGWidgetBoolean.prototype.setState = function (bValue) {

  if (bValue) {
    this.Item.code = "true";
    this.Item.value = "X";
    this.extValue.dom.checked = true;
  }
  else {
    this.Item.code = "false";
    this.Item.value = "";
    this.extValue.dom.checked = false;
  }

  this.validate();
};

CGWidgetBoolean.prototype.setData = function (sData) {
  if (!this.Target) return;
  if (!this.extValue) return;

  var Attribute = new CGAttribute();
  Attribute.unserialize(sData);

  var OptionAttribute = Attribute.getAttributeList().getAttribute(CGAttribute.OPTION);
  if (OptionAttribute != null) Attribute = OptionAttribute;

  var code = Attribute.getIndicatorValue(CGIndicator.CODE);
  var sValue = Attribute.getIndicatorValue(CGIndicator.VALUE);

  this.setItem(code, sValue, EMPTY);
  this.extValue.dom.value = sValue;
  this.extValue.dom.checked = code!="" && code=="true";
  this.setStateAndUpdate(this.extValue.dom.checked);

  this.validate();

  if (this.onChange) this.onChange();
};

CGWidgetBoolean.prototype.setTarget = function (Target) {
  this.Target = Target;

  this.createRequiredWidget();
  this.setItem(this.extValue.dom.name, this.extValue.dom.value, EMPTY);
  this.createOptions();
  this.setState(this.extValue.dom.checked);
};

CGWidgetBoolean.prototype.toggle = function () {
  this.setStateAndUpdate(!this.extValue.dom.checked);
};

CGWidgetBoolean.prototype.clearValue = function () {
  this.focus();
  this.setStateAndUpdate(false);
  if (this.onClearValue) this.onClearValue(this);
};

// #############################################################################################################

CGWidgetBoolean.prototype.atFocused = function () {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target, allowOthers: false, Dialogs: [
    {sName: SOURCE_STORE, Store: this.aStores[SOURCE_STORE]}
  ]});
  this.Editor.onSelect = this.atSelect.bind(this);
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());

  this.extValue.addClass(CLASS_FOCUS);
};

CGWidgetBoolean.prototype.atSelect = function (Data) {
  if (Data.code == "true") this.setStateAndUpdate(true);
  else this.setStateAndUpdate(false);
  if (this.onSelect) this.onSelect(this.Item);
};

CGWidgetBoolean.prototype.atChange = function (oEvent) {
  this.setStateAndUpdate(this.extValue.dom.checked);
  if (this.onSelect) this.onSelect(this.Item);
};

CGWidgetBoolean.prototype.atClearValue = function (oEvent) {
  this.clearValue();
  return false;
};

CGWidgetCheck = function (extWidget) {
	this.base = CGWidget;
	this.base(extWidget);
	this.aChecks = new Array();
	this.extCheckList = this.extWidget.down(CSS_WIDGET_ELEMENT_CHECK_LIST);
	this.registerChecks();
	this.sources = null;
	this.extWidget.dom.focus = CGWidgetCheck.prototype.focus.bind(this);
};

CGWidgetCheck.prototype = new CGWidget;

CGWidgetCheck.prototype.applyBehaviours = function () {
	this.setId(this.extWidget.dom.id);
};

CGWidgetCheck.prototype.createOptions = function () {
};

CGWidgetCheck.prototype.clearChecks = function () {
	this.aChecks = new Array();
	var aCheckList = this.extCheckList.select(CSS_WIDGET_ELEMENT_CHECK);
	aCheckList.each(function (extCheck) {
		this.unregisterCheck(extCheck);
	}, this);
	this.extCheckList.dom.innerHTML = "";
};

CGWidgetCheck.prototype.registerCheck = function (extCheck) {
	var idChecker = Ext.id();
	var extChecker = extCheck.down(CSS_WIDGET_ELEMENT_CHECKER);
	var extLabel = extCheck.down("label");

	extChecker.dom.id = idChecker;
	extLabel.dom.htmlFor = idChecker;

	Event.observe(extChecker.dom, "click", CGWidgetCheck.prototype.atCheckerClick.bind(this, extCheck.dom, extChecker.dom));
	Event.observe(extCheck.dom, "mouseover", CGWidgetCheck.prototype.atCheckMouseOver.bind(this, extCheck.dom, extChecker.dom));
	Event.observe(extCheck.dom, "mouseout", CGWidgetCheck.prototype.atCheckMouseOut.bind(this, extCheck.dom, extChecker.dom));

	var extCheckAll = extCheck.down(CSS_WIDGET_ELEMENT_CHECKALL);
	if (extCheckAll) Event.observe(extCheckAll.dom, "click", CGWidgetCheck.prototype.atCheckAllClick.bind(this, extCheck.dom, extChecker.dom));

	var extUncheckAll = extCheck.down(CSS_WIDGET_ELEMENT_UNCHECKALL);
	if (extUncheckAll) Event.observe(extUncheckAll.dom, "click", CGWidgetCheck.prototype.atUncheckAllClick.bind(this, extCheck.dom, extChecker.dom));
};

CGWidgetCheck.prototype.registerChecks = function () {
	var aCheckList = this.extCheckList.select(CSS_WIDGET_ELEMENT_CHECK);
	var pos = 0;
	aCheckList.each(function (extCheck) {
		extCheck.dom.pos = pos;
		this.registerCheck(extCheck);
		pos++;
	}, this);
	Event.observe(this.extCheckList.dom, "blur", CGWidgetCheck.prototype.blur.bind(this));
};

CGWidgetCheck.prototype.unregisterCheck = function (extCheck) {
	var extChecker = extCheck.down(CSS_WIDGET_ELEMENT_CHECKER);
	Event.stopObserving(extChecker.dom, "click", CGWidgetCheck.prototype.atCheckerClick.bind(this, extCheck.dom, extChecker.dom));
};

CGWidgetCheck.prototype.unregisterChecks = function () {
	var extCheckList = this.extCheckList.select(CSS_WIDGET_ELEMENT_CHECK);
	extCheckList.each(function (extCheck) {
		this.unregisterCheck(extCheck);
	}, this);
};

CGWidgetCheck.prototype.init = function () {
	this.initStores();
	this.bIsReady = true;
};

CGWidgetCheck.prototype.destroyBehaviours = function () {
	if (!this.extWidget) return;
	this.unregisterChecks();
};

CGWidgetCheck.prototype.getData = function () {
	if (!this.Target) return null;
	if (!this.Target.getCode) return null;

	var Result = new Object();
	Result.code = this.Target.getCode();
	Result.order = -1;
	Result.value = new Array();
	Result.value.push({code: CGIndicator.SOURCE, order: 1, value: this.SourceId});
	Result.value.push({code: CGIndicator.FROM, order: 2, value: this.Target.getStoreFromValue()});
	if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 3, value: this.extSuper.dom.value});
	Result.checks = this.aChecks;

	Result.toXml = function () {
		var Attribute = new CGAttribute();
		var AttributeList = Attribute.getAttributeList();

		Attribute.code = this.code;
		Attribute.iOrder = this.order;

		for (var i = 0; i < this.checks.length; i++) {
			var OptionAttribute = new CGAttribute();
			OptionAttribute.code = CGAttribute.OPTION;
			OptionAttribute.iOrder = i;
			OptionAttribute.addIndicatorByValue(CGIndicator.CHECKED, 0, (this.checks[i].checked) ? "true" : "false");
			OptionAttribute.addIndicatorByValue(CGIndicator.CODE, 1, this.checks[i].code);
			OptionAttribute.addIndicatorByValue(CGIndicator.VALUE, 2, this.checks[i].value);
			AttributeList.addAttribute(OptionAttribute);
		}

		for (var i = 0; i < this.value.length; i++) {
			Attribute.addIndicatorByValue(this.value[i].code, this.value[i].order, this.value[i].value);
		}

		return Attribute.serialize();
	};

	return Result;
};

CGWidgetCheck.prototype.getCheckedValueInCollection = function (attributes, code) {

	for (var i=0; i<attributes.length; i++) {
		var optionAttribute = attributes[i];
		var attributeCode = optionAttribute.getIndicatorValue(CGIndicator.CODE);
		if (code == attributeCode) {
			var checkedValue = optionAttribute.getIndicatorValue(CGIndicator.CHECKED);
			return (checkedValue == "true" || checkedValue == "yes");
		}
	}

	return false;
};

CGWidgetCheck.prototype.setData = function (sData) {
	if (!this.Target) return;
	if (sData == "") this.setDataCallback(sData);
	else this.reload(CGWidgetCheck.prototype.setDataCallback.bind(this, sData));
};

CGWidgetCheck.prototype.setDataCallback = function (sData) {
	var aAttributes, extCheckItems;
	var Attribute = new CGAttribute();

	Attribute.unserialize(sData);
	aAttributes = Attribute.getAttributeList().getAttributes();
	extCheckItems = this.extCheckList.select(CSS_WIDGET_ELEMENT_CHECK);
	this.aChecks = new Array();

	for (var i = 0; i < extCheckItems.elements.length; i++) {
		var extCheck = Ext.get(extCheckItems.elements[i]);
		var Check = new Object();
		var extInput = extCheck.down("input");
		var extChecker = extCheck.down(CSS_WIDGET_ELEMENT_CHECKER);
		Check.checked = this.getCheckedValueInCollection(aAttributes, extChecker.dom.name);
		Check.code = extInput.dom.name;
		Check.value = extInput.dom.value;
		extCheckItems.elements[i].down("input").checked = Check.checked;
		this.aChecks[i] = Check;
	}

	this.validate();

	if (this.onChange) this.onChange();
	if (this.onRefresh) this.onRefresh();
};

CGWidgetCheck.prototype.setTarget = function (Target) {
	this.Target = Target;

	this.createRequiredWidget();

	var aCheckList = this.extCheckList.select(CSS_WIDGET_ELEMENT_CHECK);
	aCheckList.each(function (extCheck) {
		var extChecker = extCheck.down(CSS_WIDGET_ELEMENT_CHECKER);
		var Check = {checked: extChecker.dom.checked, code: extChecker.dom.name, value: extChecker.dom.value};
		this.aChecks.push(Check);
		this.registerCheck(extCheck);
	}, this);

	this.SourceId = this.extCheckList.dom.type;
	this.sources = this.Target.getSources();

	this.createOptions();
	this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
	this.validate();
	//this.updateData();
};

CGWidgetCheck.prototype.lock = function () {
	if (this.extWidget) {
		if (this.extWidget.hasClass(CLASS_FOCUS)) this.extWidget.dom.blur();
		this.extWidget.addClass(CLASS_LOCKED);
	}
	var extCheckItems = this.extCheckList.select(CSS_WIDGET_ELEMENT_CHECK);
	extCheckItems.each(function (extCheck) {
		extCheck.down("input").dom.disabled = true;
	}, this);
};

CGWidgetCheck.prototype.unLock = function () {
	if (this.Target.isLockedByDefinition()) return;
	if (this.extWidget) this.extWidget.removeClass(CLASS_LOCKED);
	var extCheckItems = this.extCheckList.select(CSS_WIDGET_ELEMENT_CHECK);
	extCheckItems.each(function (extCheck) {
		extCheck.down("input").dom.disabled = false;
	}, this);
	if (this.onUnLock) this.onUnLock();
};

CGWidgetCheck.prototype.save = function () {
	if (this.saveTimeout != null) window.clearTimeout(this.saveTimeout);
	this.validate();
	this.updateData();
};

CGWidgetCheck.prototype.showReloading = function () {
	this.extCheckList.dom.innerHTML = WidgetWaitingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'cls': CLASS_EDITOR_WAITING_MESSAGE, 'message': Lang.Editor.Dialogs.CheckReload.Reloading});
	this.setData("");
};

CGWidgetCheck.prototype.showReloadingError = function () {
	this.extCheckList.dom.innerHTML = WidgetWaitingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'cls': CLASS_EDITOR_WAITING_ERROR, 'message': Lang.Editor.Dialogs.CheckReload.ReloadingFailed});
};

CGWidgetCheck.prototype.reload = function (callback) {
	var reloadSourceUrl = WidgetTemplateCheckReloadSourceUrl.evaluate({'api': Context.Config.Api, 'id': this.Target.getNodeId(), 'source': this.SourceId, 'field': this.Target.getCode(), 'fieldId': this.Target.getAbsoluteCode(), 'from': this.Target.getStoreFromValue()});
	this.showReloading();

	Ext.Ajax.request({
		url: reloadSourceUrl,
		method: "POST",
		success: function (response, options) {
			var result = null;
			eval("result = " + response.responseText);
			this.extCheckList.dom.innerHTML = result.view;
			this.registerChecks();

			if (callback) callback();
			else this.setData(result.data);
		},
		failure: function (response, options) {
			this.showReloadingError();
		},
		scope: this
	});
};

CGWidgetCheck.prototype.focus = function () {
	this.bFocused = true;
	this.extWidget.addClass(CLASS_FOCUS);
	this.atFocused(null);
};

CGWidgetCheck.prototype.reset = function () {
	this.updateData();
	this.reload();
};

// #############################################################################################################

CGWidgetCheck.prototype.atFocused = function (oEvent) {
	if (!this.Target) return;
	if (!this.isReady()) this.init();
	if (this.onFocused) this.onFocused();

	this.Editor.show();
	this.Editor.setConfiguration({Field: this.Target, Dialogs: [
		{sName: HISTORY, Store: this.aStores[HISTORY]},
		{sName: SOURCE, SelectedSourceId: this.SourceId, Sources: this.sources}
	]});
	this.Editor.onSelectSource = this.atSelectSource.bind(this);
	this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
	this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
	this.Editor.refresh();

	if (this.isLocked()) this.Editor.lock();
	else this.Editor.unLock();

	if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
	if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";
};

CGWidgetCheck.prototype.atSelectSource = function (sourceId) {
	this.SourceId = sourceId;
	this.validate();
	this.updateData();
	this.reload();
};

CGWidgetCheck.prototype.atCheckerClick = function (DOMCheck, DOMChecker) {
	this.focus();

	var checkPos = DOMCheck.pos;
	if (!this.aChecks[checkPos]) return;
	this.aChecks[checkPos].checked = DOMChecker.checked;

	if (this.saveTimeout) window.clearTimeout(this.saveTimeout);
	this.saveTimeout = window.setTimeout(CGWidgetCheck.prototype.save.bind(this), 500);

	this.Editor.setConfiguration({Field: this.Target, Dialogs: [
		{sName: HISTORY, Store: this.aStores[HISTORY]},
		{sName: SOURCE, SelectedSourceId: this.SourceId, Sources: this.sources}
	], Checked: DOMChecker.checked});
	this.Editor.refresh();
};

CGWidgetCheck.prototype.atCheckMouseOver = function (DOMCheck) {
	var extCheckOptions = Ext.get(DOMCheck).down("span");
	if (extCheckOptions) extCheckOptions.dom.style.display = "inline";
};

CGWidgetCheck.prototype.atCheckMouseOut = function (DOMCheck) {
	var extCheckOptions = Ext.get(DOMCheck).down("span");
	if (extCheckOptions) extCheckOptions.dom.style.display = "none";
};

CGWidgetCheck.prototype.atCheckAllClick = function (DOMCheck, DOMChecker) {
	this.focus();

	var aExtCheckList = this.extCheckList.select(CSS_WIDGET_ELEMENT_CHECK + ".parent_" + DOMChecker.name);
	aExtCheckList.each(function (extCheck) {
		var checkPos = extCheck.dom.pos;
		var extChecker = extCheck.down(CSS_WIDGET_ELEMENT_CHECKER);
		extChecker.dom.checked = true;
		if (!this.aChecks[checkPos]) return;
		this.aChecks[checkPos].checked = extChecker.dom.checked;
	}, this);

	if (this.saveTimeout) window.clearTimeout(this.saveTimeout);
	this.saveTimeout = window.setTimeout(CGWidgetCheck.prototype.save.bind(this), 500);

	this.Editor.setConfiguration({Field: this.Target, Dialogs: [
		{sName: HISTORY, Store: this.aStores[HISTORY]}
	], Checked: DOMChecker.checked});
	this.Editor.refresh();
};

CGWidgetCheck.prototype.atUncheckAllClick = function (DOMCheck, DOMChecker) {
	this.focus();

	var aExtCheckList = this.extCheckList.select(CSS_WIDGET_ELEMENT_CHECK + ".parent_" + DOMChecker.name);
	aExtCheckList.each(function (extCheck) {
		var checkPos = extCheck.dom.pos;
		var extChecker = extCheck.down(CSS_WIDGET_ELEMENT_CHECKER);
		extChecker.dom.checked = false;
		if (!this.aChecks[checkPos]) return;
		this.aChecks[checkPos].checked = extChecker.dom.checked;
	}, this);

	if (this.saveTimeout) window.clearTimeout(this.saveTimeout);
	this.saveTimeout = window.setTimeout(CGWidgetCheck.prototype.save.bind(this), 500);

	this.Editor.setConfiguration({Field: this.Target, Dialogs: [
		{sName: HISTORY, Store: this.aStores[HISTORY]}
	], Checked: DOMChecker.checked});
	this.Editor.refresh();
};

CGWidgetDate = function (extWidget) {
	this.base = CGWidget;
	this.base(extWidget);
	this.Format = null;
};

CGWidgetDate.prototype = new CGWidget;

CGWidgetDate.prototype.getValue = function () {
	var dtInternalDate = Date.parseDate(this.extValue.dom.value, Date.getPattern(this.Format));
	return (dtInternalDate) ? dtInternalDate.format(DATE_FORMAT_INTERNAL) : "";
};

CGWidgetDate.prototype.getData = function () {
	if (!this.Target) return null;
	if (!this.Target.getCode) return null;
	if (!this.extValue) return null;

	var dtInternalDate = Date.parseDate(this.extValue.dom.value, Date.getPattern(this.Format));
	var sInternalDate = (dtInternalDate) ? dtInternalDate.format(DATE_FORMAT_INTERNAL) : "";

	var Result = new Object();
	Result.code = this.Target.getCode();
	Result.order = -1;
	Result.value = new Array();
	Result.value.push({code: CGIndicator.VALUE, order: 1, value: this.extValue.dom.value});
	Result.value.push({code: CGIndicator.INTERNAL, order: 3, value: sInternalDate});
	if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 3, value: this.extSuper.dom.value});

	Result.toXml = function () {
		var Attribute = new CGAttribute();
		Attribute.code = this.code;
		Attribute.iOrder = this.order;
		for (var iPos = 0; iPos < this.value.length; iPos++) {
			Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
		}
		return Attribute.serialize();
	};

	return Result;
};

CGWidgetDate.prototype.validate = function () {
	var Pattern, dtDate;
	var valid = true;

	if (this.WidgetRequired) {
		if (this.extValue.dom.value != "") this.WidgetRequired.hide();
		else this.WidgetRequired.show();
	}

	if (this.extValue.dom.value == "") {
		this.extValue.removeClass(CLASS_WRONG);
		this.Editor.hideValidationError(VALIDATION_ERROR_FORMAT);
		return true;
	}

	Pattern = Date.getPattern(this.Format);
	dtDate = Date.parseDate(this.extValue.dom.value, Pattern);

	if (dtDate) {
		this.extValue.dom.value = dtDate.format(Pattern);
		this.extValue.removeClass(CLASS_WRONG);
		this.Editor.hideValidationError(VALIDATION_ERROR_FORMAT);
	}
	else {
		this.extValue.addClass(CLASS_WRONG);
		this.Editor.showValidationError(VALIDATION_ERROR_FORMAT);
		valid = false;
	}

	if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";

	return valid;
};

CGWidgetDate.prototype.setTarget = function (Target) {
	this.Target = Target;

	this.createRequiredWidget();

	this.Format = this.Target.getFormat();
	if (this.Format == null) this.Format = "iso8601short";
	this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());

	var value = this.extValue.dom.value;
	if (this.Target.isSequential() && value == "") {
		var dtNow = new Date();
		value = dtNow.format(Date.getPattern(this.Format));
	}

	try {
		var dtInternalDate = Date.parseDate(value, DATE_FORMAT_INTERNAL);
		this.extValue.dom.value = (dtInternalDate != null) ? dtInternalDate.format(Date.getPattern(this.Format)) : "";
	}
	catch (e) {
	}

	this.createOptions();
	this.validate();
	//this.updateData();
};

CGWidgetDate.prototype.clear = function () {
	this.extValue.dom.value = "";
	this.extValue.removeClass(CLASS_WRONG);
};

// #############################################################################################################

CGWidgetDate.prototype.atFocused = function () {
	if (!this.Target) return;
	if (!this.isReady()) this.init();
	if (this.onFocused) this.onFocused();

	this.Editor.show();
	this.Editor.setConfiguration({Field: this.Target, Dialogs: [
		{sName: DATE, Format: this.Format, Edition: this.Target.getEdition()}
	]});
	this.Editor.setData({code: null, value: this.extValue.dom.value});
	this.Editor.onSelect = this.atSelect.bind(this);
	this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
	this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
	this.Editor.onClearValue = this.atClearValue.bind(this);
	this.Editor.refresh();

	if (this.isLocked()) this.Editor.lock();
	else this.Editor.unLock();

	this.validate();
	this.extValue.addClass(CLASS_FOCUS);
	this.extValue.dom.select();

	if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
	if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";
};

CGWidgetDate.prototype.atSelect = function (Data) {
	this.extValue.dom.value = Data.value;
	this.showClearValue();
	this.validate();
	this.updateData();
	if (this.onSelect) this.onSelect(Data);
};

CGWidgetDate.prototype.atKeyUp = function (oEvent) {
	var codeKey = oEvent.getKey();

	this.validate();

	if ((codeKey == oEvent.ESC) && (this.onEscape)) this.onEscape();
	else if ((codeKey == oEvent.ENTER) || (codeKey == oEvent.TAB)) {
		var Data = this.Editor.getData();
		if (Data) this.select(Data);
		if ((codeKey == oEvent.ENTER) && (this.onEnter)) this.onEnter();
	}
	else if (codeKey == oEvent.DOWN) this.Editor.moveDown(this.extValue.dom);
	else if (codeKey == oEvent.UP) this.Editor.moveUp(this.extValue.dom);
	else if (this.onKeyPress) this.onKeyPress(this.extValue.dom.value, codeKey);

	if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";

	if (this.extValue.dom.value != "") this.showClearValue();
	else this.hideClearValue();

	Event.stop(oEvent);
	return false;
};



CGWidgetDate.prototype.atChange = function (oEvent) {
	if (!this.validate())
		this.clear();

	this.updateData();
};

TAG_URL_ID = "::id::";
TAG_URL_IDNODE = "::idnode::";

CGWidgetFile = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);

  if (!extWidget) return;

  this.sServiceURL = HtmlUtil.decode(Context.Config.ApplicationFmsFilesUploadUrl);
  this.idFile = "";
  this.label = "";
  this.extOnlineMenu = null;
  this.delayBlur = true;
  this.cancelBlur = false;
};

CGWidgetFile.prototype = new CGWidget;

CGWidgetFile.prototype.init = function () {
  this.bIsReady = true;
};

CGWidgetFile.prototype.applyBehaviours = function () {
  if (!this.extWidget) return;

  this.extSuper = this.extWidget.down(CSS_WIDGET_ELEMENT_SUPER);
  this.extValue = this.extWidget.down(CSS_WIDGET_ELEMENT_COMPONENT);
  this.extRealValue = this.extWidget.down(CSS_WIDGET_ELEMENT_COMPONENT + "_hidden");

  if (this.extValue == null) return;
  if (this.atFocused) this.extValue.on("focus", this.atFocused, this);
  if (this.atBlur) this.extValue.on("blur", this.atBlur, this);
  if (this.atChange) this.extValue.on('change', this.atChange, this);
  if (this.atKeyDown) this.extValue.on("keydown", this.atKeyDown, this);
  if (this.atKeyPress) this.extValue.on("keypress", this.atKeyPress, this);
  if (this.atKeyUp) this.extValue.on("keyup", this.atKeyUp, this);

  this.setId(this.extValue.dom.id);
};

CGWidgetFile.prototype.createOptions = function () {
  new Insertion.Bottom(this.extWidget.dom, WidgetOptionsTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));
  var extOptions = this.extWidget.select(CSS_WIDGET_ELEMENT_OPTIONS).first();
  this.extOptionClearValue = extOptions.select(CSS_WIDGET_ELEMENT_CLEAR_VALUE).first();
  this.extOptionClearValue.on("click", this.atClearValue, this);
  this.showClearValue();
};

CGWidgetFile.prototype.createOnlineMenu = function (Target) {
  new Insertion.After(this.extValue.dom, WidgetFileOnlineMenuTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));
  this.extOnlineMenu = this.extWidget.select(CSS_WIDGET_ELEMENT_ONLINE_MENU).first();

  var extOptionDownload = this.extOnlineMenu.down(CSS_FILE_DOWNLOAD);
  extOptionDownload.on("click", this.atDownload, this);

  var extOptionClearValue = this.extOnlineMenu.down(CSS_WIDGET_ELEMENT_CLEAR_VALUE);
  extOptionClearValue.on("click", this.atClearValue, this);

  this.extOnlineMenu.hide();
  this.extOnlineMenu.on("click", this.atOnlineMenuClick, this);
};

CGWidgetFile.prototype.destroyOptions = function (Target) {
  this.extOptionClearValue.un("click", this.atClearValue, this);
  this.extOnlineMenu.un("click", this.atFocused, this);
  this.extOnlineMenu = null;
};

CGWidgetFile.prototype.setTarget = function (Target) {
  this.Target = Target;
  this.createRequiredWidget();
  this.setFile(this.extRealValue.dom.value, this.extValue.dom.value);
  this.createOnlineMenu();
  this.createOptions();
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.validate();
  //this.updateData();
};

CGWidgetFile.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;
  if (!this.extValue) return null;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.VALUE, order: 1, value: this.idFile});
  Result.value.push({code: CGIndicator.FORMAT, order: 2, value: getFileExtension(this.idFile).toUpperCase()});
  Result.value.push({code: CGIndicator.DETAILS, order: 3, value: this.label});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 4, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

CGWidgetFile.prototype.setData = function (sData) {
  if (!this.Target) return;
  if (!this.extValue) return;

  var Attribute = new CGAttribute();
  Attribute.unserialize(sData);

  var value = "";
  var IndicatorValue = Attribute.getIndicator(CGIndicator.VALUE);
  if (IndicatorValue) value = IndicatorValue.getValue();

  var details = "";
  var IndicatorDetails = Attribute.getIndicator(CGIndicator.DETAILS);
  if (IndicatorDetails) details = IndicatorDetails.getValue();

  this.setFile(value, details);

  if (this.extOptionClearValue) {
    if (this.idFile != "") this.showClearValue();
    else this.hideClearValue();
  }

  if (this.idFile != "") this.showClearValue();
  else this.hideClearValue();

  this.validate();

  if (this.onChange) this.onChange();
};

CGWidgetFile.prototype.clear = function () {
  this.setFile("", "");
  if (this.onClearValue)
    this.onClearValue(this);
  else {
    this.validate();
    this.updateData();
  }
};

CGWidgetFile.prototype.setFile = function (idFile, label) {
  if (idFile != null) this.idFile = idFile;
  this.label = label;
  if (this.idFile != "") {
    this.extValue.dom.value = this.label != "" ? this.label : HtmlUtil.decode(getFileName(this.idFile));
    this.extRealValue.dom.value = HtmlUtil.decode(this.idFile);
    this.showClearValue();
  }
  else {
    this.extValue.dom.value = "";
    this.extRealValue.dom.value = "";
    this.hideClearValue();
  }
};

CGWidgetFile.prototype.clearValue = function (oEvent) {
  if (this.isLocked()) return;
  this.focus();
  this.clear();
  this.extOnlineMenu.hide();
};

// #############################################################################################################
CGWidgetFile.prototype.atFocused = function (oEvent) {
  if (!this.Target) return false;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  var sURL = this.sServiceURL.replace(TAG_URL_IDNODE, this.Target.getNodeId());

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target, Dialogs: [
    {sName: FILE_UPLOAD, Action: sURL, Label: this.label, MultipleSelection: this.Target.isMultiple(), Limit: this.Target.getLimit()}
  ]});
  this.Editor.onSelect = this.atSelect.bind(this);
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.onDownload = this.atEditorDownload.bind(this);
  this.Editor.onLabelChange = this.atEditorLabelChange.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";

  if (this.idFile != "") this.extOnlineMenu.show();

  return false;
};

CGWidgetFile.prototype.atBlur = function (oEvent) {
  if (this.delayBlur) {
    this.delayBlur = false;
    window.setTimeout(this.atBlur.bind(this), 150);
    return;
  }
  if (this.cancelBlur) {
    this.cancelBlur = false;
    return;
  }
  if ((this.extValue) && (this.extMessageEmpty)) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";
  this.extOnlineMenu.hide();
  this.delayBlur = true;
};

CGWidgetFile.prototype.atSelect = function (Data) {
  if (this.isLocked()) return;
  this.setFile(Data.code, Data.value);
  this.validate();
  this.updateData();
  if (this.onSelect) this.onSelect(Data);
};

CGWidgetFile.prototype.atDownload = function (EventLaunched, DOMDownload) {
  var sSource = HtmlUtil.decode(Context.Config.ApplicationFmsFileDownloadUrl).replace(TAG_URL_ID, this.extRealValue.dom.value);
  sSource = sSource.replace(TAG_URL_IDNODE, this.Target.getNodeId());
  DOMDownload.href = sSource;

  this.extOnlineMenu.hide();
};

CGWidgetFile.prototype.atKeyDown = function (oEvent) {
  var codeKey = oEvent.getKey();

  if ((codeKey == oEvent.ESC) && (this.onEscape)) this.onEscape();
  else if (((codeKey == oEvent.TAB) || (codeKey == oEvent.ENTER)) && (this.onEnter)) this.onEnter();
  else if ((codeKey == oEvent.DELETE) || (codeKey == oEvent.BACKSPACE)) this.clear();

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";

  if (this.idFile != "") this.showClearValue();
  else this.hideClearValue();

  Event.stop(oEvent);
  return false;
};

CGWidgetFile.prototype.atClearValue = function (oEvent) {
  this.clearValue();
  return false;
};

CGWidgetFile.prototype.atEditorDownload = function (DOMDownload) {
  DOMDownload.stop = (this.idFile == "");
  DOMDownload.href = this.extRealValue.dom.value;
};

CGWidgetFile.prototype.atEditorLabelChange = function (label) {
  this.setFile(null, label);
  this.validate();
  this.updateData();
  if (this.onSelect) this.onSelect(Data);
};

CGWidgetFile.prototype.atOnlineMenuClick = function () {
  this.cancelBlur = true;
};

CGWidgetFormula = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
};

CGWidgetFormula.prototype = new CGWidget;

CGWidgetFormula.prototype.init = function () {
  this.bIsReady = true;
};

// #############################################################################################################

CGWidgetFormula.prototype.atFocused = function (oEvent) {
  if (!this.isReady()) this.init();
  this.extValue.addClass(CLASS_FOCUS);
};

CGWidgetFormula.prototype.atChange = function (oEvent) {
};

CGWidgetLink = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
  this.Item = new Object();
  this.Item.code = EMPTY;
  this.Item.value = EMPTY;

  if (!extWidget) return;

  this.extWidget.dom.blur = CGWidgetLink.prototype.blur.bind(this);
  this.extNodeBox = this.extWidget.down(CSS_WIDGET_ELEMENT_NODE_BOX);
  this.extOnlineMenu = null;
  this.extNodeContainer = null;
  this.bSelectingNode = false;
  this.delayBlur = true;
  this.cancelBlur = false;
};

CGWidgetLink.prototype = new CGWidget;

CGWidgetLink.prototype.createOptions = function () {
  new Insertion.Bottom(this.extWidget.dom, WidgetOptionsTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));
  var extOptions = this.extWidget.select(CSS_WIDGET_ELEMENT_OPTIONS).first();

  this.extOptionClearValue = extOptions.select(CSS_WIDGET_ELEMENT_CLEAR_VALUE).first();
  this.extOptionClearValue.on("click", this.atClearValue, this);

  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();

  new Insertion.Bottom(this.extNodeBox.dom, WidgetLinkNodeBoxTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));

  this.extNodeContainer = this.extNodeBox.down(CSS_WIDGET_ELEMENT_NODE_CONTAINER);
  this.extNodeContainer.dom.innerHTML = WidgetLoadingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath});
};

CGWidgetLink.prototype.createOnlineMenu = function () {
  new Insertion.After(this.extValue.dom, WidgetLinkOnlineMenuTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));
  this.extOnlineMenu = this.extWidget.select(CSS_WIDGET_ELEMENT_ONLINE_MENU).first();

  this.extOptionHiperLink = this.extOnlineMenu.down(CSS_WIDGET_ELEMENT_HIPERLINK);
  this.extOptionHiperLink.on("click", this.atHiperLinkClick, this);

  var extOptionClearValue = this.extOnlineMenu.down(CSS_WIDGET_ELEMENT_CLEAR_VALUE);
  extOptionClearValue.on("click", this.atClearValue, this);

  this.extOnlineMenu.hide();
  this.extOnlineMenu.on("click", this.atOnlineMenuClick, this);
};

CGWidgetLink.prototype.destroyOptions = function () {
  this.extOptionClearValue.un("click", this.atClearValue, this);
  this.extOptionHiperLink.un("click", this.atHiperLinkClick, this);
  this.extOptionHiperLink = null;
  this.extOnlineMenu.un("click", this.atFocused, this);
  this.extOnlineMenu = null;
};

CGWidgetLink.prototype.init = function (code, value) {
  this.aCodeNodeTypes = this.Target.getNodeTypes();
  this.initStores();
  this.initColumnModel();
  if (!this.isCustomColumnModel && this.aStores[DATA_LINK]) this.aStores[DATA_LINK].ShowCode = true;
  this.bIsReady = true;
};

CGWidgetLink.prototype.initStores = function () {
  CGWidget.prototype.initStores.call(this);

  if (!this.Target) return;

  var DataLinkLocations = this.Target.getDataLinkLocations();
  if (DataLinkLocations != null)
    this.initDataLinkLocations(DataLinkLocations);
};

CGWidgetLink.prototype.initDataLinkLocations = function (DataLinkLocations) {
  var locationsCountSourceUrl = WidgetTemplateDataLinkLocationsCountUrl.evaluate({'ImagesPath': Context.Config.ImagesPath, 'api': Context.Config.Api, 'domain': DataLinkLocations.Domain, 'code': DataLinkLocations.Code, 'list': LOCATION});
  var locationsSourceUrl = WidgetTemplateDataLinkLocationsUrl.evaluate({'ImagesPath': Context.Config.ImagesPath, 'api': Context.Config.Api, 'domain': DataLinkLocations.Domain, 'code': DataLinkLocations.Code, 'list': LOCATION});
  this.aStores[LOCATION] = {
    "sourceCountUrl" : locationsCountSourceUrl,
    "sourceUrl" : locationsSourceUrl,
    "list" : LOCATION,
    "isRemote" : true
  };
};

CGWidgetLink.prototype.setItem = function (code, value) {
  this.Item.code = code;
  this.Item.value = value;
};

CGWidgetLink.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.CODE, order: 1, value: this.Item.code});
  Result.value.push({code: CGIndicator.VALUE, order: 2, value: this.Item.value});
  Result.value.push({code: CGIndicator.NODE_LINK, order: 3, value: this.Item.code});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 4, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

CGWidgetLink.prototype.setData = function (sData) {
  if (!this.Target) return;
  if (!this.extValue) return;

  var Attribute = new CGAttribute();
  Attribute.unserialize(sData);

  var IndicatorCode = Attribute.getIndicator(CGIndicator.CODE);
  var sValue = Attribute.getIndicatorValue(CGIndicator.VALUE);

  var code = null;
  if (IndicatorCode) code = IndicatorCode.getValue();
  if (code == null) {
    code = Attribute.getIndicatorValue(CGIndicator.NODE_LINK);
  }

  this.extValue.dom.name = code;
  this.extValue.dom.value = sValue;

  this.setItem(code, sValue);

  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();

  this.validate();

  if (this.onChange) this.onChange();
};

CGWidgetLink.prototype.setTarget = function (Target) {
  this.Target = Target;

  this.createRequiredWidget();
  this.createOptions();
  this.createOnlineMenu();
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.setItem(this.extValue.dom.name, this.extValue.dom.value);
  this.addListeners();
  //this.updateData();
};

CGWidgetLink.prototype.addNodeLink = function (sLabel) {
  if (!this.Target.getLinkTemplates) return;

  var Process = new CGProcessAddFieldNodeLink();
  var Templates = this.Target.getLinkTemplates();

  if (Templates.Edit == null) return;

  this.NewItem = new Object();
  this.NewItem.sLabel = sLabel;

  Process.Code = this.aCodeNodeTypes[0];
  Process.Label = sLabel;
  Process.Mode = Templates.Edit;
  Process.IdParent = this.Target.getCollection();
  Process.Container = this.extNodeContainer.dom;
  Process.onComplete = this.onNewItemComplete.bind(this);
  Process.execute();
};

CGWidgetLink.prototype.onNewItemComplete = function (IdNode) {
  var extForm = this.extNodeBox.select(CSS_FORM).first();

  if (extForm) {
    extForm.dom.onFieldFocus = this.atFieldFocus.bind(this);
    extForm.dom.onFieldBlur = this.atFieldBlur.bind(this);
    extForm.dom.onFieldBeforeChange = this.atFieldBeforeChange.bind(this);
    extForm.dom.onFieldChange = this.atFieldChange.bind(this);
  }

  this.lastNode = this.Item.code;
  this.select({code: IdNode, value: this.NewItem.sLabel});
};

CGWidgetLink.prototype.select = function (Data) {
  this.setItem(Data.code, Data.value);
  this.extValue.dom.value = this.Item.value;
  this.validate();
  this.updateData();
  this.Editor.refresh();
  this.showClearValue();

  if (this.onSelect) this.onSelect(Data);
};

CGWidgetLink.prototype.selectOther = function (Data) {
  this.extNodeContainer.dom.innerHTML = WidgetLoadingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath});
  this.addNodeLink(Data.value);
  this.showClearValue();
};

CGWidgetLink.prototype.unSelect = function () {
  this.setItem(EMPTY, EMPTY);
  this.extValue.dom.value = this.Item.value;
  this.hideClearValue();
  this.validate();
  this.updateData();
};

CGWidgetLink.prototype.blur = function () {
  this.extValue.removeClass(CLASS_FOCUS);
  this.extNodeBox.removeClass(CLASS_FOCUS);
  //var extForm = this.extNodeBox.select(CSS_FORM).first();
  //if (extForm) extForm.dom.blur();
};

CGWidgetLink.prototype.showOnlineMenu = function () {
  this.extOptionHiperLink.dom.innerHTML = this.Item.value;
  this.extOptionHiperLink.dom.alt = Lang.Goto + this.Item.value;
  this.extOptionHiperLink.dom.title = Lang.Goto + this.Item.value;
  this.extOnlineMenu.show();
};

CGWidgetLink.prototype.getValue = function () {
  return this.Item.value;
};

CGWidgetLink.prototype.getValueCode = function () {
  return this.Item.code;
};

CGWidgetLink.prototype.clearValue = function () {
  this.focus();
  this.unSelect();
  this.extOnlineMenu.hide();
  if (this.onClearValue) this.onClearValue(this);
};

// #############################################################################################################

CGWidgetLink.prototype.atFocused = function () {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  this.refreshStoreFilters();

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target, allowOthers: true, Dialogs: [
    {sName: HISTORY, Store: this.aStores[HISTORY]},
    {sName: SOURCE_STORE, Store: this.aStores[DATA_LINK], ColumnModel: this.ColumnModel, Parameters: this.Target.getParameters()},
    {sName: LOCATION, Store: this.aStores[LOCATION], Parameters: this.Target.getParameters()}
  ]});
  this.Editor.onSelect = this.atSelect.bind(this);
  this.Editor.onSelectOther = this.atSelectOther.bind(this);
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();
  this.extNodeBox.addClass(CLASS_FOCUS);
  this.bSelectingNode = false;

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";

  if (this.Item.code != "") this.showOnlineMenu();
};

CGWidgetLink.prototype.atBlur = function (oEvent) {
  if (this.delayBlur) {
    this.delayBlur = false;
    window.setTimeout(this.atBlur.bind(this), 150);
    return;
  }
  if (this.cancelBlur) {
    this.cancelBlur = false;
    return;
  }
  if ((this.extValue) && (this.extMessageEmpty)) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";
  if (this.extOnlineMenu) this.extOnlineMenu.hide();
  this.delayBlur = true;
};

CGWidgetLink.prototype.atSelect = function (Data, Source) {
  this.select(Data);
  this.bSelectingNode = true;
};

CGWidgetLink.prototype.atSelectOther = function (Data, Source) {
  this.selectOther(Data);
};

CGWidgetLink.prototype.atChange = function (oEvent) {
  this.unSelect(EMPTY, EMPTY);
};

CGWidgetLink.prototype.atClearValue = function () {
  this.clearValue();
};

CGWidgetLink.prototype.atHiperLinkClick = function () {
  CommandListener.dispatchCommand("showlinknode(" + this.Target.getNodeId() + "," + this.Item.code + ")");
  this.extOnlineMenu.hide();
};

CGWidgetLink.prototype.atKeyUp = function (oEvent) {
  var codeKey = oEvent.getKey();

  if ((codeKey == oEvent.ESC) && (this.onEscape)) this.onEscape();
  else if ((codeKey == oEvent.ENTER) || (codeKey == oEvent.TAB)) {
    var Dialog = this.Editor.getDialog(SOURCE_STORE);
    if (Dialog) {
      var Data = Dialog.getData();
      if (Data) this.select(Data);
    }
    if ((codeKey == oEvent.ENTER) && (this.onEnter)) this.onEnter();
  }
  else if (codeKey == oEvent.DOWN) this.Editor.moveDown(this.extValue.dom);
  else if (codeKey == oEvent.UP) this.Editor.moveUp(this.extValue.dom);
  else if (this.onKeyPress) this.onKeyPress(this.extValue.dom.value, codeKey);

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";

  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();

  Event.stop(oEvent);
  return false;
};

CGWidgetLink.prototype.atFieldFocus = function (DOMField) {
  DOMField.blur();
  this.Target.gotoField(DOMField.getPath());
};

CGWidgetLink.prototype.atFieldBlur = function () {
  //if (this.onBlur) this.onBlur();
};

CGWidgetLink.prototype.atFieldBeforeChange = function (DOMField) {
  if (this.onBeforeChange) this.onBeforeChange(DOMField);
};

CGWidgetLink.prototype.atFieldChange = function (DOMField) {
  if (this.onChange) this.onChange(DOMField);
};

CGWidgetLink.prototype.atOnlineMenuClick = function () {
  this.cancelBlur = true;
};

CGWidgetNode = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
  this.Item = new Object();
  this.Item.code = EMPTY;
  this.Item.value = EMPTY;

  if (!extWidget) return;

  this.extWidget.dom.blur = CGWidgetNode.prototype.blur.bind(this);
  this.extNodeBox = this.extWidget.down(CSS_WIDGET_ELEMENT_NODE_BOX);
  this.extAddButton = this.extWidget.down(CSS_WIDGET_ELEMENT_ADD);
  this.extAddButton.on("click", this.atAddButtonClick, this);

  this.extNodeContainer = null;
};

CGWidgetNode.prototype = new CGWidget;

CGWidgetNode.prototype.createOptions = function () {
  new Insertion.Bottom(this.extNodeBox.dom, WidgetLinkNodeBoxTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));
  this.extNodeContainer = this.extNodeBox.down(CSS_WIDGET_ELEMENT_NODE_CONTAINER);
  this.extNodeContainer.dom.innerHTML = WidgetLoadingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath});
};

CGWidgetNode.prototype.init = function (code, value) {
  var allowAdd = this.Target.allowAdd();

  this.aCodeNodeTypes = this.Target.getNodeTypes();
  this.extAddButton.dom.style.display = (this.Item.code == "" && allowAdd) ? "block" : "none";

  if (this.Item.code == "" && !allowAdd) this.addNode();

  this.bIsReady = true;
};

CGWidgetNode.prototype.setItem = function (code, value) {
  this.Item.code = code;
  this.Item.value = value;
};

CGWidgetNode.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.CODE, order: 1, value: this.Item.code});
  Result.value.push({code: CGIndicator.VALUE, order: 2, value: this.Item.value});
  Result.value.push({code: CGIndicator.NODE, order: 3, value: this.Item.code});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 4, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

CGWidgetNode.prototype.setData = function (sData) {
  if (!this.Target) return;
  if (!this.extValue) return;

  var Attribute = new CGAttribute();
  Attribute.unserialize(sData);

  var IndicatorCode = Attribute.getIndicator(CGIndicator.CODE);
  var sValue = Attribute.getIndicatorValue(CGIndicator.VALUE);

  var code = null;
  if (IndicatorCode) code = IndicatorCode.getValue();
  if (code == null) {
    var IndicatorNode = Attribute.getIndicator(CGIndicator.NODE);
    code = IndicatorNode.getValue();
  }

  this.extValue.dom.name = code;
  this.extValue.dom.value = sValue;

  this.setItem(code, sValue);

  if (code == "") this.hideNode();
  else this.showNode(true);

  this.validate();

  if (this.onChange) this.onChange();
};

CGWidgetNode.prototype.setTarget = function (Target) {
  this.Target = Target;

  this.createRequiredWidget();
  this.createOptions();
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.setItem(this.extValue.dom.name, this.extValue.dom.value);

  this.extAddButton.dom.style.display = this.extValue.dom.name != "" ? "none" : "block";

  if (this.Item.code == "") this.hideNode();
  else this.showNode(true);

  //this.updateData();
};

CGWidgetNode.prototype.isExpanded = function () {
  return (this.extWidget.hasClass(CLASS_EXPANDED));
};

CGWidgetNode.prototype.expand = function () {
  if (this.isExpanded()) return;
  this.extWidget.addClass(CLASS_EXPANDED);
  this.extNodeBox.dom.style.display = "block";
};

CGWidgetNode.prototype.isCollapsed = function () {
  return (!this.extWidget.hasClass(CLASS_EXPANDED));
};

CGWidgetNode.prototype.collapse = function (bAnimate) {
  this.extWidget.removeClass(CLASS_EXPANDED);
  this.extNodeBox.dom.style.display = "none";
};

CGWidgetNode.prototype.hideLoading = function () {
  var extLoading = this.extNodeContainer.down(CSS_WIDGET_ELEMENT_LOADING);
  if (extLoading) extLoading.dom.style.display = "none";
};

CGWidgetNode.prototype.addNode = function () {
  if (!this.Target.getNodeTemplates) return;

  var Process = new CGProcessAddFieldNode();
  var Templates = this.Target.getNodeTemplates();

  if (Templates.Edit == null) return;

  this.NewItem = new Object();
  this.extNodeContainer.dom.innerHTML = WidgetLoadingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath});

  Process.Code = this.aCodeNodeTypes[0];
  Process.Mode = Templates.Edit;
  Process.Container = this.extNodeContainer.dom;
  Process.onComplete = this.onNewItemComplete.bind(this);
  Process.execute();
};

CGWidgetNode.prototype.onNewItemComplete = function (IdNode) {
  var extForm = this.extNodeBox.select(CSS_FORM).first();

  this.hideLoading();

  if (extForm) {
    extForm.addClass(CLASS_NODE_FIELD);
    extForm.dom.onFieldFocus = this.atFieldFocused.bind(this);
    extForm.dom.onFieldBlur = this.atFieldBlur.bind(this);
    extForm.dom.onFieldBeforeChange = this.atFieldBeforeChange.bind(this);
    extForm.dom.onFieldChange = this.atFieldChange.bind(this);
  }

  this.lastNode = this.Item.code;
  this.select({code: IdNode, value: this.NewItem.sLabel});
  this.extAddButton.dom.style.display = (this.Item.code == "" && allowAdd) ? "block" : "none";
};

CGWidgetNode.prototype.loadNode = function () {
  if (!this.Target.getNodeTemplates) return;

  var Process = new CGProcessLoadFieldNode();
  var Templates = this.Target.getNodeTemplates();

  if (Templates.Edit == null) return;

  Process.Id = this.Item.code;
  Process.Mode = Templates.Edit;
  Process.Container = this.extNodeContainer.dom;
  Process.onComplete = this.onLoadItemComplete.bind(this);
  Process.execute();
};

CGWidgetNode.prototype.onLoadItemComplete = function (IdNode) {
  var extForm = this.extNodeBox.select(CSS_FORM).first();

  this.hideLoading();

  if (extForm) {
    extForm.addClass(CLASS_NODE_FIELD);
    extForm.dom.onFieldFocus = this.atFieldFocused.bind(this);
    extForm.dom.onFieldBlur = this.atFieldBlur.bind(this);
    extForm.dom.onFieldBeforeChange = this.atFieldBeforeChange.bind(this);
    extForm.dom.onFieldChange = this.atFieldChange.bind(this);
  }

  this.lastNode = this.Item.code;
};

CGWidgetNode.prototype.select = function (Data) {
  this.setItem(Data.code, Data.value);
  this.extValue.dom.value = this.Item.value;
  this.validate();
  this.updateData();
  this.Editor.refresh();

  if (this.onSelect) this.onSelect(Data);
};

CGWidgetNode.prototype.showNode = function (bForceRefresh) {
  if (this.Item.code == EMPTY) return;

  if (!this.isExpanded()) this.expand();

  if ((bForceRefresh) || (this.lastNode != this.Item.code)) {
    this.extNodeContainer.dom.innerHTML = WidgetLoadingTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath});
    this.loadNode();
  }
};

CGWidgetNode.prototype.hideNode = function () {
  this.extNodeContainer.dom.innerHTML = "<div class='emptynode'>" + Lang.Widget.EmptyNode + "</div>";
};

CGWidgetNode.prototype.blur = function () {
  this.extValue.removeClass(CLASS_FOCUS);
  this.extNodeBox.removeClass(CLASS_FOCUS);
  //var extForm = this.extNodeBox.select(CSS_FORM).first();
  //if (extForm) extForm.dom.blur();
};

// #############################################################################################################

CGWidgetNode.prototype.atFocused = function () {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target});
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();
  this.extNodeBox.addClass(CLASS_FOCUS);

  if (!this.bSelectingNode) this.showNode();
  this.bSelectingNode = false;

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";
};

CGWidgetNode.prototype.atKeyUp = function (oEvent) {
  var codeKey = oEvent.getKey();

  if ((codeKey == oEvent.ESC) && (this.onEscape)) this.onEscape();
  else if ((codeKey == oEvent.ENTER) || (codeKey == oEvent.TAB)) {
    var Dialog = this.Editor.getDialog(SOURCE_STORE);
    if (Dialog) {
      var Data = Dialog.getData();
      if (Data) this.select(Data);
    }
    if ((codeKey == oEvent.ENTER) && (this.onEnter)) this.onEnter();
  }
  else if (codeKey == oEvent.DOWN) this.Editor.moveDown(this.extValue.dom);
  else if (codeKey == oEvent.UP) this.Editor.moveUp(this.extValue.dom);
  else if (this.onKeyPress) this.onKeyPress(this.extValue.dom.value, codeKey);

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";

  Event.stop(oEvent);
  return false;
};

CGWidgetNode.prototype.atFieldFocused = function (DOMField) {
  DOMField.blur();
  this.Target.gotoField(DOMField.getPath());
};

CGWidgetNode.prototype.atFieldBlur = function () {
  //if (this.onBlur) this.onBlur();
};

CGWidgetNode.prototype.atFieldBeforeChange = function (DOMField) {
  if (this.onBeforeChange) this.onBeforeChange(DOMField);
};

CGWidgetNode.prototype.atFieldChange = function (DOMField) {
  var extNode = this.extNodeContainer.down(CSS_NODE);
  var Process = new CGProcessSaveFieldNode();
  Process.DOMNode = extNode.dom;
  Process.DOMField = DOMField;
  Process.execute();
};

CGWidgetNode.prototype.atAddButtonClick = function () {
  if (!this.isReady()) this.init();
  this.addNode();
};

CGWidgetList = function (extWidget) {
    this.base = CGWidget;
    this.base(extWidget);

    if (!extWidget) return;

    this.extWidget.dom.focus = CGWidgetList.prototype.focus.bind(this);
    this.aElementsWidgets = new Array();
    this.extMoreLink = this.extWidget.down(CSS_WIDGET_ELEMENT_MORE_LINK);
    this.extList = this.extWidget.down(CSS_WIDGET_ELEMENT_LIST);
    this.extTemplate = this.extWidget.down(CSS_WIDGET_ELEMENT_TEMPLATE);

    this.DOMDragDropHolder = $(new Insertion.Bottom(this.extList.dom, "<div style='display:none;border:1px solid #ccc;background:rgb(225,225,225);'></div>").element.descendants().last());
    this.DOMDragDropHolder.DOMElement = null;

    if (this.extMoreLink) Event.observe(this.extMoreLink.dom, "click", this.atMoreLinkClick.bind(this));

    this.registerElements();
};

CGWidgetList.prototype = new CGWidget;

CGWidgetList.prototype.init = function () {
    for (var index in this.aElementsWidgets) {
        if (isFunction(this.aElementsWidgets[index])) continue;
        var Widget = this.aElementsWidgets[index];
        if (!Widget.isInit) Widget.init();
    }
    this.bIsReady = true;
};

CGWidgetList.prototype.destroy = function () {
    for (var index in this.aElementsWidgets) {
        if (isFunction(this.aElementsWidgets[index])) continue;
        var Widget = this.aElementsWidgets[index];
        Widget.destroy();
        WidgetManager.unregister(Widget.getId());
    }
    this.destroyOptions();
    this.destroyBehaviours();
};

CGWidgetList.prototype.registerElementOptions = function (extElement, extWidget) {
    var Type, extOptions, extWidgetOptions, DOMDeleteOption, DOMMoveOption;

    if ((extOptions = extElement.select(CSS_WIDGET_ELEMENT_LIST_OPTIONS).first()) == null) return;
    if ((extWidgetOptions = extElement.select(CSS_EDITOR_DIALOG_ELEMENT_ITEM_WIDGET).first()) == null) return;

    Type = extWidget.dom.getType();

    if (Type == WIDGET_COMPOSITE) this.extWidget.addClass(CLASS_WIDGET_ELEMENT_LIST_ITEM_OPTIONS_COMPOSITE);

    DOMDeleteOption = extWidgetOptions.down(CSS_WIDGET_ELEMENT_LIST_ITEM_DELETE).dom;
    if (Type == WIDGET_COMPOSITE || Type == WIDGET_NODE) {
        Event.observe(DOMDeleteOption, 'click', this.atElementDeleteClick.bindAsEventListener(this, DOMDeleteOption, extWidget.dom));
    }
    else DOMDeleteOption.style.display = "none";

    DOMMoveOption = extOptions.select(CSS_WIDGET_ELEMENT_LIST_OPTIONS_MOVE).first().dom;
    extWidget.dom.DragObject = new dragObject(extElement.dom, DOMMoveOption, new Position(0, -30), new Position(0, this.extList.getBottom() - 30), CGWidgetList.prototype.atElementDragStart.bind(this, DOMMoveOption), CGWidgetList.prototype.atElementDragMove.bind(this), CGWidgetList.prototype.atElementDragEnd.bind(this, DOMMoveOption), false);
};

CGWidgetList.prototype.registerElementWidget = function (extElement, extWidget) {
    var Id = (this.Target) ? this.getId() + "." + this.aElementsWidgets.size() : Ext.id();

    extWidget.dom.Id = Id;
    extWidget.dom.iOrder = this.aElementsWidgets.size();
    this.aElementsWidgets[Id] = WidgetFactory.get(extWidget.dom.getType(), extWidget);
    this.aElementsWidgets[Id].setWidgetRequired(this.WidgetRequired);
    if (this.Target) {
        this.aElementsWidgets[Id].setId(Id);
        this.aElementsWidgets[Id].setEditor(EditorsFactory.get(this.Target.getType())); // Important. This line before setfield
        this.aElementsWidgets[Id].setTarget(this.Target);
        this.aElementsWidgets[Id].showClearValue();
        this.aElementsWidgets[Id].lockClearValue();
    }
    this.aElementsWidgets[Id].onKeyPress = this.atWidgetKeyPress.bind(this, Id);
    this.aElementsWidgets[Id].onFocused = this.atWidgetFocused.bind(this, Id);
    this.aElementsWidgets[Id].onChange = this.updateData.bind(this, Id);
    this.aElementsWidgets[Id].onEnter = this.atEnter.bind(this, Id);
    this.aElementsWidgets[Id].onEscape = this.atEscape.bind(this, Id);
    this.aElementsWidgets[Id].onLoadDefaultValue = this.atFieldLoadDefaultValue.bind(this, Id);
    this.aElementsWidgets[Id].onAddDefaultValue = this.atFieldAddDefaultValue.bind(this, Id);
    this.aElementsWidgets[Id].clearValue = this.clearValue.bind(this, Id);

    return this.aElementsWidgets[Id];
};

CGWidgetList.prototype.registerElement = function (extElement) {
    var extWidget;

    if ((extWidget = extElement.select(CSS_WIDGET).first()) == null) return;

    this.registerElementOptions(extElement, extWidget);
    this.registerElementWidget(extElement, extWidget);

    return extElement;
};

CGWidgetList.prototype.registerElements = function () {
    var aElements = this.getElements();
    for (var iPos = 0; iPos < aElements.length; iPos++) {
        var extElement = Ext.get(aElements[iPos]);
        var Constructor = Extension.getEditNodeConstructor();
        Constructor.init(extElement.dom);
        this.registerElement(extElement);
    }
};

CGWidgetList.prototype.getElements = function () {
    var aResult = new Array();
    var aExtListElements = this.extList.select("> " + CSS_WIDGET_ELEMENT_LIST_ITEM);
    aExtListElements.each(function (extElement) {
        var extParent = extElement.up(CSS_WIDGET_ELEMENT_LIST);
        if (extParent != this.extList) return;
        if ((extElement.dom.id == null) || (extElement.dom.id == "")) extElement.dom.id = Ext.id();
        aResult.push(extElement.dom.id);
    }, this);
    return aResult;
};

CGWidgetList.prototype.getLastElement = function () {
    var aElements = this.getElements();
    return aElements[aElements.length - 1];
};

CGWidgetList.prototype.getElementWidget = function (DOMElement) {
    var extElement = Ext.get(DOMElement);
    var extWidget = extElement.select(CSS_WIDGET).first();
    if (extWidget == null) return null;
    return this.aElementsWidgets[extWidget.dom.Id];
};

CGWidgetList.prototype.getData = function () {
    var iOrder = 1;
    var aElements = this.getElements();
    var aResult = new Array();

    aResult.code = this.Target.getCode();
    aResult.order = -1;

    for (var iPos = 0; iPos < aElements.length; iPos++) {
        var extElement = Ext.get(aElements[iPos]);
        var Widget = this.getElementWidget(extElement.dom);
        var FieldData = Widget != null ? Widget.getData() : this.getItemData(iPos);
        if (FieldData == null) return null;
        FieldData.order = iOrder;
        aResult.push(FieldData);
        iOrder++;
    }

    aResult.toXml = function () {
        var Attribute = new CGAttribute();
        var AttributeList = new CGAttributeList();
        var sData = EMPTY;

        Attribute.code = this.code;
        Attribute.iOrder = this.order;

        for (var iPos = 0; iPos < this.length; iPos++) {
            if (Attribute.code == "") Attribute.code = this[iPos].code;
            sData += this[iPos].toXml();
        }

        sData = AttributeList.serializeWithData(sData);

        return Attribute.serializeWithData(sData);
    };

    return aResult;
};

CGWidgetList.prototype.setData = function (sData) {
    if (!this.Target) return;

    this.clear();

    var Attribute = new CGAttribute();
    Attribute.unserialize(sData);

    var aAttributes = Attribute.getAttributes();
    for (var iPos = 0; iPos < aAttributes.length; iPos++) {
        var CurrentAttribute = aAttributes[iPos];
        var extElement = this.addElement();
        var IdWidget = extElement.select(CSS_WIDGET).first().dom.Id;
        this.aElementsWidgets[IdWidget].onChange = null;
        this.aElementsWidgets[IdWidget].setData(CurrentAttribute.serialize());
        this.aElementsWidgets[IdWidget].onChange = this.updateData.bind(this, IdWidget);
    }

    this.validate();

    if (this.onChange) this.onChange();
};

CGWidgetList.prototype.getItemData = function(pos) {
    var data = this.Target.getData();
    var Attribute = new CGAttribute();
    Attribute.unserialize(data);
    var result = Attribute.getAttributes()[pos];
    result.toXml = function(){
        return result;
    }
};

CGWidgetList.prototype.setTarget = function (Target) {
    this.Target = Target;
    this.createRequiredWidget();

    var editor = EditorsFactory.get(this.Target.getType());
    editor.onSelectMultiple = this.atSelectMultiple.bind(this);

    for (var Id in this.aElementsWidgets) {
        if (isFunction(this.aElementsWidgets[Id])) continue;
        this.aElementsWidgets[Id].onChange = null;
        this.aElementsWidgets[Id].setWidgetRequired(this.WidgetRequired);
        this.aElementsWidgets[Id].setEditor(editor); // Important. This line before setfield
        this.aElementsWidgets[Id].setTarget(this.Target);
        this.aElementsWidgets[Id].onChange = this.updateData.bind(this, Id);
        this.aElementsWidgets[Id].showClearValue();
        this.aElementsWidgets[Id].lockClearValue();
    }

    //this.updateData();
};

CGWidgetList.prototype.setReadonly = function (bValue) {
    for (var Id in this.aElementsWidgets) {
        if (isFunction(this.aElementsWidgets[Id])) continue;
        this.aElementsWidgets[Id].setReadonly(bValue);
    }
};

CGWidgetList.prototype.validate = function () {
    if (!this.WidgetRequired) return;
    if (this.countElements() == 0) this.WidgetRequired.show();
    else this.WidgetRequired.hide();
};

CGWidgetList.prototype.getDOMElementFromId = function (Id) {
    var Widget = this.aElementsWidgets[Id];
    if (!Widget) return null;
    return Ext.get(Widget.getDOM()).up(CSS_WIDGET_ELEMENT_LIST_ITEM).dom;
};

CGWidgetList.prototype.addElement = function () {
    var extElement, extWidget;
    var sContent;
    var Id = Ext.id();

    new Insertion.Bottom(this.extList.dom, WidgetListElementTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'id': Id, 'widget': cleanContentIds(this.extTemplate.dom.innerHTML)}));
    extElement = Ext.get(this.getLastElement());

    var Constructor = Extension.getEditNodeConstructor();
    Constructor.init(extElement.dom);

    if (this.onAdd) this.onAdd(extElement.dom);

    this.registerElement(extElement);
    this.validate();
    this.updateData();
    this.refreshDialog();

    var IdWidget = extElement.select(CSS_WIDGET).first().dom.Id;
    if (this.aElementsWidgets[IdWidget]) {
        this.aElementsWidgets[IdWidget].isInit = true;
        this.aElementsWidgets[IdWidget].init();
        this.aElementsWidgets[IdWidget].focus();
    }

    return extElement;
};

CGWidgetList.prototype.clear = function () {
    var aElements = this.getElements();
    for (var iPos = 0; iPos < aElements.length; iPos++) {
        var DOMElement = $(aElements[iPos]);
        this.removeElement(DOMElement);
    }
};

CGWidgetList.prototype.removeElement = function (DOMElement) {
    var extWidget = Ext.get(DOMElement).select(CSS_WIDGET).first();
    var DOMElement = $(DOMElement);
    if (this.aElementsWidgets[extWidget.dom.Id].onRemove) this.aElementsWidgets[extWidget.dom.Id].destroy();
    delete this.aElementsWidgets[extWidget.dom.Id];
    DOMElement.remove();
    this.validate();
    this.updateOrders();
    this.updateData();
    this.refreshDialog();
    if (this.onDelete) this.onDelete();
};

CGWidgetList.prototype.buryElementToLast = function (DOMElement) {
    var extLast = Ext.get(this.getLastElement());
    if (DOMElement != extLast.dom) {
        this.extList.dom.removeChild(DOMElement);
        this.extList.dom.appendChild(DOMElement);
        this.updateOrders();
        this.updateData();
        this.refreshDialog();
    }
};

CGWidgetList.prototype.updateOrders = function () {
    var extWidgetList = this.extList.select(CSS_WIDGET);
    var iOrder = 1;
    extWidgetList.each(function (extWidget) {
        extWidget.dom.iOrder = iOrder;
        iOrder++;
    }, this);
};

CGWidgetList.prototype.reorderElements = function (aOrder) {

    for (var iPos = 0; iPos < aOrder.length; iPos++) {
        var DOMElement = this.getDOMElementFromId(aOrder[iPos]);
        this.buryElementToLast(DOMElement);
    }

    this.updateData();
    this.refreshDialog();
};

CGWidgetList.prototype.countElements = function () {
    return this.getElements().length;
};

CGWidgetList.prototype.getWidgetsInfo = function () {
    var aItems = new Array();

    var extWidgetList = this.extList.select(CSS_WIDGET);
    extWidgetList.each(function (extWidget) {
        var Widget = this.aElementsWidgets[extWidget.dom.Id];
        if (!Widget) return;
        aItems.push({id: extWidget.dom.Id, title: Widget.getValue()});
    }, this);

    return aItems;
};

CGWidgetList.prototype.focus = function () {
    var Dialog;

    if (!this.Target) return;
    if (!this.isReady()) this.init();

    this.Editor.show();
    this.Editor.setConfiguration({Field: this.Target, Dialogs: [
        {sName: LIST, Items: this.getWidgetsInfo()}
    ]});
    this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
    this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
    this.Editor.onClearValue = this.atClearValue.bind(this);
    this.Editor.refresh();

    if (this.isLocked()) this.Editor.lock();
    else this.Editor.unLock();

    if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());

    Dialog = this.Editor.getDialog(LIST);
    Dialog.onAdd = CGWidgetList.prototype.atEditorAdd.bind(this);
    Dialog.onReorder = CGWidgetList.prototype.atEditorReorder.bind(this);
    Dialog.onDelete = CGWidgetList.prototype.atEditorDelete.bind(this);

    this.bFocused = true;
    this.extWidget.addClass(CLASS_FOCUS);
    if (this.onFocused) this.onFocused();
};

CGWidgetList.prototype.refreshDialog = function () {
    var Dialog = this.Editor.getDialog(LIST);
    Dialog.setData(this.getWidgetsInfo());
    Dialog.refresh();
};

CGWidgetList.prototype.setObserver = function (Observer, iPos) {
    var extValue;

    if (Observer == null) {
        for (var id in this.aElementsWidgets) {
            if (isFunction(this.aElementsWidgets[id])) continue;
            this.aElementsWidgets[id].setObserver(Observer, iPos);
        }
        return;
    }

    extValue = $(Observer.field);
    if (extValue) {
        var DOMWidget = extValue.up(CSS_WIDGET);
        if (DOMWidget && this.aElementsWidgets[DOMWidget.Id]) {
            this.aElementsWidgets[DOMWidget.Id].setObserver(Observer, iPos);
        }
    }
};

CGWidgetList.prototype.clearValue = function (Id) {
    if (this.isLocked()) return;
    if (!this.aElementsWidgets[Id]) return false;
    this.removeElement(this.getDOMElementFromId(Id));
};

// #############################################################################################################
CGWidgetList.prototype.atSelectMultiple = function (dataList) {
    var onChange = this.onChange;

    try {
        this.onChange = null;

        if (this.countElements() > 0) {
            var extElement = Ext.get(this.getLastElement());
            var widget = this.getElementWidget(extElement);
            if (widget.getValue() == "")
                this.removeElement(extElement.dom);
        }

        for (var i = 0; i < dataList.length; i++) {
            var extElement = this.addElement();
            var IdWidget = extElement.select(CSS_WIDGET).first().dom.Id;
            this.notifySelect(dataList[i], IdWidget);
        }
    }
    finally {
        this.onChange = onChange;
    }

    this.updateData();
};

CGWidgetList.prototype.notifySelect = function (data, IdWidget) {
    this.aElementsWidgets[IdWidget].onChange = null;
    this.aElementsWidgets[IdWidget].atSelect(data);
    this.aElementsWidgets[IdWidget].onChange = this.updateData.bind(this, IdWidget);
};

CGWidgetList.prototype.atWidgetKeyPress = function (IdWidget, sValue, codeKey) {
    if (this.onKeyPress) this.onKeyPress(sValue, codeKey);
};

CGWidgetList.prototype.atWidgetFocused = function (IdWidget) {
    var Widget = this.aElementsWidgets[IdWidget];

    var editor = EditorsFactory.get(this.Target.getType());
    editor.onSelectMultiple = this.atSelectMultiple.bind(this);

    if (Widget == null) return;
    if (!this.isReady()) this.init();

    if (this.onFocused) this.onFocused(Widget);
};

CGWidgetList.prototype.atEnter = function () {
    if (this.onEnter) this.onEnter();
};

CGWidgetList.prototype.atEscape = function () {
    if (this.onEscape) this.onEscape();
};

CGWidgetList.prototype.atMoreLinkClick = function (oEvent) {
    if (!this.isLocked()) this.addElement();
    if (oEvent) Event.stop(oEvent);
    return false;
};

CGWidgetList.prototype.atElementDeleteClick = function (oEvent, DOMTarget, DOMWidget) {
    if (this.isLocked()) return;
    var extTarget = Ext.get(DOMTarget);
    this.focus();
    DOMElement = extTarget.up(CSS_WIDGET_ELEMENT_LIST_ITEM).dom;
    this.removeElement(DOMElement);
};

CGWidgetList.prototype.atElementDragStart = function (DOMMoveOption, oEvent, DOMElement) {
    if (this.isLocked()) return;
    var iHeight = Ext.get(DOMElement).getHeight();
    this.extList.addClass("draglist");
    Ext.get(DOMMoveOption).addClass("grabbing");
    DOMElement.style.top = DOMElement.offsetTop + 'px';
    DOMElement.style.left = DOMElement.offsetLeft + 'px';
    DOMElement.className = "drag";
    this.DOMDragDropHolder.style.display = "block";
    this.DOMDragDropHolder.style.height = iHeight + "px";
    this.extList.dom.insertBefore(this.DOMDragDropHolder, DOMElement);
    this.DOMDragDropHolder.DOMElement = DOMElement;
};

CGWidgetList.prototype.atElementDragMove = function (oPosition, DOMElement, oEvent) {
    if (this.isLocked()) return;
    var yPos = oPosition.Y + (oEvent.layerY ? oEvent.layerY : oEvent.offsetY);
    var temp;
    var bestItem = "end";

    for (var i = 0; i < this.extList.dom.childNodes.length; i++) {
        if (this.extList.dom.childNodes[i].className == "element") {
            temp = parseInt(Ext.get(this.extList.dom.childNodes[i]).getHeight());
            if (temp / 2 >= yPos) {
                bestItem = this.extList.dom.childNodes[i];
                break;
            }
            yPos -= temp;
        }
    }

    if (bestItem == this.DOMDragDropHolder || bestItem == this.DOMDragDropHolder.DOMElement) return;

    this.DOMDragDropHolder.DOMElement = bestItem;
    if (bestItem != "end") this.extList.dom.insertBefore(this.DOMDragDropHolder, this.extList.dom.childNodes[i]);
    else this.extList.dom.appendChild(this.DOMDragDropHolder);
};

CGWidgetList.prototype.atElementDragEnd = function (DOMMoveOption, DOMElement) {
    if (this.isLocked()) return;

    Ext.get(DOMMoveOption).removeClass("grabbing");

    this.DOMDragDropHolder.style.display = "none";

    if (this.DOMDragDropHolder.DOMElement != null) {
        this.DOMDragDropHolder.DOMElement = null;
        this.extList.dom.replaceChild(DOMElement, this.DOMDragDropHolder);
    }

    DOMElement.className = 'element';
    DOMElement.style.top = '0px';
    DOMElement.style.left = '0px';
    this.extList.removeClass("draglist");

    this.updateOrders();
    this.updateData();
    this.refreshDialog();
};

CGWidgetList.prototype.atEditorAdd = function () {
    if (this.isLocked()) return;
    this.addElement();
};

CGWidgetList.prototype.atEditorReorder = function (aOrder) {
    if (this.isLocked()) return;
    this.reorderElements(aOrder);
};

CGWidgetList.prototype.atEditorDelete = function (aElements) {
    if (this.isLocked()) return;
    for (var iPos = 0; iPos < aElements.length; iPos++) {
        var DOMElement = this.getDOMElementFromId(aElements[iPos]);
        if (DOMElement) this.removeElement(DOMElement);
    }
};

CGWidgetList.prototype.atFieldLoadDefaultValue = function (Id) {
};

CGWidgetList.prototype.atFieldAddDefaultValue = function (Id) {
};

CGWidgetList.prototype.atClearValue = function (Id) {
    this.clearValue(Id);
    return false;
};

CGWidgetTable = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);

  if (!extWidget) return;

  this.extWidget.dom.focus = CGWidgetTable.prototype.focus.bind(this);
  this.extMoreLink = this.extWidget.down(CSS_WIDGET_ELEMENT_TABLE_MORE_LINK);
  this.extRemoveLink = this.extWidget.down(CSS_WIDGET_ELEMENT_TABLE_REMOVE_LINK);
  this.extTable = this.extWidget.down(CSS_WIDGET_ELEMENT_TABLE);
  this.extTemplate = this.extWidget.down(CSS_WIDGET_ELEMENT_TEMPLATE);
  this.rowTemplate = this.extWidget.down(CSS_WIDGET_ELEMENT_TABLE_ROW_TEMPLATE).dom.innerHTML;

  this.Attribute = null;
  this.iPos = 0;
  this.ElementWidget = null;
  this.aObservers = new Array();

  if (this.extMoreLink) Event.observe(this.extMoreLink.dom, "click", this.atMoreLinkClick.bind(this));
  if (this.extRemoveLink) Event.observe(this.extRemoveLink.dom, "click", this.atRemoveLinkClick.bind(this));

  this.registerWidget();
  this.registerElements();
};

CGWidgetTable.prototype = new CGWidget;

CGWidgetTable.prototype.init = function () {
  if (this.ElementWidget != null)
    if (!this.ElementWidget.isInit) this.ElementWidget.init();
  this.bIsReady = true;
};

CGWidgetTable.prototype.destroy = function () {
  this.ElementWidget.destroy();
  WidgetManager.unregister(this.ElementWidget.getId());
  this.destroyOptions();
  this.destroyBehaviours();
};

CGWidgetTable.prototype.getElementId = function (extElement) {
  return extElement.dom.id.replace(TABLE_VIEW_ELEMENT_PREFIX, "");
};

CGWidgetTable.prototype.registerWidget = function (extWidget) {
  var Type;
  var Id = (this.Target) ? this.getId() : Ext.id();

  if ((extWidget = this.extWidget.select(CSS_EDITOR_DIALOG_ELEMENT_ITEM_WIDGET + " " + CSS_WIDGET).first()) == null) return;

  var Constructor = Extension.getEditNodeConstructor();
  Constructor.init(extWidget.dom);

  Type = extWidget.dom.getType();
  if (Type == WIDGET_COMPOSITE) this.extWidget.addClass(CLASS_WIDGET_ELEMENT_LIST_ITEM_OPTIONS_COMPOSITE);

  extWidget.dom.Id = Id;
  this.ElementWidget = WidgetFactory.get(extWidget.dom.getType(), extWidget);
  this.ElementWidget.setWidgetRequired(this.WidgetRequired);
  if (this.Target) {
    this.ElementWidget.setId(Id);
    this.ElementWidget.setEditor(EditorsFactory.get(this.Target.getType())); // Important. This line before setfield
    this.ElementWidget.setTarget(this.Target);
  }
  this.ElementWidget.onKeyPress = this.atWidgetKeyPress.bind(this);
  this.ElementWidget.onFocused = this.atWidgetFocused.bind(this);
  this.ElementWidget.onChange = this.atWidgetChange.bind(this);
  this.ElementWidget.onSelect = this.atWidgetChange.bind(this);
  this.ElementWidget.onRefresh = this.atWidgetRefresh.bind(this);
  this.ElementWidget.onEnter = this.atEnter.bind(this);
  this.ElementWidget.onEscape = this.atEscape.bind(this);
  this.ElementWidget.showClearValue();
  this.ElementWidget.lockClearValue();

  return this.ElementWidget;
};

CGWidgetTable.prototype.registerElement = function (extElement, iPos) {
  extElement.dom.onActivate = CGWidgetTable.prototype.atActivateElement.bind(this);
  extElement.dom.onMove = CGWidgetTable.prototype.atMoveElement.bind(this);

  var extCheckOption = extElement.down(CSS_WIDGET_ELEMENT_TABLE_ITEM_CHECK);
  if (extCheckOption != null) Event.observe(extCheckOption.dom, 'click', this.atElementCheckClick.bindAsEventListener(this, extCheckOption.dom, this.ElementWidget.getDOM()));
};

CGWidgetTable.prototype.registerElements = function () {
  var aExtTableElements = null, iPos = 0;

  aExtTableElements = this.extTable.select(CSS_WIDGET_ELEMENT_TABLE_ITEM);

  aExtTableElements.each(function (extElement) {
    var extParent = extElement.up("ul");
    var Id = Ext.id();

    if (extParent != this.extTable) return;
    if ((extElement.dom.id == null) || (extElement.dom.id == "")) extElement.dom.id = Id;

    this.registerElement(extElement, iPos);

    iPos++;
  }, this);

};

CGWidgetTable.prototype.getElements = function () {
  var aResult = new Array();
  var aExtElements = this.extTable.select(CSS_WIDGET_ELEMENT_LIST_ITEM);
  aExtElements.each(function (extElement) {
    var extParent = extElement.up("ul");
    if (extParent != this.extTable) return;
    aResult.push(extElement.dom.id);
  }, this);
  return aResult;
};

CGWidgetTable.prototype.getSelectedElements = function () {
  var aElements = this.getElements();
  var aResult = new Array();
  for (var i = 0; i < aElements.length; i++) {
    var extElement = Ext.get(aElements[i]);
    var extChecked = extElement.down(CSS_WIDGET_ELEMENT_TABLE_ITEM_CHECK);
    if (extChecked.dom.checked) aResult.push(aElements[i]);
  }
  return aResult;
};

CGWidgetTable.prototype.getFirstElement = function () {
  var aElements = this.getElements();
  if (aElements.length == 0) return null;
  return aElements[0];
};

CGWidgetTable.prototype.getLastElement = function () {
  var aElements = this.getElements();
  if (aElements.length == 0) return null;
  return aElements[aElements.length - 1];
};

CGWidgetTable.prototype.getData = function () {
  var aResult = new Array();
  var AttributeList = this.Attribute.getAttributeList();
  var aAttributes = AttributeList.getAttributes();

  aResult.code = this.Target.getCode();
  aResult.order = -1;
  aResult.attributes = aAttributes;

  aResult.toXml = function () {
    var Attribute = new CGAttribute();
    var AttributeList = Attribute.getAttributeList();

    Attribute.setCode(this.code);
    Attribute.setOrder(this.order);

    for (var i = 0; i < this.attributes.length; i++) {
      var CurrentAttribute = this.attributes[i];
      AttributeList.addAttribute(CurrentAttribute);
    }

    return Attribute.serialize();
  };

  return aResult;
};

CGWidgetTable.prototype.setData = function (sData) {
  if (!this.Target) return;

  this.clear();

  var Attribute = new CGAttribute();
  Attribute.unserialize(sData);

  var extElement = null;
  var aAttributes = Attribute.getAttributes();
  for (var i = 0; i < aAttributes.length; i++) {
    if (i == 0) extElement = this.addElement(aAttributes[i]);
    else this.addElement(aAttributes[i]);
  }

  if (extElement != null) this.activateElement(extElement);
  this.validate();
  if (this.onChange) this.onChange();
};

CGWidgetTable.prototype.getValue = function () {
  return this.ElementWidget.getValue();
};

CGWidgetTable.prototype.setTarget = function (Target) {
  this.Target = Target;

  this.Attribute = new CGAttribute();
  this.Attribute.unserialize(this.Target.getData());
  this.createRequiredWidget();

  this.ElementWidget.onChange = null;
  this.ElementWidget.setWidgetRequired(this.WidgetRequired);
  this.ElementWidget.setEditor(EditorsFactory.get(this.Target.getType())); // Important. This line before setfield
  this.ElementWidget.setTarget(this.Target);
  this.ElementWidget.onChange = this.atWidgetChange.bind(this);
};

CGWidgetTable.prototype.setReadonly = function (bValue) {
  this.ElementWidget.setReadonly(bValue);
};

CGWidgetTable.prototype.validate = function () {
  if (!this.WidgetRequired) return;
  if (this.countElements() == 0) this.WidgetRequired.show();
};

CGWidgetTable.prototype.getElementIdAtPos = function (iPos) {
  var aElements = this.getElements();
  return aElements[iPos];
};

CGWidgetTable.prototype.getAttributeValue = function (Attribute) {
  var aAttributes = Attribute.getAttributeList().getAttributes();

  if (aAttributes.length > 0) {
    var sValue = "";

    for (var i = 0; i < aAttributes.length; i++) {
      var CurrentAttribute = aAttributes[i];
      var isChecked = CurrentAttribute.getIndicatorValue(CGIndicator.CHECKED);
      if ((isChecked == "") || (isChecked == "true")) sValue += CurrentAttribute.getIndicatorValue(CGIndicator.VALUE) + ",&nbsp;";
    }
    if (sValue.length > 0) sValue = sValue.substring(0, sValue.length - ",&nbsp;".length);

    return sValue;
  }
  else {
    var details = Attribute.getIndicatorValue(CGIndicator.DETAILS);
    if (details != null && details != "") return details;

    return Attribute.getIndicatorValue(CGIndicator.VALUE);
  }
};

CGWidgetTable.prototype.getAttributeValues = function (Attribute) {
  var aAttributes = Attribute.getAttributeList().getAttributes();
  var aValues = new Object();

  for (var i = 0; i < aAttributes.length; i++) {
    if (isFunction(aAttributes[i])) continue;
    var ChildAttribute = aAttributes[i];
    aValues[ChildAttribute.getCode()] = this.getAttributeValue(ChildAttribute);
  }

  return aValues;
};

CGWidgetTable.prototype.addElement = function (Attribute) {
  var iPos;
  var extElement;
  var Id = Ext.id();
  var Constructor = Extension.getEditNodeConstructor();
  var RowTemplate = new Template(this.rowTemplate);
  var aValues = this.getAttributeValues(Attribute, Id);

  this.Attribute.getAttributeList().addAttribute(Attribute);

  aValues["id"] = Id;
  aValues["position"] = this.Attribute.getAttributeList().getAttributes().size();
  new Insertion.Bottom(this.extTable.dom, RowTemplate.evaluate(aValues));
  extElement = Ext.get(Id);
  extLink = extElement.select(CSS_WIDGET_ELEMENT_LINK).first();

  if (extLink.dom.innerHTML == "" || extLink.dom.innerHTML == "&nbsp;") extLink.dom.innerHTML = Lang.Widget.Table.ElementLabel;

  iPos = Constructor.addTableViewElementBehaviours(extElement.dom);
  Constructor.init(extElement.dom);

  this.registerElement(extElement, iPos);
  this.validate();
  this.updateData();

  this.Target.activateTableViewElement(Ext.get(this.Target), extElement);
  //extElement.dom.click();
  Attribute.unserialize(this.ElementWidget.getData().toXml());

  return extElement;
};

CGWidgetTable.prototype.removeElement = function (Id) {
  var extElement = Ext.get(Id);
  var iPos = this.getElementPos(extElement);

  this.Attribute.getAttributeList().deleteAttribute(iPos);
  extElement.dom.doRemove();

  this.validate();
  this.updateData();
  this.refreshToolbar();
};

CGWidgetTable.prototype.clear = function () {
  var aElements = this.getElements();
  for (var iPos = 0; iPos < aElements.length; iPos++) {
    this.removeElement(aElements[iPos]);
  }
  this.Attribute.getAttributeList().clear();
};

CGWidgetTable.prototype.removeSelection = function () {
  var aElements = this.getSelectedElements();
  for (var i = 0; i < aElements.length; i++) this.removeElement(aElements[i]);
};

CGWidgetTable.prototype.buryElementToLast = function (IdElement) {
  var DOMElement = $(IdElement);

  if (IdElement != this.getLastElement()) {
    this.extTable.dom.removeChild(DOMElement);
    this.extTable.dom.appendChild(DOMElement);
    this.updateData();
  }
};

CGWidgetTable.prototype.countElements = function () {
  return this.getElements().length;
};

CGWidgetTable.prototype.focus = function () {
  if (!this.Target) return;
  if (!this.isReady()) this.init();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.bFocused = true;
  this.extWidget.addClass(CLASS_FOCUS);

  if (this.onFocused) this.onFocused();
};

CGWidgetTable.prototype.setObserver = function (Observer, iPos) {
  this.aObservers[iPos] = Observer;
  if (iPos == this.iPos) {
    this.ElementWidget.setObserver(Observer, iPos);
  }
};

CGWidgetTable.prototype.getElementPos = function (extElement) {
  var aElements = this.getElements();
  for (var i = 0; i < aElements.length; i++) {
    if (extElement.dom.id == aElements[i]) return i;
  }
  return -1;
};

CGWidgetTable.prototype.activateElement = function (extElement) {
  var iPos = this.getElementPos(extElement);
  var iCountElements = this.countElements();

  if (extElement == null) return;

  //if (this.iPos == iPos) return;
  if (iPos < 0) iPos = 0;
  if (iPos > iCountElements) iPos = iCountElements - 1;

  this.iPos = iPos;

  var Attribute = this.Attribute.getAttributeList().getAttributes()[this.iPos];

  var extTitle = this.extWidget.select(CSS_EDITOR_DIALOG_ELEMENT_ITEM_WIDGET + " " + CSS_WIDGET_ELEMENT_TITLE).first();
  if (extTitle != null) extTitle.dom.innerHTML = extElement.select(CSS_WIDGET_ELEMENT_LINK).first().dom.innerHTML;

  this.ElementWidget.onChange = null;
  this.ElementWidget.setData(Attribute.serialize());
  this.ElementWidget.setObserver(this.aObservers[iPos]);
  this.ElementWidget.onChange = this.atWidgetChange.bind(this);
};

CGWidgetTable.prototype.refreshToolbar = function () {
  var aSelectedElements = this.getSelectedElements();
  this.extRemoveLink.dom.style.display = (aSelectedElements.length > 0) ? "" : "none";
};

// #############################################################################################################
CGWidgetTable.prototype.atWidgetKeyPress = function (sValue, codeKey) {
  if (this.onKeyPress) this.onKeyPress(sValue, codeKey);
};

CGWidgetTable.prototype.atWidgetFocused = function () {
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused(this.ElementWidget);
};

CGWidgetTable.prototype.atEnter = function () {
  if (this.onEnter) this.onEnter();
};

CGWidgetTable.prototype.atEscape = function () {
  if (this.onEscape) this.onEscape();
};

CGWidgetTable.prototype.atWidgetRefresh = function () {
  this.Target.resizeTableView(Ext.get(this.Target));
};

CGWidgetTable.prototype.atMoreLinkClick = function (oEvent) {
  var Attribute = new CGAttribute();
  Attribute.setCode(this.Target.getCode());
  this.addElement(Attribute);
  if (oEvent) Event.stop(oEvent);
  return false;
};

CGWidgetTable.prototype.atRemoveLinkClick = function (oEvent) {
  this.removeSelection();
  if (oEvent) Event.stop(oEvent);
  return false;
};

CGWidgetTable.prototype.atElementDeleteClick = function (oEvent, DOMTarget, DOMWidget) {
  var extTarget = Ext.get(DOMTarget);
  var DOMElement = extTarget.up(CSS_WIDGET_ELEMENT_LIST_ITEM).dom;
  this.focus();
  this.removeElement(DOMElement.id);
  Event.stop(oEvent);
};

CGWidgetTable.prototype.atElementCheckClick = function (oEvent, DOMTarget, DOMWidget) {
  this.refreshToolbar();
};

CGWidgetTable.prototype.atWidgetChange = function () {
  var extElement = Ext.get(this.getElementIdAtPos(this.iPos));

  if (extElement == null) return;

  var Attribute = this.Attribute.getAttributeList().getAttributes()[this.iPos];
  if (Attribute == null) return;
  Attribute.unserialize(this.ElementWidget.getData().toXml());

  var aValues = this.getAttributeValues(Attribute);

  for (var code in aValues) {
    if (isFunction(aValues[code])) continue;
    var extValue = extElement.select("." + code).first();
    var sValue = (aValues[code] != "") ? aValues[code] : "&nbsp;";
    if (code == this.Target.getLabelFieldCode() && aValues[code] == "") sValue = Lang.Widget.Table.ElementLabel;
    if (extValue) extValue.dom.innerHTML = sValue;
  }

  var extTitle = this.extWidget.select(CSS_EDITOR_DIALOG_ELEMENT_ITEM_WIDGET + " " + CSS_WIDGET_ELEMENT_TITLE).first();
  if (extTitle != null) extTitle.dom.innerHTML = extElement.select(CSS_WIDGET_ELEMENT_LINK).first().dom.innerHTML;

  this.updateData();
};

CGWidgetTable.prototype.atActivateElement = function (extElement) {
  this.activateElement(extElement);
};

CGWidgetTable.prototype.atMoveElement = function (extElement, previousPos, newPos) {
  var aAttributes = this.Attribute.getAttributeList().getAttributes();
  var AttributeList = this.Attribute.getAttributeList();

  if (previousPos == newPos) return;

  this.Attribute.getAttributeList().clear();

  if (previousPos > newPos) {
    var offset = 0;
    for (var i = 0; i < aAttributes.length; i++) {
      var Attribute = null;

      if (i == newPos) Attribute = aAttributes[previousPos];
      else if (i > newPos && i <= previousPos) {
        Attribute = aAttributes[newPos + offset];
        offset++;
      }
      else Attribute = aAttributes[i];

      AttributeList.addAttribute(Attribute);
    }
  }
  else {
    var previousAttribute = aAttributes[previousPos];

    for (var i = 0; i < aAttributes.length; i++) {
      var Attribute = null;

      if (i == newPos) Attribute = previousAttribute;
      else if (i >= previousPos && i < newPos) Attribute = aAttributes[i + 1];
      else Attribute = aAttributes[i];

      AttributeList.addAttribute(Attribute);
    }
  }

  this.updateData();
};

CGWidgetNumber = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
  this.aFormat = null;
  this.iIncrements = 1;
  this.aRange = new Array();
  this.Metrics = null;
  this.extMetrics = this.extWidget.down(CSS_WIDGET_ELEMENT_METRICS);
  if (this.extMetrics) this.extMetrics.on("change", this.atMetricChange, this);
  if (!extWidget) return;
};

CGWidgetNumber.prototype = new CGWidget;

CGWidgetNumber.prototype.init = function () {
  this.bIsReady = true;
};

CGWidgetNumber.prototype.validate = function () {
  var sValue = this.extValue.dom.value.replace(/\./g, EMPTY);
  var iValue = parseFloat(sValue.replace(COMMA, DOT));
  var bValidRange;

  if (this.WidgetRequired) {
    if (this.extValue.dom.value != "0") this.WidgetRequired.hide();
    else this.WidgetRequired.show();
  }

  sValue = this.Target.format(this.extValue.dom.value);
  if (sValue == false || isNaN(iValue)) sValue = 0;
  bValidRange = this.Target.isValidRange(iValue);

  if ((bValidRange) || (sValue == 0)) this.extValue.removeClass(CLASS_WRONG);
  else this.extValue.addClass(CLASS_WRONG);

  this.extValue.dom.value = sValue;
  this.Editor.hideValidationError(VALIDATION_ERROR_FORMAT);

  if (bValidRange) this.Editor.hideValidationError(VALIDATION_ERROR_RANGE);
  else this.Editor.showValidationError(VALIDATION_ERROR_RANGE);

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "0") ? "block" : "none";
};

CGWidgetNumber.prototype.setTarget = function (Target) {
  this.Target = Target;

  this.createRequiredWidget();
  this.Metrics = this.Target.getMetrics();
  this.aFormat = this.Target.getFormat();
  this.aRange = this.Target.getRange();
  this.iIncrements = this.Target.getIncrements();

  if (this.extMetrics) this.extMetrics.dom.style.display = (this.Metrics.length > 0) ? "block" : "none";

  this.createOptions();
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());

  this.validate();
  //this.updateData();
};

CGWidgetNumber.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;
  if (!this.extValue) return null;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.VALUE, order: 1, value: this.extValue.dom.value});
  Result.value.push({code: CGIndicator.INTERNAL, order: 2, value: this.Target.getNumberFromFormattedValue(this.extValue.dom.value)});
  if (this.extMetrics && this.extMetrics.dom.selectedIndex != -1) Result.value.push({code: CGIndicator.METRIC, order: 3, value: this.extMetrics.dom.options[this.extMetrics.dom.selectedIndex].value});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 4, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

CGWidgetNumber.prototype.add = function () {
  var iValue = this.extValue.dom.value.replace(/\./g, EMPTY);
  if (iValue == "") iValue = "0";
  iValue = parseFloat(iValue.replace(COMMA, DOT));
  iValue = this.Target.roundDecimals(iValue + this.iIncrements);
  this.extValue.dom.value = iValue.toString().replace(DOT, COMMA);
  this.validate();
  this.updateData();
  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();
};

CGWidgetNumber.prototype.subtract = function () {
  var iValue = this.extValue.dom.value.replace(/\./g, EMPTY);
  if (iValue == "") iValue = "0";
  iValue = parseFloat(iValue.replace(COMMA, DOT));
  iValue = this.Target.roundDecimals(iValue - this.iIncrements);
  this.extValue.dom.value = iValue.toString().replace(DOT, COMMA);
  this.validate();
  this.updateData();
  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();
};

CGWidgetNumber.prototype.clearValue = function (oEvent) {
  this.focus();
  this.extValue.dom.value = "0";
  this.validate();
  this.updateData();
  this.hideClearValue();
  if (this.onClearValue) this.onClearValue(this);
};

// #############################################################################################################

CGWidgetNumber.prototype.atFocused = function (oEvent) {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target, Format: this.aFormat, Increments: this.iIncrements, Range: this.aRange, Metrics: this.Metrics});
  this.Editor.onSelect = this.atSelect.bind(this);
  this.Editor.onIncrement = this.atIncrement.bind(this);
  this.Editor.onDecrement = this.atDecrement.bind(this);
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.validate();
  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";
};

CGWidgetNumber.prototype.atSelect = function (Data) {
  this.extValue.dom.value = (Data.value) ? Data.value : Data.code;
  this.validate();
  this.updateData();
  if (this.onSelect) this.onSelect(Data);
};

CGWidgetNumber.prototype.atIncrement = function (Data) {
  this.add();
};

CGWidgetNumber.prototype.atDecrement = function (Data) {
  this.subtract();
};

CGWidgetNumber.prototype.atChange = function (oEvent) {
  var codeKey = oEvent.getKey();

  this.validate();
  this.updateData();

  if ((codeKey == oEvent.ESC) && (this.onEscape)) this.onEscape();
  if ((codeKey == oEvent.ENTER) && (this.onEnter)) this.onEnter();
};

CGWidgetNumber.prototype.atKeyUp = function (oEvent) {
  var codeKey = oEvent.getKey(), dummy;
  var sValue = this.extValue.dom.value;

  if ((codeKey == oEvent.ESC) && (this.onEscape)) this.onEscape();
  else if ((codeKey == oEvent.ENTER) && (this.onEnter)) this.onEnter();
  else if (codeKey == oEvent.TAB) dummy = 1;
  else if (this.onKeyPress) this.onKeyPress(this.Target.getNumberFromFormattedValue(sValue), codeKey);

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "0") ? "block" : "none";

  if (this.extValue.dom.value != "0") this.showClearValue();
  else this.hideClearValue();

  Event.stop(oEvent);
  return false;
};

CGWidgetNumber.prototype.atKeyDown = function (oEvent) {
  var codeKey = oEvent.getKey();

  if (codeKey == oEvent.DOWN) this.subtract();
  else if (codeKey == oEvent.UP) this.add();
  else if ((codeKey == oEvent.TAB || codeKey == oEvent.ENTER) && this.onKeyPress) {
    var sValue = this.extValue.dom.value;
    this.onKeyPress(this.Target.getNumberFromFormattedValue(sValue), codeKey);
  }
};

CGWidgetNumber.prototype.atClearValue = function (oEvent) {
  this.clearValue();
  return true;
};

CGWidgetNumber.prototype.atMetricChange = function (oEvent) {
  this.focus();
  this.validate();
  this.updateData();
};

CGWidgetPicture = function (extWidget) {
  this.base = CGWidgetFile;
  this.base(extWidget);

  if (!extWidget) return;

  this.extWidget.dom.blur = CGWidgetPicture.prototype.blur.bind(this);
  this.extValue.dom.readOnly = true;
  this.extLink = null;
  this.sServiceURL = HtmlUtil.decode(Context.Config.ApplicationFmsImagesUploadUrl);

  this.extThumbnail = this.extWidget.down(CSS_WIDGET_ELEMENT_THUMBNAIL);
  Event.observe(this.extThumbnail.dom, 'click', this.atThumbnailClick.bind(this));
};

CGWidgetPicture.prototype = new CGWidgetFile;

CGWidgetPicture.prototype.init = function () {
  this.preserveAspectRatio = true;
  this.Size = this.Target.getSize();

  if (this.Size == null) {
	  this.Size = { Width: 100, Height: 100 };
	  this.preserveAspectRatio = false;
  }

  this.bIsReady = true;
};

CGWidgetPicture.prototype.applyBehaviours = function () {
  if (!this.extWidget) return;

  this.extSuper = this.extWidget.down(CSS_WIDGET_ELEMENT_SUPER);
  this.extValue = this.extWidget.down(CSS_WIDGET_ELEMENT_COMPONENT);

  if (this.extValue == null) return;
  if (this.atFocused) this.extValue.on("focus", this.atFocused, this);
  if (this.atBlur) this.extValue.on("blur", this.atBlur, this);
  if (this.atChange) this.extValue.on('change', this.atChange, this);
  if (this.atKeyDown) this.extValue.on("keydown", this.atKeyDown, this);
  if (this.atKeyPress) this.extValue.on("keypress", this.atKeyPress, this);
  if (this.atKeyUp) this.extValue.on("keyup", this.atKeyUp, this);

  this.setId(this.extValue.dom.id);
};

CGWidgetPicture.prototype.createOptions = function () {
  new Insertion.Bottom(this.extWidget.dom, WidgetOptionsTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));
  var extOptions = this.extWidget.select(CSS_WIDGET_ELEMENT_OPTIONS).first();
  this.extOptionClearValue = extOptions.select(CSS_WIDGET_ELEMENT_CLEAR_VALUE).first();
  this.extOptionClearValue.on("click", this.atClearValue, this);
  this.showClearValue();
};

CGWidgetPicture.prototype.createOnlineMenu = function (Target) {
  new Insertion.After(this.extValue.dom, WidgetImageOnlineMenuTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));
  this.extOnlineMenu = this.extWidget.select(CSS_WIDGET_ELEMENT_ONLINE_MENU).first();

  var extOptionDownload = this.extOnlineMenu.down(CSS_FILE_DOWNLOAD);
  extOptionDownload.on("click", this.atDownload, this);

  var extOptionClearValue = this.extOnlineMenu.down(CSS_WIDGET_ELEMENT_CLEAR_VALUE);
  extOptionClearValue.on("click", this.atClearValue, this);

  this.extOnlineMenu.hide();
  this.extOnlineMenu.on("click", this.atOnlineMenuClick, this);
};

CGWidgetPicture.prototype.setTarget = function (Target) {
  this.Target = Target;
  this.createRequiredWidget();
  this.createOnlineMenu();
  this.createOptions();
  this.setFile(this.extValue.dom.value);
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.validate();
  //this.updateData();
};

CGWidgetPicture.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;
  if (!this.extValue) return null;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.VALUE, order: 1, value: this.idFile});
  Result.value.push({code: CGIndicator.FORMAT, order: 2, value: getFileExtension(this.idFile).toUpperCase()});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 3, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

CGWidgetPicture.prototype.setData = function (sData) {
  if (!this.Target) return;
  if (!this.extValue) return;

  var Attribute = new CGAttribute();
  Attribute.unserialize(sData);

  var IndicatorValue = Attribute.getIndicator(CGIndicator.VALUE);
  if (IndicatorValue) {
    this.setFile(IndicatorValue.getValue());
  }

  if (this.extOptionClearValue) {
    if (this.idFile != "") this.showClearValue();
    else this.hideClearValue();
  }

  this.validate();

  if (this.onChange) this.onChange();
};

CGWidgetPicture.prototype.clear = function () {
  this.setFile("");
  this.hideClearValue();
  if (this.onClearValue)
    this.onClearValue(this);
  else {
    this.validate();
    this.updateData();
  }
};

CGWidgetPicture.prototype.blur = function () {
  this.extThumbnail.removeClass(CLASS_FOCUS);
  this.extValue.removeClass(CLASS_FOCUS);
  if (this.onBlur) this.onBlur();
};

CGWidgetPicture.prototype.getUrl = function (idFile) {
  var sSource = Context.Config.ApplicationFmsImageDownloadUrl.replace(TAG_URL_ID, idFile);
  sSource = sSource.replace(TAG_URL_IDNODE, this.Target.getNodeId());
  sSource = HtmlUtil.decode(sSource);
  return sSource + "&rand=" + (Math.random() * 10000000);
};

CGWidgetPicture.prototype.setFile = function (idFile) {

  this.idFile = idFile;

  if (idFile) {
    this.extThumbnail.dom.src = this.getUrl(idFile) + "&thumb=1";
    this.extValue.dom.value = idFile;
  }
  else {
    var defaultPicture = this.Target.getDefaultPicture();
    if (defaultPicture)
      this.extThumbnail.dom.src = Context.Config.Api + "?op=loadbusinessunitfile&path=images/" + this.Target.getDefaultPicture();
    else
      this.extThumbnail.dom.src = Context.Config.ImagesPath + "/no-picture.jpg";
    this.extValue.dom.value = "";
  }
};

CGWidgetPicture.prototype.clearValue = function (oEvent) {
  this.focus();
  this.clear();
};

// #############################################################################################################
CGWidgetPicture.prototype.atFocused = function (oEvent) {
  if (!this.Target) return false;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  var nodeId = this.Target.getNodeId();
  var action = this.sServiceURL.replace(TAG_URL_IDNODE, nodeId);
  var downloadActionTemplate = Context.Config.ApplicationFmsImageDownloadUrl.replace(TAG_URL_IDNODE, nodeId);

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target, Dialogs: [
    {sName: PICTURE_UPLOAD, Action: action, DownloadActionTemplate: downloadActionTemplate, Size: this.Size, Limit: this.Target.getLimit(), PreserveAspectRatio: this.preserveAspectRatio, MultipleSelection: this.Target.isMultiple()}
  ]});
  this.Editor.onSelect = this.atSelect.bind(this);
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.onDownload = this.atEditorDownload.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.extThumbnail.addClass(CLASS_FOCUS);
  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";

  if (this.idFile != "") this.extOnlineMenu.show();

  return false;
};

CGWidgetPicture.prototype.atThumbnailClick = function (oEvent) {
  this.focus();
  Event.stop(oEvent);
  return false;
};

CGWidgetPicture.prototype.atSelect = function (Data, Source) {
  this.setFile((Data.value) ? Data.value : Data.code);
  this.showClearValue();
  this.validate();
  this.updateData();
  if (this.onSelect) this.onSelect(Data);
  new Effect.Appear(this.extThumbnail.dom);
};

CGWidgetPicture.prototype.atDownload = function (EventLaunched, DOMDownload) {
  DOMDownload.href = this.getUrl(this.extValue.dom.value);
  this.extOnlineMenu.hide();
};

CGWidgetPicture.prototype.atClearValue = function (oEvent) {
  this.clearValue();
  return false;
};

CGWidgetPicture.prototype.atEditorDownload = function (DOMDownload) {
  DOMDownload.stop = (this.idFile == "");
  DOMDownload.href = this.extValue.dom.value;
};

CGWidgetRequired = function (extWidgetParent) {
  this.base = CGWidget;
  this.extWidgetParent = extWidgetParent;
  this.extWidget = null;
};

CGWidgetRequired.prototype = new CGWidget;

CGWidgetRequired.prototype.init = function () {
  var extLabel, extParent, extElement;
  var TemplateRequired = new Template(Lang.Widget.Templates.Required);

  extElement = this.extWidgetParent.up(CSS_FIELD);
  if (extElement == null) extElement = this.extWidgetParent.up(CSS_FIELD_COMPOSITE);

  extLabel = extElement.down(HTML_LABEL);

  new Insertion.Bottom(extLabel.dom, TemplateRequired.evaluate({'ImagesPath': Context.Config.ImagesPath, 'messageWhenRequired': this.Target.getMessageWhenRequired()}));
  this.extImg = extLabel.select("img").first();
  this.extSpan = extLabel.select("span").first();

  this.bIsReady = true;
};

CGWidgetRequired.prototype.setTarget = function (Target) {
  this.Target = Target;
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.validate();
  //this.updateData();
};

CGWidgetRequired.prototype.focus = function () {
  this.extWidgetParent.focus();
};

CGWidgetRequired.prototype.blur = function () {
  this.extWidgetParent.blur();
};

CGWidgetRequired.prototype.show = function () {
  this.extImg.show();
};

CGWidgetRequired.prototype.hide = function () {
  this.extImg.hide();
};

CGWidgetComposite = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
  this.extOptionConditional = null;
  this.extOptionExpand = null;
  this.extOptionCollapse = null;
  this.bConditioned = false;
  this.bExtended = false;
  this.LabelFieldCode = null;

  if (!extWidget) return;

  this.extWidget.dom.focus = CGWidgetComposite.prototype.focus.bind(this);
  this.extWidget.dom.blur = CGWidgetComposite.prototype.blur.bind(this);

  this.extValue.dom.readOnly = true;
  this.extValue.addClass(CLASS_READONLY);

  this.addBehaviours();
  this.captureEvents();
};

CGWidgetComposite.prototype = new CGWidget;

CGWidgetComposite.prototype.init = function () {
  this.bIsReady = true;
};

CGWidgetComposite.prototype.clear = function () {
  var aFields = this.getFields();
  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    DOMField.setData("");
  }
};

CGWidgetComposite.prototype.getFields = function () {
  var aFields = new Array();

  var extComposite = this.extWidget.up(CSS_FIELD);
  var extFieldList = this.extWidget.select(CSS_FIELD);
  extFieldList.each(function (extField) {
    var extParentComposite = extField.up(CSS_FIELD);
    if (extParentComposite == null) return;
    if (extParentComposite != extComposite) return;
    aFields.push(extField.dom.id);
  }, this);

  return aFields;
};

CGWidgetComposite.prototype.addBehaviours = function () {
  this.extWidget.on("click", this.atClick, this);
};

CGWidgetComposite.prototype.captureEvents = function () {
  var aFields = this.getFields();
  this.TargetIndex = new Array();
  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    this.TargetIndex[DOMField.getCode()] = DOMField.id;
    DOMField.onBeforeChange = this.atFieldBeforeChange.bind(this, DOMField);
    DOMField.onChange = this.atFieldChange.bind(this, DOMField);
    DOMField.onRefresh = this.atFieldRefresh.bind(this, DOMField);
    DOMField.onUnLock = this.atFieldUnLock.bind(this, DOMField);
  }
};

CGWidgetComposite.prototype.createOptions = function () {

  if (this.Target.isExtensible()) {
    new Insertion.Bottom(this.extWidget.dom, WidgetCompositeExtensibleOptionsTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath}));
    var extOptions = this.extWidget.select(CSS_WIDGET_ELEMENT_OPTIONS).first();

    this.extOptionExpand = extOptions.down(CSS_EXPAND);
    this.extOptionCollapse = extOptions.down(CSS_COLLAPSE);

    this.extOptionExpand.on("click", this.atExpandClick, this);
    this.extOptionCollapse.on("click", this.atCollapseClick, this);

    this.addOptionFunctions(this.extOptionExpand);
    this.addOptionFunctions(this.extOptionCollapse);

    if (this.extWidget.hasClass(CLASS_EXTENDED)) this.expand();
    else this.collapse();
  }

  if (this.Target.isConditional()) {
    var DOMLabel = this.Target.getDOMLabel(), extLabel;
    var Id = Ext.id();
    var sLabel = DOMLabel.innerHTML;

    DOMLabel = replaceDOMElement(DOMLabel, '<table class="label"><tr><td><span>' + sLabel + '</span></td><td>' + WidgetCompositeConditionalOptionsTemplate.evaluate({'ImagesPath': Context.Config.ImagesPath, 'id': Id}) + '</td></tr></table>');
    extLabel = Ext.get(DOMLabel);

    var extOptionConditionedList = extLabel.select(CSS_OPTION);
    extOptionConditionedList.each(function (extOptionConditioned) {
      if ((this.extWidget.hasClass(CLASS_CONDITIONED)) && (extOptionConditioned.dom.value == OPTION_YES)) extOptionConditioned.dom.checked = true;
      else if ((!this.extWidget.hasClass(CLASS_CONDITIONED)) && (extOptionConditioned.dom.value == OPTION_NO)) extOptionConditioned.dom.checked = true;
      else extOptionConditioned.dom.checked = false;
      Event.observe(extOptionConditioned.dom, "click", CGWidgetComposite.prototype.atConditionedClick.bind(this, extOptionConditioned.dom));
    }, this);

    if (this.extWidget.hasClass(CLASS_CONDITIONED)) this.setConditioned(true);
    else this.setConditioned(false);
  }

  if ((!this.Target.isExtensible()) && (!this.Target.isConditional())) this.expandAll();
};

CGWidgetComposite.prototype.destroyOptions = function () {
  if (this.Target.isExtensible()) {
    this.extOptionExpand.un("click", this.atExpandClick, this);
    this.extOptionCollapse.un("click", this.atCollapseClick, this);
  }
};

CGWidgetComposite.prototype.addOptionFunctions = function (extOption) {
  extOption.dom.focus = function () {
    var extOption = Ext.get(this);
    extOption.addClass(CLASS_FOCUS);
  };

  extOption.dom.blur = function () {
    var extOption = Ext.get(this);
    extOption.removeClass(CLASS_FOCUS);
  };
};

CGWidgetComposite.prototype.setTarget = function (Target) {
  this.Target = Target;
  this.createRequiredWidget();
  this.LabelFieldCode = this.Target.getLabelFieldCode();
  this.createOptions();
  //this.updateData();
};

CGWidgetComposite.prototype.setReadonly = function (bValue) {
  var aFields = this.getFields(), Widget;
  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    if (!DOMField.IdWidget) continue;
    Widget = WidgetManager.get(DOMField.IdWidget);
    Widget.setReadonly(bValue);
  }
};

CGWidgetComposite.prototype.setWidgetRequired = function (WidgetRequired) {
  var aFields = this.getFields(), Widget;
  this.WidgetRequired = WidgetRequired;

  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    if (!DOMField.IdWidget) continue;
    Widget = WidgetManager.get(DOMField.IdWidget);
    Widget.setWidgetRequired(this.WidgetRequired);
  }

};

CGWidgetComposite.prototype.validate = function () {
};

CGWidgetComposite.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;

  var Result = new Object();
  var sExtendedValue = (this.bExtended) ? CLASS_EXTENDED : EMPTY;
  var sConditionedValue = (this.bConditioned) ? CLASS_CONDITIONED : EMPTY;

  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.EXTENDED, order: 1, value: sExtendedValue});
  Result.value.push({code: CGIndicator.CONDITIONED, order: 2, value: sConditionedValue});
  Result.value.push({code: CGIndicator.VALUE, order: 3, value: this.extValue.dom.value});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 4, value: this.extSuper.dom.value});

  Result.items = new Array();
  Result.content = EMPTY;

  var iCount = 0;
  var aFields = this.getFields();
  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    if (!DOMField.IdWidget) continue;
    var Widget = WidgetManager.get(DOMField.IdWidget);
    var FieldData = Widget.getData();
    if (FieldData == null) continue;
    FieldData.order = iCount;
    Result.items.push(FieldData);
    iCount++;
  }

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    var AttributeList = new CGAttributeList();
    var IndicatorList = new CGIndicatorList();
    var sAttributes, sData = EMPTY;

    Attribute.code = this.code;
    Attribute.iOrder = this.order;

    sAttributes = EMPTY;
    for (var iPos = 0; iPos < this.items.length; iPos++) {
      sAttributes += this.items[iPos].toXml();
    }
    sData += AttributeList.serializeWithData(sAttributes);

    for (var iPos = 0; iPos < this.value.length; iPos++) {
      IndicatorList.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    sData += IndicatorList.serialize();

    return Attribute.serializeWithData(sData);
  };

  return Result;
};

CGWidgetComposite.prototype.setData = function (sData) {
  if (!this.Target) return;
  if (!this.extValue) return;

  this.clear();

  var Attribute = new CGAttribute();
  Attribute.unserialize(sData);

  var IndicatorConditioned = Attribute.getIndicator(CGIndicator.CONDITIONED);
  var bConditioned = (IndicatorConditioned && (IndicatorConditioned.getValue() == CLASS_CONDITIONED)) ? true : false;

  var IndicatorExtended = Attribute.getIndicator(CGIndicator.EXTENDED);
  this.bExtended = (IndicatorExtended && (IndicatorExtended.getValue() == CLASS_EXTENDED)) ? true : false;

  var IndicatorValue = Attribute.getIndicator(CGIndicator.VALUE);
  if (IndicatorValue) this.extValue.dom.value = IndicatorValue.getValue();

  if (this.Target.isConditional()) {
    var DOMLabel = this.Target.getDOMLabel(), extLabel;

    extLabel = Ext.get(DOMLabel);

    var extOptionConditionedList = extLabel.select(CSS_OPTION);
    extOptionConditionedList.each(function (extOptionConditioned) {
      if ((this.bConditioned) && (extOptionConditioned.dom.value == OPTION_YES)) extOptionConditioned.dom.checked = true;
      else if ((!this.bConditioned) && (extOptionConditioned.dom.value == OPTION_NO)) extOptionConditioned.dom.checked = true;
      else extOptionConditioned.dom.checked = false;
    }, this);

    this.setConditioned(bConditioned);
  }

  if ((!this.Target.isExtensible()) && (!this.Target.isConditional())) this.expandAll();

  var aAttributes = Attribute.getAttributes();
  for (var iPos = 0; iPos < aAttributes.length; iPos++) {
    var CurrentAttribute = aAttributes[iPos];
    var DOMField = $(this.TargetIndex[CurrentAttribute.code]);
    if (DOMField == null) continue;
    DOMField.onBeforeChange = null;
    DOMField.onChange = null;
    DOMField.setData(CurrentAttribute.serialize());
    DOMField.onChange = this.atFieldChange.bind(this, DOMField);
  }

  this.validate();

  if (this.onChange) this.onChange();
};

CGWidgetComposite.prototype.expandAll = function () {
  var aFields = this.getFields();
  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    DOMField.style.display = "";
  }
};

CGWidgetComposite.prototype.expand = function () {
  var aFields = this.getFields();

  this.bExtended = true;

  if (this.extOptionExpand) this.extOptionExpand.hide();
  if (this.extOptionCollapse) this.extOptionCollapse.show();

  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    DOMField.style.display = "";
  }
};

CGWidgetComposite.prototype.collapse = function () {
  var aFields = this.getFields();

  this.bExtended = false;

  if (this.extOptionExpand) this.extOptionExpand.show();
  if (this.extOptionCollapse) this.extOptionCollapse.hide();

  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    if (DOMField.isExtended()) DOMField.style.display = "none";
    else DOMField.style.display = "";
  }
};

CGWidgetComposite.prototype.collapseAll = function () {
  var aFields = this.getFields();
  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    DOMField.style.display = "none";
  }
};

CGWidgetComposite.prototype.setConditioned = function (bValue) {
  var sValue = Lang.Response.Yes;

  this.bConditioned = bValue;

  if (bValue) {
    sValue = Lang.Response.No;

    if (!this.Target.isExtensible()) this.expandAll();
    else {
      if (this.bExtended) this.expand();
      else this.collapse();
    }

    this.extWidget.dom.style.display = "";
  }
  else {
    this.collapseAll();
    this.extWidget.dom.style.display = "none";
  }

};

CGWidgetComposite.prototype.focus = function () {
  if (!this.Target) return;
  if (!this.isReady()) this.init();

  this.Editor.show();
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.refresh();

  this.bFocused = true;
  this.extWidget.addClass(CLASS_FOCUS);

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());

  if (this.onFocused) this.onFocused();
};

CGWidgetComposite.prototype.blur = function () {
  this.bFocused = false;
  this.extWidget.removeClass(CLASS_FOCUS);
  if (this.onBlur) this.onBlur();
};

CGWidgetComposite.prototype.lock = function () {
  if (this.extWidget.hasClass(CLASS_FOCUS)) this.extWidget.dom.blur();
  this.extWidget.addClass(CLASS_LOCKED);

  var aFields = this.getFields();
  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    DOMField.lock();
  }
};

CGWidgetComposite.prototype.unLock = function () {
  if (this.Target.isLockedByDefinition()) return;
  this.extWidget.removeClass(CLASS_LOCKED);

  var aFields = this.getFields();
  for (var iPos = 0; iPos < aFields.length; iPos++) {
    var DOMField = $(aFields[iPos]);
    DOMField.unLock();
  }

  if (this.onUnLock) this.onUnLock();
};

// #############################################################################################################
CGWidgetComposite.prototype.atFocused = function () {
};

CGWidgetComposite.prototype.atFieldBeforeChange = function () {
};

CGWidgetComposite.prototype.atFieldChange = function (DOMField) {
  if (DOMField.getCode() == this.LabelFieldCode) this.extValue.dom.value = DOMField.getValue();

  this.validate();
  this.updateData();

  if (this.onChange != null)
    PushListener.nodeFieldCompositeChanged({ DOMNode: DOMField.getNode(), DOMField: DOMField });
};

CGWidgetComposite.prototype.atFieldRefresh = function (DOMField) {

  if (this.onRefresh) this.onRefresh(DOMField);
};

CGWidgetComposite.prototype.atFieldUnLock = function (DOMField) {
  if (this.isLocked()) DOMField.lock();
};

CGWidgetComposite.prototype.atClick = function () {
};

CGWidgetComposite.prototype.atExpandClick = function () {
  this.focus();
  this.expand();
  this.updateData();
};

CGWidgetComposite.prototype.atCollapseClick = function () {
  this.focus();
  this.collapse();
  this.updateData();
};

CGWidgetComposite.prototype.atConditionedClick = function (DOMOption) {
  this.focus();
  if (DOMOption.value == OPTION_YES) this.setConditioned(true);
  else this.setConditioned(false);
  DOMOption.checked = true;
  this.updateData();
  return true;
};

TEXT_EDITION_NORMAL = "normal";
TEXT_EDITION_LOWERCASE = "lowercase";
TEXT_EDITION_UPPERCASE = "uppercase";
TEXT_EDITION_SENTENCE = "sentence";
TEXT_EDITION_TITLE = "title";

CGWidgetText = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
  this.extPattern = null;
  this.aIndicators = new Array();
  this.aPatterns = new Array();
};

CGWidgetText.Formats = new Array();
CGWidgetText.Formats["sup"] = "<sup>#{value}</sup>";
CGWidgetText.Formats["sub"] = "<sub>#{value}</sub>";
CGWidgetText.Formats["bold"] = "<b>#{value}</b>";
CGWidgetText.Formats["italic"] = "<i>#{value}</i>";

CGWidgetText.prototype = new CGWidget;

CGWidgetText.prototype.init = function () {
  this.initStores();
  this.bIsReady = true;
};

CGWidgetText.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;
  if (!this.extValue) return null;

  var aIndicators = this.splitIndicators();

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.VALUE, order: 1, value: this.extValue.dom.value});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 2, value: this.extSuper.dom.value});

  for (var iPos = 0; iPos < aIndicators.length; iPos++) {
    Result.value.push({code: aIndicators[iPos].Code, order: iPos + 1, value: aIndicators[iPos].Value});
  }

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

CGWidgetText.prototype.splitIndicators = function () {
  var iPos = 0;
  var bMatchPattern = false;
  var sValue = this.extValue.dom.value;
  var aResult = new Array();

  while ((!bMatchPattern) && (iPos < this.aPatterns.length)) {
    var Pattern = this.aPatterns[iPos];
    if (sValue.match(Pattern.Expression)) {
      var aMatching = Pattern.Expression.exec(sValue);
      for (var jPos = 0; jPos < Pattern.aCodes.length; jPos++) {
        var Indicator = new Object();
        Indicator.Code = Pattern.aCodes[jPos];
        Indicator.Value = aMatching[jPos + 1];
        aResult.push(Indicator);
      }
      bMatchPattern = true;
    }
    iPos++;
  }

  return aResult;
};

CGWidgetText.prototype.matchPatterns = function () {
  if (this.aPatterns.length <= 0) return true;

  for (var iPos = 0; iPos < this.aPatterns.length; iPos++) {
    if (this.extValue.dom.value.match(this.aPatterns[iPos].Expression)) return true;
  }

  return false;
};

CGWidgetText.prototype.getValueSelection = function () {
  if (!this.extValue) return "";
  if (document.selection) {
    return document.selection.createRange().text;
  }
  var sContent = this.extValue.dom.value;
  return sContent.substr(this.extValue.dom.selectionStart, this.extValue.dom.selectionEnd - this.extValue.dom.selectionStart);
};

CGWidgetText.prototype.validate = function () {
  var sValue = this.extValue.dom.value;
  var iMinLength = this.Target.getMinLength();

  if (this.WidgetRequired) {
    if (this.extValue.dom.value != "") this.WidgetRequired.hide();
    else this.WidgetRequired.show();
  }

  sValue = this.Target.format(sValue);
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (sValue == "") ? "block" : "none";

  if ((iMinLength != 0) && (sValue.length < iMinLength)) {
    this.Editor.showValidationError(VALIDATION_ERROR_LENGTH);
    this.extValue.addClass(CLASS_WRONG);
  }
  else {
    this.Editor.hideValidationError(VALIDATION_ERROR_LENGTH);
    this.extValue.removeClass(CLASS_WRONG);
  }

  if (this.matchPatterns()) {
    this.extValue.removeClass(CLASS_WRONG);
    this.Editor.hideValidationError(VALIDATION_ERROR_FORMAT);
  }
  else {
    if (sValue != "") {
      this.extValue.addClass(CLASS_WRONG);
      this.Editor.showValidationError(VALIDATION_ERROR_FORMAT);
    }
  }

  sValue = sValue.replace(/<br\/>/g, "\n");
  if (this.extValue.dom.value != sValue)
    this.extValue.dom.value = sValue;
};

CGWidgetText.prototype.setTarget = function (Target) {
  this.Target = Target;
  this.createRequiredWidget();
  this.aPatterns = this.Target.getPatterns();
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.createOptions();
  this.validate();
  //this.updateData();
};

// #############################################################################################################

CGWidgetText.prototype.atFocused = function (oEvent) {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target, Dialogs: [
    {sName: HISTORY, Store: this.aStores[HISTORY]}
  ], Length: this.Target.getLength()});
  this.Editor.onSelect = this.atSelect.bind(this);
  this.Editor.onFormat = this.atFormat.bind(this);
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.validate();
  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";
};

CGWidgetText.prototype.atSelect = function (Data) {
  this.extValue.dom.value = (Data.value) ? Data.value : Data.code;
  this.validate();
  this.updateData();
  if (this.onSelect) this.onSelect(Data);
};

CGWidgetText.prototype.atFormat = function (CodeFormat) {
  var ValueTemplate, sValue, sSelection, sResult, iStart, iEnd;

  if (!CGWidgetText.Formats[CodeFormat]) return;

  iStart = this.extValue.dom.selectionStart;
  iEnd = this.extValue.dom.selectionEnd;

  if (iStart == iEnd) return;

  sSelection = this.getValueSelection();
  sValue = this.extValue.dom.value;
  ValueTemplate = new Template(CGWidgetText.Formats[CodeFormat]);

  sResult = sValue.substr(0, iStart);
  sResult += ValueTemplate.evaluate({'value': sSelection});
  sResult += sValue.substr(iEnd);

  this.extValue.dom.value = sResult;
  this.validate();
  this.updateData();

  if (this.onFormat) this.onFormat(this.extValue.dom.value);
};

CGWidgetText.prototype.atChange = function (oEvent) {
  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();
  this.validate();
  this.updateData();
};

CGWidgetText.prototype.atBlur = function (oEvent) {
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";

  if (!Ext.isIE) return;

  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();

  this.validate();
  this.updateData();
};

CGWidgetText.prototype.fixAtChange = function () {
  this.atChange();
};

CGWidgetText.prototype.atKeyUp = function (oEvent) {
  var codeKey = oEvent.getKey();

  // Fix bug on FF 15
  if (this.geckoFix)
    window.clearTimeout(this.geckoFix);
  // End fix

  this.validate();
  this.Editor.refresh(this.extValue.dom.value);

  if ((codeKey == oEvent.ESC) && (this.onEscape)) this.onEscape();
  else if ((codeKey == oEvent.ENTER) && (!this.extWidget.hasClass(CLASS_WIDGET_LONG))) {
    var Dialog = this.Editor.getDialog(HISTORY);
    if (Dialog) {
      var Data = Dialog.getData();
      if (Data) this.extValue.dom.value = Data.value;
    }
    if (this.onEnter) this.onEnter();
  }
  else if (codeKey == oEvent.DOWN) this.Editor.moveDown(this.extValue.dom);
  else if (codeKey == oEvent.UP) this.Editor.moveUp(this.extValue.dom);
  else if (codeKey == oEvent.TAB || codeKey == oEvent.LEFT || codeKey == oEvent.RIGHT) {
  }
  else if (this.onKeyPress) this.onKeyPress(this.extValue.dom.value, codeKey);

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";

  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();

  // Fix bug on FF 15
  if (Ext.isGecko)
    this.geckoFix = window.setTimeout(CGWidgetText.prototype.fixAtChange.bind(this), 500);
  // End fix

  Event.stop(oEvent);
  return false;
};

CGWidgetDescriptor = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
};

CGWidgetDescriptor.prototype = new CGWidget;

CGWidgetDescriptor.prototype.init = function () {
  this.bIsReady = true;
};

CGWidgetDescriptor.prototype.validate = function () {
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = (this.extValue.dom.value == "") ? "block" : "none";
};

CGWidgetDescriptor.prototype.setTarget = function (Target) {
  this.Target = Target;
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.validate();
  //this.updateData();
};

CGWidgetDescriptor.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;
  if (!this.extValue) return null;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.DESCRIPTOR, order: 1, value: this.Target.getDescriptorName()});
  Result.value.push({code: CGIndicator.RESULTTYPE, order: 2, value: this.Target.getResultType()});
  Result.value.push({code: CGIndicator.VALUE, order: 3, value: this.extValue.dom.value});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 4, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

// #############################################################################################################

CGWidgetDescriptor.prototype.atFocused = function (oEvent) {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";

  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();
};

CGWidgetDescriptor.prototype.atChange = function (oEvent) {
  this.validate();
  this.updateData();
};

CGWidgetSerial = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
};

CGWidgetSerial.prototype = new CGWidget;

CGWidgetSerial.prototype.createOptions = function () {
};

CGWidgetSerial.prototype.init = function () {
  this.bIsReady = true;
};

CGWidgetSerial.prototype.setTarget = function (Target) {
  this.Target = Target;
  this.createRequiredWidget();
  this.setMessageWhenEmpty(this.Target.getMessageWhenEmpty());
  this.createOptions();
  this.validate();
  //this.updateData();
};

// #############################################################################################################

CGWidgetSerial.prototype.atFocused = function (oEvent) {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target});
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";
};

CGWidgetLocation = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
};

CGWidgetLocation.prototype = new CGWidget;

CGWidgetLocation.prototype.init = function () {
  this.initStores();
  this.bIsReady = true;
};

CGWidgetLocation.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;
  if (!this.extValue) return null;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.VALUE, order: 1, value: this.extValue.dom.value});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 2, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

CGWidgetLocation.prototype.getLocation = function () {
};

// #############################################################################################################

CGWidgetLocation.prototype.atFocused = function (oEvent) {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target, Dialogs: [
    {sName: LOCATION, Location: this.getLocation()}
  ]});
  this.Editor.onSelect = this.atSelect.bind(this);
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.validate();
  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";
};

CGWidgetLocation.prototype.atSelect = function (sData) {
  this.extValue.dom.value = sData;
  this.validate();
  this.updateData();
  if (this.onSelect) this.onSelect(sData);
};

CGWidgetLocation.prototype.atChange = function (oEvent) {
  if (this.extValue.dom.value != "") this.showClearValue();
  else this.hideClearValue();
  this.validate();
  this.updateData();
};

SUMMATION_ITEM_SIMPLE = "SIMPLE";

CGSummationItem = function () {
  this.Label = "";
  this.Value = 0;
  this.Type = SUMMATION_ITEM_SIMPLE;
  this.IsMultiple = false;
  this.IsNegative = false;
  this.Children = new Array();
};

CGSummationItem.prototype.serialize = function () {
  var sResult = "<item label=\"" + this.Label + "\" value=\"" + this.Value + "\" type=\"" + this.Type + "\" multiple=\"" + this.IsMultiple + "\" negative=\"" + this.IsNegative + "\">";
  for (var i = 0; i < this.Children.length; i++) sResult += this.Children[i].serialize();
  sResult += "</item>";
  return sResult;
};

CGSummationItemList = function () {
  this.Items = new Array();
};

CGSummationItemList.prototype.serialize = function () {
  var sResult = "<itemlist>";
  for (var i = 0; i < this.Items.length; i++) sResult += this.Items[i].serialize();
  sResult += "</itemlist>";
  return sResult;
};

KEY_TAB = 9;
KEY_ENTER = 13;

CGWidgetSummation = function (extWidget) {
  this.base = CGWidget;
  this.base(extWidget);
  this.aData = new Array();
  this.registerItems();
};

CGWidgetSummation.prototype = new CGWidget;

CGWidgetSummation.prototype.init = function () {
  this.initStores();
  this.bIsReady = true;
};

CGWidgetSummation.prototype.getAllItems = function () {
  var aResult = new Array();
  var extList = this.extWidget.down("ul");
  var aExtItems = extList.select(CSS_WIDGET_SUMMATION_ITEM);
  aExtItems.each(function (extItem) {
    var extParent = extItem.up(CSS_WIDGET);
    if (extParent.dom != this.extWidget.dom) return;
    if ((extItem.dom.id == null) || (extItem.dom.id == "")) extItem.dom.id = Ext.id();
    aResult.push(extItem.dom.id);
  }, this);
  return aResult;
};

CGWidgetSummation.prototype.getItems = function (extParent) {
  var aResult = new Array();

  if (extParent == null) return aResult;

  var aExtItems = extParent.select(CSS_WIDGET_SUMMATION_ITEM);
  aExtItems.each(function (extItem) {
    var extChildParent = extItem.up("ul");
    if (extChildParent.dom != extParent.dom) return;
    if ((extItem.dom.id == null) || (extItem.dom.id == "")) extItem.dom.id = Ext.id();
    aResult.push(extItem.dom.id);
  }, this);
  return aResult;
};

CGWidgetSummation.prototype.getItemType = function (extItem) {
  if (extItem.hasClass(SUMMATION_ITEM_SIMPLE.toLowerCase())) return SUMMATION_ITEM_SIMPLE;
  return "";
};

CGWidgetSummation.prototype.registerItems = function () {
  var aItems = this.getAllItems();

  this.aWidgets = new Array();

  for (var iPos = 0; iPos < aItems.length; iPos++) {
    var extItem = Ext.get(aItems[iPos]);
    this.registerItem(extItem);
  }
};

CGWidgetSummation.prototype.registerItem = function (extItem) {

  this.aData[extItem.dom.id] = { Label: "", Value: 0, IsNegative: extItem.hasClass(CLASS_NEGATIVE) };
  this.aData[extItem.dom.id].Type = extItem.hasClass(SUMMATION_ITEM_SIMPLE.toLowerCase()) ? SUMMATION_ITEM_SIMPLE : "-1";

  if (extItem.hasClass(SUMMATION_ITEM_SIMPLE.toLowerCase()))
    this.registerItemSimpleWidget(extItem);

  var Data = this.aData[extItem.dom.id];
  if (extItem.hasClass(CLASS_MULTIPLE) && Data.Label != "" && Data.Value != "") this.addItem(extItem.dom.id);
};

CGWidgetSummation.prototype.registerWidgetBehaviours = function (IdItem, Widget) {
  Widget.onFocused = this.atWidgetFocused.bind(this, IdItem, Widget);
  Widget.onBlur = this.atWidgetBlur.bind(this, IdItem, Widget);
  Widget.onChange = this.atWidgetChange.bind(this, IdItem, Widget);
  Widget.onSelect = this.atWidgetSelect.bind(this, IdItem, Widget);
  Widget.onKeyPress = this.atWidgetKeyPress.bind(this, IdItem, Widget);
  Widget.onEnter = this.atWidgetEnter.bind(this, IdItem, Widget);
  Widget.onEscape = this.atWidgetEscape.bind(this, IdItem, Widget);
  Widget.onClearValue = this.atWidgetClearValue.bind(this, IdItem, Widget);
};

CGWidgetSummation.prototype.registerItemSimpleWidget = function (extItem) {
  var Id = Ext.id();
  var IdItem = extItem.dom.id;
  var extSelect = extItem.select(CSS_WIDGET_SELECT).first();
  var extNumber = extItem.select(CSS_WIDGET_NUMBER).first();
  var extParent = null;

  if (extNumber != null) {
    extParent = extNumber.up(CSS_WIDGET_SUMMATION_ITEM);
    if (extParent.dom != extItem.dom) extNumber = null;
  }

  if (extNumber == null) {
    var extValue = extItem.select(CSS_WIDGET_ELEMENT_VALUE).first();
    extParent = extValue.up(CSS_WIDGET_SUMMATION_ITEM);
    if (extParent.dom == extItem.dom) {
      this.aData[IdItem].Value = extValue.dom.value;
    }
  }
  else {
    this.aWidgets[Id] = WidgetFactory.get(WIDGET_NUMBER, extNumber);
    this.aWidgets[Id].setEditor(EditorsFactory.get(FIELD_TYPE_NUMBER));
    this.aWidgets[Id].setWidgetRequired(this.WidgetRequired);
    if (this.Target) this.aWidgets[Id].setTarget(this.Target);
    this.registerWidgetBehaviours(IdItem, this.aWidgets[Id]);
    this.aData[IdItem].Value = this.aWidgets[Id].getValue();
    extNumber.dom.IdWidget = Id;
  }

  if (extSelect != null) {
    extParent = extSelect.up(CSS_WIDGET_SUMMATION_ITEM);
    if (extParent.dom != extItem.dom) extSelect = null;
  }

  if (extSelect == null) {
    var extLabel = extItem.select(CSS_WIDGET_ELEMENT_LABEL + " span").first();
    extParent = extLabel.up(CSS_WIDGET_SUMMATION_ITEM);
    if (extParent.dom == extItem.dom) {
      this.aData[IdItem].Label = extLabel.dom.innerHTML;
    }
    return;
  }

  Id = Ext.id();
  this.aWidgets[Id] = WidgetFactory.get(WIDGET_SELECT, extSelect);
  this.aWidgets[Id].setEditor(EditorsFactory.get(FIELD_TYPE_SELECT));
  this.aWidgets[Id].setWidgetRequired(this.WidgetRequired);
  if (this.Target) this.aWidgets[Id].setTarget(this.Target);
  this.registerWidgetBehaviours(IdItem, this.aWidgets[Id]);
  this.aData[IdItem].Label = this.aWidgets[Id].getValue();
  extSelect.dom.IdWidget = Id;
};

CGWidgetSummation.prototype.unregisterItem = function (extItem) {

  if (extItem.hasClass(SUMMATION_ITEM_SIMPLE.toLowerCase()))
    this.unregisterItemSimpleWidget(extItem);

  delete(this.aData[extItem.dom.id]);
};

CGWidgetSummation.prototype.unregisterWidgetBehaviours = function (IdItem, Widget) {
  Widget.onFocused = null;
  Widget.onBlur = null;
  Widget.onChange = null;
  Widget.onSelect = null;
  Widget.onKeyPress = null;
  Widget.onEnter = null;
  Widget.onEscape = null;
  Widget.onClearValue = null;
};

CGWidgetSummation.prototype.unregisterItemSimpleWidget = function (extItem) {
  var extSelect = extItem.select(CSS_WIDGET_SELECT).first();
  var extNumber = extItem.select(CSS_WIDGET_NUMBER).first();
  var extParent = null;

  if (extNumber != null) {
    extParent = extNumber.up(CSS_WIDGET_SUMMATION_ITEM);
    if (extParent.dom != extItem.dom) extNumber = null;
  }

  if (extNumber != null) {
    var IdWidget = extNumber.dom.IdWidget;
    var Widget = this.aWidgets[IdWidget];
    Widget.setValue("0");
    this.setItemData("0", extItem.dom.id, Widget);
    this.unregisterWidgetBehaviours(extItem.dom.id, Widget);
    Widget.destroy();
    WidgetManager.unregister(Widget.getId());
    delete(this.aWidgets[IdWidget]);
  }

  if (extSelect != null) {
    extParent = extSelect.up(CSS_WIDGET_SUMMATION_ITEM);
    if (extParent.dom != extItem.dom) extSelect = null;
  }

  if (extSelect != null) {
    var IdWidget = extSelect.dom.IdWidget;
    var Widget = this.aWidgets[IdWidget];
    this.unregisterWidgetBehaviours(extItem.dom.id, Widget);
    Widget.destroy();
    WidgetManager.unregister(Widget.getId());
    delete(this.aWidgets[IdWidget]);
  }
};

CGWidgetSummation.prototype.refreshItem = function (extItem, iValue) {
  if (extItem.hasClass(SUMMATION_ITEM_SIMPLE.toLowerCase())) this.refreshItemSimpleWidget(extItem, iValue);
};

CGWidgetSummation.prototype.refreshItemSimpleWidget = function (extItem, iValue) {
  var extNumber = extItem.select(CSS_WIDGET_NUMBER).first();
  var extParent = null;

  if (extNumber != null) {
    extParent = extNumber.up(CSS_WIDGET_SUMMATION_ITEM);
    if (extParent.dom != extItem.dom) extNumber = null;
  }

  if (extNumber == null) {
    var extValue = extItem.select(CSS_WIDGET_ELEMENT_VALUE).first();
    extParent = extValue.up(CSS_WIDGET_SUMMATION_ITEM);
    if (extParent.dom != extItem.dom) return;
    extValue.dom.value = iValue;
  }
  else {
    extNumber.dom.value = iValue;
  }
};

CGWidgetSummation.prototype.itemToObject = function (extItem) {
  var Data = this.aData[extItem.dom.id];
  var Item = new CGSummationItem();

  Item.Label = Data.Label;
  Item.Value = Data.Value;
  Item.Type = this.getItemType(extItem);
  Item.IsMultiple = extItem.hasClass(CLASS_MULTIPLE);
  Item.IsNegative = extItem.hasClass(CLASS_NEGATIVE);

  var aItems = this.getItems(extItem.down("ul"));
  for (var i = 0; i < aItems.length; i++)
    Item.Children.push(this.itemToObject(Ext.get(aItems[i])));

  return Item;
};

CGWidgetSummation.prototype.itemsToObject = function () {
  var extList = this.extWidget.down("ul");
  var aItems = this.getItems(extList);
  var aResult = new Array();

  for (var i = 0; i < aItems.length; i++)
    aResult.push(this.itemToObject(Ext.get(aItems[i])));

  return aResult;
};

CGWidgetSummation.prototype.getData = function () {
  if (!this.Target) return null;
  if (!this.Target.getCode) return null;
  if (!this.extValue) return null;

  var aItems = this.itemsToObject();
  var ItemList = new CGSummationItemList();
  ItemList.Items = aItems;

  var Result = new Object();
  Result.code = this.Target.getCode();
  Result.order = -1;
  Result.value = new Array();
  Result.value.push({code: CGIndicator.VALUE, order: 1, value: this.extValue.dom.value});
  Result.value.push({code: CGIndicator.INTERNAL, order: 2, value: this.Target.getNumberFromFormattedValue(this.extValue.dom.value)});
  if (this.extMetrics && this.extMetrics.dom.selectedIndex != -1) Result.value.push({code: CGIndicator.METRIC, order: 3, value: this.extMetrics.dom.options[this.extMetrics.dom.selectedIndex].value});
  Result.value.push({code: CGIndicator.DETAILS, order: 1, value: ItemList.serialize()});
  if (this.Target.isSuper() && (this.extSuper != null)) Result.value.push({code: CGIndicator.SUPER, order: 2, value: this.extSuper.dom.value});

  Result.toXml = function () {
    var Attribute = new CGAttribute();
    Attribute.code = this.code;
    Attribute.iOrder = this.order;
    for (var iPos = 0; iPos < this.value.length; iPos++) {
      Attribute.addIndicatorByValue(this.value[iPos].code, this.value[iPos].order, this.value[iPos].value);
    }
    return Attribute.serialize();
  };

  return Result;
};

CGWidgetSummation.prototype.setTarget = function (Target) {
  this.Target = Target;

  this.createRequiredWidget();

  for (var Id in this.aWidgets) {
    if (isFunction(this.aWidgets[Id])) continue;
    var onChangeFunction = this.aWidgets[Id].onChange;
    this.aWidgets[Id].onChange = null;
    this.aWidgets[Id].setWidgetRequired(this.WidgetRequired);
    this.aWidgets[Id].setTarget(this.Target);
    this.aWidgets[Id].onChange = onChangeFunction;
  }

  //this.updateData();
};

CGWidgetSummation.prototype.updateTotal = function () {
  var aChildren = this.getItems(this.extWidget.down("ul"));
  var iValue = 0;

  for (var i = 0; i < aChildren.length; i++) {
    var extItem = Ext.get(aChildren[i]);
    if (extItem.hasClass(CLASS_TOTAL)) {
      extTotal = extItem;
      continue;
    }
    var Data = this.aData[aChildren[i]];
    iValue += parseInt(Data.Value);
  }

  this.extValue.dom.value = iValue;
};

CGWidgetSummation.prototype.updateItem = function (extItem) {
  var aChildren = this.getItems(extItem.down("ul"));
  var iValue = 0;

  for (var i = 0; i < aChildren.length; i++) {
    var Data = this.aData[aChildren[i]];
    iValue += parseInt(Data.Value);
  }

  this.aData[extItem.dom.id].Value = iValue;
  this.refreshItem(extItem, iValue);
};

CGWidgetSummation.prototype.updateItems = function (IdAffectedItem) {
  var extAffectedItem = Ext.get(IdAffectedItem);
  var extParentItem = extAffectedItem.up(CSS_WIDGET_SUMMATION_ITEM);
  while (extParentItem != null) {
    this.updateItem(extParentItem);
    extParentItem = extParentItem.up(CSS_WIDGET_SUMMATION_ITEM);
  }
  this.updateTotal();
};

CGWidgetSummation.prototype.setItemData = function (sData, IdItem, Widget) {
  if (Widget instanceof CGWidgetSelect) this.aData[IdItem].Label = Widget.getValue();
  else {
    this.aData[IdItem].Value = parseInt(Widget.getValue());
    this.updateItems(IdItem);
  }
  this.updateData();
};

CGWidgetSummation.prototype.addItem = function (IdItem) {
  var extItem = Ext.get(IdItem);
  var Data = this.aData[IdItem];
  var extTemplate = this.extWidget.select(".template." + Data.Type.toLowerCase()).first();

  new Insertion.After(extItem.dom, cleanContentIds(extTemplate.dom.innerHTML));
  var extNewSibling = Ext.get(extItem.getNextSibling());

  if (extItem.hasClass(CLASS_NEGATIVE)) extNewSibling.addClass(CLASS_NEGATIVE);
  if (extItem.hasClass(CLASS_MULTIPLE)) extNewSibling.addClass(CLASS_MULTIPLE);

  extNewSibling.dom.id = Ext.id();

  var Constructor = Extension.getEditNodeConstructor();
  Constructor.init(extNewSibling.dom);

  this.registerItem(extNewSibling);
};

CGWidgetSummation.prototype.deleteItem = function (IdItem) {
  var extItem = Ext.get(IdItem);
  this.unregisterItem(extItem);
  extItem.remove();
};

CGWidgetSummation.prototype.removeHighlights = function () {
  var aItems = this.getAllItems();

  this.extValue.removeClass(CLASS_HIGHLIGHTED);

  for (var i = 0; i < aItems.length; i++) {
    var extItem = Ext.get(aItems[i]);
    extItem.removeClass(CLASS_HIGHLIGHTED);
  }
};

CGWidgetSummation.prototype.highlightParents = function () {
  this.removeHighlights();

  this.extValue.addClass(CLASS_HIGHLIGHTED);
  var extCurrentItem = Ext.get(this.CurrentItem);
  var extParentItem = extCurrentItem.up(CSS_WIDGET_SUMMATION_ITEM);
  while (extParentItem != null) {
    extParentItem.addClass(CLASS_HIGHLIGHTED);
    extParentItem = extParentItem.up(CSS_WIDGET_SUMMATION_ITEM);
  }
};

CGWidgetSummation.prototype.setWidgetRequired = function (WidgetRequired) {
  this.WidgetRequired = WidgetRequired;

  for (var Id in this.aWidgets) {
    if (isFunction(this.aWidgets[Id])) continue;
    this.aWidgets[Id].setWidgetRequired(this.WidgetRequired);
  }
};

// #############################################################################################################
CGWidgetSummation.prototype.atFocused = function (oEvent) {
  if (!this.Target) return;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused();

  this.Editor.show();
  this.Editor.setConfiguration({Field: this.Target});
  this.Editor.onLoadDefaultValue = this.atLoadDefaultValue.bind(this);
  this.Editor.onAddDefaultValue = this.atAddDefaultValue.bind(this);
  this.Editor.onClearValue = this.atClearValue.bind(this);
  this.Editor.refresh();

  if (this.isLocked()) this.Editor.lock();
  else this.Editor.unLock();

  this.extValue.addClass(CLASS_FOCUS);
  this.extValue.dom.select();

  if (this.Target.getInfo) this.Editor.setInfo(this.Target.getInfo());
  if (this.extMessageEmpty) this.extMessageEmpty.dom.style.display = "none";
};

CGWidgetSummation.prototype.atWidgetFocused = function (IdItem, Widget) {
  this.CurrentItem = IdItem;
  this.CurrentWidget = Widget;
  if (!this.isReady()) this.init();
  if (this.onFocused) this.onFocused(Widget);
  this.highlightParents();
};

CGWidgetSummation.prototype.atWidgetBlur = function (IdItem, Widget) {
  this.removeHighlights();
};

CGWidgetSummation.prototype.atWidgetKeyPress = function (IdItem, Widget, sValue, codeKey) {
  if (Widget instanceof CGWidgetNumber && (codeKey == KEY_TAB || codeKey == KEY_ENTER)) {
    var Data = this.aData[IdItem];
    var extItem = Ext.get(IdItem);
    if (extItem.hasClass(CLASS_MULTIPLE)) {
      var extSibling = Ext.get(IdItem).getNextSibling();
      if (extSibling == null && Data.Label != "" && Data.Value != "") this.addItem(IdItem);
    }
  }
  if (this.onKeyPress) this.onKeyPress(sValue, codeKey);
};

CGWidgetSummation.prototype.atWidgetChange = function (IdItem, Widget) {
  var sValue = Widget.getValue();

  if (sValue == "") {
    this.deleteItem(IdItem);
    return;
  }

  if (this.aData[IdItem].IsNegative && sValue.indexOf("-") == -1) {
    sValue = "-" + sValue;
    Widget.setValue(sValue);
  }
  this.setItemData(sValue, IdItem, Widget);
};

CGWidgetSummation.prototype.atWidgetSelect = function (IdItem, Widget, Data) {
  var extItem = Ext.get(IdItem);

  this.setItemData(Data.value, IdItem, Widget);

  if (extItem.hasClass(CLASS_MULTIPLE)) {
    var Data = this.aData[IdItem];
    var extSibling = Ext.get(IdItem).getNextSibling();
    if (extSibling == null && Data.Label != "" && Data.Value != "") this.addItem(IdItem);
  }
};

CGWidgetSummation.prototype.atWidgetEnter = function () {
  if (this.onEnter) this.onEnter();
};

CGWidgetSummation.prototype.atWidgetEscape = function () {
  if (this.onEscape) this.onEscape();
};

CGWidgetSummation.prototype.atWidgetClearValue = function (IdItem, Widget) {
  this.deleteItem(IdItem);
};

var WidgetFactory = new Object();

WidgetFactory.init = function () {
};

WidgetFactory.get = function (Type, extWidget) {
  var Widget = null;

  if (Type == WIDGET_REQUIRED) Widget = new CGWidgetRequired(extWidget);
  else if (Type == WIDGET_TEXT) Widget = new CGWidgetText(extWidget);
  else if (Type == WIDGET_LIST) Widget = new CGWidgetList(extWidget);
  else if (Type == WIDGET_TABLE) Widget = new CGWidgetTable(extWidget);
  else if (Type == WIDGET_SELECT) Widget = new CGWidgetSelect(extWidget);
  else if (Type == WIDGET_DATE) Widget = new CGWidgetDate(extWidget);
  else if (Type == WIDGET_BOOLEAN) Widget = new CGWidgetBoolean(extWidget);
  else if (Type == WIDGET_PICTURE) Widget = new CGWidgetPicture(extWidget);
  else if (Type == WIDGET_FILE) Widget = new CGWidgetFile(extWidget);
  else if (Type == WIDGET_COMPOSITE) Widget = new CGWidgetComposite(extWidget);
  else if (Type == WIDGET_LINK) Widget = new CGWidgetLink(extWidget);
  else if (Type == WIDGET_NUMBER) Widget = new CGWidgetNumber(extWidget);
  else if (Type == WIDGET_FORMULA) Widget = new CGWidgetFormula(extWidget);
  else if (Type == WIDGET_CHECK) Widget = new CGWidgetCheck(extWidget);
  else if (Type == WIDGET_DESCRIPTOR) Widget = new CGWidgetDescriptor(extWidget);
  else if (Type == WIDGET_NODE) Widget = new CGWidgetNode(extWidget);
  else if (Type == WIDGET_SERIAL) Widget = new CGWidgetSerial(extWidget);
  else if (Type == WIDGET_LOCATION) Widget = new CGWidgetLocation(extWidget);
  else if (Type == WIDGET_SUMMATION) Widget = new CGWidgetSummation(extWidget);

  WidgetManager.register(Widget);

  return Widget;
};

Desktop = new Object;
Desktop.sLayerName = null;
Desktop.layout = null;
Desktop.iLayoutWidth = DEFAULT_WIDTH;
Desktop.iLayoutHeight = DEFAULT_HEIGHT;
Desktop.aModes = new Array();
Desktop.iHeight = null;

Desktop.init = function (sLayerName) {

  var html = AppTemplate.Desktop;
  html = translate(html, Lang.Desktop);

  Desktop.sLayerName = sLayerName;
  document.body.innerHTML = html;

  Desktop.initLayout();
};

Desktop.getMode = function (IdNode) {
  if (Desktop.aModes[IdNode] == null)
    return false;
  return Desktop.aModes[IdNode];
};

Desktop.setMode = function (IdNode, Mode) {
  Desktop.aModes[IdNode] = Mode;
};

Desktop.setLayerSize = function (iWidth, iHeight) {
  Desktop.iLayerWidth = iWidth;
  Desktop.iLayerHeight = iHeight;
};

Desktop.initLayout = function () {

  if (Desktop.layout)
    return;

  Desktop.layout = new Ext.BorderLayout(document.body, {
    north: {
      split: false,
      initialSize: Widths.Layout.Header,
      titlebar: false
    },
    center: {
      initialSize: Widths.Layout.Main,
      titlebar: false,
      autoScroll: true,
      closeOnTab: true
    },
    south: {
      split: false,
      initialSize: Widths.Layout.Footer,
      titlebar: false,
      collapsible: false,
      animate: false
    }
  });

  if ((Ext.isIE) || (Ext.isIE7))
    $(document.body).addClassName("ie");
  if (Ext.isSafari)
    $(document.body).addClassName("safari");
  if (Ext.isGecko)
    $(document.body).addClassName("mozilla");
  if (Ext.isOpera)
    $(document.body).addClassName("opera");

  Desktop.layout.beginUpdate();

  Desktop.Header = new CGLayoutHeader();
  Desktop.Header.init(Desktop.layout);

  Desktop.Main = new CGLayoutMain();
  Desktop.Main.init(Desktop.layout);

  Desktop.Footer = new CGLayoutFooter();
  Desktop.Footer.init(Desktop.layout);

  Desktop.layout.restoreState();
  Desktop.layout.endUpdate();

  Desktop.extReportContainer = Ext.get(Literals.ReportContainer);

  ViewerSidebar.hide();
};

Desktop.showLoading = function () {
  $(Literals.Loading).show();
  $(Literals.LoadingMask).style.zIndex = 20000;
  $(Literals.LoadingMask).show();
};

Desktop.hideLoading = function () {
  $(Literals.Loading).hide();
  $(Literals.LoadingMask).hide();
};

Desktop.showMessageBox = function (sTitle, sSummary, sClass, iMiliseconds) {
  if (!Desktop.extReportContainer)
    return;

  Desktop.extReportContainer.dom.style.opacity = 100;

  var extTemplate = Desktop.extReportContainer.select(".template").first();
  var extTop = Desktop.extReportContainer.select(".x-box-tc").first();
  var extMiddle = Desktop.extReportContainer.select(".x-box-mc").first();
  var extBottom = Desktop.extReportContainer.select(".x-box-bc").first();
  var extTitle = Desktop.extReportContainer.select(".title").first();
  var extSummary = Desktop.extReportContainer.select(".summary").first();

  extTemplate.dom.className = "template " + sClass;
  extTitle.dom.innerHTML = sTitle;
  extSummary.dom.innerHTML = sSummary;

  if (Ext.isIE || Ext.isIE7) {
    extTop.setWidth(extMiddle.getWidth() - 9);
    extBottom.setWidth(extMiddle.getWidth() - 9);
  }

  Desktop.extReportContainer.alignTo(document, 't-t', [ 0, 1 ]);
  Desktop.extReportContainer.slideIn('t');

  if (iMiliseconds) {
    if (iMiliseconds != -1)
      window.setTimeout(Desktop.hideMessageBox.bind(this), iMiliseconds);
  } else
    Desktop.hideMessageBox();
};

Desktop.hideMessageBox = function () {
  if (!Desktop.extReportContainer)
    return;
  Desktop.extReportContainer.dom.style.display = "none";
  Desktop.extReportContainer.ghost("t");
};

Desktop.showMask = function () {
  var extDocument = Ext.get(document.body);
  var extMask = extDocument.down(".ext-el-mask");

  if (extMask == null)
    extMask = Ext.get(new Insertion.Bottom(document.body, "<div class='ext-el-mask'></div>").element.immediateDescendants().last());

  if (Desktop.iHeight == null) {
    Desktop.iHeight = 0;
    var aExtLayouts = extDocument.select(".x-layout-panel");
    aExtLayouts.each(function (extLayout) {
      Desktop.iHeight += extLayout.getHeight();
    }, this);
  }

  extMask.dom.style.display = "block";
  extMask.dom.style.height = Desktop.iHeight + "px";
};

Desktop.hideMask = function () {
  var extDocument = Ext.get(document.body);
  var extMask = extDocument.down(".ext-el-mask");
  if (extMask != null) {
    extMask.dom.style.display = "none";
    extMask.dom.style.height = "1px";
  }
};

Desktop.reportProgress = function (sMessage, bModal) {
  // if (bModal) Ext.MessageBox.wait(sMessage, Lang.Information.Title);
  // else Desktop.showMessageBox(Lang.Information.Wait, sMessage, 'progress',
  // -1);
  this.showMask();
};

Desktop.reportError = function (sMessage) {
  Desktop.showMessageBox(Lang.Error.Title, sMessage, 'error', 5000);
};

Desktop.reportBPIError = function (sMessage) {
  Desktop.showMessageBox(Lang.Error.TitleBPI, sMessage, 'error', 5000);
};

Desktop.reportWarning = function (sMessage) {
  Desktop.showMessageBox(Lang.Warning.Title, sMessage, 'warning', 5000);
};

Desktop.reportSuccess = function (sMessage) {
  Desktop.showMessageBox(Lang.Information.Title, sMessage, 'success', 5000);
};

Desktop.hideReports = function () {
  // Desktop.hideMessageBox();
  // Ext.MessageBox.hide();
  this.hideMask();
};

Desktop.hideProgress = function () {
  // Ext.MessageBox.hide();
  this.hideMask();
};

Desktop.reportBanner = function (sMessage) {
  Desktop.Main.Center.Header.reportBanner(sMessage);
};

Desktop.showBanner = function () {
  Desktop.Main.Center.Header.showBanner();
};

Desktop.hideBanner = function () {
  Desktop.Main.Center.Header.hideBanner();
};

Desktop.refresh = function () {
  Desktop.Header.refresh();
  Desktop.Main.refresh();
  Desktop.Footer.refresh();
};

Desktop.createView = function (DOMObject, Object, ViewContainer, Mode, bRefresh) {
  var View = null;

  if (Object instanceof CGNode)
    View = new CGViewNode();
  else if (Object instanceof CGTask)
    View = new CGViewTask();
  else if (Object instanceof CGTeam)
    View = new CGViewTeam();

  if (View == null)
    return;

  View.init(DOMObject);
  View.setTarget(Object);
  View.setMode(Mode);
  View.setContainer(ViewContainer);
  Desktop.Main.Center.Body.addView(View.Type, View);

  if (bRefresh)
    View.refresh();

  if (View.Type == VIEW_NODE) {
    if (Extension.isDOMNodeCollection(View.getDOM()))
      View.setType(VIEW_NODE_TYPE_COLLECTION);
    if (Extension.isDOMNodeForm(View.getDOM()))
      View.setType(VIEW_NODE_TYPE_FORM);
    else
      View.setType(VIEW_NODE_TYPE_NODE);
  }

  return View;
};

Desktop.markNodesReferences = function (ViewNode) {
  var DOMNode = ViewNode.getDOM();

  if (DOMNode.markNodesReferences)
    DOMNode.markNodesReferences(State.aMarkedNodesReferences, State.NodeReferenceMarkType);

  if (DOMNode.getCollections) {
    var aDOMCollections = DOMNode.getCollections();
    for (var pos = 0; pos < aDOMCollections.length; pos++) {
      if (aDOMCollections[pos].markNodesReferences)
        aDOMCollections[pos].markNodesReferences(State.aMarkedNodesReferences, State.NodeReferenceMarkType);
    }
  }
};

Desktop.getDigitalSignatureApplication = function () {
  var frameLayer = $("#" + Literals.Frames.SignatureApp);
  var frame = frames[Literals.Frames.SignatureApp];

  if (frameLayer == null) frameLayer = $(Literals.Frames.SignatureApp);
  frameLayer.style.display = "block";

  var signatureApp = frame.document.application;
  signatureApp.language = Context.Config.Language;
  signatureApp.downloadUrl = Context.Config.SignatureApplication.DownloadUrl;
  signatureApp.storageUrl = Context.Config.SignatureApplication.StorageUrl;
  signatureApp.retrieveUrl = Context.Config.SignatureApplication.RetrieveUrl;
  signatureApp.init();

  return signatureApp;
};


Ext.grid.TableGrid = function (table, config) {
  config = config || {};
  var cf = config.fields || [], ch = config.columns || [];
  table = Ext.get(table);

  var ct = table.insertSibling();

  var fields = [], cols = [];
  var headers = table.query("thead th");
  for (var i = 0, h; h = headers[i]; i++) {
    var text = h.innerHTML;
    var name = 'tcol-' + i;

    fields.push(Ext.applyIf(cf[i] || {}, {
      name: name,
      mapping: 'td:nth(' + (i + 1) + ')/@innerHTML'
    }));

    cols.push(Ext.applyIf(ch[i] || {}, {
      'header': text,
      'dataIndex': name,
      'width': h.offsetWidth,
      'tooltip': h.title,
      'sortable': true
    }));
  }

  var ds = new Ext.data.Store({
    reader: new Ext.data.XmlReader({
      record: 'tbody tr'
    }, fields)
  });

  ds.loadData(table.dom);

  var cm = new Ext.grid.ColumnModel(cols);

  if (config.width || config.height) {
    ct.setSize(config.width || 'auto', config.height || 'auto');
  }
  if (config.remove !== false) {
    table.remove();
  }

  Ext.grid.TableGrid.superclass.constructor.call(this, ct,
      Ext.applyIf(config, {
            'ds': ds,
            'cm': cm,
            'sm': new Ext.grid.RowSelectionModel(),
            autoHeight: true,
            autoWidth: true
          }
      ));
};

Ext.extend(Ext.grid.TableGrid, Ext.grid.Grid);

function CGBehaviourInfo(sLink) {

  this.sName = null;
  this.aParameters = null;

  this.processLink(sLink);
};

CGBehaviourInfo.prototype.processLink = function (sLink) {

  while ((iPos = sLink.indexOf(SLASH)) != -1) {
    sLink = sLink.substring(iPos + 1, sLink.length);
  }

  var reg = new RegExp(/(.*)\(([^\)]*)/g);
  aResult = reg.exec(sLink);

  if (aResult == null) {
    return false;
  }

  this.sName = aResult[1];
  this.aParameters = (aResult[2] != EMPTY) ? aResult[2].split(',') : new Array();
};

CGBehaviourInfo.prototype.getName = function () {
  return this.sName;
};

CGBehaviourInfo.prototype.getParameters = function () {
  return this.aParameters;
};

CGConstructor = function () {
};

CGConstructor.prototype.init = function (extObject) {
};

CSS_TABS = ".tabs";
CSS_TABS_DEFAULT = ".default";
CSS_TAB = ".tab";
TEMPLATE_TAB_ID = "#{id}_#{idtab}";

CGDecorator = function () {
};

CGDecorator.prototype.addCommonMethods = function (DOMElement) {

	DOMElement.extTabPanel = null;
	DOMElement.cssElementStyle = null;

	DOMElement.getTabId = function (IdTab) {
		var TemplateTabId = new Template(TEMPLATE_TAB_ID);
		return TemplateTabId.evaluate({'id': this.getId(), 'idtab': IdTab});
	};

	DOMElement.getTabCode = function (IdTab) {
		return IdTab.substr(IdTab.indexOf("_")+1);
	};

	DOMElement.hasTabs = function () {
		return this.extTabPanel != null;
	};

	DOMElement.initTabs = function (cssElementStyle) {
		var extElement = Ext.get(this);
		var extTabList = extElement.select(CSS_TAB);

		if (this.extTabPanel == null) {
			this.extTabPanel = extElement.select(CSS_TABS).first();
			if (this.extTabPanel == null) {
				this.executeOnloadCommandsAndRefreshBars(extElement, cssElementStyle);
				return;
			}
			this.extTabPanel = new Ext.TabPanel(this.extTabPanel);
		}

		extTabList.each(function (extTab) {
			var idTab = extTab.dom.id;
			extTab.dom.id = this.getTabId(idTab);
			var extLabel = extTab.select(CSS_LABEL).first();
			var extVisible = extTab.select(CSS_VISIBLE).first();
			var sLabel = (extLabel != null) ? extLabel.dom.innerHTML : "";
			var extTabPanelItem = this.extTabPanel.addTab(extTab.dom.id, (sLabel != "") ? sLabel : Lang.NoLabel);
			extTabPanelItem.IdTab = idTab;
			extTabPanelItem.on("activate", DOMElement.atPanelItemActivated.bind(this));

			if (extVisible != null && extVisible.dom.innerHTML == "false")
				this.hideTab(idTab);

		}, this);

		this.cssElementStyle = cssElementStyle;
		this.resize();
		Ext.EventManager.onWindowResize(DOMElement.atWindowResize.bind(this));
		//this.activateDefaultTab();
	};

	DOMElement.initToolbar = function (css) {
		if (!DOMElement.isPage()) return;

		var extElement = Ext.get(DOMElement);
		var extToolbar = extElement.down(css);
		this.viewerToolbar = new CGViewerToolbar();
		this.viewerToolbar.init();
		this.viewerToolbar.setTarget(this.getConfiguration().toolbar);
		this.viewerToolbar.render(extToolbar);
	};

	DOMElement.activateDefaultTab = function () {
		if (this.extTabPanel == null) return;
		var extDefault = this.extTabPanel.el.select(CSS_TABS_DEFAULT).first();
		this.activateTab(extDefault.dom.innerHTML);
	};

	DOMElement.resize = function () {
		var extLayerList = this.extTabPanel.bodyEl.select(".x-tabs-item-body");
		var extElement = Ext.get(this);
		var extTabs = extElement.up(".x-tabs-body.x-layout-tabs-body");
		var iHeight = (extTabs != null) ? extTabs.getHeight() : 0;
		var iOffsetHeight = extElement.getHeight() - this.extTabPanel.el.getHeight();

		extLayerList.each(function (extLayer) {
			extLayer.dom.style.height = (iHeight - iOffsetHeight - 55) + "px";
			extLayer.dom.style.overflow = "auto";
		}, this);
	};

	DOMElement.getActiveTab = function () {
		var ActiveTab;

		if (!this.extTabPanel) return null;

		ActiveTab = this.extTabPanel.getActiveTab();
		if (!ActiveTab) return null;

		return ActiveTab.IdTab;
	};

	DOMElement.existsTab = function (IdTab) {
		if (!this.extTabPanel) return;
		return this.extTabPanel.getTab(this.getTabId(IdTab)) != null;
	};

	DOMElement.activateTab = function (IdTab) {
		if (!this.extTabPanel) return;
		if (!this.existsTab(IdTab)) return;
		if (this.getActiveTab() != IdTab) this.extTabPanel.activate(this.getTabId(IdTab));
		else {
			var extTabPanelItem = this.extTabPanel.getTab(this.getTabId(IdTab));
			this.refreshPanelItem(extTabPanelItem);
		}
	};

	DOMElement.getTabsCodes = function () {
		var extElement = Ext.get(this);
		var extTabList = extElement.select(CSS_TAB);
		var result = new Array();

		extTabList.each(function (extTab) {
			result.push(this.getTabCode(extTab.dom.id));
		}, this);

		return result;
	};

	DOMElement.showTab = function (IdTab) {
		if (!this.extTabPanel) return;
		if (!this.existsTab(IdTab)) return;
		this.extTabPanel.unhideTab(this.getTabId(IdTab));
	};

	DOMElement.hideTab = function (IdTab) {
		if (!this.extTabPanel) return;
		if (!this.existsTab(IdTab)) return;
		this.extTabPanel.hideTab(this.getTabId(IdTab));
	};

	DOMElement.lockTab = function (IdTab) {
		if (!this.extTabPanel) return;
		if (!this.existsTab(IdTab)) return;
		this.extTabPanel.disableTab(this.getTabId(IdTab));
	};

	DOMElement.unLockTab = function (IdTab) {
		if (!this.extTabPanel) return;
		if (!this.existsTab(IdTab)) return;
		this.extTabPanel.enableTab(this.getTabId(IdTab));
	};

	DOMElement.showLink = function (code) {
		var extElement = Ext.get(this);
		var extLink = extElement.select(CSS_LINK + "." + code).first();
		if (extLink == null) return;
		extLink.dom.style.display = "block";
	};

	DOMElement.hideLink = function (code) {
		var extElement = Ext.get(this);
		var extLink = extElement.select(CSS_LINK + "." + code).first();
		if (extLink == null) return;
		extLink.dom.style.display = "none";
	};

	DOMElement.showOperation = function (sName) {
		var DOMPage = this.getDOMPage();
		DOMPage.viewerToolbar.showOperation(sName);
		ViewerSidebar.showOperation(sName);
	};

	DOMElement.enableOperation = function (sName) {
		var DOMPage = this.getDOMPage();
		DOMPage.viewerToolbar.enableOperation(sName);
		ViewerSidebar.enableOperation(sName);
	};

	DOMElement.hideOperation = function (sName) {
		var DOMPage = this.getDOMPage();
		DOMPage.viewerToolbar.hideOperation(sName);
		ViewerSidebar.hideOperation(sName);
	};

	DOMElement.disableOperation = function (sName) {
		var DOMPage = this.getDOMPage();
		DOMPage.viewerToolbar.disableOperation(sName);
		ViewerSidebar.disableOperation(sName);
	};

	DOMElement.executeOnloadCommands = function () {
		var extElement = Ext.get(this);

		if (this.extTabPanel) {
			var extTab = this.extTabPanel.getActiveTab();
			extElement = Ext.get(extTab.bodyEl);
		}

		var aExtOnloadCommands = extElement.select(CSS_ONLOAD_COMMAND);
		aExtOnloadCommands.each(function (extOnloadCommand) {
			var extElement = extOnloadCommand.up(CSS_NODE);
			if (extElement == null || extElement.dom != this) extElement = extOnloadCommand.up(CSS_TASK);
			if (extElement == null || extElement.dom != this) extElement = extOnloadCommand.up(CSS_TEAM);
			if (extElement == null || extElement.dom != this) return;
			CommandListener.throwCommand(extOnloadCommand.dom.innerHTML);
		}, this);
	};

	DOMElement.setObservers = function (Observers) {
	};

	DOMElement.addObserver = function (Observer) {
	};

	DOMElement.removeObserver = function (fieldPath) {
	};

	DOMElement.update = function (sData) {
		return true;
	};

	DOMElement.getDOMPage = function () {
		var DOMPage = this;

		if (!this.isPage()) {
			var extElement = Ext.get(this);
			var extPage = extElement.up(CSS_PAGE);
			if (extPage == null) return;
			DOMPage = extPage.dom;
		}

		return DOMPage;
	};

	DOMElement.refreshState = function () {
		CommandListener.throwCommand("refreshnodestate(" + this.IdView + ")");
	};

	DOMElement.refreshToolbar = function () {
		var configuration = this.getConfiguration();

		if (configuration == null) return;

		var DOMPage = this.getDOMPage();
		DOMPage.viewerToolbar.setTarget(configuration.toolbar);
		DOMPage.viewerToolbar.refresh();
	};

	DOMElement.refreshSidebar = function () {
		var configuration = this.getConfiguration();

		if (configuration == null) return;

		ViewerSidebar.setTarget(configuration.sidebar);
		ViewerSidebar.refresh();
	};

	DOMElement.refreshPanelItem = function (extTabPanelItem) {
		var extElement = extTabPanelItem.bodyEl.down(this.cssElementStyle);

		if (document.activeElement && document.activeElement !== document.body) {
			try {
				document.activeElement.blur();
			}
			catch (e) {
			}
		}

		if (this.onTabFocus) this.onTabFocus(this, extTabPanelItem.bodyEl, (extElement) ? extElement.dom : null);

		if (extElement) {

			var extTabsBody = extElement.up(".x-tabs-body");
			if (extTabsBody) extTabsBody.scrollTo("top", 0);

			var Process = null;

			if (this.cssElementStyle === CSS_TASK) Process = new CGProcessLoadEmbeddedTask();
			else if (this.cssElementStyle === CSS_NODE) Process = new CGProcessLoadEmbeddedNode();

			if (Process != null) {
				Process.DOMItem = extElement.dom;
				Process.onFinish = DOMElement.refreshPanelItemCallback.bind(this, extTabPanelItem);
				Process.execute();
			}
			else extElement.dom.refreshPanelItemCallback(extTabPanelItem);

		}
	};

	DOMElement.refreshPanelItemCallback = function (extTabPanelItem) {
		this.executeOnloadCommandsAndRefreshBars(extTabPanelItem.bodyEl, CSS_OBJECT);
	};

	DOMElement.executeOnloadCommandsAndRefreshBars = function (extElement, cssType) {
		var extElementList = extElement.select(cssType);
		extElementList.each(function (extElement) {
			if (extElement == null) return;
			if (extElement.dom.executeOnloadCommands) extElement.dom.executeOnloadCommands();
			if (extElement.dom.refreshState) extElement.dom.refreshState();
			if (extElement.dom.refreshToolbar) extElement.dom.refreshToolbar();
			if (extElement.dom.refreshSidebar) extElement.dom.refreshSidebar();
		});

	};

	DOMElement.addSummationBehaviours = function (aDOMFields) {
		for (var iPos = 0; iPos < aDOMFields.length; iPos++) {
			var DOMField = aDOMFields[iPos];
			var extField = Ext.get(DOMField);

			if ((FieldType = DOMField.getType()) == null) continue;
			if (FieldType != FIELD_TYPE_SUMMATION) continue;

			Event.observe(extField.dom, "click", DOMElement.atSummationClick.bind(this, extField.dom));

			var extLabels = extField.select("a.label");
			extLabels.each(function (extLabel) {
				Event.observe(extLabel.dom, "click", DOMElement.atSummationLabelClick.bind(this, extLabel.dom));
			}, this);

			var extClose = extField.select("a.close").first();
			Event.observe(extClose.dom, "click", DOMElement.atSummationCloseClick.bind(this, extClose.dom));
		}
	};

	DOMElement.addTableViewBehaviours = function (aDOMFields) {
		var i = 0;

		for (var iPos = 0; iPos < aDOMFields.length; iPos++) {
			var DOMField = aDOMFields[iPos];
			var extField = Ext.get(DOMField);
			var sCode = DOMField.getCode();

			if ((FieldType = DOMField.getType()) == null) continue;
			if ((FieldType != FIELD_TYPE_COMPOSITE) && (FieldType != FIELD_TYPE_NODE)) continue;
			if (!extField.dom.isTableView()) continue;

			var extTableView = extField.select("ul.table").first();
			var extTableViewElements = extTableView.select("li.element");
			extTableViewElements.each(function (extTableViewElement) {
				if (sCode != extTableViewElement.up(".field").dom.getCode()) return;

				var extLink = extTableViewElement.down("table .link");
				if (extLink) Event.observe(extLink.dom, "click", DOMElement.atTableViewElementClick.bind(this, extTableViewElement.dom));

				var extMoveOption = extTableViewElement.down("table .move");
				if (extMoveOption != null) extTableViewElement.dom.DragObject = new dragObject(extTableViewElement.dom, extMoveOption.dom, new Position(0, -30), new Position(0, extTableView.getBottom() - 30), DOMElement.atTableViewElementDragStart.bind(DOMElement, extTableView.dom, extTableViewElement.dom, extMoveOption.dom), DOMElement.atTableViewElementDragMove.bind(extField.dom, DOMElement, extTableView.dom), DOMElement.atTableViewElementDragEnd.bind(DOMElement, extField.dom, extTableView.dom, extTableViewElement.dom, extMoveOption.dom), false);

				var extClose = extTableViewElement.down("table .close");
				if (extClose) Event.observe(extClose.dom, "click", DOMElement.atTableViewElementClose.bind(this, extTableViewElement.dom));

				extTableViewElement.dom.doRemove = DOMElement.doRemove.bind(this, extTableViewElement.dom);
				extTableViewElement.dom.pos = i;
				i++;
			}, this);

			extTableView.dom.DOMDragDropHolder = $(new Insertion.Bottom(extTableView.dom, "<div style='display:none;border:1px solid #ccc;background:rgb(225,225,225);'></div>").element.descendants().last());
			extTableView.dom.DOMDragDropHolder.DOMElement = null;

			this.addTableViewFilterBehaviours(extField);
			this.addTableViewListBehaviours(extField);
			this.addTableViewPagingBehaviours(extField);

			var extLists = extField.select(".tableview ul.list");
			extLists.each(function (extList) {
				i = 0;
				var extElements = extList.select("li");
				extElements.each(function (extElement) {
					if (extList.dom != extElement.up("ul.list").dom) return;
					if (sCode != extElement.up(".field").dom.getCode()) return;
					extElement.dom.style.display = "none";
					extElement.dom.pos = i;
					i++;
				}, this);
			}, this);
		}

	};

	DOMElement.getTableViewVisibleElementsCountToPos = function (extField, iPos) {
		var aCount = new Array();
		var aExtElements = extField.select("ul.table li.element");
		var iCurrentPos = 0;

		aCount[0] = aCount[1] = 0;
		aExtElements.each(function (extElement) {
			if ((extElement.dom.style.display == "") || (extElement.dom.style.display == "block") || (extElement.dom.style.display == "inline")) {
				if (iPos != iCurrentPos) {
					if (iCurrentPos < iPos) aCount[0]++;
					else aCount[1]++;
				}
			}
			iCurrentPos++;
		}, this);

		return aCount;
	};

	DOMElement.refreshTableViewPaging = function (extField) {
		var extPrevious, extCurrent;
		var extPaging = extField.down(".wtable .toolbar .paging");
		var iPos = this.getTableViewElementPos(extField, extField.extCurrentElement);
		var aCount = this.getTableViewVisibleElementsCountToPos(extField, iPos);

		extPaging.dom.style.display = (aCount[2] == 1) ? "none" : "block";
		extPrevious = extField.down(".wtable .toolbar .paging .previous");
		extCurrent = extField.down(".wtable .toolbar .paging .current");
		extNext = extField.down(".wtable .toolbar .paging .next");

		extCurrent.dom.innerHTML = aCount[0] + 1;

		if (aCount[0] <= 0) extPrevious.addClass(CLASS_DISABLED);
		else extPrevious.removeClass(CLASS_DISABLED);

		if (aCount[1] <= 0) extNext.addClass(CLASS_DISABLED);
		else extNext.removeClass(CLASS_DISABLED);
	};

	DOMElement.addTableViewFilterBehaviours = function (extField) {
		var extFilter = extField.down(".wtable .filter");
		var extFilterEmpty = extField.down(".wtable .filterempty");
		var extFilterClear = extField.down(".wtable .filterclear");

		extFilter.on("keyup", DOMElement.atTableViewFilterKeyUp.bind(DOMElement, extField));
		extFilter.on("focus", DOMElement.atTableViewFilterFocus.bind(DOMElement, extField));
		extFilter.on("blur", DOMElement.atTableViewFilterBlur.bind(DOMElement, extField));

		extFilterEmpty.dom.style.display = "block";
		extFilterEmpty.on("click", DOMElement.atTableViewFilterEmptyClick.bind(DOMElement, extField));

		extFilterClear.dom.style.display = "none";
		extFilterClear.on("click", DOMElement.atTableViewFilterClearClick.bind(DOMElement, extField));
	};

	DOMElement.addTableViewListBehaviours = function (extField) {
		var extHideList = extField.down(".wtable .hidelist");

		extHideList.on("click", DOMElement.atTableViewHideListClick.bind(DOMElement, extField));
		this.hideList(extField);
	};

	DOMElement.addTableViewPagingBehaviours = function (extField) {
		var extPrevious = extField.down(".wtable .toolbar .paging .previous");
		var extNext = extField.down(".wtable .toolbar .paging .next");

		extField.iCurrentElement = 0;

		Event.observe(extPrevious.dom, "click", DOMElement.atTableViewPreviousElementClick.bind(DOMElement, extField));
		Event.observe(extNext.dom, "click", DOMElement.atTableViewNextElementClick.bind(DOMElement, extField));

		DOMElement.refreshTableViewPaging(extField);
	};

	DOMElement.addTableViewElementBehaviours = function (DOMItem) {
		var extElement = Ext.get(DOMItem);
		var extField = Ext.get(extElement.up(".field"));
		var extTableView = Ext.get(extElement.up("ul"));
		var i = extElement.up("ul").select("li.element").getCount() - 1;

		var extLink = extElement.down("table .link");
		if (extLink) Event.observe(extLink.dom, "click", DOMElement.atTableViewElementClick.bind(this, extElement.dom));

		var extMoveOption = extElement.down("table .move");
		if (extMoveOption != null) extElement.dom.DragObject = new dragObject(extElement.dom, extMoveOption.dom, new Position(0, -30), new Position(0, extTableView.getBottom() - 30), DOMElement.atTableViewElementDragStart.bind(DOMElement, extTableView.dom, extElement.dom, extMoveOption.dom), DOMElement.atTableViewElementDragMove.bind(DOMElement, extTableView.dom), DOMElement.atTableViewElementDragEnd.bind(DOMElement, extField.dom, extTableView.dom, extElement.dom, extMoveOption.dom), false);

		var extClose = extElement.down("table .close");
		if (extClose) Event.observe(extClose.dom, "click", DOMElement.atTableViewElementClose.bind(this, extElement.dom));

		extElement.dom.doRemove = DOMElement.doRemove.bind(this, extElement.dom);
		extElement.dom.pos = i;

		return i;
	};

	DOMElement.getTableViewElementPos = function (extField, extElement) {
		var extTable = extField.select("ul.table").first();
		var aExtElements = extTable.select("li.element");
		var iCurrentPos = -1;

		if (extElement == null) return -1;

		for (var i = 0; i < aExtElements.elements.length; i++) {
			var extCurrentElement = Ext.get(aExtElements.elements[i]);
			if (extField.dom.getCode() != extCurrentElement.up(".field").dom.getCode()) continue;
			iCurrentPos++;
			if (extCurrentElement.dom == extElement.dom) break;
		}

		return iCurrentPos;
	};

	DOMElement.deactivateTableViewElement = function (extField) {
		if (extField.extCurrentElement != null && !extField.extCurrentElement.hasClass(CLASS_READONLY))
			this.hideList(extField);

		if (extField.extCurrentElement == null) return;
		extField.extCurrentElement.removeClass(CLASS_ACTIVE);
		extField.extCurrentElement = null;
	};

	DOMElement.activateTableViewElement = function (extField, extElement) {
		if (extElement.hasClass(CLASS_READONLY)) return;
		if (extElement == null) return;

		if (extField.extCurrentElement != null) extField.extCurrentElement.removeClass(CLASS_ACTIVE);

		if (extElement == extField.extCurrentElement) {
			this.deactivateTableViewElement(extField);
			return;
		}

		extElement.addClass(CLASS_ACTIVE);
		extElement.scrollIntoView(extElement.up(".table_envelope"));

		if (extElement.dom.onActivate) extElement.dom.onActivate(extElement);

		var extList = extField.down(".tableview ul.list");
		if (extList) {
			var extListElements = extList.select(".element");
			var iNumElements = 0;
			extListElements.each(function (extListElement) {
				if (extList.dom != extListElement.dom.parentNode) return;
				iNumElements++;
				if (extListElement.dom.pos == extElement.dom.pos) extListElement.dom.style.display = "block";
				else extListElement.dom.style.display = "none";
			}, this);
			if (iNumElements == 1) extListElements.first().dom.style.display = "block";
		}

		this.showList(extField, extList, extElement);
		extField.extCurrentElement = extElement;
		this.refreshTableViewPaging(extField);
	};

	DOMElement.updateTableViewListSize = function (extField) {
		var DOMFieldTable = extField.up(".field.tableview");
		if (DOMFieldTable == null) return;
		var extList = DOMFieldTable.down(".tableview").down("ul.list");
		var height = extList.getHeight();
		if (height == 0) return;
		var extElement = Ext.get(DOMFieldTable.down(".table_envelope").down("ul").down(".element." + CLASS_ACTIVE));
		this.showList(Ext.get(DOMFieldTable), extList, extElement);
	};

	DOMElement.activateTableViewPreviousElement = function (extField, extElement) {
		var extActiveElement = extField.select("ul.table li.element.active").first();
		if (extElement == null) extElement = extActiveElement;
		if (extElement == null) return;
		var extSibling = Ext.get(extElement.getPrevSibling());
		while (extSibling != null && extSibling.dom.style.display == "none") extSibling = Ext.get(extSibling.getPrevSibling());
		if (extSibling == null) {
			this.deactivateTableViewElement(extField);
			return;
		}
		if (extSibling.hasClass("header")) this.deactivateTableViewElement(extField);
		else this.activateTableViewElement(extField, extSibling);
	};

	DOMElement.filterTableView = function (extField) {
		var sFilter = extField.down(".wtable .filter").dom.value;
		var extTableViewElements = extField.select("ul.table li.element");
		var sCode = extField.dom.getCode();

		this.deactivateTableViewElement(extField);

		extTableViewElements.each(function (extTableViewElement) {
			if (sCode != extTableViewElement.up(".field").dom.getCode()) return;
			var sContent = extTableViewElement.dom.innerHTML.toLowerCase();
			extTableViewElement.dom.style.display = (sContent.indexOf(sFilter.toLowerCase()) != -1) ? "block" : "none";
		}, this);

		DOMElement.refreshTableViewPaging(extField);
	};

	DOMElement.resizeTableView = function (extField) {
		var extCurrentElement = extField.extCurrentElement;
		if (extCurrentElement == null) return;
		var extList = extField.down(".tableview ul.list");
		this.showList(extField, extList, extCurrentElement);
	};

	DOMElement.activateFirst = function (extField) {
		var extFirst = extField.select("ul.table li.element").first();
		if (extFirst) extFirst.dom.click();
		else {
			DOMElement.refreshTableViewPaging(extField);
			DOMElement.hideList(extField);
		}
	};

	DOMElement.showList = function (extField, extList, extElement) {
		var extHideList = extField.down(".wtable .hidelist");
		var extToolbar = extField.down(".wtable .toolbar.item");
		var extList = extField.down(".tableview ul.list");
		var widget = this;

		if (this.showListTimeout != null)
			window.clearTimeout(this.showListTimeout);

		if (extField.extCurrentElement) {
			this.hideList(extField);
		}

		this.showListTimeout = window.setTimeout(function() {
            extHideList.dom.style.display = "block";
            extToolbar.dom.style.display = "block";
            extList.dom.style.display = "block";

            extElement.setHeight(extList.getHeight() + 20);

            var extCloseFlag = extElement.select("td.flag .close").first();
            extCloseFlag.setBottom(0);
            extCloseFlag.dom.style.display = "block";

            var extValues = extElement.select("td .value");
            extValues.each(function (extValue) {
                extValue.dom.style.visibility = "hidden";
            }, widget);

            extList.dom.style.top = (extElement.dom.offsetTop) + "px";
		}, 200);
	};

	DOMElement.hideList = function (extField) {
		var extHideList = extField.down(".wtable .hidelist");
		var extToolbar = extField.down(".wtable .toolbar.item");
		var extList = extField.down(".tableview ul.list");
		extHideList.dom.style.display = "none";
		extToolbar.dom.style.display = "none";
		extList.dom.style.display = "none";

		if (extField.extCurrentElement) {
			extField.extCurrentElement.dom.style.height = "auto";
			var extCloseFlag = extField.extCurrentElement.select("td.flag .close").first();
			extCloseFlag.dom.style.height = "auto";
			extCloseFlag.dom.style.display = "none";
			var extValues = extField.extCurrentElement.select("td .value");
			extValues.each(function (extValue) {
				extValue.dom.style.visibility = "visible";
			}, this);
		}
	};

	DOMElement.doRemove = function (DOMElement) {
		var extElement = Ext.get(DOMElement);
		var extField = Ext.get(extElement.up(".field"));
		this.activateTableViewPreviousElement(extField, extElement);
		extElement.dom.remove();
	};

	DOMElement.getConfiguration = function () {
		var extElement = Ext.get(DOMElement);
		var extConfiguration = extElement.down(".def.configuration");

		if (extConfiguration == null) return null;
		eval(extConfiguration.dom.innerHTML);

		if (extElement.dom.isPage()) return configuration;

		var extPage = extElement.up(CSS_PAGE);
		if (extPage == null) return configuration;

		var pageConfiguration = extPage.dom.getConfiguration();

		var operationSet = configuration.toolbar.operationSet;
		for (var i = 0; i < pageConfiguration.toolbar.operationSet.length; i++) {
			var operation = pageConfiguration.toolbar.operationSet[i];
			if (containsObjectInList(operation, operationSet)) continue;
			operationSet.push(operation);
		}

		operationSet = configuration.sidebar.operationSet;
		for (var i = 0; i < pageConfiguration.sidebar.operationSet.length; i++) {
			var operation = pageConfiguration.sidebar.operationSet[i];
			if (containsObjectInList(operation, operationSet)) continue;
			operationSet.push(operation);
		}

		return configuration;
	};

	DOMElement.isPage = function () {
		var extElement = Ext.get(DOMElement);
		return extElement.hasClass(CLASS_PAGE);
	};

	// #############################################################################################################

	DOMElement.atWindowResize = function () {
		this.resize();
	};

	DOMElement.atPanelItemActivated = function (extTabPanel, extTabPanelItem) {
		if (DOMElement.onTabActivated) DOMElement.onTabActivated();
		else this.refreshPanelItem(extTabPanelItem);
	};

	DOMElement.atTableViewElementClick = function (DOMElement, EventLaunched) {
		var extField = Ext.get(DOMElement.up(".field"));
		this.activateTableViewElement(extField, Ext.get(DOMElement));
		Event.stop(EventLaunched);
		return false;
	};

	DOMElement.atTableViewElementClose = function (DOMElement, EventLaunched) {
		var extField = Ext.get(DOMElement.up(".field"));
		this.deactivateTableViewElement(extField);
		Event.stop(EventLaunched);
		return false;
	};

	DOMElement.atTableViewPreviousElementClick = function (extField) {
		this.activateTableViewPreviousElement(extField);
	};

	DOMElement.atTableViewNextElementClick = function (extField) {
		var extActiveElement = extField.select("ul.table li.element.active").first();
		if (extActiveElement == null) {
			var extFirst = extField.select("ul.table li.element").first();
			extFirst.dom.click();
			return;
		}
		var extSibling = Ext.get(extActiveElement.getNextSibling());
		while (extSibling != null && extSibling.dom.style.display == "none") extSibling = Ext.get(extSibling.getNextSibling());
		if (extSibling == null) return;
		this.activateTableViewElement(extField, extSibling);
	};

	DOMElement.atTableViewFilterKeyUp = function (extField, oEvent) {
		var extFilter = extField.down(".wtable .filter");
		var extFilterClear = extField.down(".wtable .filterclear");
		var codeKey = oEvent.keyCode;
		var sFilter = extFilter.dom.value;

		window.clearTimeout(this.idTimeoutFilter);

		if ((codeKey == oEvent.UP) || (codeKey == oEvent.DOWN) || (codeKey == oEvent.ENTER) || (codeKey == oEvent.LEFT) || (codeKey == oEvent.RIGHT) || (codeKey == oEvent.SHIFT)) return;

		extFilterClear.dom.style.display = (sFilter != "") ? "block" : "none";

		this.idTimeoutFilter = window.setTimeout(DOMElement.filterTableView.bind(DOMElement, extField), 300);
	};

	DOMElement.atTableViewFilterFocus = function (extField) {
		var extFilter = extField.down(".wtable .filter");
		var extFilterEmpty = extField.down(".wtable .filterempty");

		extFilterEmpty.dom.style.display = "none";
		extFilter.dom.style.background = "#EFF7FF";
		extFilter.dom.select();
	};

	DOMElement.atTableViewFilterBlur = function (extField) {
		var extFilter = extField.down(".wtable .filter");
		var extFilterEmpty = extField.down(".wtable .filterempty");
		var sFilter = extFilter.dom.value;
		extFilter.dom.style.background = (sFilter.length <= 0) ? "" : "#EFF7FF";
		extFilterEmpty.dom.style.display = (sFilter.length <= 0) ? "block" : "none";
	};

	DOMElement.atTableViewFilterEmptyClick = function (extField) {
		var extFilter = extField.down(".wtable .filter");
		extFilter.focus();
	};

	DOMElement.atTableViewFilterClearClick = function (extField) {
		var extFilter = extField.down(".wtable .filter");
		var extFilterEmpty = extField.down(".wtable .filterempty");
		var extFilterClear = extField.down(".wtable .filterclear");

		extFilter.dom.value = "";
		extFilter.dom.style.background = "";
		extFilterEmpty.dom.style.display = "block";
		extFilterClear.dom.style.display = "none";

		this.filterTableView(extField);
	};

	DOMElement.atTableViewHideListClick = function (extField) {
		this.hideList(extField);
	};

	DOMElement.atTableViewElementDragStart = function (DOMTable, DOMElement, DOMMoveOption, oEvent) {
		var iHeight = Ext.get(DOMElement).getHeight();
		DOMTable.addClassName("draglist");
		Ext.get(DOMMoveOption).addClass("grabbing");
		DOMElement.style.top = DOMElement.offsetTop + 'px';
		DOMElement.style.left = DOMElement.offsetLeft + 'px';
		DOMElement.addClassName("drag");
		DOMTable.DOMDragDropHolder.style.display = "block";
		DOMTable.DOMDragDropHolder.style.height = iHeight + "px";
		DOMTable.insertBefore(DOMTable.DOMDragDropHolder, DOMElement);
		DOMTable.DOMDragDropHolder.DOMElement = DOMElement;
	};

	DOMElement.atTableViewElementDragMove = function (DOMField, DOMTable, oPosition, DOMElement, oEvent) {
		var yPos = oPosition.Y + (oEvent.layerY ? oEvent.layerY : oEvent.offsetY);
		var temp;
		var bestItem = "end";

		for (var i = 0; i < DOMTable.childNodes.length; i++) {
			if (DOMTable.childNodes[i].className == "element") {
				temp = parseInt(Ext.get(DOMTable.childNodes[i]).getHeight());
				if (temp >= yPos) {
					bestItem = DOMTable.childNodes[i];
					break;
				}
				yPos -= temp;
			}
		}

		if (bestItem == DOMTable.DOMDragDropHolder || bestItem == DOMTable.DOMDragDropHolder.DOMElement) return;

		DOMTable.DOMDragDropHolder.DOMElement = bestItem;
		if (bestItem != "end") DOMTable.insertBefore(DOMTable.DOMDragDropHolder, DOMTable.childNodes[i]);
		else DOMTable.appendChild(DOMTable.DOMDragDropHolder);

		var extElement = Ext.get(DOMElement);
		var extField = Ext.get(DOMField);
		if (extField.extCurrentElement != null && extElement == extField.extCurrentElement) {
			var extList = extField.down(".tableview ul.list");
			extList.dom.style.top = (DOMTable.DOMDragDropHolder.offsetTop + 30) + "px";
		}
	};

	DOMElement.getElementPos = function (DOMField, DOMElement) {
		var extField = Ext.get(DOMField);
		var aExtElements = extField.select("ul.table li.element");
		for (var i = 0; i < aExtElements.getCount(); i++) {
			var extElement = aExtElements.item(i);
			if (extElement.dom.id == DOMElement.id) return i;
		}
		return -1;
	};

	DOMElement.atTableViewElementDragEnd = function (DOMField, DOMTable, DOMElement, DOMMoveOption) {
		var previousPos = this.getElementPos(DOMField, DOMElement);
		var newPos;

		Ext.get(DOMMoveOption).removeClass("grabbing");

		DOMTable.DOMDragDropHolder.style.display = "none";

		if (DOMTable.DOMDragDropHolder.DOMElement != null) {
			DOMTable.DOMDragDropHolder.DOMElement = null;
			DOMTable.replaceChild(DOMElement, DOMTable.DOMDragDropHolder);
		}

		newPos = this.getElementPos(DOMField, DOMElement);

		DOMElement.removeClassName('drag');
		DOMElement.style.top = '0px';
		DOMElement.style.left = '0px';
		DOMElement.pos = newPos;
		DOMTable.removeClassName("draglist");

		var extElement = Ext.get(DOMElement);
		var extField = Ext.get(DOMField);
		if (extField.extCurrentElement != null && extElement == extField.extCurrentElement) {
			var extList = extField.down(".tableview ul.list");
			extList.dom.style.top = (extElement.dom.offsetTop + 30) + "px";
		}

		if (DOMElement.onMove) DOMElement.onMove(Ext.get(DOMElement), previousPos, newPos);
	};

	DOMElement.atSummationLabelClick = function (DOMLabel) {
		var extLabel = Ext.get(DOMLabel);
		var extItem = extLabel.up(".summationitem");
		var extList = extItem.down("ul");
		var extClose = extItem.up(CSS_FIELD).select(".close").first();

		if (extItem.hasClass("expanded")) {
			extList.dom.style.display = "none";
			extClose.dom.style.display = "none";
			extItem.removeClass("expanded");
		}
		else {
			extList.dom.style.display = "block";
			extClose.dom.style.display = "block";
			extItem.addClass("expanded");
		}
	};

	DOMElement.atSummationCloseClick = function (DOMClose, oEvent) {
		var extClose = Ext.get(DOMClose);
		var extField = extClose.up(CSS_FIELD);
		var extList = extField.down(".widget ul");
		var extClose = extField.down(".widget .close");

		extList.dom.style.display = "none";
		extClose.dom.style.display = "none";

		Event.stop(oEvent);

		return false;
	};

	DOMElement.atSummationClick = function (DOMField) {
		var extField = Ext.get(DOMField);
		var extList = extField.down(".widget ul");
		var extClose = extField.down(".widget .close");

		extList.dom.style.display = "block";
		extClose.dom.style.display = "block";
	};

};

CSS_UPDATE_MESSAGE = ".message.update";

CGDecoratorCollection = function () {
};

CGDecoratorCollection.prototype = new CGDecorator;

CGDecoratorCollection.prototype.execute = function (DOMCollection) {

  this.addCommonMethods(DOMCollection);

  DOMCollection.getFields = function () {
    var aFields = new Array();
    var extNode = Ext.get(this);
    var extFieldList;

    if (!(extFieldList = extNode.select(CSS_FIELD))) return false;

    extFieldList.each(function (extField) {
      if (extField.dom.belongsToTemplate()) return;
      aFields.push(extField.dom);
    }, this);

    return aFields;
  };

  DOMCollection.init = function (Editors) {
    this.initToolbar(".header .content .toolbar");
    this.initTabs(CSS_NODE);

    if (!this.isEditable()) return;

    this.Editors = Editors;
    this.aMemento = new Array();
    this.IndexMemento = -1;

    this.initFields(this.getFields());
  };

  DOMCollection.destroy = function () {
    if (!this.isEditable()) return;
    this.destroyFields(this.getFields());
    this.Editors = null;
    this.aMemento = new Array();
  };

  DOMCollection.refresh = function () {
    var extCollection = Ext.get(this);
    if (!(NodeReferenceList = extCollection.select(CSS_REFERENCE))) return false;
    if (!(HiddenableList = extCollection.select(CSS_HIDDENABLE))) return false;

    var iCountNodesReferences = NodeReferenceList.getCount();
    HiddenableList.each(function (Hiddenable) {
      sVisibleClass = (Hiddenable.hasClass('inline')) ? "inline" : "block";
      Hiddenable.dom.style.display = (iCountNodesReferences != 0) ? sVisibleClass : "none";
    });
  };

  DOMCollection.getContent = function () {
    var ControlInfo = this.getControlInfo();
    var extCollection = Ext.get(this);
    var aDOMNodesReferences = this.getNodesReferences();
    var sContent = "";
    var NodeList = new CGNodeList();
    var Node = new CGNode();

    for (var iPos = 0; iPos < aDOMNodesReferences.length; iPos++) {
      var DOMNodeReference = aDOMNodesReferences[iPos];
      if (DOMNodeReference.isEditable()) sContent += DOMNodeReference.getContent();
    }

    if (sContent == "") return "";

    Node.setId(ControlInfo.IdNode);
    Node.setCode(ControlInfo.Code);
    sContent = NodeList.serializeWithData(sContent);
    sContent = Node.serializeWithData(sContent);

    return sContent;
  };

  DOMCollection.addNodeReference = function (sNodeReferenceContent) {
    var extNodeReference, extNodeReferenceList, extCollection = Ext.get(this);
    if (!(extNodeReferenceList = extCollection.select(CSS_REFERENCE_LIST).first())) return false;
    extNodeReference = new Insertion.Bottom(extNodeReferenceList.dom, sNodeReferenceContent).element.immediateDescendants().last();
    this.refresh();
    return extNodeReference;
  };

  DOMCollection.deleteNodeReferences = function (Id) {
    var aExtNodeReferences;
    var extCollection = Ext.get(this);

    if ((aExtNodeReferences = extCollection.select(CSS_REFERENCE + DOT + Id)) == null) return false;

    aExtNodeReferences.each(function (extNodeReference) {
      extNodeReference.remove();
      this.refresh();
    }, this);

  };

  DOMCollection.isMagnetized = function (CodeType) {
    var extCollection = Ext.get(this);
    var extMagnetList = extCollection.select(".magnet");
    var bMagnetized = false;

    extMagnetList.each(function (extMagnet) {
      if (bMagnetized) return;
      if (extMagnet.dom.innerHTML == CodeType) bMagnetized = true;
    }, this);

    return bMagnetized;
  };

  DOMCollection.isEditionMode = function () {
    var ControlInfo = this.getControlInfo();
    return (ControlInfo.Mode == MODE_EDITION);
  };

  DOMCollection.isRefreshable = function () {
    var ControlInfo = this.getControlInfo();
    return (ControlInfo.Templates.Refresh != null);
  };

  DOMCollection.getData = function () {
  };

  DOMCollection.scrollTo = function (bAnimate) {
    if (bAnimate) this.highlight();
    //this.scrollTo();
  };

  DOMCollection.highlight = function () {
    var extCollection = Ext.get(this);
    new Effect.Highlight(extCollection.dom, {duration: HIGHLIGHT_DURATION});
  };

  DOMCollection.update = function () {
    var extCollection = Ext.get(this);
    var extUpdateMessage = extCollection.down(CSS_UPDATE_MESSAGE);
    if (!extUpdateMessage) return true;
    extUpdateMessage.dom.style.display = "block";
    return true;
  };

};

CGDecoratorFieldBoolean = function () {
};

CGDecoratorFieldBoolean.prototype = new CGDecorator;

CGDecoratorFieldBoolean.prototype.execute = function (DOMField) {
};

CGDecoratorFieldCheck = function () {
};

CGDecoratorFieldCheck.prototype = new CGDecorator;

CGDecoratorFieldCheck.prototype.execute = function (DOMField) {

  DOMField.getSources = function () {
    var extField = Ext.get(this);
    var extSources = extField.select(CSS_FIELD_DEF_SOURCES).first();
    var sources = new Array();

    for (var iPos = 0; iPos < extSources.dom.options.length; iPos++) {
      var DOMOption = extSources.dom.options[iPos];
      sources.push({ id: DOMOption.value, label: DOMOption.text, partner: DOMOption.className});
    }

    return sources;
  };

  DOMField.getStoreFrom = function () {
    var extField = Ext.get(this);
    var extFrom = extField.select(CSS_FIELD_DEF_FROM).first();
    return (extFrom != null) ? extFrom.dom.innerHTML : "";
  };

  DOMField.getStoreFromValue = function () {
    var value = this.getStoreFrom();

    if (value.indexOf("_field:") != -1)
      value = DOMField.getFieldValueCode(value.replace("_field:", ""));

    return value;
  };

};

CGDecoratorFieldDate = function () {
};

CGDecoratorFieldDate.prototype = new CGDecorator;

CGDecoratorFieldDate.prototype.execute = function (DOMField) {

  DOMField.getFormat = function () {
    var extField = Ext.get(this);
    var extFormat = extField.select(CSS_FIELD_DEF_FORMAT).first();
    if (extFormat) return extFormat.dom.innerHTML;
    return null;
  };

  DOMField.getEdition = function () {
    var extField = Ext.get(this);
    var extEdition = extField.select(CSS_FIELD_DEF_EDITION).first();
    if (extEdition) return extEdition.dom.innerHTML;
    return null;
  };

  DOMField.isSequential = function () {
    var edition = this.getEdition();
    return edition == "sequential";
  };

  DOMField.isRandom = function () {
    var edition = this.getEdition();
    return edition == "random";
  };

};

CGDecoratorFieldFile = function () {
};

CGDecoratorFieldFile.prototype = new CGDecorator;

CGDecoratorFieldFile.prototype.execute = function (DOMField) {
  DOMField.getSourceStore = function () {
    return this.getStore(CSS_FIELD_DEF_SOURCE_STORE);
  };
  DOMField.getLimit = function () {
      var extField = Ext.get(this);
      var extLimit = extField.down(CSS_FIELD_DEF_LIMIT);
      if (!extLimit) return null;
      return extLimit.dom.innerHTML;
  };
};

CGDecoratorFieldFormula = function () {
};

CGDecoratorFieldFormula.prototype = new CGDecorator;

CGDecoratorFieldFormula.prototype.execute = function (DOMField) {

  DOMField.getFormula = function () {
    var extField = Ext.get(this);
    if ((extFormula = extField.down(CSS_FIELD_DEF_FORMULA)) == null) return null;
    return extFormula.dom.innerHTML;
  };

};

CGDecoratorFieldLink = function () {
};

CGDecoratorFieldLink.prototype = new CGDecorator;

CGDecoratorFieldLink.prototype.execute = function (DOMField) {

  DOMField.getHistoryStore = function () {
    return this.getStore(CSS_FIELD_DEF_HISTORY_STORE);
  };

  DOMField.getDataLink = function () {
    return this.getStore(CSS_FIELD_DEF_DATA_LINK);
  };

  DOMField.getDataLinkLocations = function () {
    return this.getStore(CSS_FIELD_DEF_DATA_LINK_LOCATIONS);
  };

  DOMField.setParameter = function (Code, sValue) {
    if (!this.aParameters) this.aParameters = new Array();
    this.aParameters[Code] = sValue;
  };

  DOMField.getParameters = function () {
    if (!this.aParameters) this.aParameters = new Array();
    return this.aParameters;
  };

  DOMField.getHeader = function () {
    var extField = Ext.get(this);
    var DataHeader;

    DataHeader = new Object();
    DataHeader.Attributes = new Array();

    extHeader = extField.select(CSS_FIELD_DEF_HEADER).first();
    if (extHeader == null) {
      return DataHeader;
    }

    for (var iPos = 0; iPos < extHeader.dom.options.length; iPos++) {
      var DOMOption = $(extHeader.dom.options[iPos]);
      var sValue = DOMOption.value.toLowerCase();
      var sText = DOMOption.text.toLowerCase();
      if (DOMOption.hasClassName(CLASS_FIELD_DATA_HEADER_VALUE_COLUMN)) DataHeader.CodeValueColumn = sValue;
      DataHeader.Attributes.push([sValue, sText]);
    }

    return DataHeader;
  };

  DOMField.getNodeTypes = function () {
    var extField = Ext.get(this), extNodeTypes;
    if ((extNodeTypes = extField.down(CSS_FIELD_DEF_NODETYPES)) == null) return "";
    return extNodeTypes.dom.innerHTML.split(",");
  };

  DOMField.getLinkTemplates = function () {
    var extLinkTemplate;
    var extField = Ext.get(this);
    var Templates = new Object();
    Templates = new Object();

    Templates.View = (extLinkTemplate = extField.select(CSS_FIELD_DEF_TEMPLATE_VIEW).first()) ? extLinkTemplate.dom.innerHTML : null;
    Templates.Edit = (extLinkTemplate = extField.select(CSS_FIELD_DEF_TEMPLATE_EDIT).first()) ? extLinkTemplate.dom.innerHTML : null;

    return Templates;
  };

  DOMField.getStoreFilters = function () {
    return this.getDataLink().Filters;
  };

  DOMField.getStoreFiltersFields = function () {
    var result = [];
    var filters = this.getStoreFilters();

    for (var key in filters) {
      if (isFunction(filters[key])) continue;
      var filter = filters[key];

      if (filter.indexOf("_field:") != -1) {
        var field = filter.replace("_field:", "");
        if (field.indexOf("__") != -1) field = field.substring(0, field.indexOf("__"));
        result.push(DOMField.getField(field));
      }
    }

    return result;
  };

  DOMField.getStoreFiltersValues = function () {
	  var result = new Object();
	  var filters = this.getStoreFilters();

	  for (var key in filters) {
		  if (isFunction(filters[key])) continue;
		  var filter = filters[key];

		  if (filter.indexOf("_field:") != -1) {
		      var field = filter.replace("_field:", "");
		      var operator = "EQUALS";
		      if (field.indexOf("__") != -1) {
		        operator = field.substring(field.indexOf("__")+2);
                field = field.substring(0, field.indexOf("__"));
              }
              filter = DOMField.getFieldValueCode(field);
              filter = filter + "__" + operator;
          }

		  result[key] = filter;
	  }

	  return SerializerData.serialize(result);
  };

  DOMField.getCollection = function () {
    var extField = Ext.get(this), extNodeTypes;
    if ((extCollection = extField.down(CSS_FIELD_DEF_COLLECTION)) == null) return null;
    return extCollection.dom.innerHTML;
  };

};

CGDecoratorFieldNode = function () {
};

CGDecoratorFieldNode.prototype = new CGDecorator;

CGDecoratorFieldNode.prototype.execute = function (DOMField) {

  DOMField.getNodeTypes = function () {
    var extField = Ext.get(this), extNodeTypes;
    if ((extNodeTypes = extField.down(CSS_FIELD_DEF_NODETYPES)) == null) return "";
    return extNodeTypes.dom.innerHTML.split(",");
  };

  DOMField.allowAdd = function () {
    var extField = Ext.get(this), extAllowAdd;
    if ((extAllowAdd = extField.down(CSS_FIELD_DEF_ALLOW_ADD)) == null) return false;
    return extAllowAdd.dom.innerHTML == "true";
  };

  DOMField.getNodeTemplates = function () {
    var extNodeTemplate;
    var extField = Ext.get(this);
    var Templates = new Object();
    Templates = new Object();

    Templates.View = (extNodeTemplate = extField.select(CSS_FIELD_DEF_TEMPLATE_VIEW).first()) ? extNodeTemplate.dom.innerHTML : null;
    Templates.Edit = (extNodeTemplate = extField.select(CSS_FIELD_DEF_TEMPLATE_EDIT).first()) ? extNodeTemplate.dom.innerHTML : null;

    return Templates;
  };

};

CGDecoratorFieldNumber = function () {
};

CGDecoratorFieldNumber.prototype = new CGDecorator;

CGDecoratorFieldNumber.prototype.execute = function (DOMField) {

  DOMField.getFormat = function () {
    var extFormat, extField = Ext.get(this);
    sResult = "0";
    if ((extFormat = extField.down(CSS_FIELD_DEF_FORMAT)) == null) return sResult;
    sResult = extFormat.dom.innerHTML;
    return sResult;
  };

  DOMField.getMetrics = function () {
    var aMetrics = new Array();
    var extMetrics, extField = Ext.get(this);

    if ((extMetrics = extField.down(CSS_FIELD_DEF_METRICS)) == null) return aMetrics;

    for (var i = 0; i < extMetrics.dom.options.length; i++) {
      var DOMOption = extMetrics.dom.options[i];
      var Metric = {Code: DOMOption.value, Equivalence: DOMOption.className, Label: DOMOption.text};
      if (DOMOption.selected) Metric.IsDefault = true;
      aMetrics.push(Metric);
    }

    return aMetrics;
  };

  DOMField.getRange = function () {
    var aResult = new Array(), extRange, extField = Ext.get(this);
    if ((extRange = extField.down(CSS_FIELD_DEF_RANGE)) == null) return aResult;
    var aData = extRange.dom.innerHTML.split(COMMA);
    aResult[0] = eval(aData[0]);
    aResult[1] = eval(aData[1]);
    return aResult;
  };

  DOMField.getIncrements = function () {
    var extRange, extField = Ext.get(this);
    if ((extRange = extField.down(CSS_FIELD_DEF_RANGE)) == null) return 1;
    var aData = extRange.dom.innerHTML.split(COMMA);
    if (aData.length < 2) return 1;
    return (aData[2] != "") ? eval(aData[2]) : 1;
  };

  DOMField.roundDecimals = function (iNumber) {
    var aFormat = this.getFormat();
    var iDecimals;

    if (aFormat.length < 2) return iNumber;

    iDecimals = aFormat[1];

    if (iDecimals != INFINITE) {
      iDecimals = parseInt(iDecimals);
      iNumber = iNumber * (10 ^ iDecimals);
      iNumber = Math.round(iNumber);
      iNumber = iNumber / (10 ^ iDecimals);
    }

    return iNumber;
  };

  DOMField.isValidRange = function (iNumber) {
    var aRange = this.getRange();
    if (aRange.length < 2) return true;

    var min = parseInt(aRange[0]);
    var max = parseInt(aRange[1]);

    if (max < min)
      return iNumber >= min;

    return iNumber >= min && iNumber <= max;
  };

  DOMField.getNumberFromFormattedValue = function (sNumber) {
    var aFormat = this.getFormat();
    var formatter = new DecimalFormat(aFormat);
    return formatter.formatBack(sNumber);
  };

  DOMField.format = function (sNumber) {
    var aFormat = this.getFormat();
    var formatter = new DecimalFormat(aFormat);
    return formatter.format(sNumber);
  };

};

CGDecoratorFieldPicture = function () {
};

CGDecoratorFieldPicture.prototype = new CGDecorator;

CGDecoratorFieldPicture.prototype.execute = function (DOMField) {

  DOMField.getSourceStore = function () {
    return this.getStore(CSS_FIELD_DEF_SOURCE_STORE);
  };

  DOMField.getSize = function () {
    var extField = Ext.get(this);
    var extSize = extField.down(CSS_FIELD_DEF_SIZE);
    if (!extSize) return null;
    var aSize = extSize.dom.innerHTML.split(COMMA);
    return {Width: aSize[0], Height: aSize[1]};
  };

  DOMField.getLimit = function () {
      var extField = Ext.get(this);
      var extLimit = extField.down(CSS_FIELD_DEF_LIMIT);
      if (!extLimit) return null;
      return extLimit.dom.innerHTML;
  };

  DOMField.getDefaultPicture = function () {
    var extField = Ext.get(this);
    var extDefault = extField.down(CSS_FIELD_DEF_DEFAULT);
    var Attribute = new CGAttribute();
    if (!extDefault) return null;
    Attribute.unserialize(extDefault.dom.innerHTML);
    return Attribute.getIndicatorValue(CGIndicator.VALUE);
  };

};

CGDecoratorFieldComposite = function () {
};

CGDecoratorFieldComposite.prototype = new CGDecorator;

CGDecoratorFieldComposite.prototype.execute = function (DOMField) {

  DOMField.isConditional = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_CONDITIONAL);
  };

  DOMField.isExtensible = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_EXTENSIBLE);
  };

  DOMField.getLabelFieldCode = function () {
    var extField = Ext.get(this);
    var extFieldCode = extField.select(CSS_FIELD_DEF_LABEL_FIELD).first();
    return (extFieldCode) ? extFieldCode.dom.innerHTML : "";
  };

  DOMField.getField = function (Code) {
    var DOMFields = this.getFieldsWithCode(Code);
    var DOMField = DOMFields[0];
    if (DOMField.belongsToTemplate()) return null;
    return DOMField;
  };

  DOMField.getFieldsWithCode = function (Code) {
      var Widget = WidgetManager.get(this.IdWidget);
      var extWidget = Ext.get(Widget.getDOM());
      var ControlInfo = extWidget.up(CSS_FORM).dom.getControlInfo();
      var extFields = extWidget.select(DOT + Code + CSS_FIELD_NODE_PREFIX + ControlInfo.IdNode);
      var fields = [];
      extFields.each(function (extField) { fields.push(extField.dom); });
      return fields;
  };

  DOMField.getFields = function () {
    var aFields = new Array();
    var aComposites = new Array();
    var Widget = WidgetManager.get(this.IdWidget);

    if (Widget == null) return aFields;
    if (Widget.getDOM() == null) return aFields;

    var extWidget = Ext.get(Widget.getDOM());
    var ControlInfo = extWidget.up(CSS_FORM).dom.getControlInfo();

    if ((extFieldList = extWidget.select(CSS_FIELD_NODE_PREFIX + ControlInfo.IdNode)) == null) return false;

    extFieldList.each(function (extField) {
      var extParent = extField.up(CSS_FIELD_NODE_PREFIX + ControlInfo.IdNode);
      if (extParent.dom != this) return;
      if (extField.dom.belongsToTemplate()) return;
      if (extField.hasClass(CLASS_FIELD_COMPOSITE)) aComposites.push(extField.dom);
      else aFields.push(extField.dom);
    }, this);

    // Priorize fields vs composites to minimize onchange fields calls
    for (var iPos = aComposites.length - 1; iPos >= 0; iPos--) aFields.push(aComposites[iPos]);

    return aFields;
  };

  DOMField.initFields = function (aDOMFields) {

    if (this.Editors == null) return;

    for (var iPos = 0; iPos < aDOMFields.length; iPos++) {
      var DOMField = aDOMFields[iPos];
      if (DOMField.isInit()) continue;
      if ((FieldType = DOMField.getType()) == null) continue;

      if (FieldType == FIELD_TYPE_COMPOSITE) DOMField.Editors = this.Editors;
      DOMField.onFocused = this.atFieldFocused.bind(this);
      DOMField.onBlur = this.atFieldBlur.bind(this);
      DOMField.onAdd = this.atFieldAdd.bind(this);
      DOMField.onRegister = this.atFieldRegister.bind(this);
      DOMField.onEnter = this.atFieldEnter.bind(this);
      DOMField.onEscape = this.atFieldEscape.bind(this);
      DOMField.onLabelClick = this.atFieldLabelClick.bind(this);
      DOMField.onGotoField = this.gotoField.bind(this);
      DOMField.onLoadDefaultValue = this.atFieldLoadDefaultValue.bind(this);
      DOMField.onAddDefaultValue = this.atFieldAddDefaultValue.bind(this);
      DOMField.getField = this.atGetField.bind(this, DOMField);
      DOMField.getFieldValue = this.atGetFieldValue.bind(this, DOMField);
      DOMField.getFieldValueCode = this.atGetFieldValueCode.bind(this, DOMField);
      DOMField.init();
      // avoid callings to onchange before initialization
//      DOMField.onBeforeChange = this.atFieldBeforeChange.bind(this);
//      DOMField.onChange = this.atFieldChange.bind(this);
    }
  };

  DOMField.destroyFields = function (aDOMFields) {

    for (var iPos = 0; iPos < aDOMFields.length; iPos++) {
      var DOMField = aDOMFields[iPos];
      DOMField.onFocused = null;
      DOMField.onBlur = null;
      DOMField.onAdd = null;
      DOMField.onRegister = null;
      DOMField.onEnter = null;
      DOMField.onEscape = null;
      DOMField.onLabelClick = null;
      DOMField.onGotoField = null;
      DOMField.onLoadDefaultValue = null;
      DOMField.onAddDefaultValue = null;
      DOMField.onBeforeChange = null;
      DOMField.onChange = null;
      DOMField.onRefresh = null;
      DOMField.destroy();
    }
  };

  DOMField.atGetField = function (DOMFieldSender, code) {
    var DOMTarget = DOMFieldSender.getBrother(code);
    if (!DOMTarget || DOMTarget == null) DOMTarget = this.findField(code, DOMFieldSender);
    if (DOMTarget == null && this.getField) return this.getField(code);
    return DOMTarget;
  };

  DOMField.atGetFieldValue = function (DOMFieldSender, code) {
    var DOMTarget = DOMFieldSender.getBrother(code);
    if (!DOMTarget || DOMTarget == null) DOMTarget = this.findField(code, DOMFieldSender);
    if (DOMTarget == null && this.getFieldValue) return this.getFieldValue(code);
    return DOMTarget.getValue();
  };

  DOMField.atGetFieldValueCode = function (DOMFieldSender, code) {
    var DOMTarget = DOMFieldSender.getBrother(code);
    if (!DOMTarget || DOMTarget == null) DOMTarget = this.findField(code, DOMFieldSender);
    if (DOMTarget == null && this.getFieldValueCode) return this.getFieldValueCode(code);
    return DOMTarget.getValueCode();
  };

  DOMField.findField = function(code, DOMFieldSender) {
    var DOMFields = this.getFieldsWithCode(code);
    for (var i=0; i<DOMFields.length; i++) {
      if (DOMFields[i].sameParent(DOMFieldSender)) return DOMFields[i];
    }
    return null;
  };

};

CGDecoratorFieldSelect = function () {
};

CGDecoratorFieldSelect.prototype = new CGDecorator;

CGDecoratorFieldSelect.prototype.execute = function (DOMField) {

  DOMField.getSourceStore = function () {
    return this.getStore(CSS_FIELD_DEF_SOURCE_STORE);
  };

  DOMField.getHistoryStore = function () {
    return this.getStore(CSS_FIELD_DEF_HISTORY_STORE);
  };

  DOMField.getIndexStore = function () {
    return this.getStore(CSS_FIELD_DEF_INDEX_STORE);
  };

  DOMField.getCodeOnOthers = function () {
    var extField = Ext.get(this);
    var extCodeOther = extField.select(CSS_FIELD_DEF_CODE_OTHER).first();
    if (extCodeOther != null) return extCodeOther.dom.innerHTML;
    return CGIndicator.CODE_OTHER;
  };

  DOMField.getSources = function () {
    var extField = Ext.get(this);
    var extSources = extField.select(CSS_FIELD_DEF_SOURCES).first();
    var sources = new Array();

    for (var iPos = 0; iPos < extSources.dom.options.length; iPos++) {
      var DOMOption = extSources.dom.options[iPos];
      sources.push({ id: DOMOption.value, label: DOMOption.text, partner: DOMOption.className});
    }

    return sources;
  };

  DOMField.getStorePartnerContext = function () {
    if (!this.getSourceStore) return "";
    var store = this.getSourceStore();
    if (store == null) return "";
    return store.PartnerContext;
  };

  DOMField.getStorePartnerContextValue = function () {
    var value = this.getStorePartnerContext();

    if (value.indexOf("_field:") != -1)
      value = DOMField.getFieldValueCode(value.replace("_field:", ""));

    return value;
  };

  DOMField.isStorePartnerContextLinked = function () {
    var value = this.getStorePartnerContext();
    return value != null && (value.indexOf("_field:") != -1);
  };

  DOMField.getStoreFrom = function () {
    if (!this.getSourceStore) return "";
    var store = this.getSourceStore();
    if (store == null) return "";
    return this.getSourceStore().From;
  };

  DOMField.getStoreFromField = function () {
    var value = this.getStoreFrom();
    if (value.indexOf("_field:") === -1) return null;
    return DOMField.getField(value.replace("_field:", ""));
  };

  DOMField.getStoreFromValue = function () {
    var value = this.getStoreFrom();

    if (value.indexOf("_field:") != -1)
      value = DOMField.getFieldValueCode(value.replace("_field:", ""));

    return value;
  };

  DOMField.getStoreFilters = function () {
    return this.getSourceStore().Filters;
  };

  DOMField.getStoreFiltersFields = function () {
    var result = [];
    var filters = this.getStoreFilters();

    for (var key in filters) {
      if (isFunction(filters[key])) continue;
      var filter = filters[key];

      if (filter.indexOf("_field:") != -1) {
        var field = filter.replace("_field:", "");
        if (field.indexOf("__") != -1) field = field.substring(0, field.indexOf("__"));
        result.push(DOMField.getField(field));
      }
    }

    return result;
  };

  DOMField.getStoreFiltersValues = function () {
	  var result = new Array();
	  var filters = this.getStoreFilters();

	  for (var filter in filters) {
		  if (isFunction(filters[filter])) continue;

		  if (filter.indexOf("_field:") != -1)
			  filter = DOMField.getFieldValueCode(filter.replace("_field:", ""));

		  result.push(filter);
	  }

	  return SerializerData.serializeSet(result);
  };

};

CGDecoratorFieldText = function () {
};

CGDecoratorFieldText.prototype = new CGDecorator;

CGDecoratorFieldText.prototype.execute = function (DOMField) {

  DOMField.getHistoryStore = function () {
    return this.getStore(CSS_FIELD_DEF_HISTORY_STORE);
  };

  DOMField.getTextEdition = function () {
    var extField = Ext.get(this);
    var extEdition = extField.select(CSS_FIELD_DEF_TEXT_EDITION).first();
    return (extEdition) ? extEdition.dom.innerHTML : null;
  };

  DOMField.getLength = function () {
    return {"min": this.getMinLength(), "max": this.getMaxLength()};
  };

  DOMField.getMinLength = function () {
    var extField = Ext.get(this);
    var extLength = extField.select(CSS_FIELD_DEF_MIN_LENGTH).first();
    return (extLength) ? extLength.dom.innerHTML : 0;
  };

  DOMField.getMaxLength = function () {
    var extField = Ext.get(this);
    var extLength = extField.select(CSS_FIELD_DEF_MAX_LENGTH).first();
    return (extLength) ? extLength.dom.innerHTML : 0;
  };

  DOMField.getPatterns = function () {
    var extField = Ext.get(this);
    var aResult = new Array();
    var extPatternList = extField.select(CSS_FIELD_DEF_PATTERN);

    extPatternList.each(function (extPattern) {
      var Pattern = new Object();
      Pattern.Expression = new RegExp(extPattern.dom.value);
      Pattern.aCodes = extPattern.dom.name.split(WIDGET_PATTERN_CODES_SEPARATOR);
      Pattern.data = extPattern.dom.value;
      aResult.push(Pattern);
    }, this);

    return aResult;
  };

  DOMField.format = function (sValue) {
    var TextEdition = this.getTextEdition();
    var iLength = this.getMaxLength();

    if (TextEdition != null) {
      if (TextEdition == TEXT_EDITION_LOWERCASE) {
        sValue = sValue.toLowerCase();
      }
      else if (TextEdition == TEXT_EDITION_UPPERCASE) {
        sValue = sValue.toUpperCase();
      }
      else if (TextEdition == TEXT_EDITION_SENTENCE) {
        sValue = capitalizeSentence(sValue);
      }
      else if (TextEdition == TEXT_EDITION_TITLE) {
        sValue = capitalizeTitle(sValue);
      }
    }

    if (iLength != 0) {
      sValue = sValue.substring(0, iLength);
    }

    return sValue;
  };

};

CGDecoratorFieldDescriptor = function () {
};

CGDecoratorFieldDescriptor.prototype = new CGDecorator;

CGDecoratorFieldDescriptor.prototype.execute = function (DOMField) {

  DOMField.getDescriptorName = function () {
    var extField = Ext.get(this);
    return (extDescriptor = extField.select(CSS_FIELD_DEF_NAME).first()) ? extDescriptor.dom.innerHTML : null;
  };

  DOMField.getResultType = function () {
    var extField = Ext.get(this);
    return (extResultType = extField.select(CSS_FIELD_DEF_RESULT_TYPE).first()) ? extResultType.dom.innerHTML : null;
  };

};

CGDecoratorFieldSerial = function () {
};

CGDecoratorFieldSerial.prototype = new CGDecorator;

CGDecoratorFieldSerial.prototype.execute = function (DOMField) {
};

CGDecoratorFieldLocation = function () {
};

CGDecoratorFieldLocation.prototype = new CGDecorator;

CGDecoratorFieldLocation.prototype.execute = function (DOMField) {
};

CGDecoratorFieldSummation = function () {
};

CGDecoratorFieldSummation.prototype = new CGDecorator;

CGDecoratorFieldSummation.prototype.execute = function (DOMField) {

  DOMField.getFormat = function () {
    var extFormat, extField = Ext.get(this);
    sResult = "0";
    if ((extFormat = extField.down(CSS_FIELD_DEF_FORMAT)) == null) return sResult;
    sResult = extFormat.dom.innerHTML;
    return sResult;
  };

  DOMField.getMetrics = function () {
    var aMetrics = new Array();
    var extMetrics, extField = Ext.get(this);

    if ((extMetrics = extField.down(CSS_FIELD_DEF_METRICS)) == null) return aMetrics;

    for (var i = 0; i < extMetrics.dom.options.length; i++) {
      var DOMOption = extMetrics.dom.options[i];
      var Metric = {Code: DOMOption.value, Equivalence: DOMOption.className, Label: DOMOption.text};
      if (DOMOption.selected) Metric.IsDefault = true;
      aMetrics.push(Metric);
    }

    return aMetrics;
  };

  DOMField.getRange = function () {
    var aResult = new Array(), extRange, extField = Ext.get(this);
    if ((extRange = extField.down(CSS_FIELD_DEF_RANGE)) == null) return aResult;
    var aData = extRange.dom.innerHTML.split(COMMA);
    aResult[0] = eval(aData[0]);
    aResult[1] = eval(aData[1]);
    return aResult;
  };

  DOMField.getIncrements = function () {
    var extRange, extField = Ext.get(this);
    if ((extRange = extField.down(CSS_FIELD_DEF_RANGE)) == null) return 1;
    var aData = extRange.dom.innerHTML.split(COMMA);
    if (aData.length < 2) return 1;
    return (aData[2] != "") ? eval(aData[2]) : 1;
  };

  DOMField.roundDecimals = function (iNumber) {
    var aFormat = this.getFormat();
    var iDecimals;

    if (aFormat.length < 2) return iNumber;

    iDecimals = aFormat[1];

    if (iDecimals != INFINITE) {
      iDecimals = parseInt(iDecimals);
      iNumber = iNumber * (10 ^ iDecimals);
      iNumber = Math.round(iNumber);
      iNumber = iNumber / (10 ^ iDecimals);
    }

    return iNumber;
  };

  DOMField.isValidRange = function (iNumber) {
    var aRange = this.getRange();
    if (aRange.length < 2) return true;
    return ((iNumber >= eval(aRange[0])) && (iNumber <= eval(aRange[1])));
  };

  DOMField.getNumberFromFormattedValue = function (sNumber) {
    var aFormat = this.getFormat();
    var formatter = new DecimalFormat(aFormat);
    return formatter.formatBack(sNumber);
  };

  DOMField.format = function (sNumber) {
    var aFormat = this.getFormat();
    var formatter = new DecimalFormat(aFormat);
    return formatter.format(sNumber);
  };

  DOMField.getSourceStore = function () {
    return this.getStore(CSS_FIELD_DEF_SOURCE_STORE);
  };

  DOMField.getHistoryStore = function () {
    return this.getStore(CSS_FIELD_DEF_HISTORY_STORE);
  };

  DOMField.getIndexStore = function () {
    return this.getStore(CSS_FIELD_DEF_INDEX_STORE);
  };

  DOMField.getCodeOnOthers = function () {
    return CGIndicator.CODE_OTHER;
  };

};

CGDecoratorField = function () {
};

CGDecoratorField.prototype = new CGDecorator;

CGDecoratorField.prototype.execute = function (DOMField) {

  DOMField.CurrentWidget = null;
  DOMField.onValueChangeListeners = [];
  this.addCommonMethods(DOMField);

  DOMField.addWidgetBehaviours = function () {
    var extWidget, Widget, extField = Ext.get(this);
    var Type = this.getType(), EditorType;

    if (Type == FIELD_TYPE_FORMULA) this.style.display = "none";
    if (!(extWidget = extField.select(CSS_WIDGET).filter(this.getWidgetCss()).first())) return;

    EditorType = (this.isMultiple()) ? FIELD_TYPE_LIST : Type;

    Widget = WidgetFactory.get(this.getWidgetType(), extWidget);
    this.IdWidget = Widget.getId();

    Widget.onKeyPress = this.atWidgetKeyPress.bind(this);
    Widget.onFormat = this.atWidgetFormat.bind(this);
    Widget.onFocused = this.atWidgetFocused.bind(this);
    Widget.onBlur = this.atWidgetBlur.bind(this);
    Widget.onAdd = this.atWidgetAdd.bind(this);
    Widget.onDelete = this.atWidgetDelete.bind(this);
    Widget.onRegister = this.atWidgetRegister.bind(this);
    Widget.onBeforeChange = this.atWidgetBeforeChange.bind(this);
    Widget.onChange = this.atWidgetChange.bind(this);
    Widget.onRefresh = this.atWidgetRefresh.bind(this);
    Widget.onEnter = this.atWidgetEnter.bind(this);
    Widget.onEscape = this.atWidgetEscape.bind(this);
    Widget.onLoadDefaultValue = this.atWidgetLoadDefaultValue.bind(this);
    Widget.onAddDefaultValue = this.atWidgetAddDefaultValue.bind(this);
    Widget.setEditor(EditorsFactory.get(EditorType));
    Widget.setTarget(this);
  };

  DOMField.isLockedByDefinition = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_LOCK);
  };

  DOMField.init = function () {
    var extField = Ext.get(this);

    this.addWidgetBehaviours();

    if (this.isComposite()) {
      var aFields = this.getFields();
      this.initFields(aFields);
      this.addTableViewBehaviours([this]);
    }
    else if (this.isSummation()) {
      this.addSummationBehaviours([this]);
    }
    else if (this.isNode()) {
      this.addTableViewBehaviours([this]);
    }

    this.setDirty(false);
    if (extField.hasClass(CLASS_LOCK)) this.lock();

    var extLabel = extField.down("label");
    if (extLabel == null) extLabel = extField.select(".label").first();
    if (extLabel == null) return;
    Event.observe(extLabel.dom, "click", this.atLabelClick.bind(this));
  };

  DOMField.deleteWidgetBehaviours = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;
    Widget.destroy();
    WidgetManager.unregister(this.IdWidget);
  };

  DOMField.destroy = function () {
    if (!this.IdWidget) return;
    if (this.isComposite()) this.destroyFields(this.getFields());
    this.deleteWidgetBehaviours();
  };

  DOMField.isInit = function () {
    return (this.IdWidget != null);
  };

  DOMField.getType = function () {
    var extField = Ext.get(this);
    if (extField.hasClass(CLASS_FIELD_SELECT)) return FIELD_TYPE_SELECT;
    else if (extField.hasClass(CLASS_FIELD_BOOLEAN)) return FIELD_TYPE_BOOLEAN;
    else if (extField.hasClass(CLASS_FIELD_DATE)) return FIELD_TYPE_DATE;
    else if (extField.hasClass(CLASS_FIELD_TEXT)) return FIELD_TYPE_TEXT;
    else if (extField.hasClass(CLASS_FIELD_PICTURE)) return FIELD_TYPE_PICTURE;
    else if (extField.hasClass(CLASS_FIELD_FILE)) return FIELD_TYPE_FILE;
    else if (extField.hasClass(CLASS_FIELD_NUMBER)) return FIELD_TYPE_NUMBER;
    else if (extField.hasClass(CLASS_FIELD_COMPOSITE)) return FIELD_TYPE_COMPOSITE;
    else if (extField.hasClass(CLASS_FIELD_LINK)) return FIELD_TYPE_LINK;
    else if (extField.hasClass(CLASS_FIELD_CHECK)) return FIELD_TYPE_CHECK;
    else if (extField.hasClass(CLASS_FIELD_DESCRIPTOR)) return FIELD_TYPE_DESCRIPTOR;
    else if (extField.hasClass(CLASS_FIELD_NODE)) return FIELD_TYPE_NODE;
    else if (extField.hasClass(CLASS_FIELD_SERIAL)) return FIELD_TYPE_SERIAL;
    else if (extField.hasClass(CLASS_FIELD_LOCATION)) return FIELD_TYPE_LOCATION;
    else if (extField.hasClass(CLASS_FIELD_SUMMATION)) return FIELD_TYPE_SUMMATION;
    return null;
  };

  DOMField.getWidgetType = function () {
    var extField = Ext.get(this);
    if (this.isMultiple() && this.isTableView()) return WIDGET_TABLE;
    else if (this.isMultiple()) return WIDGET_LIST;
    else if (extField.hasClass(CLASS_FIELD_SELECT)) return WIDGET_SELECT;
    else if (extField.hasClass(CLASS_FIELD_BOOLEAN)) return WIDGET_BOOLEAN;
    else if (extField.hasClass(CLASS_FIELD_DATE)) return WIDGET_DATE;
    else if (extField.hasClass(CLASS_FIELD_TEXT)) return WIDGET_TEXT;
    else if (extField.hasClass(CLASS_FIELD_PICTURE)) return WIDGET_PICTURE;
    else if (extField.hasClass(CLASS_FIELD_FILE)) return WIDGET_FILE;
    else if (extField.hasClass(CLASS_FIELD_NUMBER)) return WIDGET_NUMBER;
    else if (extField.hasClass(CLASS_FIELD_COMPOSITE)) return WIDGET_COMPOSITE;
    else if (extField.hasClass(CLASS_FIELD_LINK)) return WIDGET_LINK;
    else if (extField.hasClass(CLASS_FIELD_CHECK)) return WIDGET_CHECK;
    else if (extField.hasClass(CLASS_FIELD_DESCRIPTOR)) return WIDGET_DESCRIPTOR;
    else if (extField.hasClass(CLASS_FIELD_NODE)) return WIDGET_NODE;
    else if (extField.hasClass(CLASS_FIELD_SERIAL)) return WIDGET_SERIAL;
    else if (extField.hasClass(CLASS_FIELD_LOCATION)) return WIDGET_LOCATION;
    else if (extField.hasClass(CLASS_FIELD_SUMMATION)) return WIDGET_SUMMATION;
    return null;
  };

  DOMField.getWidgetCss = function () {
    var extField = Ext.get(this);
    if (this.isMultiple() && this.isTableView()) return CSS_WIDGET_TABLE;
    else if (this.isMultiple()) return CSS_WIDGET_LIST;
    else if (extField.hasClass(CLASS_FIELD_SELECT)) return CSS_WIDGET_SELECT;
    else if (extField.hasClass(CLASS_FIELD_BOOLEAN)) return CSS_WIDGET_BOOLEAN;
    else if (extField.hasClass(CLASS_FIELD_DATE)) return CSS_WIDGET_DATE;
    else if (extField.hasClass(CLASS_FIELD_TEXT)) return CSS_WIDGET_TEXT;
    else if (extField.hasClass(CLASS_FIELD_PICTURE)) return CSS_WIDGET_PICTURE;
    else if (extField.hasClass(CLASS_FIELD_FILE)) return CSS_WIDGET_FILE;
    else if (extField.hasClass(CLASS_FIELD_NUMBER)) return CSS_WIDGET_NUMBER;
    else if (extField.hasClass(CLASS_FIELD_COMPOSITE)) return CSS_WIDGET_COMPOSITE;
    else if (extField.hasClass(CLASS_FIELD_LINK)) return CSS_WIDGET_LINK;
    else if (extField.hasClass(CLASS_FIELD_CHECK)) return CSS_WIDGET_CHECK;
    else if (extField.hasClass(CLASS_FIELD_DESCRIPTOR)) return CSS_WIDGET_DESCRIPTOR;
    else if (extField.hasClass(CLASS_FIELD_NODE)) return CSS_WIDGET_NODE;
    else if (extField.hasClass(CLASS_FIELD_SERIAL)) return CSS_WIDGET_SERIAL;
    else if (extField.hasClass(CLASS_FIELD_LOCATION)) return CSS_WIDGET_LOCATION;
    else if (extField.hasClass(CLASS_FIELD_SUMMATION)) return CSS_WIDGET_SUMMATION;
    return null;
  };

  DOMField.isSuper = function () {
    var extField = Ext.get(this);
    return (extField.hasClass(CLASS_FIELD_SUPER));
  };

  DOMField.isSelect = function () {
    return (this.getType() == FIELD_TYPE_SELECT);
  };

  DOMField.isBoolean = function () {
    return (this.getType() == FIELD_TYPE_BOOLEAN);
  };

  DOMField.isDate = function () {
    return (this.getType() == FIELD_TYPE_DATE);
  };

  DOMField.isText = function () {
    return (this.getType() == FIELD_TYPE_TEXT);
  };

  DOMField.isPicture = function () {
    return (this.getType() == FIELD_TYPE_PICTURE);
  };

  DOMField.isFile = function () {
    return (this.getType() == FIELD_TYPE_FILE);
  };

  DOMField.isNumber = function () {
    return (this.getType() == FIELD_TYPE_NUMBER);
  };

  DOMField.isComposite = function () {
    return (this.getType() == FIELD_TYPE_COMPOSITE);
  };

  DOMField.isLink = function () {
    return (this.getType() == FIELD_TYPE_LINK);
  };

  DOMField.isCheck = function () {
    return (this.getType() == FIELD_TYPE_CHECK);
  };

  DOMField.isNode = function () {
    return (this.getType() == FIELD_TYPE_NODE);
  };

  DOMField.isSerial = function () {
    return (this.getType() == FIELD_TYPE_SERIAL);
  };

  DOMField.isLocation = function () {
    return (this.getType() == FIELD_TYPE_LOCATION);
  };

  DOMField.isSummation = function () {
    return (this.getType() == FIELD_TYPE_SUMMATION);
  };

  DOMField.getData = function () {
    var extField = Ext.get(this);
    var extData = extField.down(CSS_DATA);
    return (extData) ? extData.dom.value : "";
  };

  DOMField.getContent = function () {
    var aPath = this.getPath().split(".");
    var ParentAttribute = null;
    var FieldAttribute = new CGAttribute();
	var data = cleanNonAsciiCharacters(this.getData());

    FieldAttribute.unserialize(data);
    for (var i = 1; i < aPath.length - 1; i++) {
      var Attribute = new CGAttribute();
      Attribute.setCode(aPath[i]);
      if (ParentAttribute != null) ParentAttribute.getAttributeList().addAttribute(Attribute);
      ParentAttribute = Attribute;
    }

    if (ParentAttribute != null) {
      ParentAttribute.getAttributeList().addAttribute(FieldAttribute);
      return ParentAttribute.serialize();
    }

    return FieldAttribute.serialize();
  };

  DOMField.updateData = function (sData, bNotifyChanges) {
    var extField = Ext.get(this);
    var extData = extField.down(CSS_DATA);

    if (!extData) return;
    if ((bNotifyChanges) && (this.onBeforeChange)) this.onBeforeChange(this);

    extData.dom.value = sData;
    this.setDirty(true);
    if ((bNotifyChanges) && (this.onChange)) {
      this.onChange(this);
    }
  };

  DOMField.reset = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;
    Widget.reset();
  };

  DOMField.setData = function (sData) {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;
    Widget.setData(sData);
  };

  DOMField.update = function (sData) {
    var Widget = WidgetManager.get(this.IdWidget);

    if (Widget == null) return;

    Widget.onBeforeChange = null;
    Widget.onChange = null;

    Widget.setData(sData);

    Widget.onBeforeChange = this.atWidgetBeforeChange.bind(this);
    Widget.onChange = this.atWidgetChange.bind(this);
  };

  DOMField.fillWithDefaultData = function () {
    var sDefaultValue = this.getDefault();
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;
    if ((sDefaultValue != null) && (sDefaultValue != "")) Widget.setDefault(sDefaultValue);
  };

  DOMField.saveToMemento = function () {
    return {id: this.id, data: this.getData()};
  };

  DOMField.restoreFromMemento = function (oMemento) {
    var extField = Ext.get(this);
    var extData = extField.down(CSS_DATA);

    if (!extData) return;

    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;

    extData.dom.value = oMemento.data;
    this.setDirty(true);
    Widget.onChange = null;
    Widget.setData(oMemento.data);
    Widget.onChange = this.atWidgetChange.bind(this);
  };

  DOMField.getCode = function () {
    var extField = Ext.get(this);
    var extData = extField.down(CSS_DATA);
    return (extData) ? extData.dom.name : "";
  };

  DOMField.getId = function () {
    return this.getCode();
  };

  DOMField.getAbsoluteCode = function () {
    var code = "", extField = Ext.get(this);
    var extParent = extField;
    while ((extParent = extParent.up(".field")) != null) {
      if (extParent.dom.getType() != FIELD_TYPE_COMPOSITE) code += extParent.dom.getCode();
    }
    return ((code != "") ? code + FIELD_CODE_SEPARATOR : "") + this.getCode();
  };

  DOMField.getTitle = function (bMultipleTitle) {
    var extField = Ext.get(this);

    var extLabel = extField.down("label");
    if (extLabel == null) extLabel = extField.select(".label span").first();
    if (extLabel == null) return "";

    sOrder = "";
    if ((bMultipleTitle) && (this.isMultiple()) && (this.getCurrentWidget() != null)) {
      var Widget = this.getCurrentWidget();
      if (Widget != null) sOrder = " " + Widget.getOrder();
    }

    return extLabel.dom.innerHTML + sOrder;
  };

  DOMField.getAbsoluteTitle = function () {
    var sTitle = "", extField = Ext.get(this);
    var extParent = extField;
    while ((extParent = extParent.up(".field")) != null) {
      sTitle += extParent.dom.getTitle();
    }
    var extLabel = extField.down("label");
    if (extLabel == null) extLabel = extField.select(".label span").first();
    if (extLabel == null) return "";
    return ((sTitle != "") ? sTitle + DOT : "") + extLabel.dom.innerHTML;
  };

  DOMField.getDOMLabel = function () {
    var extField = Ext.get(this);
    return extField.down(HTML_LABEL).dom;
  };

  DOMField.getPath = function (bMultiplePath) {
    var Widget = WidgetManager.get(this.IdWidget);
    if ((bMultiplePath) && (this.isMultiple()) && (this.getCurrentWidget() != null)) Widget = this.getCurrentWidget();
	if (Widget == null) return "";
    return Widget.getPath();
  };

  DOMField.getParentPath = function() {
    var path = this.getPath();
    return path.substr(0, path.lastIndexOf("."));
  };

  DOMField.sameParent = function(DOMField) {
    if (DOMField == null) return false;
    return this.getParentPath() === DOMField.getParentPath();
  },

  DOMField.isEqualsTo = function (Value) {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return false;
    var aIndicators = Widget.getData().value;
    for (var i = 0; i < aIndicators.length; i++) {
      if (aIndicators[i].value == Value)
        return true;
    }
    return false;
  };

  DOMField.getContext = function () {
    var aItems = new Array();
    var extField = Ext.get(this);

    if ((this.isMultiple()) && (this.getCurrentWidget() != null)) {
      aItems.push({Title: this.getTitle(true), Path: this.getPath(true)});
    }
    aItems.push({Title: this.getTitle(false), Path: this.getPath(false)});

    if (!this.getAncestors()) return aItems;

    var aDOMAncestors = this.getAncestors();
    for (var iPos = 0; iPos < aDOMAncestors.length; iPos++) {
      var DOMAncestor = aDOMAncestors[iPos];
      if ((DOMAncestor.isMultiple()) && (DOMAncestor.getCurrentWidget() != null)) {
        aItems.push({Title: DOMAncestor.getTitle(true), Path: DOMAncestor.getPath(true)});
      }
      aItems.push({Title: DOMAncestor.getTitle(false), Path: DOMAncestor.getPath(false)});
    }

    var extForm = extField.up(CSS_NODE);
    aItems.push({Id: null, Title: extForm.dom.getTitle()});

    return aItems;
  };

  DOMField.getInfo = function () {
    var extITitle, extIHelp, extEHelp;
    var Info = new Object();
    var Id = this.id;
    var sTitle = this.getTitle();
    var extField = Ext.get(this);

    Info.Id = Id;
    Info.Title = sTitle;
    Info.Description = ((extITitle = extField.select(CSS_ITITLE).first()) != null) ? extITitle.dom.innerHTML : null; //skip possible required widget
    Info.iHelp = ((extIHelp = extField.select(CSS_IHELP).first()) != null) ? extIHelp.dom.innerHTML : null; //skip possible required widget
    Info.eHelp = ((extEHelp = extField.select(CSS_EHELP).first()) != null) ? extEHelp.dom.innerHTML : null; //skip possible required widget
    Info.Context = this.getContext();
    Info.Required = this.isRequired();

    return Info;
  };

  DOMField.getStore = function (Type) {
    var extField = Ext.get(this), extStore;
    var extDomain = extField.down(CSS_FIELD_DEF_DATA_DOMAIN);
    var extFlatten, extDepth, extFrom, extPartnerContext, extFilters;

    if ((extStore = extField.down(Type)) == null) return;

    extFlatten = extField.down(CSS_FIELD_DEF_FLATTEN);
    extDepth = extField.down(CSS_FIELD_DEF_DEPTH);
    extFrom = extField.down(CSS_FIELD_DEF_FROM);
    extPartnerContext = extField.down(CSS_FIELD_DEF_PARTNER_CONTEXT);
    extFilters = extField.down(CSS_FIELD_DEF_FILTERS);

    var Store = new Object();
    Store.Domain = (extDomain != null) ? extDomain.dom.innerHTML : "";
    Store.Id = extStore.dom.innerHTML;
    Store.ShowCode = extStore.hasClass(CLASS_FIELD_STORE_SHOWCODE);
    Store.Flatten = (extFlatten != null) ? extFlatten.dom.innerHTML : "";
    Store.Depth = (extDepth != null) ? extDepth.dom.innerHTML : "";
    Store.PartnerContext = (extPartnerContext != null) ? extPartnerContext.dom.innerHTML : "";
    Store.From = (extFrom != null) ? extFrom.dom.innerHTML : "";
    Store.IsRemote = (extStore.dom.tagName.toLowerCase() == HTML_PARAGRAPH.toLowerCase());
    Store.Filters = (extFilters != null) ? SerializerData.deserialize(extFilters.dom.innerHTML) : "";
    Store.Items = new Array();
    if (!Store.IsRemote) {
      for (var iPos = 0; iPos < extStore.dom.options.length; iPos++) {
        var DOMOption = extStore.dom.options[iPos];
        Store.Items.push([DOMOption.value, DOMOption.text]);
      }
    }
    return Store;
  };

  DOMField.isRequired = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_REQUIRED);
  };

  DOMField.isVisible = function () {
    return this.style.display != "none";
  };

  DOMField.isEditable = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_EDITABLE);
  };

  DOMField.isExtended = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_EXTENDED);
  };

  DOMField.isMultiple = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_MULTIPLE);
  };

  DOMField.isTableView = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_TABLE_VIEW);
  };

  DOMField.allowOthers = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_ALLOW_OTHERS);
  };

  DOMField.setDirty = function (bValue) {
    var extField = Ext.get(this);
    if (bValue) extField.addClass(CLASS_DIRTY);
    else extField.removeClass(CLASS_DIRTY);
  };

  DOMField.isDirty = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_DIRTY);
  };

  DOMField.belongsToTemplate = function () {
    var extField = Ext.get(this);
    return (extField.up(CSS_TEMPLATE) != null);
  };

  DOMField.isFocused = function () {
    var extField = Ext.get(this);
    return extField.hasClass(CLASS_FOCUS);
  };

  DOMField.focus = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    this.initWidget();

    if (Widget == null) return;

    if (this.isMultiple()) {
      var sPath = this.getPath(true);
      var Widget = WidgetManager.get(sPath);
      if (Widget == null) return;
      Widget.unLock();
      return;
    }

    if (!Widget.isFocused()) Widget.focus();
  };

  DOMField.blur = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    this.initWidget();

    if (Widget == null) return;

    if (this.isMultiple()) {
      var sPath = this.getPath(true);
      var Widget = WidgetManager.get(sPath);
      if (Widget == null) return;
      Widget.unLock();
      return;
    }

    if (Widget.isFocused()) Widget.blur();
  };

  DOMField.show = function () {
    var extField = Ext.get(this);
    extField.removeClass(CLASS_HIDDEN);
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget != null) Widget.show();
  };

  DOMField.hide = function () {
    var extField = Ext.get(this);
    extField.addClass(CLASS_HIDDEN);
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget != null) Widget.hide();
  };

  DOMField.lock = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;

    if (this.isMultiple()) {
      var sPath = this.getPath(true);
      var Widget = WidgetManager.get(sPath);
      Widget.lock();
      return;
    }

    Widget.lock();
  };

  DOMField.unLock = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;

    if (this.isMultiple()) {
      var sPath = this.getPath(true);
      var Widget = WidgetManager.get(sPath);
      if (Widget == null) return;
      Widget.unLock();
      return;
    }

    Widget.unLock();
  };

  DOMField.expand = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;
    if (Widget.expand) Widget.expand();
  };

  DOMField.collapse = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;
    if (Widget.collapse) Widget.collapse();
  };

  DOMField.initWidget = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return;
    if (Widget.isReady()) return;
    Widget.init();
  };

  DOMField.getWidget = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget.isReady()) this.initWidget();
    return Widget;
  };

  DOMField.getDefault = function () {
    var extField = Ext.get(this);
    var extDefault = extField.select(CSS_FIELD_DEF_DEFAULT).first();
    return (extDefault) ? extDefault.dom.innerHTML : "";
  };

  DOMField.getMessageWhenEmpty = function () {
    var extField = Ext.get(this);
    var extMessage = extField.select(CSS_FIELD_DEF_MESSAGE_WHEN_EMPTY).first();
    return (extMessage) ? extMessage.dom.innerHTML : "";
  };

  DOMField.getMessageWhenRequired = function () {
    var extField = Ext.get(this);
    var extMessage = extField.select(CSS_FIELD_DEF_MESSAGE_WHEN_REQUIRED).first();
    return (extMessage) ? extMessage.dom.innerHTML : "";
  };

  DOMField.getValue = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return "";
    if (!Widget.getValue) return "";
    return Widget.getValue();
  };

  DOMField.getValueCode = function () {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget == null) return "";
    if (!Widget.getValueCode) return "";
    return Widget.getValueCode();
  };

  DOMField.getAncestors = function () {
    var aDOMAncestors = new Array();
    var extAncestor, extField = Ext.get(this);

    extAncestor = extField.up(".field");
    while (extAncestor != null) {
      aDOMAncestors.push(extAncestor.dom);
      extAncestor = extAncestor.up(".field");
    }

    return aDOMAncestors;
  };

  DOMField.getBrother = function (Code) {
    var composite = Ext.get(this).up(".wcomposite");
    if (!composite) return false;
    var field = composite.select(DOT + Code + CSS_FIELD);
    if (field.getCount() == 0) return false;
    return field.first().dom;
  };

  DOMField.getCurrentWidget = function () {
    return this.CurrentWidget;
  };

  DOMField.gotoField = function (Path) {
    if (this.onGotoField) this.onGotoField(Path);
  };

  DOMField.saveToMememento = function () {
    return {id: this.id, data: this.stateMemento};
  };

  DOMField.setObserver = function (Observer, iPos) {
    var Widget = WidgetManager.get(this.IdWidget);
    if (Widget != null) Widget.setObserver(Observer, iPos);
  };

  DOMField.getNode = function () {
    var extField = Ext.get(this);
    var extNode = extField.up(CSS_NODE);
    return (extNode != null) ? extNode.dom : null;
  };

  DOMField.getNodeId = function () {
    var extField = Ext.get(this);
    var extNode = extField.up(CSS_NODE);
    return (extNode != null) ? extNode.dom.getId() : null;
  };

  // #############################################################################################################

  DOMField.atWidgetKeyPress = function (sValue, codeKey) {
    if (this.onKeyPress) this.onKeyPress(sValue, codeKey);
  };

  DOMField.atWidgetFormat = function (sValue) {
    if (this.onFormat) this.onFormat(sValue);
  };

  DOMField.atWidgetFocused = function (Widget) {
    var extField = Ext.get(this);
    if (this.getType() != FIELD_TYPE_COMPOSITE) {
      extField.addClass(CLASS_FOCUS);
    }
    this.CurrentWidget = Widget;
    if (this.onFocused) this.onFocused(this, Widget);
  };

  DOMField.atWidgetBlur = function () {
    var extField = Ext.get(this);
    if (this.getType() != FIELD_TYPE_COMPOSITE) {
      extField.removeClass(CLASS_FOCUS);
    }
    if (this.onBlur) this.onBlur(this);
  };

  DOMField.atWidgetAdd = function (DOMItem) {
    if (this.onAdd) this.onAdd(this, DOMItem);
    this.updateTableViewListSize(DOMField);
  };

  DOMField.atWidgetDelete = function (DOMItem) {
    this.updateTableViewListSize(DOMField);
  };

  DOMField.atWidgetRegister = function (DOMItem) {
    if (this.onRegister) this.onRegister(this, DOMItem);
  };

  DOMField.atWidgetBeforeChange = function (DOMField) {
    if ((DOMField) && (this.onBeforeChange)) this.onBeforeChange(DOMField);
  };

  DOMField.atWidgetChange = function (DOMField) {
    var Widget = WidgetManager.get(this.IdWidget);
    if ((DOMField) && (this.onChange)) this.onChange(DOMField);
    else if (Widget != null && Widget.getData() != null) this.updateData(Widget.getData().toXml(), true);
  };

  DOMField.atWidgetRefresh = function (DOMField) {
    if (this.onRefresh) this.onRefresh(DOMField);
  };

  DOMField.atWidgetEnter = function () {
    if (this.onEnter) this.onEnter();
  };

  DOMField.atWidgetEscape = function () {
    if (this.onEscape) this.onEscape();
  };

  DOMField.atWidgetLoadDefaultValue = function () {
    if (this.onLoadDefaultValue) this.onLoadDefaultValue(this);
  };

  DOMField.atWidgetAddDefaultValue = function () {
    if (this.onAddDefaultValue) this.onAddDefaultValue(this);
  };

  DOMField.atFieldFocused = function (DOMField, Widget) {
    if (this.onFocused) this.onFocused(DOMField, Widget);
  };

  DOMField.atFieldBlur = function (DOMField) {
    if (this.onBlur) this.onBlur(DOMField);
  };

  DOMField.atFieldAdd = function (DOMFieldsComposite, DOMFieldsCompositeItem) {
    var Widget = Ext.get(DOMFieldsCompositeItem).select(CSS_WIDGET).first().dom;
    if ((Widget != null) && (Widget.getFields)) this.initFields(Widget.getFields());
    else {
      if (DOMFieldsComposite.getFields) this.initFields(DOMFieldsComposite.getFields());
    }
  };

  DOMField.atFieldRegister = function (DOMFieldsComposite, DOMFieldsCompositeItem) {
    var Widget = Ext.get(DOMFieldsCompositeItem).select(CSS_WIDGET).first().dom;
    if ((Widget != null) && (Widget.getFields)) this.initFields(Widget.getFields());
  };

  DOMField.atFieldEnter = function (DOMField) {
    if (this.onEnter) this.onEnter(DOMField);
  };

  DOMField.atFieldEscape = function (DOMField) {
    if (this.onEscape) this.onEscape(DOMField);
  };

  DOMField.atFieldBeforeChange = function (DOMField) {
    if (this.onBeforeChange) this.onBeforeChange(DOMField);
  };

  DOMField.atFieldChange = function (DOMField) {
    var Widget = WidgetManager.get(this.IdWidget);
    if (this.onChange) this.onChange(DOMField);
    if (Widget != null) this.updateData(Widget.getData().toXml(), false);
  };

  DOMField.atFieldLabelClick = function (DOMField, oEvent) {
    if (this.onLabelClick) this.onLabelClick(DOMField);
  };

  DOMField.atLabelClick = function () {
    this.CurrentWidget = null;
    if (this.onLabelClick) this.onLabelClick(this);
  };

  DOMField.atFieldLoadDefaultValue = function (DOMField, oEvent) {
    if (this.onLoadDefaultValue) this.onLoadDefaultValue(DOMField);
  };

  DOMField.atFieldAddDefaultValue = function (DOMField, oEvent) {
    if (this.onAddDefaultValue) this.onAddDefaultValue(DOMField);
  };

  DOMField.isObserver = function (fieldCode) {
    var partnerContext = this.getStorePartnerContext ? this.getStorePartnerContext() : "";
    var from = this.getStoreFrom ? this.getStoreFrom() : "";
    var filters = this.getStoreFilters ? this.getStoreFilters() : new Array();
    var fieldPattern = "_field:" + fieldCode;

    if (partnerContext.indexOf(fieldPattern) != -1) return true;
    if (from.indexOf(fieldPattern) != -1) return true;

    for (var key in filters) {
      if (isFunction(filters[key])) continue;
      var filter = filters[key];
      if (filter.indexOf(fieldPattern) != -1) return true;
    }

    return false;
  };

  var Type = DOMField.getType();
  var Decorator = null;

  if (Type == FIELD_TYPE_DATE) Decorator = new CGDecoratorFieldDate();
  else if (Type == FIELD_TYPE_FILE) Decorator = new CGDecoratorFieldFile();
  else if (Type == FIELD_TYPE_LINK) Decorator = new CGDecoratorFieldLink();
  else if (Type == FIELD_TYPE_NUMBER) Decorator = new CGDecoratorFieldNumber();
  else if (Type == FIELD_TYPE_PICTURE) Decorator = new CGDecoratorFieldPicture();
  else if (Type == FIELD_TYPE_COMPOSITE) Decorator = new CGDecoratorFieldComposite();
  else if (Type == FIELD_TYPE_SELECT) Decorator = new CGDecoratorFieldSelect();
  else if (Type == FIELD_TYPE_BOOLEAN) Decorator = new CGDecoratorFieldBoolean();
  else if (Type == FIELD_TYPE_TEXT) Decorator = new CGDecoratorFieldText();
  else if (Type == FIELD_TYPE_FORMULA) Decorator = new CGDecoratorFieldFormula();
  else if (Type == FIELD_TYPE_DESCRIPTOR) Decorator = new CGDecoratorFieldDescriptor();
  else if (Type == FIELD_TYPE_CHECK) Decorator = new CGDecoratorFieldCheck();
  else if (Type == FIELD_TYPE_NODE) Decorator = new CGDecoratorFieldNode();
  else if (Type == FIELD_TYPE_SERIAL) Decorator = new CGDecoratorFieldSerial();
  else if (Type == FIELD_TYPE_LOCATION) Decorator = new CGDecoratorFieldLocation();
  else if (Type == FIELD_TYPE_SUMMATION) Decorator = new CGDecoratorFieldSummation();

  if (Decorator != null) Decorator.execute(DOMField);

};

CGDecoratorForm = function () {
};

CGDecoratorForm.prototype = new CGDecorator;

CGDecoratorForm.prototype.execute = function (DOMForm) {

  this.addCommonMethods(DOMForm);

  DOMForm.init = function (Editors) {
    var extForm = Ext.get(this);
    var aFields = this.getFields();

    this.initToolbar(".header .content .toolbar");
    this.initTabs(CSS_NODE);

    if (!this.isEditable()) {
      this.addTableViewBehaviours(aFields);
      this.addSummationBehaviours(aFields);
      return;
    }

    this.Editors = Editors;
    this.aMemento = new Array();
    this.IndexMemento = -1;

    this.initFields(aFields);

    extFormElement = extForm.select("form").first();
    if (extFormElement == null) extFormElement = extForm.select(".form").first();
    if (extFormElement == null) return false;
    extFormElement.dom.onsubmit = function () {
      return false;
    };
  };

  DOMForm.destroy = function () {
    if (!this.isEditable()) return;
    this.destroyFields(this.getFields());
    this.Editors = null;
    this.aMemento = new Array();
  };

  DOMForm.getContent = function () {
    var Node = new CGNode(), sNode = EMPTY;
    var sContent = EMPTY;
    var aResult = new Array();
    var ControlInfo = this.getControlInfo();
    var extNode = Ext.get(this);
    var aExtFields;
    var AttributeList = new CGAttributeList();

    aExtFields = extNode.select(".nodeFields " + CSS_FIELD_NODE_PREFIX + ControlInfo.IdNode + " input.root");
    aExtFields.each(function (extField) {
      if (!extField.dom.name) return;
      if (extField.up(CSS_NODE).dom != this) return;
      aResult.push({code: extField.dom.name, id: extField.dom.name, name: extField.dom.name, value: extField.dom.value});
    }, this);

    if (aResult.length == 0) return "";

    Node.setId(ControlInfo.IdNode);
    Node.setCode(ControlInfo.Code);
    for (var iPos = 0; iPos < aResult.length; iPos++) {
      sContent += aResult[iPos].value;
    }
    sContent = AttributeList.serializeWithData(sContent);
    sContent = Node.serializeWithData(sContent);

    return sContent;
  };

  DOMForm.update = function (sData) {
    if (!this.isEditable()) return false;
    if (sData == null) return true;

    var Attribute = new CGAttribute();
    var extNode = Ext.get(this);
    Attribute.unserialize(sData);
    var extField = extNode.select(".nodeFields " + CSS_FIELD_NODE_PREFIX + this.getId() + "." + Attribute.getCode()).first();
    if (extField) extField.dom.update(sData);

    return true;
  };

  DOMForm.executeOnloadCommands = function () {
    var extElement = Ext.get(this);
    var aExtOnloadCommands = extElement.select(CSS_ONLOAD_COMMAND);
    aExtOnloadCommands.each(function (extOnloadCommand) {
      var extElement = extOnloadCommand.up(CSS_NODE);
      if (extElement.dom != this) return;
      CommandListener.throwCommand(extOnloadCommand.dom.innerHTML);
    }, this);
  };

  DOMForm.setObservers = function (Observers) {
    var extElement = Ext.get(this);
    for (var i = 0; i < Observers.length; i++) {
      this.addObserver(Observers[i], i);
    }
  };

  DOMForm.getField = function (fieldPath) {
    if (fieldPath == "") return null;

    var DOMField = $(fieldPath);
    if (DOMField == null) {
      var extNode = Ext.get(this);
      var extFieldList = extNode.select(CSS_FIELD + "." + fieldPath);
      if (extFieldList.getCount() == 0) return null;
      DOMField = extFieldList.first().dom;
    }
    if (!DOMField.hasClassName(CLASS_FIELD)) DOMField = DOMField.up(CSS_FIELD);
    return DOMField;
  };

  DOMForm.addObserver = function (Observer, iPos) {
    var DOMField = this.getField(Observer.field);
    if (DOMField == null) return;
    DOMField.setObserver(Observer, iPos);
  };

  DOMForm.removeObserver = function (fieldPath) {
    var DOMField = this.getField(fieldPath);
    if (DOMField == null) return;
    DOMField.setObserver(null, -1);
  };

  DOMForm.focusField = function (fieldPath) {
    var DOMField = this.getField(fieldPath);
    if (DOMField == null) return;
    DOMField.focus();
  };

  DOMForm.blurField = function (fieldPath) {
    var DOMField = this.getField(fieldPath);
    if (DOMField == null) return;
    DOMField.blur();
  };

};

CGDecoratorNode = function () {
};

CGDecoratorNode.prototype = new CGDecorator;

CGDecoratorNode.prototype.execute = function (DOMNode) {

  DOMNode.Editors = null;
  DOMNode.extCurrentWidget = null;
  DOMNode.aMemento = new Array();
  this.addCommonMethods(DOMNode);

  DOMNode.initFields = function (aDOMFields) {

    if (this.Editors == null) return;

    for (var iPos = 0; iPos < aDOMFields.length; iPos++) {
      var DOMField = aDOMFields[iPos];
      if (DOMField.isInit()) continue;
      if ((FieldType = DOMField.getType()) == null) continue;

      if (FieldType == FIELD_TYPE_COMPOSITE) DOMField.Editors = this.Editors;
      DOMField.onFocused = this.atFieldFocused.bind(this);
      DOMField.onBlur = this.atFieldBlur.bind(this);
      DOMField.onAdd = this.atFieldAdd.bind(this);
      DOMField.onRegister = this.atFieldRegister.bind(this);
      DOMField.onEnter = this.atFieldEnter.bind(this);
      DOMField.onEscape = this.atFieldEscape.bind(this);
      DOMField.onLabelClick = this.atFieldLabelClick.bind(this);
      DOMField.onGotoField = this.gotoField.bind(this);
      DOMField.onLoadDefaultValue = this.atFieldLoadDefaultValue.bind(this);
      DOMField.onAddDefaultValue = this.atFieldAddDefaultValue.bind(this);
      DOMField.getField = this.atGetField.bind(this, DOMField);
      DOMField.getFieldValue = this.atGetFieldValue.bind(this, DOMField);
      DOMField.getFieldValueCode = this.atGetFieldValueCode.bind(this, DOMField);
      DOMField.init();
      // avoid callings to onchange before initialization
      DOMField.onBeforeChange = this.atFieldBeforeChange.bind(this);
      DOMField.onChange = this.atFieldChange.bind(this);
    }

  };

  DOMNode.init = function (Editors) {
    var extNode = Ext.get(this);

    this.initToolbar(".header .content .toolbar");
    this.initTabs(CSS_NODE);
    this.initAncestorView();

    var aExtCollections = extNode.select(CSS_COLLECTION);
    aExtCollections.each(function (aExtCollection) {
      aExtCollection.dom.init(Editors);
    }, this);
  };

  DOMNode.initAncestorView = function() {
    var extNode = Ext.get(this);
    var extView = extNode.down(".ancestor-view");
    if (extView == null) return;
  };

  DOMNode.destroyFields = function (aDOMFields) {

    for (var iPos = 0; iPos < aDOMFields.length; iPos++) {
      var DOMField = aDOMFields[iPos];
      DOMField.onFocused = null;
      DOMField.onBlur = null;
      DOMField.onAdd = null;
      DOMField.onRegister = null;
      DOMField.onEnter = null;
      DOMField.onEscape = null;
      DOMField.onLabelClick = null;
      DOMField.onGotoField = null;
      DOMField.onLoadDefaultValue = null;
      DOMField.onAddDefaultValue = null;
      DOMField.onBeforeChange = null;
      DOMField.onChange = null;
      DOMField.destroy();
    }

  };

  DOMNode.destroy = function () {
    var extNode = Ext.get(this);
    var aExtCollections = extNode.select(CSS_COLLECTION);
    aExtCollections.each(function (aExtCollection) {
      aExtCollection.dom.destroy();
    }, this);
  };

  DOMNode.focus = function () {
  };

  DOMNode.blur = function () {
    if (this.extCurrentWidget) this.extCurrentWidget.blur();
  };

  DOMNode.refresh = function () {
    var extNode = Ext.get(this);

    if (!(NodeReferenceList = extNode.select(CSS_REFERENCE))) return false;
    if (!(HiddenableList = extNode.select(CSS_HIDDENABLE))) return false;

    var iCountNodesReferences = NodeReferenceList.getCount();
    HiddenableList.each(function (Hiddenable) {
      sVisibleClass = (Hiddenable.hasClass('inline')) ? "inline" : "block";
      Hiddenable.dom.style.display = (iCountNodesReferences != 0) ? sVisibleClass : "none";
    });
  };

  DOMNode.getSelectedNodesReferencesIds = function () {
    var extNode = Ext.get(this);
    var aInputs = extNode.select(HTML_INPUT);
    var aResult = new Array();

    aInputs.each(function (Input) {
      if (Input.dom.name == "") return;
      if (Input.dom.checked) {
        aResult.push(Input.dom.getIdNode());
      }
    });

    return aResult;
  };

  DOMNode.setSelectedNodesReferences = function (aIdNodes) {
    var aResult = new Array();

    this.selectNodesReferences(SELECT_NONE);

    for (var iPos in aIdNodes) {
      if (isFunction(aIdNodes[iPos])) continue;
      var aDOMNodeReferences = this.getNodeReferences(aIdNodes[iPos]);
      aDOMNodeReferences.each(function (DOMNodeReference) {
        var extInput;
        var extNodeReference = Ext.get(DOMNodeReference);
        if ((extInput = extNodeReference.select(HTML_INPUT).first()) == null) return;
        extInput.dom.checked = true;
        if (extInput.dom.select) extInput.dom.select();
      }, this);
    }

    return aResult;
  };

  DOMNode.selectNodesReferences = function (Type) {
    var aResult = new Array(), extNode = Ext.get(this);
    var aDOMInputs = null;

    switch (Type) {
      case SELECT_ALL:
        if (!(InputList = extNode.select(CSS_REFERENCE + " " + HTML_INPUT))) return false;
        aDOMInputs = selectAll(InputList, Type);
        break;
      case SELECT_NONE:
        if (!(InputList = extNode.select(CSS_REFERENCE + " " + HTML_INPUT))) return false;
        aDOMInputs = selectNone(InputList, Type);
        break;
      case SELECT_INVERT:
        if (!(InputList = extNode.select(CSS_REFERENCE + " " + HTML_INPUT))) return false;
        aDOMInputs = selectInvert(InputList, Type);
        break;
      case SELECT_HIGHLIGHTED:
        aResult = this.selectNodesReferences(SELECT_NONE);
        if (!(HighlightedList = extNode.select(CSS_REFERENCE + " " + HTML_INPUT + DOT + CLASS_HIGHLIGHTED))) return false;
        aDOMInputs = selectHighlighted(HighlightedList);
        break;
    }

    if (!aDOMInputs) return aResult;

    for (var iPos = 0; iPos < aDOMInputs.length; iPos++) {
      var DOMInput = aDOMInputs[iPos];
      if (!DOMInput.getIdNode) continue;
      aResult[DOMInput.getIdNode()] = DOMInput.checked;
    }

    return aResult;
  };

  DOMNode.markNodesReferences = function (aIdNodes, Mark) {
    var sMessage = "";
    if (Mark != null) eval("sMessage = (Lang.Decorator.NodeMark." + Mark + ")?Lang.Decorator.NodeMark." + Mark + ":''");

    for (var iPos in aIdNodes) {
      if (isFunction(aIdNodes[iPos])) continue;
      var aDOMNodeReferences = this.getNodeReferences(aIdNodes[iPos]);
      aDOMNodeReferences.each(function (DOMNodeReference) {
        var extMark;
        var extNodeReference = Ext.get(DOMNodeReference);
        if ((extMark = extNodeReference.select(CSS_MARK).first()) == null) return;
        extMark.dom.innerHTML = sMessage;
      }, this);
    }
  };

  DOMNode.getNodesReferencesInfo = function () {
    var extNode = Ext.get(this);
    var aNodesReferencesInfo;

    if (!(aNodesReferences = extNode.select(CSS_REFERENCE))) return false;

    aNodesReferencesInfo = new Array();
    aNodesReferences.each(function (CurrentNodeReference) {
      var NodeReferenceInfo = new Object();
      var extId, extTitle, extDescription;
      NodeReferenceInfo.id = CurrentNodeReference.dom.id.replace(NODEREFERENCE_ID_PREFIX, "");
      NodeReferenceInfo.idNode = (extId = CurrentNodeReference.select(CSS_CONTROL_INFO + " > .idnode").first()) ? extId.dom.innerHTML : "";
      NodeReferenceInfo.title = (extTitle = CurrentNodeReference.select(CSS_TITLE).first()) ? extTitle.dom.innerHTML : "Sin etiqueta";
      NodeReferenceInfo.description = (extDescription = CurrentNodeReference.select(CSS_DESCRIPTION).first()) ? extDescription.dom.innerHTML : "Sin comentarios";
      aNodesReferencesInfo.push(NodeReferenceInfo);
    });

    return aNodesReferencesInfo;
  };

  DOMNode.getNodesReferences = function () {
    var aResult = new Array(), extNode = Ext.get(this);
    var aNodeReferences;

    if (!(aNodeReferences = extNode.select(CSS_REFERENCE))) return false;

    aNodeReferences.each(function (CurrentNodeReference) {
      aResult.push(CurrentNodeReference.dom);
    }, this);

    return aResult;
  };

  DOMNode.getNodesReferencesCount = function () {
    var extNode = Ext.get(this);
    return (extNode.select(CSS_REFERENCE)).getCount();
  };

  DOMNode.getNodeReferences = function (IdNode) {
    var aResult = new Array(), extNode = Ext.get(this);
    var aNodeReferences;

    if (!(aNodeReferences = extNode.select(CSS_REFERENCE + DOT + IdNode))) return false;

    aNodeReferences.each(function (CurrentNodeReference) {
      aResult.push(CurrentNodeReference.dom);
    }, this);

    return aResult;
  };

  DOMNode.getNodeReferencesCount = function (IdNode) {
    var extNode = Ext.get(this);
    return (extNode.select(CSS_REFERENCE + DOT + IdNode)).getCount();
  };

  DOMNode.getMagnet = function (CodeType) {
    var extNode = Ext.get(this);
    if (!(eMagnet = extNode.select(".magnet#" + CodeType).first())) return false;
    return eMagnet.dom;
  };

  DOMNode.addNodeReference = function (CodeType, sNodeReferenceContent) {
    var extNode = Ext.get(this);

    if (!(eMagnet = this.getMagnet(CodeType))) {
      if (!(extNodeReferenceList = extNode.select(CSS_REFERENCE_LIST).first())) return false;
      DOMNodeReference = new Insertion.Bottom(extNodeReferenceList.dom, sNodeContent).element.immediateDescendants().last();
      this.refresh();
    }
    else {
      if (!(Section = $(eMagnet.innerHTML))) return false;
      DOMNodeReference = Section.addNodeReference(sNodeReferenceContent);
    }

    return DOMNodeReference;
  };

  DOMNode.deleteNodeReferences = function (Id) {
    var aExtNodeReferences, extNode = Ext.get(this);

    if ((aExtNodeReferences = extNode.select(CSS_REFERENCE + DOT + Id)) == null) return false;

    aExtNodeReferences.each(function (extNodeReference) {
      if ((extNode = extNodeReference.up(CSS_COLLECTION)) != null) {
        extNode.dom.deleteNodeReference(Id);
      }
      else {
        extNodeReference.remove();
        this.refresh();
      }
    }, this);
  };

  DOMNode.scrollTo = function (Id, bAnimate) {
    var eElement = $(SECTION_ID_PREFIX + Id);
    if (!eElement) eElement = $(NODEREFERENCE_ID_PREFIX + Id);
    if (!eElement) return false;
    if (bAnimate) this.highlight();
    return eElement.scrollTo();
  };

  DOMNode.isAncestor = function (IdNode) {
    var extNode = Ext.get(this);
    var extBreadcrumbs = extNode.select(".breadcrumbs").first();
    var sBreadcrumbs = extBreadcrumbs.dom.innerHTML;

    return (sBreadcrumbs.indexOf("shownode%28" + IdNode + "%29") != -1) || (sBreadcrumbs.indexOf("shownode(" + IdNode + ")") != -1);
  };

  DOMNode.isHighlighted = function () {
    var extNode = Ext.get(this);
    if (!(eHighlightedLink = extNode.select(".command.star").first())) return false;
    return (eHighlightedLink.dom.hasClassName(CLASS_HIGHLIGHTED));
  };

  DOMNode.setHighlighted = function (bHighlight) {
    var extNode = Ext.get(this);
    if (!(extHighlightedLink = extNode.select(".command.star").first())) return false;
    if (bHighlight) extHighlightedLink.addClass(CLASS_HIGHLIGHTED);
    else extHighlightedLink.removeClass(CLASS_HIGHLIGHTED);
  };

  DOMNode.highlight = function () {
    new Effect.Highlight(this, {duration: HIGHLIGHT_DURATION});
  };

  DOMNode.getHtmlDialog = function () {
    var extNode = Ext.get(this);
    if (!(eDialog = extNode.select('.dialog').first())) return false;
    return eDialog.dom.innerHTML;
  };

  DOMNode.getFieldsDefinition = function () {
    var aResult = new Array();
    var extNode = Ext.get(this);

    aExtFields = extNode.select('.field');
    aExtFields.each(function (extField) {
      if (extField.up(CSS_NODE).dom != this) return;
      var Type = extField.dom.getType();
      if ((Type == FIELD_TYPE_TEXT) || (Type == FIELD_TYPE_NUMBER) || (Type == FIELD_TYPE_DATE)) {
        var codeField = extField.dom.getAbsoluteCode();
        var sTitle = extField.dom.getAbsoluteTitle();
        aResult.push({code: codeField, id: codeField, name: codeField, title: sTitle, type: Type});
      }
    }, this);

    return aResult;
  };

  DOMNode.getDefinition = function () {
    var Definition = new Object();
    Definition.aFields = this.getFieldsDefinition();
    return Definition;
  };

  DOMNode.isEditable = function () {
    var extNode = Ext.get(this);
    return (extNode.hasClass(CLASS_EDITABLE));
  };

  DOMNode.getChildNodeId = function (code) {
    var extNode = Ext.get(this);
    if (!(extChild = extNode.select(CSS_CONTROL_INFO + " > " + CSS_CHILD_NODE + " ." + code))) return "";
    return extChild.dom.value;
  };

  DOMNode.getChildrenNodes = function (IdChild) {
    var extNode = Ext.get(this);
    var extChildrenList = extNode.select(CSS_NODE + "." + IdChild);
    var aResult = new Array();

    extChildrenList.each(function (extChild) {
      aResult.push(extChild.dom);
    });

    return aResult;
  };

  DOMNode.getIndicatorValue = function () {
    var aAttributes = this.getAttributes();
    return aAttributes;
  };

  DOMNode.getFields = function () {
    var aFields = new Array();
    var aComposites = new Array();
    var ControlInfo = this.getControlInfo();
    var extNode = Ext.get(this);
    var extFieldList;

    if (!(extFieldList = extNode.select(CSS_FIELD_NODE_PREFIX + ControlInfo.IdNode))) return false;

    extFieldList.each(function (extField) {
      var extParent = extField.up(CSS_FIELD_NODE_PREFIX + ControlInfo.IdNode);
      if (extParent != null) return;
      if (extField.dom.belongsToTemplate()) return;
      if (extField.hasClass(CLASS_FIELD_COMPOSITE)) aComposites.push(extField.dom);
      else aFields.push(extField.dom);
    }, this);

    // Priorize fields vs composites to minimize onchange fields calls
    for (var iPos = aComposites.length - 1; iPos >= 0; iPos--) aFields.push(aComposites[iPos]);

    return aFields;
  };

  DOMNode.getField = function (Code) {
    var extNode = Ext.get(this);
    var extFieldList = extNode.select(CSS_FIELD + "." + Code);
    if (extFieldList.getCount() == 0) return null;
    var DOMField = extFieldList.first().dom;
    if (DOMField.belongsToTemplate()) return null;
    return DOMField;
  };

  DOMNode.getFieldsByCode = function (Code) {
    var aFields = new Array();
    var extNode = Ext.get(this);
    extNode.select(CSS_FIELD + "." + Code).each(function (el) {
      aFields.push(el.dom);
    });
    return aFields;
  };

  DOMNode.getContent = function () {
    return "";
  };

  DOMNode.getEmbeddedNodes = function () {
    var aResult = new Array();
    var extNode = Ext.get(this);
    var extNodeList;

    if (!(extNodeList = extNode.select(CSS_NODE))) return false;

    extNodeList.each(function (extNode) {
      aResult.push($(extNode.dom));
    }, this);

    return aResult;
  };

  DOMNode.isEmbedded = function () {
    var extNode = Ext.get(this);
    return extNode.hasClass(CLASS_EMBED);
  };

  DOMNode.getFieldNodes = function () {
    var aResult = new Array();
    var extNode = Ext.get(this);

    if (!(extNodeList = extNode.select(CSS_NODE_FIELD))) return false;

    extNodeList.each(function (extNode) {
      aResult.push($(extNode.dom));
    }, this);

    return aResult;
  };

  DOMNode.getCollections = function () {
    var aResult = new Array();
    var extNode = Ext.get(this);

    if (!(eCollectionList = extNode.select(CSS_COLLECTION))) return false;

    eCollectionList.each(function (extCollection) {
      aResult.push($(extCollection.dom));
    }, this);

    return aResult;
  };

  DOMNode.getForms = function (IdNode) {
    var aResult = new Array();
    var extNode = Ext.get(this);

    if (!(eFormList = extNode.select(".form." + IdNode))) return false;

    eFormList.each(function (extForm) {
      aResult.push($(extForm.dom));
    }, this);

    return aResult;
  };

  DOMNode.getForm = function (IdNode) {
    var eForm = null;
    var extNode = Ext.get(this);

    if (!(eForm = extNode.select(".form" + IdNode).first())) return false;
    if (!eForm) return false;

    return eForm.dom;
  };

  DOMNode.getIdNode = function () {
    return this.getControlInfo().IdNode;
  };

  DOMNode.getId = function () {
    return this.getIdNode();
  };

  DOMNode.getParentNode = function () {
    var extNode = Ext.get(this);
    var extElement = extNode.up(CSS_NODE);
    if (extElement) return extElement.dom;
    return null;
  };

  DOMNode.getTitle = function () {
    var extNode = Ext.get(this);
    var extTitle = extNode.select(".title .descriptor").first();
    if (extTitle == null) return Context.Config.DefaultLabel;
    return extTitle.dom.innerHTML;
  };

  DOMNode.setTitle = function (sTitle) {
    var extNode = Ext.get(this);
    var extTitle = extNode.select(".title .descriptor").first();
    var extBreadcrumbsTitle = extNode.select(".breadcrumbs span").first();
    if (extTitle != null) extTitle.dom.innerHTML = sTitle;
    if (extBreadcrumbsTitle != null) extBreadcrumbsTitle.dom.innerHTML = sTitle;
  };

  DOMNode.getControlInfo = function () {
    var aResult = new Array();
    var extNode = Ext.get(this);
    var extId, extAncestors, extCode, extCodeView, extMode, extNodes, extResult, extTimeStamp, extState;

    if (this.ControlInfo) return this.ControlInfo;

    extState = extNode.select(CSS_CONTROL_INFO + " > .state").first();
    this.ControlInfo = new Object();
    this.ControlInfo.IdNode = (extId = extNode.select(CSS_CONTROL_INFO + " > .idnode").first()) ? extId.dom.innerHTML : "-1";
    this.ControlInfo.IdRevision = (extId = extNode.select(CSS_CONTROL_INFO + " > .idrevision").first()) ? extId.dom.innerHTML : null;
    this.ControlInfo.Ancestors = (extAncestors = extNode.select(CSS_CONTROL_INFO + " > .ancestors").first()) ? extAncestors.dom.innerHTML : "-1";
    this.ControlInfo.Code = (extCode = extNode.select(CSS_CONTROL_INFO + " > .code").first()) ? extCode.dom.innerHTML : "";
    this.ControlInfo.CodeView = (extCodeView = extNode.select(CSS_CONTROL_INFO + " > .codeview").first()) ? extCodeView.dom.innerHTML : "-1";
    this.ControlInfo.Mode = (extMode = extNode.select(CSS_CONTROL_INFO + " > .mode").first()) ? extMode.dom.innerHTML.replace(/&amp;/g, AMP) : null;
    this.ControlInfo.Nodes = (extNodes = extNode.select(CSS_CONTROL_INFO + " > .nodes").first()) ? extNodes.dom.innerHTML : null;
    this.ControlInfo.TimeStamp = (extTimeStamp = extNode.select(CSS_CONTROL_INFO + " > .timestamp").first()) ? extTimeStamp.dom.innerHTML : null;
    this.ControlInfo.State = (extState != null && extState.dom.innerHTML != "") ? Ext.util.JSON.decode(extState.dom.innerHTML) : null;
    this.ControlInfo.Templates = new Object();

    aResult = extNode.select(".tpl.collectionreference.added");
    this.ControlInfo.Templates.NodeReferenceAdded = (extResult = aResult.first()) ? extResult.dom.innerHTML : null;

    aResult = extNode.select(".tpl.refresh");
    this.ControlInfo.Templates.Refresh = (extResult = aResult.first()) ? extResult.dom.innerHTML : null;

    aResult = extNode.select(".tpl.edit");
    this.ControlInfo.Templates.Edit = (extResult = aResult.first()) ? extResult.dom.innerHTML : null;

    return this.ControlInfo;
  };

  DOMNode.setDirty = function (bValue) {
    var extNode = Ext.get(this);
    if (!(extFieldList = extNode.select(CSS_FIELD))) return false;
    extFieldList.each(function (extField) {
      extField.dom.setDirty(bValue);
    }, this);
  };

  DOMNode.isDirty = function () {
    var bIsDirty = false;
    var extNode = Ext.get(this);

    if (!(extFieldList = extNode.select(CSS_FIELD))) return false;

    extFieldList.each(function (extField) {
      if (bIsDirty) return;
      if (!extField) return;
      if (!extField.dom) return;
      if (!extField.dom.isDirty) return;
      if (extField.dom.isDirty()) bIsDirty = true;
    }, this);

    return bIsDirty;
  };

  DOMNode.getFirstWidget = function (extElement) {
    var extNode = Ext.get(this);
    if (extElement == null) extElement = extNode;
    var extWidgetList = extElement.select('.widget');
    if (extWidgetList.getCount() == 0) return null;
    return extWidgetList.first();
  };

  DOMNode.isFirstWidget = function () {
    var extWidget = this.getFirstWidget();
    return (extWidget == this.extCurrentWidget);
  };

  DOMNode.firstField = function () {
    var extWidget = this.getFirstWidget();
    if (extWidget) {
      if ((this.extCurrentWidget != null) && (this.extCurrentWidget.dom != extWidget.dom)) this.extCurrentWidget.blur();
      this.extCurrentWidget = extWidget;
      extWidget.focus();
    }
  };

  DOMNode.getPreviousWidget = function () {
    var extWidget = null;

    if (this.isFirstWidget()) return;
    if (this.extCurrentWidget == null) return this.getFirstWidget();

    var extElement = this.extCurrentWidget.up('.element');
    if (extElement != null) extElement = getPreviousElement(extElement, 'element');
    if (extElement != null) extWidget = extElement.child('.widget');
    if (extWidget != null) return extWidget;

    extElement = this.extCurrentWidget.up('.field');
    if (extElement != null) {
      extParent = extElement;
      extElement = null;
      while ((extParent != null) && (extElement == null)) {
        extElement = getPreviousElement(extParent, 'field');
        extParent = extParent.up('.field');
      }
    }
    if (extElement != null) {
      var extWidget = this.getLastWidget(extElement);
      if (extWidget != null) return extWidget;
    }

    extElement = this.extCurrentWidget.up('.form');
    if (extElement != null) extElement = extElement.up('.field');
    if (extElement != null) extElement = getPreviousElement(extElement, 'field');
    if (extElement != null) {
      var extWidget = this.getLastWidget(extElement);
      if (extWidget != null) return extWidget;
    }

    extWidget = this.getLastWidget(this.extCurrentWidget);
    if (extWidget == null) extWidget = this.getFirstWidget();

    return extWidget;
  };

  DOMNode.previousField = function () {
    var extWidget = this.getPreviousWidget();
    if ((extWidget) && (this.extCurrentWidget != extWidget)) {
      if (this.extCurrentWidget != null) this.extCurrentWidget.blur();
      this.extCurrentWidget = extWidget;
      extWidget.focus();
    }
  };

  DOMNode.getNextWidget = function (extElement) {
    var extElement, extWidget;

    if (this.isLastWidget()) return this.getLastWidget();
    if (this.extCurrentWidget == null) return this.getFirstWidget();

    extWidget = this.extCurrentWidget.child('.widget');
    if ((extWidget != null) && (extWidget.up('.template') == null)) return extWidget;

    extWidget = null;
    extElement = this.extCurrentWidget.up('.element');
    if (extElement != null) extElement = getNextElement(extElement, 'element');
    if (extElement != null) extWidget = extElement.child('.widget');
    if (extWidget != null) return extWidget;

    extElement = this.extCurrentWidget.up('.field');
    if (extElement != null) {
      extParent = extElement;
      extElement = null;
      while ((extParent != null) && (extElement == null)) {
        extElement = getNextElement(extParent, 'field');
        extParent = extParent.up('.field');
      }
    }
    if (extElement != null) extWidget = extElement.child('.widget');
    if (extWidget != null) return extWidget;

    extElement = this.extCurrentWidget.up('.form');
    if (extElement != null) extElement = extElement.up('.field');
    if (extElement != null) extElement = getNextElement(extElement, 'field');
    if (extElement != null) extWidget = extElement.child('.widget');
    if (extWidget != null) return extWidget;

    return this.getFirstWidget();
  };

  DOMNode.nextField = function () {
    var extWidget = this.getNextWidget();
    if ((extWidget) && (this.extCurrentWidget != extWidget)) {
      if (this.extCurrentWidget != null) this.extCurrentWidget.blur();
      this.extCurrentWidget = extWidget;
      extWidget.focus();
    }
  };

  DOMNode.isLastWidget = function () {
    var extWidget = this.getLastWidget();
    return (extWidget == this.extCurrentWidget);
  };

  DOMNode.getLastWidget = function (extElement) {
    var extWidget, extNode = Ext.get(this);
    if (extElement == null) extElement = extNode;
    var extWidgetList = extElement.select('.widget');
    if (extWidgetList.getCount() == 0) return null;

    for (var iPos = extWidgetList.getCount() - 1; iPos >= 0; iPos--) {
      extWidget = Ext.get(extWidgetList.elements[iPos]);
      if (extWidget.up('.template') == null) return extWidget;
    }

    return null;
  };

  DOMNode.lastField = function () {
    var extWidget = this.getLastWidget();
    if ((extWidget) && (this.extCurrentWidget != extWidget)) {
      if (this.extCurrentWidget != null) this.extCurrentWidget.blur();
      this.extCurrentWidget = extWidget;
      extWidget.focus();
    }
  };

  DOMNode.parentField = function () {
    if (this.extCurrentWidget == null) return;
    var extWidget = this.extCurrentWidget.up('.widget');
    if ((extWidget) && (this.extCurrentWidget != extWidget)) {
      this.extCurrentWidget.blur();
      this.extCurrentWidget = extWidget;
      extWidget.focus();
    }
  };

  DOMNode.gotoField = function (sPath) {
    var DOMElement = $(sPath);
    if (DOMElement) {
      if (Ext.isIE) window.setTimeout(DOMElement.focus, 100);
      else DOMElement.focus();
    }
  };

  DOMNode.getContext = function (DOMField) {
    return DOMField.getContext();
  };

  DOMNode.isField = function (extWidget, DOMField) {
    var extField = extWidget.up(".field");
    if (extField == null) return false;
    return (extField.dom == DOMField);
  };

  DOMNode.getCurrentField = function () {
    if (this.extCurrentWidget == null) return;
    var extField = this.extCurrentWidget.up(".field");
    if (!extField) return;
    return extField.dom;
  };

  DOMNode.addMemento = function (Memento) {
    var iPos = this.IndexMemento + 1;
    while (iPos < this.aMemento.length) this.aMemento.pop();
    this.aMemento.push(Memento);
    this.IndexMemento = this.aMemento.length - 1;
  };

  DOMNode.undo = function () {
    var Memento, CurrentMemento, DOMField;

    this.IndexMemento--;

    if (this.IndexMemento < 0) {
      this.IndexMemento = 0;
      return;
    }

    if (this.aMemento.length == 0) return;

    CurrentMemento = this.aMemento[this.IndexMemento + 1];
    Memento = this.aMemento[this.IndexMemento];

    if (Memento == null) return;

    if ((CurrentMemento != null) && (CurrentMemento.id != Memento.id)) {
      this.undo();
      return;
    }

    DOMField = $(Memento.id);

    if (DOMField == null) {
      this.undo();
      return;
    }

    DOMField.restoreFromMemento(Memento);
    DOMField.focus();
  };

  DOMNode.redo = function () {
    var Memento, CurrentMemento, DOMField;

    this.IndexMemento++;

    if (this.IndexMemento >= this.aMemento.length) {
      this.IndexMemento = this.aMemento.length - 1;
      return;
    }

    CurrentMemento = this.aMemento[this.IndexMemento - 1];
    Memento = this.aMemento[this.IndexMemento];

    if (Memento == null) return;

    if ((CurrentMemento != null) && (CurrentMemento.id != Memento.id)) {
      this.redo();
      return;
    }

    DOMField = $(Memento.id);

    if (DOMField == null) {
      this.redo();
      return;
    }

    DOMField.restoreFromMemento(Memento);
    DOMField.focus();
  };

  DOMNode.isLoaded = function () {
    var extNode = Ext.get(this);
    var extBody = extNode.down(CSS_BODY);
    if (extBody == null) return true;
    return (!extBody.hasClass(CLASS_LOADING));
  };

  DOMNode.isChild = function (IdParent) {
    var ControlInfo = this.getControlInfo();
    if (ControlInfo.Ancestors == null) return false;
    return (ControlInfo.Ancestors.indexOf("," + IdParent) != -1);
  };

  DOMNode.showBackTaskCommand = function (IdTask, TargetNode, TargetView) {
    if (this.viewerToolbar != null) this.viewerToolbar.showBackTaskCommand(IdTask, TargetNode, TargetView);
  };

  DOMNode.hideBackTaskCommand = function () {
    if (this.viewerToolbar != null) this.viewerToolbar.hideBackTaskCommand();
  };

  DOMNode.showBackLinkCommand = function (IdNode) {
    if (this.viewerToolbar != null) this.viewerToolbar.showBackLinkCommand(IdNode);
  };

  DOMNode.hideBackLinkCommand = function () {
    if (this.viewerToolbar != null) this.viewerToolbar.hideBackLinkCommand();
  };

  // #############################################################################################################

  DOMNode.atFieldFocused = function (DOMField, Widget) {
    var extWidget = null;
    if (Widget != null) extWidget = Ext.get(Widget.getDOM());
    if (extWidget == null) extWidget = this.getFirstWidget(Ext.get(DOMField));
    if (extWidget) {
      if ((this.extCurrentWidget != null) && (this.extCurrentWidget.dom.id != extWidget.dom.id)) this.extCurrentWidget.blur();
      this.extCurrentWidget = extWidget;
      if (this.onFieldFocus) this.onFieldFocus(DOMField);
    }
  };

  DOMNode.atFieldBlur = function (DOMField) {
    if (this.onFieldBlur) this.onFieldBlur(DOMField);
  };

  DOMNode.atFieldAdd = function (DOMFieldsComposite, DOMFieldsCompositeItem) {
    var Widget = Ext.get(DOMFieldsCompositeItem).select(CSS_WIDGET).first().dom;
    if ((Widget != null) && (Widget.getFields)) this.initFields(Widget.getFields());
    else {
      if (DOMFieldsComposite.getFields) this.initFields(DOMFieldsComposite.getFields());
    }
  };

  DOMNode.atFieldRegister = function (DOMFieldsComposite, DOMFieldsCompositeItem) {
    var Widget = Ext.get(DOMFieldsCompositeItem).select(CSS_WIDGET).first().dom;
    if ((Widget != null) && (Widget.getFields)) this.initFields(Widget.getFields());
  };

  DOMNode.atFieldEnter = function (DOMField) {
    this.nextField();
  };

  DOMNode.atFieldEscape = function (DOMField) {
    this.parentField();
  };

  DOMNode.atFieldBeforeChange = function (DOMField) {
    this.addMemento(DOMField.saveToMemento());
    if (!DOMField.isLink()) DOMField.onBeforeChange = null;
    if (this.onFieldBeforeChange) this.onFieldBeforeChange(DOMField);
  };

  DOMNode.atFieldChange = function (DOMField) {
    this.addMemento(DOMField.saveToMemento());
    if (this.onFieldChange) this.onFieldChange(DOMField);
  };

  DOMNode.atFieldLabelClick = function (DOMField, oEvent) {
    if (DOMField) {
      var extWidget = this.getFirstWidget(Ext.get(DOMField));
      if ((this.extCurrentWidget != null) && (this.extCurrentWidget.dom.id != extWidget.dom.id)) this.extCurrentWidget.blur();
      this.extCurrentWidget = extWidget;
      extWidget.focus();
    }
  };

  DOMNode.atFieldLoadDefaultValue = function (DOMField) {
    var Process = new CGProcessLoadDefaultValue();
    Process.NodeType = this.getControlInfo().Code;
    Process.Property = DOMField.getCode();
    Process.DOMField = DOMField;
    Process.execute();
  };

  DOMNode.atFieldAddDefaultValue = function (DOMField) {
    var Process = new CGProcessAddDefaultValue();
    Process.NodeType = this.getControlInfo().Code;
    Process.Property = DOMField.getCode();
    Process.Data = DOMField.getData();
    Process.execute();
  };

  DOMNode.atGetField = function (DOMFieldSender, code) {
    var DOMTarget = DOMFieldSender.getBrother(code);
    if (!DOMTarget || DOMTarget == null) DOMTarget = this.getField(code);
    return DOMTarget;
  };

  DOMNode.atGetFieldValue = function (DOMFieldSender, code) {
    var DOMTarget = DOMNode.atGetField(DOMFieldSender, code);
    return DOMTarget != null ? DOMTarget.getValue() : null;
  };

  DOMNode.atGetFieldValueCode = function (DOMFieldSender, code) {
    var DOMTarget = DOMFieldSender.getBrother(code);
    if (!DOMTarget || DOMTarget == null) DOMTarget = this.getField(code);
    return DOMTarget.getValueCode();
  };

};

CGDecoratorNodeReference = function () {
};

CGDecoratorNodeReference.prototype = new CGDecorator;

CGDecoratorNodeReference.prototype.execute = function (DOMNodeReference) {

  DOMNodeReference.isOpened = function () {
    var extNodeReference = Ext.get(this);
    if (!(eBody = extNodeReference.select(".body").first())) return false;
    return eBody.hasClass("fullscreen");
  };

  DOMNodeReference.open = function () {
    var extNodeReference = Ext.get(this);
    if (!(eBody = extNodeReference.select(".body").first())) return false;
    eBody.addClass("fullscreen");
    eBody.dom.style.display = "block";
  };

  DOMNodeReference.close = function () {
    var extNodeReference = Ext.get(this);
    if (!(eBody = extNodeReference.select(".body").first())) return false;
    eBody.removeClass("fullscreen");
    if (!eBody.hasClass("locked")) eBody.dom.style.display = "none";
  };

  DOMNodeReference.toggle = function () {
    var extNodeReference = Ext.get(this);
    if (!(eBody = extNodeReference.select(".body").first())) return false;
    if (eBody.isDisplayed()) this.close();
    else this.open();
  };

  DOMNodeReference.isHighlighted = function () {
    var extNodeReference = Ext.get(this);
    if (!(eHighlightedLink = extNodeReference.select(".command.star").first())) return false;
    return (eHighlightedLink.dom.hasClassName(CLASS_HIGHLIGHTED));
  };

  DOMNodeReference.toggleHighlighted = function () {
    var extNodeReference = Ext.get(this);
    if (!(eHighlightedLink = extNodeReference.select(".command.star").first())) return false;
    eHighlightedLink.dom.toggleClassName(CLASS_HIGHLIGHTED);
  };

  DOMNodeReference.isLoaded = function (html) {
    var extNodeReference = Ext.get(this);
    if (!(eBody = extNodeReference.select(".content").first())) return false;
    return (eBody.hasClass("loading") == false);
  };

  DOMNodeReference.load = function (html) {
    var extNodeReference = Ext.get(this);
    if (!(eBody = extNodeReference.select(".content").first())) return false;

    eBody.update(html);
    eBody.removeClass("loading");

    return eBody.dom;
  };

  DOMNodeReference.getInfo = function () {
    var extNodeReference = Ext.get(this);

    NodeReferenceInfo = new Object();
    NodeReferenceInfo.id = this.id.replace(NODEREFERENCE_ID_PREFIX, "");
    NodeReferenceInfo.idNode = (eId = extNodeReference.select(CSS_CONTROL_INFO + " > .idnode").first()) ? eId.dom.innerHTML : "-1";
    NodeReferenceInfo.title = (eTitle = extNodeReference.select(CSS_TITLE).first()) ? eTitle.dom.innerHTML : "Sin etiqueta";
    NodeReferenceInfo.description = (eDescription = extNodeReference.select(CSS_DESCRIPTION).first()) ? eDescription.dom.innerHTML : "Sin comentarios";
    NodeReferenceInfo.highlight = (eHighlight = extNodeReference.select(CSS_HIGHLIGHT).first()) ? (((eHighlight.dom.innerHTML == "true") || (eHighlight.dom.innerHTML == "yes")) ? true : false) : true;

    return NodeReferenceInfo;
  };

  DOMNodeReference.scrollTo = function (bAnimate) {
    if (bAnimate) this.highlight();
    //this.scrollTo();
  };

  DOMNodeReference.highlight = function () {
    var Info = this.getInfo();
    if (Info.highlight) new Effect.Highlight(this, {duration: HIGHLIGHT_DURATION});
  };

  DOMNodeReference.getSection = function () {
    var extNodeReference = Ext.get(this);
    var extElement = extNodeReference.up('.section');
    if (extElement) return extElement.dom;
    return null;
  };

  DOMNodeReference.getControlInfo = function () {
    var aResult = new Array();
    var extNodeReference = Ext.get(this);
    var ControlInfo;
    var extIdNode, extMode, extCode, extNodes, extResult;

    ControlInfo = new Object();
    ControlInfo.Id = this.id.replace(NODEREFERENCE_ID_PREFIX, "");
    ControlInfo.IdNode = (extIdNode = extNodeReference.select(CSS_CONTROL_INFO + " > .idnode").first()) ? extIdNode.dom.innerHTML : "-1";
    ControlInfo.Code = (extCode = extNodeReference.select(CSS_CONTROL_INFO + " > .code").first()) ? extCode.dom.innerHTML : "-1";
    ControlInfo.Mode = (extMode = extNodeReference.select(CSS_CONTROL_INFO + " > .mode").first()) ? extMode.dom.innerHTML : "-1";
    ControlInfo.Nodes = (extNodes = extNodeReference.select(CSS_CONTROL_INFO + " > .nodes").first()) ? extNodes.dom.innerHTML : null;
    ControlInfo.Templates = new Object();

    aResult = extNodeReference.select(".tpl.refresh");
    ControlInfo.Templates.Refresh = (extResult = aResult.first()) ? extResult.dom.innerHTML : null;

    aResult = extNodeReference.select(".tpl.edit");
    ControlInfo.Templates.Edit = (extResult = aResult.first()) ? extResult.dom.innerHTML : null;

    return ControlInfo;
  };

  DOMNodeReference.getParentNode = function () {
    var extNodeReference = Ext.get(this);
    var extElement = extNodeReference.up(CSS_NODE);
    if (extElement) return extElement.dom;
    return null;
  };

  DOMNodeReference.mark = function (Mark) {
    var extMark, sMessage = "", extNodeReference = Ext.get(this);
    if (Mark != null) eval("sMessage = (Lang.Decorator.NodeMark." + Mark + ")?Lang.Decorator.NodeMark." + Mark + ":''");
    if ((extMark = extNodeReference.select(CSS_MARK).first()) == null) return;
    extMark.dom.innerHTML = sMessage;
  };

  DOMNodeReference.getContent = function () {
    var Node = new CGNode();
    var sContent = EMPTY;
    var aResult = new Array();
    var ControlInfo = this.getControlInfo();
    var extNodeReference = Ext.get(this);
    var aExtFields;
    var AttributeList = new CGAttributeList();

    aExtFields = extNodeReference.select(CSS_FIELD + " input.root");
    aExtFields.each(function (extField) {
      if (!extField.dom.name) return;
      if (extField.up(CSS_REFERENCE).dom != this) return;
      aResult.push({code: extField.dom.name, id: extField.dom.name, name: extField.dom.name, value: extField.dom.value});
    }, this);

    if (aResult.length == 0) return "";

    Node.setId(ControlInfo.IdNode);
    Node.setCode(ControlInfo.Code);
    for (var iPos = 0; iPos < aResult.length; iPos++) {
      sContent += aResult[iPos].value;
    }
    sContent = AttributeList.serializeWithData(sContent);
    sContent = Node.serializeWithData(sContent);

    return sContent;
  };

};

CGDecoratorSection = function () {
};

CGDecoratorSection.prototype = new CGDecorator;

CGDecoratorSection.prototype.execute = function (DOMSection) {

  DOMSection.open = function () {
    var extSection = Ext.get(this);
    extSection.addClass(CLASS_OPENED);
    extSection.removeClass(CLASS_CLOSED);
  };

  DOMSection.close = function () {
    var extSection = Ext.get(this);
    extSection.removeClass(CLASS_OPENED);
    extSection.addClass(CLASS_CLOSED);
  };

  DOMSection.toggle = function () {
    if (this.hasClassName(CLASS_OPENED)) {
      this.close();
    }
    else {
      this.open();
    }
  };

  DOMSection.registerBehaviours = function () {
    var toggleBehaviour = Ext.get(this).select(".behaviour.toggle").first();
    toggleBehaviour.on("click", DOMSection.atToggle.bind(this));
  };

  DOMSection.atToggle = function () {
    this.toggle();
  };

  DOMSection.registerBehaviours();

};

CGDecoratorWidgetComposite = function () {
};

CGDecoratorWidgetComposite.prototype = new CGDecorator;

CGDecoratorWidgetComposite.prototype.execute = function (DOMWidget) {

  DOMWidget.getFields = function () {
    var aResult = new Array(), extWidget = Ext.get(this);
    var ControlInfo = extWidget.up(CSS_FORM).dom.getControlInfo();
    var extFieldList;

    if ((extFieldList = extWidget.select(CSS_FIELD_NODE_PREFIX + ControlInfo.IdNode)) == null) return false;

    extFieldList.each(function (extFieldItem) {
      if (!extFieldItem.dom.belongsToTemplate()) aResult.push(extFieldItem.dom);
    }, this);

    return aResult;
  };

  DOMWidget.getValue = function () {
    var extMainField, extFieldList, extWidget = Ext.get(this);
    var sResult = "";
    var Widget;

    extMainField = extWidget.select(CSS_FIELD + CSS_MAIN).first();
    if ((extMainField) && (extMainField.dom.IdWidget)) {
      Widget = WidgetManager.get(extMainField.dom.IdWidget);
      return Widget.getValue().toShort(MAX_SHORT_COMPOSITE_TITLE_LENGTH);
    }

    extFieldList = extWidget.select(CSS_FIELD);
    if (extFieldList.getCount() == 0) return Context.Config.DefaultLabel.toShort(MAX_SHORT_COMPOSITE_TITLE_LENGTH);

    extFieldList.each(function (extField) {
      var DOMField = extField.dom;
      if ((DOMField) && (DOMField.IdWidget)) {
        var Widget = WidgetManager.get(DOMField.IdWidget);
        sResult += (Widget.getValue() != "") ? Widget.getValue() + " + " : "";
      }
    }, this);

    sResult = sResult.substr(0, sResult.length - 3);

    return sResult.toShort(MAX_SHORT_COMPOSITE_TITLE_LENGTH);
  };

};

CGDecoratorWidget = function () {
};

CGDecoratorWidget.prototype = new CGDecorator;

CGDecoratorWidget.prototype.execute = function (DOMWidget) {

  DOMWidget.getType = function () {
    var extWidget = Ext.get(this);
    if (extWidget.hasClass(CLASS_WIDGET_SELECT)) return WIDGET_SELECT;
    else if (extWidget.hasClass(CLASS_WIDGET_BOOLEAN)) return WIDGET_BOOLEAN;
    else if (extWidget.hasClass(CLASS_WIDGET_DATE)) return WIDGET_DATE;
    else if (extWidget.hasClass(CLASS_WIDGET_TEXT)) return WIDGET_TEXT;
    else if (extWidget.hasClass(CLASS_WIDGET_LIST)) return WIDGET_LIST;
    else if (extWidget.hasClass(CLASS_WIDGET_TABLE)) return WIDGET_TABLE;
    else if (extWidget.hasClass(CLASS_WIDGET_PICTURE)) return WIDGET_PICTURE;
    else if (extWidget.hasClass(CLASS_WIDGET_FILE)) return WIDGET_FILE;
    else if (extWidget.hasClass(CLASS_WIDGET_NUMBER)) return WIDGET_NUMBER;
    else if (extWidget.hasClass(CLASS_WIDGET_LINK)) return WIDGET_LINK;
    else if (extWidget.hasClass(CLASS_WIDGET_REQUIRED)) return WIDGET_REQUIRED;
    else if (extWidget.hasClass(CLASS_WIDGET_COMPOSITE)) return WIDGET_COMPOSITE;
    else if (extWidget.hasClass(CLASS_WIDGET_FORMULA)) return WIDGET_FORMULA;
    else if (extWidget.hasClass(CLASS_WIDGET_CHECK)) return WIDGET_CHECK;
    else if (extWidget.hasClass(CLASS_WIDGET_DESCRIPTOR)) return WIDGET_DESCRIPTOR;
    else if (extWidget.hasClass(CLASS_WIDGET_NODE)) return WIDGET_NODE;
    else if (extWidget.hasClass(CLASS_WIDGET_SERIAL)) return WIDGET_SERIAL;
    else if (extWidget.hasClass(CLASS_WIDGET_LOCATION)) return WIDGET_LOCATION;
    else if (extWidget.hasClass(CLASS_WIDGET_SUMMATION)) return WIDGET_SUMMATION;
    return null;
  };

  var Type = DOMWidget.getType();
  var Decorator = null;

  if (Type == WIDGET_COMPOSITE) Decorator = new CGDecoratorWidgetComposite();

  if (Decorator != null) Decorator.execute(DOMWidget);
};

CGNodeConstructor = function () {
  this.delayBlur = true;
};

CGNodeConstructor.prototype.initNodes = function (extObject) {
  var DecoratorNode = new CGDecoratorNode();

  if (extObject.hasClass(CLASS_NODE)) DecoratorNode.execute(extObject.dom);

  var aExtNodes = extObject.select(CSS_NODE);
  aExtNodes.each(function (extNode) {
    DecoratorNode.execute(extNode.dom);
  }, this);
};

CGNodeConstructor.prototype.initTasks = function (extObject) {
  var DecoratorTask = new CGDecoratorTask();

  if (extObject.hasClass(CLASS_TASK)) DecoratorTask.execute(extObject.dom);

  var aExtTasks = extObject.select(CSS_TASK);
  aExtTasks.each(function (extTask) {
    DecoratorTask.execute(extTask.dom);
  }, this);
};

CGNodeConstructor.prototype.initSections = function (extObject) {
  var DecoratorSection = new CGDecoratorSection();

  if (extObject.hasClass(CLASS_SECTION)) {
    DecoratorSection.execute(extObject.dom);
  }
  else {
    var aExtSections = extObject.select(CSS_SECTION);
    aExtSections.each(function (extSection) {
      DecoratorSection.execute(extSection.dom);
    }, this);
  }
};

CGNodeConstructor.prototype.initCollections = function (extObject) {
  var DecoratorCollection = new CGDecoratorCollection();

  if (extObject.hasClass(CLASS_COLLECTION)) {
    DecoratorCollection.execute(extObject.dom);
  }
  else {
    var aExtCollections = extObject.select(CSS_COLLECTION);
    aExtCollections.each(function (extCollection) {
      DecoratorCollection.execute(extCollection.dom);
    }, this);
  }
};

CGNodeConstructor.prototype.initNodesReferences = function (extObject) {
  var DecoratorNodeReference = new CGDecoratorNodeReference();
  var DecoratorNode = new CGDecoratorNode();

  if (extObject.hasClass(CLASS_REFERENCE)) {
    DecoratorNode.execute(extObject.dom);
    DecoratorNodeReference.execute(extObject.dom);
  }
  else {
    var aExtNodesReferences = extObject.select(CSS_REFERENCE);
    aExtNodesReferences.each(function (extNodeReference) {
      DecoratorNode.execute(extNodeReference.dom);
      DecoratorNodeReference.execute(extNodeReference.dom);
    }, this);
  }
};

CGNodeConstructor.prototype.initForms = function (extObject) {
  var DecoratorForm = new CGDecoratorForm();

  if (extObject.hasClass(CLASS_FORM)) DecoratorForm.execute(extObject.dom);
  else {
    var aExtNodeForms = extObject.select(CSS_FORM);
    aExtNodeForms.each(function (extNodeForm) {
      DecoratorForm.execute(extNodeForm.dom);
    }, this);
  }
};

CGNodeConstructor.prototype.initFields = function (extObject) {
  var DecoratorField = new CGDecoratorField();

  if (extObject.hasClass(CLASS_FIELD)) DecoratorField.execute(extObject.dom);
  else {
    var aExtFields = extObject.select(CSS_FIELD);
    aExtFields.each(function (extField) {
      DecoratorField.execute(extField.dom);
    }, this);
  }
};

CGNodeConstructor.prototype.initWidgets = function (extObject) {
  var DecoratorWidget = new CGDecoratorWidget();

  if (extObject.hasClass(CLASS_WIDGET)) DecoratorWidget.execute(extObject.dom);
  else {
    var aExtWidgets = extObject.select(CSS_WIDGET);
    aExtWidgets.each(function (extWidget) {
      DecoratorWidget.execute(extWidget.dom);
    }, this);
  }
};

CGNodeConstructor.prototype.initBehaviours = function (extObject) {
  var aBehaviours = extObject.select(".behaviour");
  aBehaviours.each(function (extBehaviour) {
    DOMBehaviour = extBehaviour.dom;
    var extParent = extBehaviour.up(CSS_NODE);
    if (extParent != extObject) return;
    Event.observe(DOMBehaviour, 'click', CGNodeConstructor.prototype.atBehaviourClick.bind(this, extObject.dom, DOMBehaviour));
    if (DOMBehaviour.hasClassName("onfocus")) Event.observe(DOMBehaviour, 'focus', CGNodeConstructor.prototype.atBehaviourFocus.bind(this, DOMBehaviour));
    if (DOMBehaviour.hasClassName("onblur")) Event.observe(DOMBehaviour, 'blur', CGNodeConstructor.prototype.atBehaviourBlur.bind(this, DOMBehaviour));
  }, this);
};

CGNodeConstructor.prototype.initInputs = function (extObject) {
  var aInputs = extObject.select(HTML_INPUT + ".check");

  if (aInputs.getCount() <= 0)
    return;

  var IdObject = (extObject.dom.getControlInfo) ? extObject.dom.getControlInfo().IdNode : null;
  if (extObject.hasClass(CLASS_REFERENCE)) IdObject = extObject.dom.getParentNode().getControlInfo().IdNode;

  aInputs.each(function (Input) {
    Input = Input.dom;
    Event.observe(Input, "click", CGNodeConstructor.prototype.atCheckInputClick.bind(this, IdObject, Input));

    Input.select = function () {
      var eRow = $(this.parentNode.parentNode);
      if (!eRow) return false;

      if (this.checked) {
        Ext.get(eRow).addClass(CLASS_SELECTED);
      }
      else {
        Ext.get(eRow).removeClass(CLASS_SELECTED);
      }
    };

    Input.getIdNode = function () {
      return this.name.replace(INPUT_PREFIX, EMPTY);
    };

  }, this);
};

CGNodeConstructor.prototype.executeFunction = function (extObject) {
  var FunctionInfo = new CGCommandInfo(extObject.dom.innerHTML);
  var aParameters = FunctionInfo.getParameters();

  if (FunctionInfo.getOperation() == "printnodetypecaption") {
    if (aParameters.length == 0) extObject.dom.innerHTML = EMPTY;
    var sCaption = Extension.getDefinitionCaption(aParameters[0]);
    extObject.dom.innerHTML = (aParameters[1]) ? sCaption.toShort(aParameters[1]) : sCaption;
  }
  else if (FunctionInfo.getOperation() == "formatdate") {
    if (aParameters.length == 0) extObject.dom.innerHTML = EMPTY;
    if ((aParameters[0] == null) || (aParameters[0] == "")) extObject.dom.innerHTML = "";
    extObject.dom.innerHTML = getFormattedDate(parseServerDate(aParameters[0]), Context.Config.Language);
  }
  else if (FunctionInfo.getOperation() == "formatdatetime") {
    if (aParameters.length == 0) extObject.dom.innerHTML = EMPTY;
    if ((aParameters[0] == null) || (aParameters[0] == "")) extObject.dom.innerHTML = "";
    extObject.dom.innerHTML = getFormattedDateTime(parseServerDate(aParameters[0]), Context.Config.Language);
  }
  else if (FunctionInfo.getOperation() == "previewnode") {
    if (aParameters.length == 0) extObject.dom.innerHTML = EMPTY;
    if ((aParameters[0] == null) || (aParameters[0] == "")) extObject.dom.innerHTML = "";
    if ((extObject.dom.id == null) || (extObject.dom.id == "")) extObject.dom.id = Ext.id();
    CommandListener.dispatchCommand("previewnode(" + aParameters[0] + "," + extObject.dom.id + ")");
  }
  else if (FunctionInfo.getOperation() == "showonlinemenu") {
    var extOnlineMenu = extObject.up("div").down(".onlinemenu");
    if (extOnlineMenu == null) return;
    var aExtCommands = extOnlineMenu.select("a");
    if (aExtCommands.getCount() == 0) return;
    if (aExtCommands.getCount() == 1) CommandListener.executeCommand(aExtCommands.item(0).dom.href);
    else {
      extOnlineMenu.show();
    }
  }
};

CGNodeConstructor.prototype.executeFunctions = function (extObject) {
  if (extObject.hasClass(CLASS_FUNCTION)) this.executeFunction(extObject);
  else {
    var aExtFunctions = extObject.select(CSS_FUNCTION);
    aExtFunctions.each(function (extFunction) {
      this.executeFunction(extFunction);
    }, this);
  }
};

CGNodeConstructor.prototype.init = function (DOMObject) {
  var extObject = Ext.get(DOMObject);

  if (extObject == null) return;

  if (!extObject.dom.id) extObject.dom.id = Ext.id();
  this.IdObject = extObject.dom.id;

  this.initNodes(extObject);
  this.initTasks(extObject);
  this.initSections(extObject);
  this.initCollections(extObject);
  this.initNodesReferences(extObject);
  this.initForms(extObject);
  this.initFields(extObject);
  this.initWidgets(extObject);
  this.initBehaviours(extObject);
  this.initInputs(extObject);

  this.executeFunctions(extObject);
};

CGNodeConstructor.prototype.addTableViewElementBehaviours = function (DOMItem) {
  var DOMDummy = new Object();
  var Decorator = new CGDecorator();
  Decorator.addCommonMethods(DOMDummy);
  return DOMDummy.addTableViewElementBehaviours(DOMItem);
};

CGNodeConstructor.prototype.atBehaviourClick = function (DOMObject, DOMBehaviour, EventLaunched) {
  var BehaviourInfo = new CGCommandInfo(DOMBehaviour.href);
  var aParameters = BehaviourInfo.getParameters();

  if (BehaviourInfo.getOperation() == "togglesection") {
    var DOMSection = Extension.getDOMNodeSection(aParameters[0]);
    DOMSection.toggle();
  }
  else if (BehaviourInfo.getOperation() == "loadnodereference") {
    var DOMNode = Extension.getDOMNodeReference(aParameters[0], aParameters[1]);
    DOMNode.toggle();
  }
  else if (BehaviourInfo.getOperation() == "scrolltosection") {
    var DOMSection = Extension.getDOMNodeSection(aParameters[0]);
    DOMSection.scrollTo(true);
  }
  else if (BehaviourInfo.getOperation() == "scrolltonodereference") {
    var DOMNode = Extension.getDOMNodeReference(aParameters[0]);
    DOMNode.scrollTo(true);
  }
  else if (BehaviourInfo.getOperation() == "selectnodesreferences") {
    DOMObject = Extension.getDOMNodeSection(aParameters[1]);
    DOMObject.selectNodesReferences(aParameters[0]);
  }
  else if (BehaviourInfo.getOperation() == "changedescriptor") {
    var DOMView = DOMBehaviour;
    if (!DOMView.hasClassName("descriptor")) DOMView = DOMBehaviour.up("descriptor");
    if ((DOMView != null) && (aParameters.length >= 2)) {
      var Descriptor = new Object();
      Descriptor.IdNode = aParameters[0];
      Descriptor.Name = aParameters[1];
      this.showDescriptorDialog(Descriptor, DOMView, aParameters[2]);
    }
  }

  Event.stop(EventLaunched);

  return false;
};

CGNodeConstructor.prototype.atBehaviourFocus = function (DOMBehaviour, EventLaunched) {
  var BehaviourInfo = new CGCommandInfo(DOMBehaviour.href);

  if (BehaviourInfo.getOperation() == "toggleonlinemenu") {
    var extOnlineMenu = Ext.get(DOMBehaviour.up("div").down(".onlinemenu"));
    if (extOnlineMenu == null) return;
    var aExtCommands = extOnlineMenu.select("a");
    if (aExtCommands.getCount() == 0) return;
    if (aExtCommands.getCount() == 1) {
      CommandListener.dispatchCommand(aExtCommands.item(0).dom.href);
    }
    extOnlineMenu.show();
    DOMBehaviour.addClassName("focus");
  }
};

CGNodeConstructor.prototype.atBehaviourBlur = function (DOMBehaviour, EventLaunched) {
  var BehaviourInfo = new CGCommandInfo(DOMBehaviour.href);

  if (BehaviourInfo.getOperation() == "toggleonlinemenu") {
    if (this.delayBlur) {
      this.delayBlur = false;
      window.setTimeout(this.atBehaviourBlur.bind(this, DOMBehaviour, EventLaunched), 150);
      return;
    }
    var extOnlineMenu = Ext.get(DOMBehaviour.up("div").down(".onlinemenu"));
    if (extOnlineMenu == null) return;
    extOnlineMenu.hide();
    DOMBehaviour.removeClassName("focus");
    this.delayBlur = true;
  }
};

CGNodeConstructor.prototype.showDescriptorDialog = function (Descriptor, DOMDescriptorView, ViewMode) {
  var id = Ext.id(), extInput, extAccept;
  var DOMDescriptorDialog;

  if (!DOMDescriptorView.hasClassName("view")) Ext.get(DOMDescriptorView).addClass("view");

  DOMDescriptorDialog = DOMDescriptorView.next(".descriptor.dialogembed");
  if (!DOMDescriptorDialog) {
    new Insertion.After(DOMDescriptorView, "<div class='descriptor dialogembed' id='" + id + "'>" + ((ViewMode == "textarea") ? "<textarea class='textbox'></textarea>" : "<input class='textbox' type='text'/>") + "<a href='javascript:void(null)'>" + Lang.Buttons.Accept + "</a></div>");
    DOMDescriptorDialog = DOMDescriptorView.next(".descriptor.dialogembed");
    DOMDescriptorDialog.Descriptor = Descriptor;
    DOMInput = DOMDescriptorDialog.down(".textbox");
    extInput = Ext.get(DOMInput);
    extInput.on("keypress", this.atDescriptorDialogKeyPress, this);
    DOMAccept = DOMDescriptorDialog.down("a");
    extAccept = Ext.get(DOMAccept);
    extAccept.on("click", this.atDescriptorDialogAccept, this);
  }

  if (!DOMInput) DOMInput = DOMDescriptorDialog.down(".textbox");

  DOMDescriptorView.style.display = "none";
  DOMDescriptorDialog.style.display = "block";

  DOMInput.value = HtmlUtil.decode(DOMDescriptorView.innerHTML);
  DOMInput.focus();
  DOMInput.select();

  CommandListener.capture(DOMDescriptorDialog);
};

CGNodeConstructor.prototype.atDescriptorDialogKeyPress = function (EventLaunched, DOMInput) {
  var codeKey = EventLaunched.getKey();
  var DOMDescriptorDialog = DOMInput.up(".descriptor.dialogembed");
  if (!DOMDescriptorDialog) return;
  if (DOMDescriptorDialog.down(".textbox").value == "") return;
  if (codeKey == EventLaunched.ESC) this.showDescriptorView(DOMDescriptorDialog);
  if (codeKey == EventLaunched.ENTER) {
    var DOMDescriptorView = DOMDescriptorDialog.previous(".descriptor.view");
    var Descriptor = DOMDescriptorDialog.Descriptor;
    var sValue = DOMDescriptorDialog.down(".textbox").value;
    DOMDescriptorView.innerHTML = HtmlUtil.encode(sValue);
    CommandListener.dispatchCommand("savenodedescriptor(" + Descriptor.IdNode + "," + Descriptor.Name + "," + escape(sValue) + ")");
    this.showDescriptorView(DOMDescriptorDialog);
  }
};

CGNodeConstructor.prototype.atDescriptorDialogAccept = function (EventLaunched, DOMAccept) {
  var DOMDescriptorDialog = DOMAccept.up(".descriptor.dialogembed");
  if (!DOMDescriptorDialog) return;
  if (DOMDescriptorDialog.down(".textbox").value == "") return;
  var DOMDescriptorView = DOMDescriptorDialog.previous(".descriptor.view");
  var Descriptor = DOMDescriptorDialog.Descriptor;
  var sValue = DOMDescriptorDialog.down(".textbox").value;
  DOMDescriptorView.innerHTML = HtmlUtil.encode(sValue);
  CommandListener.dispatchCommand("savenodedescriptor(" + Descriptor.IdNode + "," + Descriptor.Name + "," + escape(sValue) + ")");
  this.showDescriptorView(DOMDescriptorDialog);
  Event.stop(EventLaunched);
  return false;
};

CGNodeConstructor.prototype.atShowDescriptorView = function (EventLaunched, DOMInput) {
  var DOMDescriptorDialog = DOMInput.up(".descriptor.dialogembed");
  if (!DOMDescriptorDialog) return;
  this.showDescriptorView(DOMDescriptorDialog);
  Event.stop(EventLaunched);
  return false;
};

CGNodeConstructor.prototype.showDescriptorView = function (DOMDescriptorDialog) {
  var DOMDescriptorView = DOMDescriptorDialog.previous(".descriptor.view");
  DOMDescriptorDialog.style.display = "none";
  if (DOMDescriptorView) {
    DOMDescriptorView.style.display = "";
  }
};

CGNodeConstructor.prototype.atCheckInputClick = function (IdNode, Input, EventLaunched) {
  if (Input.select) Input.select();
  if (this.onSelectNodeReference) this.onSelectNodeReference(IdNode, Input.getIdNode(), Input.checked);
};

CGDecoratorHelperItem = function () {
};

CGDecoratorHelperItem.prototype = new CGDecorator;

CGDecoratorHelperItem.prototype.execute = function (DOMHelperItem) {

  this.addCommonMethods(DOMHelperItem);

  DOMHelperItem.init = function () {
    this.executeOnloadCommands();
    this.initToolbar(".header .content .toolbar");

    this.resize();
    Ext.EventManager.onWindowResize(DOMHelperItem.atWindowResize.bind(this));
  };

  DOMHelperItem.resize = function () {
    var extElement = Ext.get(this);
    var extLayer = extElement.select("div.content").first();
    if (extLayer) {
      var extTabs = extElement.up(".x-tabs-body.x-layout-tabs-body");
      var iHeight = (extTabs != null) ? extTabs.getHeight() : 0;
      var iOffsetHeight = extElement.getHeight() - extLayer.getHeight();
      extLayer.dom.style.height = (iHeight - iOffsetHeight) + "px";
      extLayer.dom.style.overflowY = "auto";
      extLayer.dom.style.overflowX = "hidden";
    }
  };

  DOMHelperItem.executeOnloadCommands = function () {
    var extElement = Ext.get(this);

    var aExtOnloadCommands = extElement.select(CSS_ONLOAD_COMMAND);
    aExtOnloadCommands.each(function (extOnloadCommand) {
      CommandListener.throwCommand(extOnloadCommand.dom.innerHTML);
    }, this);
  };

  // #############################################################################################################

  DOMHelperItem.atWindowResize = function () {
    this.resize();
  };

};

CGDecoratorHelperItemTaskList = function () {
};

CGDecoratorHelperItemTaskList.prototype = new CGDecorator;

CGDecoratorHelperItemTaskList.prototype.execute = function (DOMHelperItem) {

  this.addCommonMethods(DOMHelperItem);

  DOMHelperItem.getId = function () {
    return DOMHelperItem.id;
  };

  DOMHelperItem.init = function () {
    this.initToolbar(".info .toolbar");
    this.initTabs(CSS_TASK_LIST);
  };

  DOMHelperItem.executeOnloadCommands = function () {
    var extElement = Ext.get(this);

    var aExtOnloadCommands = extElement.select(CSS_ONLOAD_COMMAND);
    aExtOnloadCommands.each(function (extOnloadCommand) {
      CommandListener.throwCommand(extOnloadCommand.dom.innerHTML);
    }, this);
  };

  // #############################################################################################################

  DOMHelperItem.atWindowResize = function () {
    this.resize();
  };

};

CGHelperItemConstructor = function () {
};

CGHelperItemConstructor.prototype.getDecorator = function (extObject) {
  if (extObject.hasClass(CLASS_TASK_LIST)) return new CGDecoratorHelperItemTaskList();
  return new CGDecoratorHelperItem();
};

CGHelperItemConstructor.prototype.initTaskListInstances = function (extObject, decorator) {
  if (!extObject.hasClass(CLASS_TASK_LIST)) return;

  var aExtTaskListInstances = extObject.select(CSS_TASK_LIST);
  aExtTaskListInstances.each(function (extInstance) {
    decorator.execute(extInstance.dom);
  }, this);
};

CGHelperItemConstructor.prototype.init = function (DOMObject) {
  var extObject = Ext.get(DOMObject);
  var decorator = this.getDecorator(extObject);

  decorator.execute(extObject.dom);

  this.initTaskListInstances(extObject, decorator);
};

TASK_TAB_ROUTE = "route";
TASK_TAB_HISTORY = "history";
TEMPLATE_TASK_TAB_ID = "#{idtask}_#{idtab}";

CGDecoratorTask = function () {
};

CGDecoratorTask.prototype = new CGDecorator;

CGDecoratorTask.prototype.execute = function (DOMTask) {

  DOMTask.CurrentTab = null;
  this.addCommonMethods(DOMTask);

  DOMTask.init = function () {
    var extTask = Ext.get(this);

    this.initToolbar(".properties .info .header .toolbar");
    this.initTabs(CSS_TASK);

    var extRouteMap = extTask.select(CSS_ROUTE_MAP).first();
    if (extRouteMap) extRouteMap.dom.init();

    this.checkTeamEmpty();
  };

  DOMTask.isStateTabActive = function () {
    var tabId = this.getActiveTab();
    if (tabId == "state") return true;
    return false;
  };

  DOMTask.destroy = function () {
  };

  DOMTask.getId = function () {
    return this.getControlInfo().IdTask;
  };

  DOMTask.getTitle = function () {
    var extTask = Ext.get(this);
    var extTitle = extTask.select(".title .descriptor").first();
    if (extTitle == null) return Context.Config.DefaultLabel;
    return extTitle.dom.innerHTML;
  };

  DOMTask.getStateTitle = function () {
    var extTask = Ext.get(this);
    var extTitle = extTask.select(".state .title").first();
    if (extTitle == null) return Context.Config.DefaultLabel;
    return extTitle.dom.innerHTML;
  };

  DOMTask.clearStateView = function () {
	  var extTask = Ext.get(this);
	  var extView = extTask.select(".state .view").first();

	  if (extView != null)
	    extView.dom.innerHTML = "";
  }

  DOMTask.getControlInfo = function () {
    var extId, extCode, extMode, extGoal, extTimeStamp;
    var aResult = new Array();
    var extTask = Ext.get(this);

    if (this.ControlInfo) return this.ControlInfo;

    this.ControlInfo = new Object();
    this.ControlInfo.IdTask = (extId = extTask.select(CSS_CONTROL_INFO + " > .idtask").first()) ? extId.dom.innerHTML : "-1";
    this.ControlInfo.Code = (extCode = extTask.select(CSS_CONTROL_INFO + " > .code").first()) ? extCode.dom.innerHTML : "-1";
    this.ControlInfo.Mode = (extMode = extTask.select(CSS_CONTROL_INFO + " > .mode").first()) ? extMode.dom.innerHTML : null;
    this.ControlInfo.TimeStamp = (extTimeStamp = extTask.select(CSS_CONTROL_INFO + " > .timestamp").first()) ? extTimeStamp.dom.innerHTML : null;
    this.ControlInfo.Templates = new Object();

    aResult = extTask.select(".tpl.refresh");
    this.ControlInfo.Templates.Refresh = (eResult = aResult.first()) ? eResult.dom.innerHTML : null;

    extGoal = extTask.select(CSS_CONTROL_INFO + " > .goal").first();
    this.ControlInfo.Goal = new Object();
    if (extGoal != null) {
      this.ControlInfo.Goal.Code = extGoal.dom.name;
      this.ControlInfo.Goal.Label = extGoal.dom.value;
    }

    return this.ControlInfo;
  };

  DOMTask.getGoal = function () {
    var ControlInfo = this.getControlInfo();
    return ControlInfo.Goal;
  };

  DOMTask.setGoal = function (Goal) {
    var extTask = Ext.get(this);
    var extGoal = extTask.select(CSS_CONTROL_INFO + " > .goal").first();
    if (extGoal != null) {
      extGoal.dom.name = Goal.Code;
      extGoal.dom.value = Goal.Label;
      this.ControlInfo.Goal = Goal;
    }
  };

  DOMTask.internalGetEmbeddedNodes = function (selector) {
    var aResult = new Array();
    var extTask = Ext.get(this);
    var extNodeList;

    // IMPORTANT. All nodes are embedded
    if (!(extNodeList = extTask.select(selector))) return false;

    extNodeList.each(function (extNode) {
      aResult.push($(extNode.dom));
    }, this);

    return aResult;
  };

  DOMTask.getEmbeddedNodes = function () {
    return this.internalGetEmbeddedNodes(CSS_NODE);
  };

  DOMTask.getEditableEmbeddedNodes = function () {
    return this.internalGetEmbeddedNodes(CSS_NODE + DOT + CLASS_EDITABLE);
  };

  DOMTask.getNode = function (Id) {
    var aResult = new Array();

    var extTask = Ext.get(this);

    if (!(extNodeList = extTask.select(CSS_NODE + "." + Id))) return false;
    if (extNodeList.getCount() == 0) return null;

    return extNodeList.first().dom;
  };

  DOMTask.getRouteMap = function () {
    var extTask = Ext.get(this);
    return extTask.select(CSS_ROUTE_MAP).first().dom;
  };

  DOMTask.isLoaded = function () {
    var extTask = Ext.get(this);
    var extBody = extTask.down(CSS_BODY);
    if (extBody == null) return true;
    return (!extBody.hasClass(CLASS_LOADING));
  };

  DOMTask.loadTab = function (Tab, DOMTab) {
    
  };

  DOMTask.checkTeamEmpty = function () {
    var extTask = Ext.get(this);
    var extTeam = extTask.select(CSS_TASK_TEAM).first();

    if (extTeam == null) return;

    var extUserList = extTeam.select(CSS_TASK_TEAM_USER_LIST).first();
    var extEmpty = extTeam.select(".empty").first();
    var extUsers = extUserList.select("li");

    if (extUsers.getCount() <= 0) {
      if (extEmpty == null) new Insertion.After(extUserList.dom, "<div class='empty'>" + Lang.ViewTask.NoTeam + "</div>");
    }
    else {
      if (extEmpty != null) extEmpty.remove();
    }
  };

  DOMTask.getDOMHistory = function () {
    var extTask = Ext.get(this);
    return extTask.select(CSS_HISTORY_ITEMS).first().dom;
  };

  DOMTask.addHistoryPage = function (sPage, bHasMore) {
    var extTask = Ext.get(this);
    var extHistory = extTask.select(CSS_HISTORY).first();
    extHistory.select(CSS_HISTORY_ITEMS).first().insertHtml('beforeEnd', sPage);
    if (!bHasMore)
      extHistory.select(CSS_HISTORY_MORE).first().dom.style.display = "none";
    CommandListener.capture(this.getDOMHistory());
  };

  DOMTask.getHistoryItemsCount = function () {
    var extTask = Ext.get(this);
    return extTask.select(CSS_HISTORY_ITEMS_CHILDS).getCount();
  };

  DOMTask.switchHistory = function () {
    if (this.historyViewType == VIEW_TASK_HISTORY_EXTENDED) {

      this.historyViewType = VIEW_TASK_HISTORY_COLLAPSED;
    } else if (this.historyViewType == VIEW_TASK_HISTORY_COLLAPSED) {

      this.historyViewType = VIEW_TASK_HISTORY_EXTENDED;
    }
  };
  DOMTask.historyViewType = VIEW_TASK_HISTORY_EXTENDED;
};

CGDecoratorRouteMap = function () {
};

CGDecoratorRouteMap.prototype = new CGDecorator;

CGDecoratorRouteMap.prototype.execute = function (DOMRouteMap) {

  DOMRouteMap.aMemento = null;
  DOMRouteMap.aLinks = null;

  DOMRouteMap.init = function () {
    var extRouteMap = Ext.get(this);
    var extTask = extRouteMap.up(CSS_TASK);
    var aGoals = Extension.getDefinition(extTask.dom.getControlInfo().Type).Goals;

    this.aMemento = new Array();
    this.IndexMemento = -1;
  };

  DOMRouteMap.destroy = function () {
    this.aMemento = new Array();
  };

  DOMRouteMap.focus = function () {
  };

  DOMRouteMap.blur = function () {
  };

  DOMRouteMap.addMemento = function (Memento) {
    var iPos = this.IndexMemento + 1;
    while (iPos < this.aMemento.length) this.aMemento.pop();
    this.aMemento.push(Memento);
    this.IndexMemento = this.aMemento.length - 1;
  };

  DOMRouteMap.undo = function () {
    var Memento, CurrentMemento;

    this.IndexMemento--;

    if (this.IndexMemento < 0) {
      this.IndexMemento = 0;
      return;
    }

    if (this.aMemento.length == 0) return;

    CurrentMemento = this.aMemento[this.IndexMemento + 1];
    Memento = this.aMemento[this.IndexMemento];

    if (Memento == null) return;

    if ((CurrentMemento != null) && (CurrentMemento.id != Memento.id)) {
      this.undo();
      return;
    }
  };

  DOMRouteMap.redo = function () {
    var Memento, CurrentMemento;

    this.IndexMemento++;

    if (this.IndexMemento >= this.aMemento.length) {
      this.IndexMemento = this.aMemento.length - 1;
      return;
    }

    CurrentMemento = this.aMemento[this.IndexMemento - 1];
    Memento = this.aMemento[this.IndexMemento];

    if (Memento == null) return;

    if ((CurrentMemento != null) && (CurrentMemento.id != Memento.id)) {
      this.redo();
      return;
    }
  };

  // #############################################################################################################

};

CGTaskConstructor = function () {
};

CGTaskConstructor.prototype.initNodes = function (extObject) {
  var Constructor = new CGNodeConstructor();
  var aExtNodes = extObject.select(CSS_NODE);
  aExtNodes.each(function (extNode) {
    Constructor.init(extNode.dom);
  }, this);
};

CGTaskConstructor.prototype.initTasks = function (extObject) {
  var Constructor = new CGTaskConstructor();
  var aExtTasks = extObject.select(CSS_TASK);
  aExtTasks.each(function (extTask) {
    Constructor.init(extTask.dom);
  }, this);
};

CGTaskConstructor.prototype.initRouteMap = function (extObject) {
  var DecoratorRouteMap = new CGDecoratorRouteMap();
  var aExtRouteMaps = extObject.select(CSS_ROUTE_MAP);
  aExtRouteMaps.each(function (extRouteMap) {
    DecoratorRouteMap.execute(extRouteMap.dom);
  }, this);
};

CGTaskConstructor.prototype.initWidgets = function (extObject) {
  var DecoratorWidget = new CGDecoratorWidget();

  if (extObject.hasClass(CLASS_WIDGET)) DecoratorWidget.execute(extObject.dom);
  else {
    var aExtWidgets = extObject.select(CSS_WIDGET);
    aExtWidgets.each(function (extWidget) {
      DecoratorWidget.execute(extWidget.dom);
    }, this);
  }
};

CGTaskConstructor.prototype.initBehaviours = function (extObject) {
  var aBehaviours = extObject.select(".behaviour");
  aBehaviours.each(function (Behaviour) {
    Behaviour = Behaviour.dom;
    Event.observe(Behaviour, 'click', CGTaskConstructor.prototype.atBehaviourClick.bind(this, Behaviour));
  }, this);
};

CGTaskConstructor.prototype.executeFunction = function (extObject) {
  var FunctionInfo = new CGCommandInfo(extObject.dom.innerHTML);
  var aParameters = FunctionInfo.getParameters();

  if (FunctionInfo.getOperation() == "printtaskcaption") {
    if (aParameters.length == 0) extObject.dom.innerHTML = EMPTY;
    var sCaption = Extension.getDefinitionCaption(aParameters[0]);
    extObject.dom.innerHTML = (aParameters[1]) ? sCaption.toShort(aParameters[1]) : sCaption;
  }
  else if (FunctionInfo.getOperation() == "formatdate") {
    if (aParameters.length == 0) extObject.dom.innerHTML = EMPTY;
    if ((aParameters[0] == null) || (aParameters[0] == "")) extObject.dom.innerHTML = "";
    extObject.dom.innerHTML = getFormattedDate(parseServerDate(aParameters[0]), Context.Config.Language);
  }
  else if (FunctionInfo.getOperation() == "formatdatetime") {
    if (aParameters.length == 0) extObject.dom.innerHTML = EMPTY;
    if ((aParameters[0] == null) || (aParameters[0] == "")) extObject.dom.innerHTML = "";
    extObject.dom.innerHTML = getFormattedDateTime(parseServerDate(aParameters[0]), Context.Config.Language);
  }
  else if (FunctionInfo.getOperation() == "formattimeleft") {
    if (aParameters.length == 0) extObject.dom.innerHTML = EMPTY;
    if ((aParameters[0] == null) || (aParameters[0] == "")) extObject.dom.innerHTML = "";
    var dtDate = new Date();
    var iMiliseconds = (new Date()).getTime();
    var iTimeLeft = parseInt(aParameters[0]);
    iMiliseconds += (iTimeLeft > 0) ? iTimeLeft : 0;
    dtDate.setTime(iMiliseconds);
    extObject.dom.innerHTML = getFormattedDateTime(dtDate);
  }
};

CGTaskConstructor.prototype.executeFunctions = function (extObject) {
  if (extObject.hasClass(CLASS_FUNCTION)) this.executeFunction(extObject);
  else {
    var aExtFunctions = extObject.select(CSS_FUNCTION);
    aExtFunctions.each(function (extFunction) {
      this.executeFunction(extFunction);
    }, this);
  }
};

CGTaskConstructor.prototype.init = function (DOMObject) {
  var extObject = Ext.get(DOMObject);
  var DecoratorTask = new CGDecoratorTask();

  if (extObject == null) return;
  if (extObject.hasClass(CLASS_TASK)) DecoratorTask.execute(DOMObject);

  this.initNodes(extObject);
  this.initTasks(extObject);
  this.initRouteMap(extObject);
  this.initWidgets(extObject);
  this.initBehaviours(extObject);
  this.executeFunctions(extObject);
};

CGTaskConstructor.prototype.atBehaviourClick = function (DOMBehaviour, EventLaunched) {
  var BehaviourInfo = new CGCommandInfo(DOMBehaviour.href);
  var aParameters = BehaviourInfo.getParameters();

  Event.stop(EventLaunched);

  return false;
};

CGDecoratorTeam = function () {
};

CGDecoratorTeam.prototype = new CGDecorator;

CGDecoratorTeam.prototype.execute = function (DOMTeam) {

  this.addCommonMethods(DOMTeam);

  DOMTeam.init = function () {
    var extTeam = Ext.get(this);

    this.initToolbar(".header .content .toolbar");
    this.initTabs(CSS_TEAM);
  };

  DOMTeam.destroy = function () {
  };

  DOMTeam.getId = function () {
    return DOMTeam.getControlInfo().IdTeam;
  };

  DOMTeam.getControlInfo = function () {
    var extId;
    var aResult = new Array();
    var extTeam = Ext.get(this);

    if (DOMTeam.ControlInfo) return DOMTeam.ControlInfo;

    DOMTeam.ControlInfo = new Object();
    DOMTeam.ControlInfo.IdTeam = (extId = extTeam.select(CSS_CONTROL_INFO + " > .idteam").first()) ? extId.dom.innerHTML : "-1";
    DOMTeam.ControlInfo.Templates = new Object();

    aResult = extTeam.select(".tpl.refresh");
    DOMTeam.ControlInfo.Templates.Refresh = (eResult = aResult.first()) ? eResult.dom.innerHTML : null;

    return DOMTeam.ControlInfo;
  };

  DOMTeam.isLoaded = function () {
    var extTeam = Ext.get(this);
    var extBody = extTeam.down(CSS_BODY);
    if (extBody == null) return true;
    return (!extBody.hasClass(CLASS_LOADING));
  };

};

CGTeamConstructor = function () {
};

CGTeamConstructor.prototype.initBehaviours = function (extObject) {
  var aBehaviours = extObject.select(".behaviour");
  aBehaviours.each(function (Behaviour) {
    Behaviour = Behaviour.dom;
    Event.observe(Behaviour, 'click', CGTeamConstructor.prototype.atBehaviourClick.bind(this, Behaviour));
  }, this);
};

CGTeamConstructor.prototype.initTeams = function (extObject) {
  var Constructor = new CGTeamConstructor();
  var aExtTeams = extObject.select(CSS_TEAM);
  aExtTeams.each(function (extTeam) {
    Constructor.init(extTeam.dom);
  }, this);
};

CGTeamConstructor.prototype.init = function (DOMObject) {
  var extObject = Ext.get(DOMObject);
  var DecoratorTeam = new CGDecoratorTeam();

  if (extObject == null) return;
  if (extObject.hasClass(CLASS_TEAM)) DecoratorTeam.execute(DOMObject);

  this.initTeams(extObject);
  this.initBehaviours(extObject);
};

CGTeamConstructor.prototype.atBehaviourClick = function (DOMBehaviour, EventLaunched) {
  var BehaviourInfo = new CGCommandInfo(DOMBehaviour.href);
  Event.stop(EventLaunched);
  return false;
};



if (window.ActiveXObject && !window.XMLHttpRequest) {
  window.XMLHttpRequest = function () {
    var msxmls = new Array(
        'Msxml2.XMLHttpRequest.5.0',
        'Msxml2.XMLHttpRequest.4.0',
        'Msxml2.XMLHttpRequest.3.0',
        'Msxml2.XMLHttpRequest',
        'Microsoft.XMLHttpRequest',
        'Microsoft.XMLHTTP');
    for (var i = 0; i < msxmls.length; i++)
      try {
        return new ActiveXObject(msxmls[i]);
      } catch (e) {
      }
    return null;
  };
}
;

if (!window.ActiveXObject && window.XMLHttpRequest) {
  window.ActiveXObject = function (type) {
    switch (type.toLowerCase()) {
      case 'microsoft.XMLHttpRequest':
      case 'msxml2.XMLHttpRequest':
      case 'msxml2.XMLHttpRequest.3.0':
      case 'msxml2.XMLHttpRequest.4.0':
      case 'msxml2.XMLHttpRequest.5.0':
        return new XMLHttpRequest();
    }
    return null;
  };
}
;

//--------------------------------------------------------------------------
function Request(sURL) {
  this.sURL = sURL;
  this.sQuery = "";
  this.XMLHttpRequest = new XMLHttpRequest();
};

Request.prototype.onLoad = null;
Request.prototype.onFail = null;

Request.prototype.Add = function (key, value) {
  if (value) this.sQuery += AMP + key + EQUAL + value;
};

Request.prototype.AddForm = function (eForm) {
  var sData = "";
  for (var iPos = 0; iPos < eForm.elements.length; iPos++) {
    var eElement = eForm.elements[iPos];
    switch (eElement.type) {
      case 'text':
      case 'select-one':
      case 'hidden':
      case 'password':
      case 'textarea':
        sData += eElement.name + '=' + escape(utf8Encode(eElement.value)) + '&';
        break;
    }
  }
  this.sQuery += '&' + sData;
};

Request.prototype.Post = function (Data) {
  var sResult;

  this.XMLHttpRequest.open("post", this.sURL + this.sQuery, false);
  this.XMLHttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
  this.XMLHttpRequest.send(Data);

  if (( this.XMLHttpRequest.status == 200) || ( this.XMLHttpRequest.status == 0 )) {
    sResult = this.XMLHttpRequest.responseText;
    if (this.onLoad) this.onLoad(this.sURL, sResult);
  }
  else {
    sResult = null;
    if (this.onFail) this.onFail(this.sURL);
  }

  this.sQuery = "";

  return sResult;
};

Request.prototype.Upload = function (eForm) {
  eForm.method = "post";
  eForm.enctype = "multipart/form-data";
  eForm.action = this.sQuery;
  eForm.submit();
};

function CGDataLink() {
};

CGDataLink.prototype.load = function (sLink, aParameters) {
  var request = new Request(sLink);

  for (var Index in aParameters) {
    if (isFunction(aParameters[Index])) continue;
    request.Add(Index, aParameters[Index]);
  }

  return request.Post();
};

CGDataLink.prototype.loadDefinition = function (aParameters) {
  return this.load(Kernel.getBusinessModelDefinitionLink(), aParameters);
};

CGDataLink.prototype.loadFile = function (aParameters) {
  return this.load(Kernel.getBusinessModelFileLink(), aParameters);
};

CGExtension = function () {
  this.BusinessModel = new CGBusinessModel();
  this.BusinessModel.init(new CGDataLink());
};

CGExtension.prototype.getAllDefinitions = function (Code) {
  if (!this.BusinessModel.getDefinitions) return;

  var aDefinitions, aResult = new Array();

  aDefinitions = this.BusinessModel.getDefinitions(Code);
  if (!aDefinitions) aDefinitions = this.BusinessModel.getDefinitions(DEFAULT);
  if (!aDefinitions) return;

  for (var Index in aDefinitions) {
    if (isFunction(aDefinitions[Index])) continue;
    aResult.push(aDefinitions[Index]);
  }

  return aResult;
};

CGExtension.prototype.getDefinition = function (Code) {
  if (!this.BusinessModel.getDefinition) return;
  return this.BusinessModel.getDefinition(Code);
};

CGExtension.prototype.getDefinitions = function (DOMElement, Code) {
  if (!this.BusinessModel.getDefinitions) return;

  var Definition, aCodeNodes;
  var aDefinitions = this.BusinessModel.getDefinitions(Code);
  var aResult = new Array();

  if (!aDefinitions) aDefinitions = this.BusinessModel.getDefinitions(DEFAULT);
  if (!aDefinitions) return;

  if ((aCodeNodes = this.getDOMElementCodeNodes(DOMElement)) == false) return aResult;

  for (var Index in aCodeNodes) {
    if (isFunction(aCodeNodes[Index])) continue;
    if ((Definition = aDefinitions[aCodeNodes[Index]]) == null) continue;
    aResult.push(Definition);
  }

  return aResult;
};

CGExtension.prototype.getTaskDefinitions = function () {
  var aDefinitions, aResult;

  if (!this.BusinessModel.getTaskDefinitions) return;

  aResult = new Array();
  aDefinitions = this.BusinessModel.getTaskDefinitions();

  for (var Index in aDefinitions) {
    if (isFunction(aDefinitions[Index])) continue;
    aResult.push(aDefinitions[Index]);
  }

  return aResult;
};

CGExtension.prototype.isDefinitionComponent = function (Code) {
  var Definition = this.getDefinition(Code);
  if (Definition == null) return false;
  return Definition.IsComponent;
};

CGExtension.prototype.getDefinitionCaption = function (Code) {
  if (!this.BusinessModel.getDefinitionCaption) return EMPTY;
  var sCaption = this.BusinessModel.getDefinitionCaption(Code);
  return (sCaption) ? sCaption : EMPTY;
};

CGExtension.prototype.getDefinitionViews = function (DOMElement, Code, Type) {
  var Mode;

  if (!this.BusinessModel.getDefinitionViews) return;
  if ((Mode = this.getDOMElementMode(DOMElement)) == false) return false;

  var DefinitionViews = this.BusinessModel.getDefinitionViews(Code, Type);
  if (!DefinitionViews) DefinitionViews = this.BusinessModel.getDefinitionViews(DEFAULT, Type);
  if (!DefinitionViews) return;

  return DefinitionViews[Mode];
};

CGExtension.prototype.getDefinitionDefaultView = function (Code, Type) {
  if (!this.BusinessModel.getDefinitionViews) return;

  var aDefinitions = this.BusinessModel.getDefinitionViews(Code, Type);
  if (!aDefinitions) DefinitionViewList = this.BusinessModel.getDefinitionViews(DEFAULT, Type);
  if (!aDefinitions) return;

  return aDefinitions[DEFAULT_MODE][DEFAULT];
};

CGExtension.prototype.getDefinitionBehaviour = function (Code) {
  if (!this.BusinessModel.getDefinitionBehaviour) return;

  var Behaviour = this.BusinessModel.getDefinitionBehaviour(Code);
  if (!Behaviour) Behaviour = this.BusinessModel.getDefinitionBehaviour(DEFAULT);

  return Behaviour;
};

CGExtension.prototype.isDefinitionExportable = function (Code) {
  var Behaviour;
  if (!(Behaviour = this.getDefinitionBehaviour(Code))) return;
  return (Behaviour.Export != null);
};

CGExtension.prototype.getNodeConstructor = function () {
  return new CGNodeConstructor();
};

CGExtension.prototype.getEditNodeConstructor = function () {
  return new CGNodeConstructor();
};

CGExtension.prototype.getTaskConstructor = function () {
  return new CGTaskConstructor();
};

CGExtension.prototype.getHelperItemConstructor = function () {
  return new CGHelperItemConstructor();
};

CGExtension.prototype.getTeamConstructor = function () {
  return new CGTeamConstructor();
};

CGExtension.prototype.getDOMNode = function (IdNode) {
  return $(NODE_ID_PREFIX + IdNode);
};

CGExtension.prototype.getDOMNodeSection = function (IdSection) {
  return $(SECTION_ID_PREFIX + IdSection);
};

CGExtension.prototype.getDOMNodeReference = function (IdNodeReference) {
  return $(NODEREFERENCE_ID_PREFIX + IdNodeReference);
};

CGExtension.prototype.getDOMNodeCollection = function (DOMCommand) {
  var extCommand = Ext.get(DOMCommand);
  var extElement = extCommand.up(CSS_COLLECTION);
  if (extElement) return extElement.dom;
  return null;
};

CGExtension.prototype.isDOMNodeCollection = function (DOMNode) {
  return DOMNode.hasClassName(CLASS_COLLECTION);
};

CGExtension.prototype.getDOMNodeForm = function (DOMCommand) {
  var extCommand = Ext.get(DOMCommand);
  var extElement = extCommand.up(CSS_FORM);
  if (extElement) return extElement.dom;
  return null;
};

CGExtension.prototype.isDOMNodeForm = function (DOMNode) {
  return DOMNode.hasClassName(CLASS_FORM);
};

CGExtension.prototype.getDOMTask = function (DOMCommand) {
  var extCommand = Ext.get(DOMCommand);
  var extElement = extCommand.up(CSS_TASK);
  if (extElement) return extElement.dom;
  return null;
};

CGExtension.prototype.getDOMTeam = function (DOMCommand) {
  var extCommand = Ext.get(DOMCommand);
  var extElement = extCommand.up(CSS_TEAM);
  if (extElement) return extElement.dom;
  return null;
};

CGExtension.prototype.getDOMElementMode = function (DOMElement) {
  var Mode = DOMElement.getControlInfo().Mode;
  return (Mode != null) ? Mode : false;
};

CGExtension.prototype.getDOMElementCodeNodes = function (DOMElement) {
  var sNodes = DOMElement.getControlInfo().Nodes;
  return (sNodes != null) ? sNodes.split(CONTROL_INFO_SECTION_NODES_SEPARATOR) : false;
};

CGExtension.prototype.getTaskIdInput = function (DOMRootNode) {
  if (!this.BusinessModel.getTaskIdInput) return null;
  return this.BusinessModel.getTaskIdInput(DOMRootNode);
};

//----------------------------------------------------------------------
// BPI Process
//----------------------------------------------------------------------
function CGBPIProcess(iNumSteps) {
  this.base = CGProcess;
  this.base(iNumSteps);
};

CGBPIProcess.prototype = new CGProcess;
CGBPIProcess.constructor = CGBPIProcess;

//----------------------------------------------------------------------
// Process Dispatch
//----------------------------------------------------------------------
function CGProcessBPIDispatch() {
  this.base = CGProcess;
  this.base(2);
};

CGProcessBPIDispatch.prototype = new CGProcess;
CGProcessBPIDispatch.constructor = CGProcessBPIDispatch;

CGProcessBPIDispatch.prototype.onFailure = function (sResponse) {
  this.terminateOnFailure(sResponse);
};

CGProcessBPIDispatch.prototype.step_1 = function () {
  if (this.Process == null) return;

  this.Process.ReturnProcess = this;
  this.Process.execute();
};

CGProcessBPIDispatch.prototype.step_2 = function () {
  this.Callback(this.Process.Result);
  this.terminateOnSuccess();
};

function CGBPINodeReference(NodeReference) {
  this.NodeReference = NodeReference;
};

//---------------------------------------------------------------------
CGBPINodeReference.prototype.getLabel = function () {
  return this.NodeReference.getLabel();
};

//---------------------------------------------------------------------
CGBPINodeReference.prototype.setLabel = function (sValue) {
  return this.NodeReference.setLabel(sValue);
};

//---------------------------------------------------------------------
CGBPINodeReference.prototype.getDescription = function () {
  return this.NodeReference.getDescription();
};

//---------------------------------------------------------------------
CGBPINodeReference.prototype.setDescription = function (sValue) {
  return this.NodeReference.setDescription(sValue);
};

//---------------------------------------------------------------------
CGBPINodeReference.prototype.getAttributeValue = function (code) {
  return this.NodeReference.getAttributeValue(code);
};

//---------------------------------------------------------------------
CGBPINodeReference.prototype.setAttributeValue = function (code, sValue) {
  return this.NodeReference.setAttributeValue(code, sValue);
};

BPIFieldsFactory = new Object();
BPIFieldsFactory.aItems = new Array();

//---------------------------------------------------------------------
BPIFieldsFactory.register = function (Type, sClassName) {
  BPIFieldsFactory.aItems[Type] = sClassName;
};

//---------------------------------------------------------------------
BPIFieldsFactory.get = function (Type, DOMField, CodeDefinition) {
  var BPIField;
  if (BPIFieldsFactory.aItems[Type] == null) return null;
  eval("BPIField = new " + BPIFieldsFactory.aItems[Type] + "(DOMField)");
  BPIField.setCodeDefinition(CodeDefinition);
  return BPIField;
};

function CGBPINode(Node, DOMNode) {
  this.CodeDefinition = Node.Code;
  this.IdParent = Node.getIdParent();
  this.BPIReference = new CGBPINodeReference(Node.getReference());
  this.DOMNode = DOMNode;
};

//---------------------------------------------------------------------
// PRIVATE
CGBPINode.prototype.getFieldCode = function (sName) {
  var Definition = Extension.getDefinition(this.CodeDefinition);
  return Definition.FieldsNames[sName];
};

//---------------------------------------------------------------------
// PUBLIC
CGBPINode.prototype.getId = function () {
  return this.DOMNode.getIdNode();
};

//---------------------------------------------------------------------
CGBPINode.prototype.getIdParent = function () {
  return this.IdParent;
};

//---------------------------------------------------------------------
CGBPINode.prototype.getParent = function () {
  var ParentNode = NodesCache.get(this.IdParent);
  var DOMParent = this.DOMNode.getParentNode();
  return new CGBPINode(ParentNode, DOMParent);
};

//---------------------------------------------------------------------
CGBPINode.prototype.getReference = function () {
  return this.BPIReference;
};

//---------------------------------------------------------------------
CGBPINode.prototype.getLabel = function () {
  return this.BPIReference.getLabel();
};

//---------------------------------------------------------------------
CGBPINode.prototype.getDescription = function () {
  return this.BPIReference.getDescription();
};

//---------------------------------------------------------------------
CGBPINode.prototype.getChildNodeId = function (code) {
  return this.DOMNode.getChildNodeId();
};

//---------------------------------------------------------------------
CGBPINode.prototype.getFields = function (sName) {
  var BPIFields = new Array(), Code, DOMFields;

  Code = this.getFieldCode(sName);
  if (Code == null) Code = sName;

  DOMFields = this.DOMNode.getFieldsByCode(Code);

  for (var i = 0; i < DOMFields.length; i++)
    BPIFields.push(BPIFieldsFactory.get(DOMFields[i].getType(), DOMFields[i], this.CodeDefinition));

  return BPIFields;
};

//---------------------------------------------------------------------
CGBPINode.prototype.getField = function (sName) {
  var Code, DOMField, BPIField;

  Code = this.getFieldCode(sName);
  if (Code == null) Code = sName;

  DOMField = this.DOMNode.getField(Code);
  if (!DOMField) return false;

  BPIField = BPIFieldsFactory.get(DOMField.getType(), DOMField, this.CodeDefinition);

  return (BPIField) ? BPIField : false;
};

//---------------------------------------------------------------------
CGBPINode.prototype.isFieldEqualsTo = function (Code, Value) {
  var DOMField = this.DOMNode.getField(Code);
  if (!DOMField) return false;
  return DOMField.isEqualsTo(Value);
};

//---------------------------------------------------------------------
CGBPINode.prototype.isFieldGT = function (Code, Value) {
  var BPIField = this.getField(Code);
  if (!BPIField) return false;
  return BPIField.getValue() > Value;
};

//---------------------------------------------------------------------
CGBPINode.prototype.isFieldGE = function (Code, Value) {
  var BPIField = this.getField(Code);
  if (!BPIField) return false;
  return BPIField.getValue() >= Value;
};

//---------------------------------------------------------------------
CGBPINode.prototype.isFieldLT = function (Code, Value) {
  var BPIField = this.getField(Code);
  if (!BPIField) return false;
  return BPIField.getValue() < Value;
};

//---------------------------------------------------------------------
CGBPINode.prototype.isFieldLE = function (Code, Value) {
  var BPIField = this.getField(Code);
  if (!BPIField) return false;
  return BPIField.getValue() <= Value;
};

//---------------------------------------------------------------------
CGBPINode.prototype.isEditable = function () {
  return this.DOMNode.isEditable();
};

//---------------------------------------------------------------------
CGBPINode.prototype.showView = function (Code) {
  var DOMContainer, ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, this.DOMNode.IdView);
  if (ViewNode.ViewContainer != null) DOMContainer = ViewNode.ViewContainer.getDOM();
  else DOMContainer = this.DOMNode;
  DOMContainer.showTab(Code);
};

//---------------------------------------------------------------------
CGBPINode.prototype.hideView = function (Code) {
  var DOMContainer, ViewNode = Desktop.Main.Center.Body.getView(VIEW_NODE, this.DOMNode.IdView);
  if (ViewNode.ViewContainer != null) DOMContainer = ViewNode.ViewContainer.getDOM();
  else DOMContainer = this.DOMNode;
  DOMContainer.hideTab(Code);
};

//---------------------------------------------------------------------
CGBPINode.prototype.lockView = function (Code) {
  this.DOMNode.lockTab(Code);
};

//---------------------------------------------------------------------
CGBPINode.prototype.unLockView = function (Code) {
  this.DOMNode.unLockTab(Code);
};

//---------------------------------------------------------------------
CGBPINode.prototype.showOperation = function (sName) {
  this.DOMNode.showOperation(sName);
};

//---------------------------------------------------------------------
CGBPINode.prototype.hideOperation = function (sName) {
  this.DOMNode.hideOperation(sName);
};

function CGBPIField(DOMField) {
  this.DOMField = DOMField;
  this.CodeDefinition = null;
};

//---------------------------------------------------------------------
CGBPIField.getClassName = function (Type) {
  if (Type == FIELD_TYPE_SELECT) return "CGBPIFieldSelect";
  else if (Type == FIELD_TYPE_BOOLEAN) return "CGBPIFieldBoolean";
  else if (Type == FIELD_TYPE_DATE) return "CGBPIFieldDate";
  else if (Type == FIELD_TYPE_TEXT) return "CGBPIFieldText";
  else if (Type == FIELD_TYPE_PICTURE) return "CGBPIFieldPicture";
  else if (Type == FIELD_TYPE_FILE) return "CGBPIFieldFile";
  else if (Type == FIELD_TYPE_NUMBER) return "CGBPIFieldNumber";
  else if (Type == FIELD_TYPE_COMPOSITE) return "CGBPIFieldComposite";
  else if (Type == FIELD_TYPE_LINK) return "CGBPIFieldLink";
  else if (Type == FIELD_TYPE_FORMULA) return "CGBPIFieldFormula";
  else if (Type == FIELD_TYPE_CHECK) return "CGBPIFieldCheck";
  else if (Type == FIELD_TYPE_NODE) return "CGBPIFieldNode";
  else if (Type == FIELD_TYPE_SERIAL) return "CGBPIFieldSerial";
  else if (Type == FIELD_TYPE_LOCATION) return "CGBPIFieldLocation";
  else if (Type == FIELD_TYPE_SUMMATION) return "CGBPIFieldSummation";
  return null;
};

//---------------------------------------------------------------------
CGBPIField.prototype.setCodeDefinition = function (CodeDefinition) {
  this.CodeDefinition = CodeDefinition;
};

//---------------------------------------------------------------------
CGBPIField.prototype.getCode = function () {
  return this.DOMField.getCode();
};

//---------------------------------------------------------------------
CGBPIField.prototype.getLabel = function () {
  var Info = this.DOMField.getInfo();
  return Info.Title;
};

//---------------------------------------------------------------------
CGBPIField.prototype.getDescription = function () {
  var Info = this.DOMField.getInfo();
  return Info.Description;
};

//---------------------------------------------------------------------
CGBPIField.prototype.getHelp = function () {
  var Info = this.DOMField.getInfo();
  return Info.eHelp;
};

//---------------------------------------------------------------------
CGBPIField.prototype.getMessage = function () {
  var Info = this.DOMField.getInfo();
  return Info.iHelp;
};

//---------------------------------------------------------------------
CGBPIField.prototype.isVisible = function () {
  return this.DOMField.isVisible();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isRequired = function () {
  return this.DOMField.isRequired();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isExtended = function () {
  return this.DOMField.isExtended();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isMultiple = function () {
  return this.DOMField.isMultiple();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isSelect = function () {
  return this.DOMField.isSelect();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isBoolean = function () {
  return this.DOMField.isBoolean();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isDate = function () {
  return this.DOMField.isDate();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isText = function () {
  return this.DOMField.isText();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isPicture = function () {
  return this.DOMField.isPicture();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isFile = function () {
  return this.DOMField.isFile();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isNumber = function () {
  return this.DOMField.isNumber();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isComposite = function () {
  return this.DOMField.isComposite();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isLink = function () {
  return this.DOMField.isLink();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isFormula = function () {
  return this.DOMField.isFormula();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isCheck = function () {
  return this.DOMField.isCheck();
};

//---------------------------------------------------------------------
CGBPIField.prototype.isEqualsTo = function (Value) {
  return this.DOMField.isEqualsTo(Value);
};

//---------------------------------------------------------------------
CGBPIField.prototype.isGT = function (Value) {
  return this.getValue() > Value;
};

//---------------------------------------------------------------------
CGBPIField.prototype.isGE = function (Value) {
  return this.getValue() >= Value;
};

//---------------------------------------------------------------------
CGBPIField.prototype.isLT = function (Value) {
  return this.getValue() < Value;
};

//---------------------------------------------------------------------
CGBPIField.prototype.isLE = function (Value) {
  return this.getValue() <= Value;
};

//---------------------------------------------------------------------
CGBPIField.prototype.getIndicator = function (Code) {
  var Attribute = new CGAttribute();
  Attribute.unserialize(this.DOMField.getData());
  return Attribute.getIndicator(Code);
};

//---------------------------------------------------------------------
CGBPIField.prototype.getIndicatorValue = function (Code) {
  var Indicator = this.getIndicator(Code);
  return (Indicator) ? Indicator.getValue() : "";
};

//---------------------------------------------------------------------
CGBPIField.prototype.getValue = function () {
  var Indicator = this.getIndicator(CGIndicator.VALUE);
  return (Indicator) ? Indicator.getValue() : "";
};

//---------------------------------------------------------------------
CGBPIField.prototype.setValue = function (sValue) {
  var Attribute = new CGAttribute();

  Attribute.code = this.getCode();
  Attribute.addIndicatorByValue(CGIndicator.VALUE, 1, sValue);

  this.DOMField.setData(Attribute.serialize());
};

//---------------------------------------------------------------------
CGBPIField.prototype.getBrother = function (Code) {
  var brother = this.DOMField.getBrother(Code);
  if (!brother) return false;
  var BPIField = BPIFieldsFactory.get(brother.getType(), brother, this.CodeDefinition);
  return (BPIField) ? BPIField : false;
};

//---------------------------------------------------------------------
CGBPIField.prototype.show = function () {
  this.DOMField.show();
};

//---------------------------------------------------------------------
CGBPIField.prototype.hide = function () {
  this.DOMField.hide();
};

//---------------------------------------------------------------------
CGBPIField.prototype.lock = function () {
  this.DOMField.lock();
};

//---------------------------------------------------------------------
CGBPIField.prototype.unLock = function () {
  this.DOMField.unLock();
};

//---------------------------------------------------------------------
CGBPIField.prototype.expand = function () {
  this.DOMField.expand();
};

//---------------------------------------------------------------------
CGBPIField.prototype.collapse = function () {
  this.DOMField.collapse();
};

//---------------------------------------------------------------------
CGBPIField.prototype.serialize = function () {
  return this.DOMField.getData();
};

//---------------------------------------------------------------------
CGBPIField.prototype.unserialize = function (sData) {
  this.DOMField.setData(sData);
};

function CGBPIFieldBoolean(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldBoolean.prototype = new CGBPIField;

//---------------------------------------------------------------------
CGBPIFieldBoolean.prototype.isTrue = function () {
  return this.getValue();
};

//---------------------------------------------------------------------
CGBPIFieldBoolean.prototype.getValue = function () {
  var Attribute = new CGAttribute();
  var Indicator;

  Attribute.unserialize(this.DOMField.getData());
  Indicator = Attribute.getIndicator(CGIndicator.CODE);

  if (Indicator == null) return "false";

  return (Indicator.getValue() == "true") ? "true" : "false";
};

//---------------------------------------------------------------------
CGBPIFieldBoolean.prototype.setValue = function (bValue) {
  var Attribute = new CGAttribute();

  Attribute.code = this.getCode();
  Attribute.addIndicatorByValue(CGIndicator.CODE, 1, (bValue) ? "true" : "false");
  Attribute.addIndicatorByValue(CGIndicator.VALUE, 2, (bValue) ? "X" : "");

  this.DOMField.setData(Attribute.serialize());
};

//---------------------------------------------------------------------
CGBPIFieldBoolean.prototype.toggle = function () {
  this.setValue(!this.getValue());
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_BOOLEAN, "CGBPIFieldBoolean");

function CGBPIFieldDate(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldDate.prototype = new CGBPIField;

//---------------------------------------------------------------------
CGBPIFieldDate.prototype.getInternalDate = function () {
  var sDate = this.getInternalValue();
  return Date.parseDate(sDate, DATE_FORMAT_INTERNAL);
};

//---------------------------------------------------------------------
CGBPIFieldDate.prototype.getInternalValue = function () {
  var Indicator = this.getIndicator(CGIndicator.INTERNAL);
  return (Indicator) ? Indicator.getValue() : "";
};

//---------------------------------------------------------------------
CGBPIFieldDate.prototype.setValue = function (sValue) {
  var Attribute = new CGAttribute();
  var Pattern = Date.getPattern(this.DOMField.getFormat());
  var sInternalDate, dtInternalDate;

  dtInternalDate = Date.parseDate(sValue, Pattern);
  sInternalDate = (dtInternalDate) ? dtInternalDate.format(DATE_FORMAT_INTERNAL) : "";

  Attribute.code = this.getCode();
  Attribute.addIndicatorByValue(CGIndicator.VALUE, -1, sValue);
  Attribute.addIndicatorByValue(CGIndicator.INTERNAL, -1, sInternalDate);

  this.DOMField.setData(Attribute.serialize());
};

//---------------------------------------------------------------------
CGBPIFieldDate.prototype.format = function (SelectType, sInternalDate) {
  var dtInternalDate = Date.parseDate(sInternalDate, DATE_FORMAT_INTERNAL);
  var Pattern = Date.getPattern(SelectType);
  return dtInternalDate.format(Pattern);
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_DATE, "CGBPIFieldDate");

function CGBPIFieldFile(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldFile.prototype = new CGBPIField;

//---------------------------------------------------------------------
CGBPIFieldFile.prototype.setValue = function (sValue) {
  var Attribute = new CGAttribute();

  Attribute.code = this.getCode();
  Attribute.addIndicatorByValue(CGIndicator.VALUE, 1, sValue);
  Attribute.addIndicatorByValue(CGIndicator.FORMAT, 2, getFileExtension(sValue).toUpperCase());

  this.DOMField.setData(Attribute.serialize());
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_FILE, "CGBPIFieldFile");

function CGBPIFieldLink(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldLink.prototype = new CGBPIField;

//---------------------------------------------------------------------
CGBPIFieldLink.prototype.getValueCode = function () {
  var Attribute = new CGAttribute();
  var IndicatorCode, IndicatorNodeLink;
  var Code = "";

  Attribute.unserialize(this.DOMField.getData());

  IndicatorCode = Attribute.getIndicator(CGIndicator.CODE);
  if ((IndicatorCode != null) && (IndicatorCode.getValue() != "")) Code = IndicatorCode.getValue();
  else {
    IndicatorNodeLink = Attribute.getIndicator(CGIndicator.NODE_LINK);
    if (IndicatorNodeLink) Code = IndicatorNodeLink.getValue();
  }

  return Code;
};

//---------------------------------------------------------------------
CGBPIFieldLink.prototype.getValueAndCode = function () {
  var Attribute = new CGAttribute();
  var IndicatorCode, IndicatorOther, IndicatorValue;
  var Result = new Object();

  Attribute.unserialize(this.DOMField.getData());

  IndicatorCode = Attribute.getIndicator(CGIndicator.CODE);
  if ((IndicatorCode != null) && (IndicatorCode.getValue() != "")) Result.Code = IndicatorCode.getValue();
  else {
    IndicatorNodeLink = Attribute.getIndicator(CGIndicator.NODE_LINK);
    if (IndicatorNodeLink) Result.Code = IndicatorNodeLink.getValue();
    else Result.Code = "";
  }

  IndicatorValue = Attribute.getIndicator(CGIndicator.VALUE);
  if (IndicatorValue != null) Result.Value = IndicatorValue.getValue();

  return Result;
};

//---------------------------------------------------------------------
CGBPIFieldLink.prototype.setValue = function (Code, sValue) {
  var Attribute = new CGAttribute();

  Attribute.code = this.getCode();
  Attribute.addIndicatorByValue(CGIndicator.CODE, 1, Code);
  Attribute.addIndicatorByValue(CGIndicator.VALUE, 2, sValue);
  Attribute.addIndicatorByValue(CGIndicator.NODE_LINK, 3, Code);

  this.DOMField.setData(Attribute.serialize());
};

//---------------------------------------------------------------------
CGBPIFieldLink.prototype.getLinkId = function () {
  return this.getValueCode();
};

//---------------------------------------------------------------------
CGBPIFieldLink.prototype.setParameter = function (Code, sValue) {
  this.DOMField.setParameter(Code, sValue);
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_LINK, "CGBPIFieldLink");

function CGBPIFieldNode(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldNode.prototype = new CGBPIField;

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_NODE, "CGBPIFieldNode");

function CGBPIFieldSerial(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldSerial.prototype = new CGBPIField;

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_SERIAL, "CGBPIFieldSerial");

function CGBPIFieldLocation(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldLocation.prototype = new CGBPIField;

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_LOCATION, "CGBPIFieldLocation");

function CGBPIFieldSummation(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldSummation.prototype = new CGBPIField;

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_SUMMATION, "CGBPIFieldSummation");

function CGBPIFieldNumber(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldNumber.prototype = new CGBPIField;

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.getRange = function () {
  return this.DOMField.getRange();
};

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.getIncrements = function () {
  return this.DOMField.getIncrements();
};

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.getDefaultMetric = function () {
  return this.DOMField.getDefaultMetric();
};

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.getFormat = function () {
  return this.DOMField.getFormat();
};

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.getValue = function () {
  var Attribute = new CGAttribute();
  var Indicator, sValue;

  Attribute.unserialize(this.DOMField.getData());
  Indicator = Attribute.getIndicator(CGIndicator.VALUE);

  if (Indicator) {
    sValue = Indicator.getValue().replace(/\./g, EMPTY);
    return parseFloat(sValue.replace(COMMA, DOT));
  }

  return 0;
};

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.setValue = function (iValue) {
  var Attribute = new CGAttribute();
  var sValue = this.DOMField.format(iValue + '');
  if (!sValue) return false;

  Attribute.code = this.getCode();
  Attribute.addIndicatorByValue(CGIndicator.VALUE, 1, iValue);
  Attribute.addIndicatorByValue(CGIndicator.METRIC, 2, this.getDefaultMetric().value);

  this.DOMField.setData(Attribute.serialize());
};

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.getIntegerPart = function () {
  var sNumber = this.getValue() + '';
  var iPos;

  iPos = sNumber.indexOf(COMMA);
  if (iPos == -1) iPos = sNumber.indexOf(DOT);
  if (iPos == -1) return sNumber;

  return sNumber.substr(0, iPos);
};

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.getDecimalPart = function () {
  var sNumber = this.getValue() + '';
  var iPos;

  iPos = sNumber.indexOf(COMMA);
  if (iPos == -1) iPos = sNumber.indexOf(DOT);
  if (iPos == -1) return "";

  return sNumber.substr(iPos + 1, sNumber.length - iPos + 1);
};

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.isEven = function () {
  var iIntegerPart;

  try {
    iIntegerPart = parseInt(this.getIntegerPart());
  }
  catch (e) {
    return false;
  }

  return ((iIntegerPart % 2) == 0);
};

//---------------------------------------------------------------------
CGBPIFieldNumber.prototype.isValidRange = function () {
  return this.DOMField.isValidRange(this.getValue());
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_NUMBER, "CGBPIFieldNumber");

function CGBPIFieldPicture(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldPicture.prototype = new CGBPIField;

//---------------------------------------------------------------------
CGBPIFieldPicture.prototype.getSize = function () {
  return this.DOMField.getSize();
};

//---------------------------------------------------------------------
CGBPIFieldPicture.prototype.setValue = function (sValue) {
  var Attribute = new CGAttribute();

  Attribute.code = this.getCode();
  Attribute.addIndicatorByValue(CGIndicator.VALUE, 1, sValue);
  Attribute.addIndicatorByValue(CGIndicator.FORMAT, 2, getFileExtension(sValue).toUpperCase());

  this.DOMField.setData(Attribute.serialize());
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_PICTURE, "CGBPIFieldPicture");

function CGBPIFieldComposite(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldComposite.prototype = new CGBPIField;

//---------------------------------------------------------------------
// PRIVATE
CGBPIFieldComposite.prototype.getFieldCode = function (sName) {
  var Definition = Extension.getDefinition(this.CodeDefinition);
  return Definition.FieldsNames[sName];
};

//---------------------------------------------------------------------
// PUBLIC
CGBPIFieldComposite.prototype.isExtensible = function () {
  return this.DOMField.isExtensible();
};

//---------------------------------------------------------------------
CGBPIFieldComposite.prototype.isConditional = function () {
  return this.DOMField.isConditional();
};

//---------------------------------------------------------------------
CGBPIFieldComposite.prototype.getFields = function (sName) {
  var BPIFields = new Array(), Code, DOMFields;

  Code = this.getFieldCode(sName);
  if (Code == null) Code = sName;

  DOMFields = this.DOMField.getFieldsByCode(Code);

  for (var i = 0; i < DOMFields.length; i++)
    BPIFields.push(BPIFieldsFactory.get(DOMFields[i].getType(), DOMFields[i], this.CodeDefinition));

  return BPIFields;
};

//---------------------------------------------------------------------
CGBPIFieldComposite.prototype.getField = function (sName) {
  var Code, DOMField, BPIField;

  Code = this.getFieldCode(sName);
  if (Code == null) Code = sName;

  DOMField = this.DOMField.getField(Code);
  if (!DOMField) return false;

  BPIField = BPIFieldsFactory.get(DOMField.getType(), DOMField, this.CodeDefinition);

  return (BPIField) ? BPIField : false;
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_COMPOSITE, "CGBPIFieldComposite");

function CGBPIFieldSelect(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldSelect.prototype = new CGBPIField;

//---------------------------------------------------------------------
CGBPIFieldSelect.prototype.allowOthers = function () {
  return this.DOMField.allowOthers();
};

//---------------------------------------------------------------------
CGBPIFieldSelect.prototype.getCodeOnOthers = function () {
  return this.DOMField.getCodeOnOthers();
};

//---------------------------------------------------------------------
CGBPIFieldSelect.prototype.getValue = function () {
  var Attribute = new CGAttribute();
  var IndicatorCode, Indicator;
  var sFieldData = this.DOMField.getData();

  if (sFieldData == "") return "";
  Attribute.unserialize(sFieldData);

  IndicatorCode = Attribute.getIndicator(CGIndicator.CODE);
  Indicator = (IndicatorCode.getValue() == this.getCodeOnOthers()) ? Attribute.getIndicator(CGIndicator.OTHER) : Attribute.getIndicator(CGIndicator.VALUE);

  return (Indicator) ? Indicator.getValue() : "";
};

//---------------------------------------------------------------------
CGBPIFieldSelect.prototype.getValueCode = function () {
  var Indicator = this.getIndicator(CGIndicator.CODE);
  return (Indicator) ? Indicator.getValue() : "";
};

//---------------------------------------------------------------------
CGBPIFieldSelect.prototype.getValueAndCode = function () {
  var Attribute = new CGAttribute();
  var IndicatorCode, Indicator;
  var Result = new Object();

  Attribute.unserialize(this.DOMField.getData());

  IndicatorCode = Attribute.getIndicator(CGIndicator.CODE);
  if (IndicatorCode != null) Result.Code = IndicatorCode.getValue();

  Indicator = (IndicatorCode.getValue() == this.getCodeOnOthers()) ? Attribute.getIndicator(CGIndicator.OTHER) : Attribute.getIndicator(CGIndicator.VALUE);
  if (Indicator) Result.Value = Indicator.getValue();
  else Result.Value = "";

  return Result;
};

//---------------------------------------------------------------------
CGBPIFieldSelect.prototype.setValue = function (Code, sValue) {
  var Attribute = new CGAttribute();

  Attribute.code = this.getCode();

  Attribute.addIndicatorByValue(CGIndicator.CODE, 1, Code);

  if (Code == this.getCodeOnOthers()) Attribute.addIndicatorByValue(CGIndicator.OTHER, 2, sValue);
  else Attribute.addIndicatorByValue(CGIndicator.VALUE, 2, sValue);

  this.DOMField.setData(Attribute.serialize());
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_SELECT, "CGBPIFieldSelect");

function CGBPIFieldText(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldText.prototype = new CGBPIField;

//---------------------------------------------------------------------
CGBPIFieldText.prototype.getMinLength = function () {
  return this.DOMField.getMinLength();
};

//---------------------------------------------------------------------
CGBPIFieldText.prototype.getMaxLength = function () {
  return this.DOMField.getMaxLength();
};

//---------------------------------------------------------------------
CGBPIFieldText.prototype.getPatterns = function () {
  return this.DOMField.getPatterns();
};

//---------------------------------------------------------------------
CGBPIFieldText.prototype.getIndicators = function () {
  var Attribute = new CGAttribute();
  var aResult = new Array();

  Attribute.unserialize(this.DOMField.getData());
  aIndicators = Attribute.getIndicators();

  for (var iPos = 0; iPos < aIndicators.length; iPos++) {
    var Indicator = aIndicators[iPos];
    if (Indicator.code != CGIndicator.CODE) aResult.push({Code: Indicator.code, Value: Indicator.getValue()});
  }

  return aResult;
};

//---------------------------------------------------------------------
CGBPIFieldText.prototype.splitIndicators = function (sValue) {
  var iPos = 0;
  var bMatchPattern = false;
  var aResult = new Array();
  var aPatterns = this.getPatterns();

  while ((!bMatchPattern) && (iPos < aPatterns.length)) {
    var Pattern = aPatterns[iPos];
    if (sValue.match(Pattern.Expression)) {
      var aMatching = Pattern.Expression.exec(sValue);
      for (var jPos = 0; jPos < Pattern.aCodes.length; jPos++) {
        var Indicator = new Object();
        Indicator.Code = Pattern.aCodes[jPos];
        Indicator.Value = aMatching[jPos + 1];
        aResult.push(Indicator);
      }
      bMatchPattern = true;
    }
    iPos++;
  }

  return aResult;
};

//---------------------------------------------------------------------
CGBPIFieldText.prototype.setValue = function (sValue) {
  var Attribute = new CGAttribute();

  sValue = this.DOMField.format(sValue);

  Attribute.code = this.getCode();
  Attribute.addIndicatorByValue(CGIndicator.VALUE, 1, sValue);

  var aIndicators = this.splitIndicators(sValue);
  for (var iPos = 0; iPos < aIndicators.length; iPos++) {
    var Indicator = aIndicators[iPos];
    Attribute.addIndicatorByValue(Indicator.Code, iPos + 2, Indicator.Value);
  }

  this.DOMField.setData(Attribute.serialize());
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_TEXT, "CGBPIFieldText");

function CGBPIFieldCheck(DOMField) {
  this.base = CGBPIField;
  this.base(DOMField);
};

CGBPIFieldCheck.prototype = new CGBPIField;

//---------------------------------------------------------------------
CGBPIFieldCheck.prototype.isChecked = function () {
  var Indicator = this.getIndicator(CGIndicator.CHECKED);
  return (Indicator) ? ((Indicator.getValue() == "true") ? true : false) : "";
};

//---------------------------------------------------------------------
CGBPIFieldCheck.prototype.getValue = function () {
  var Indicator = this.getIndicator(CGIndicator.VALUE);
  return (Indicator) ? Indicator.getValue() : "";
};

//---------------------------------------------------------------------
CGBPIFieldCheck.prototype.setValue = function (bChecked, sValue) {
  var Attribute = new CGAttribute();

  Attribute.code = this.getCode();
  Attribute.addIndicatorByValue(CGIndicator.CHECKED, 1, (bChecked) ? "true" : "false");
  Attribute.addIndicatorByValue(CGIndicator.VALUE, 2, sValue);

  this.DOMField.setData(Attribute.serialize());
};

//---------------------------------------------------------------------
CGBPIFieldCheck.prototype.check = function () {
  this.setValue(true, this.getValue());
};

//---------------------------------------------------------------------
CGBPIFieldCheck.prototype.uncheck = function () {
  this.setValue(false, this.getValue());
};

//---------------------------------------------------------------------
CGBPIFieldCheck.prototype.toggle = function () {
  this.setValue(!this.isChecked(), this.getValue());
};

//*********************************************************************
BPIFieldsFactory.register(FIELD_TYPE_CHECK, "CGBPIFieldCheck");

function CGBPITask(Task, DOMTask) {
  this.DOMTask = DOMTask;
};

//---------------------------------------------------------------------
CGBPITask.prototype.getId = function () {
  return this.DOMTask.getIdNode();
};

function CGListenerBPI() {
};

//---------------------------------------------------------------------
CGListenerBPI.prototype.nodeOpened = function (Sender) {
  var Behaviour, BPINode;

  if (!Sender.Node) return;
  if (!Sender.DOMNode) return;

  Behaviour = Extension.getDefinitionBehaviour(Sender.Node.Code);
  if (!Behaviour) return;

  BPINode = new CGBPINode(Sender.Node, Sender.DOMNode);

  if (Behaviour.Events.refresh) Behaviour.Events.refresh(BPINode);
};

//---------------------------------------------------------------------
CGListenerBPI.prototype.nodeFieldChanged = function (Sender) {
  var Behaviour, BPINode;

  if (!Sender.Node) return;
  if (!Sender.DOMNode) return;
  if (!Sender.DOMField) return;

  Behaviour = Extension.getDefinitionBehaviour(Sender.Node.Code);
  if (!Behaviour) return;

  BPINode = new CGBPINode(Sender.Node, Sender.DOMNode);

  if (Behaviour.Events.refresh) Behaviour.Events.refresh(BPINode);
};

BPI = new Object;

//---------------------------------------------------------------------
BPI.dispatch = function (Process, Callback) {
  var ProcessBPIDispatch;
  ProcessBPIDispatch = new CGProcessBPIDispatch();
  ProcessBPIDispatch.Process = Process;
  ProcessBPIDispatch.Callback = Callback;
  ProcessBPIDispatch.execute();
};

//---------------------------------------------------------------------
BPI.debug = function (message) {
  if (Ext.isIE) return;
  if (!console) return;
  console.log(message);
};

//---------------------------------------------------------------------
BPI.saveAccount = function (AccountInfo, CallbackProcess) {

  if (arguments.length < 2) {
    Desktop.reportBPIError(Lang.BPI.SaveAccount.Parameters);
    return;
  }

  Account.getUser().setInfo(AccountInfo);

  var ProcessSaveAccount = new CGProcessSaveAccount();
  ProcessSaveAccount.Account = Account;

  BPI.dispatch(ProcessSaveAccount, BPI.saveAccountCallback.createCallback(CallbackProcess));
};
BPI.saveAccountCallback = function (CallbackProcess) {
  var Process = new CGProcessLoadAccount();
  Process.execute();
  CallbackProcess.Result = true;
  CallbackProcess.execute();
};

//---------------------------------------------------------------------
BPI.getNode = function (Id, CallbackProcess) {

  if (arguments.length < 2) {
    Desktop.reportBPIError(Lang.BPI.GetNode.Parameters);
    return;
  }

  var Node = NodesCache.get(Id);
  var ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Id);
  if ((Node) && (ViewNode)) {
    BPI.getNodeCallback(Id, CallbackProcess);
    return;
  }

  var ProcessShowNode = new CGProcessShowNode();
  ProcessShowNode.Id = Id;
  ProcessShowNode.ActivateNode = false;

  BPI.dispatch(ProcessShowNode, BPI.getNodeCallback.createCallback(Id, CallbackProcess));
};
BPI.getNodeCallback = function (Id, CallbackProcess) {
  var Node, ViewNode;

  Node = NodesCache.get(Id);
  if (!Node) {
    Desktop.reportBPIError(Lang.BPI.GetNode.Failure.replace("#id#", Id));
    return;
  }

  ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());
  if (!ViewNode) {
    Desktop.reportBPIError(Lang.BPI.GetNode.Failure.replace("#id#", Id));
    return;
  }

  CallbackProcess.Result = new CGBPINode(Node, ViewNode.getDOM());
  CallbackProcess.execute();
};

//---------------------------------------------------------------------
BPI.getNodeNotes = function (Node, CallbackFunction) {

  if (arguments.length < 2) {
    Desktop.reportBPIError(Lang.BPI.GetNodeNotes.Parameters);
    return;
  }

  var ProcessLoadNodeNotes = new CGProcessLoadNodeNotes();
  ProcessLoadNodeNotes.Node = Node;

  BPI.dispatch(ProcessLoadNodeNotes, BPI.getNodeNotesCallback.createCallback(Node, CallbackFunction));
};
BPI.getNodeNotesCallback = function (Node, CallbackFunction) {
  CallbackFunction(Node.Notes);
};

//---------------------------------------------------------------------
BPI.saveNode = function (Id, CallbackProcess) {

  if (arguments.length < 2) {
    Desktop.reportBPIError(Lang.BPI.SaveNode.Parameters);
    return;
  }

  var ProcessSaveNode = new CGProcessSaveNode();
  ProcessSaveNode.Id = Id;

  BPI.dispatch(ProcessSaveNode, BPI.saveNodeCallback.createCallback(Id, CallbackProcess));
};
BPI.saveNodeCallback = function (Id, CallbackProcess) {
  var Node, ViewNode;

  Node = NodesCache.get(Id);
  if (!Node) {
    Desktop.reportBPIError(Lang.BPI.SaveNode.Failure.replace("#id#", Id));
    return;
  }

  ViewNode = Desktop.Main.Center.Body.getContainerView(VIEW_NODE, Node.getId());
  if (!ViewNode) {
    Desktop.reportBPIError(Lang.BPI.SaveNode.Failure.replace("#id#", Id));
    return;
  }

  if (CallbackProcess != null) {
    CallbackProcess.Result = new CGBPINode(Node, ViewNode.getDOM());
    CallbackProcess.execute();
  }
};

//---------------------------------------------------------------------
BPI.createNode = function (Code, IdParent, CallbackProcess) {

  if (arguments.length < 3) {
    Desktop.reportBPIError(Lang.BPI.CreateNode.Parameters);
    return;
  }

  var ProcessAddNodeBlank = new CGProcessAddNodeBlank();
  ProcessAddNodeBlank.Code = Code;
  ProcessAddNodeBlank.IdParent = IdParent;
  ProcessAddNodeBlank.ActivateNode = false;

  BPI.dispatch(ProcessAddNodeBlank, BPI.createNodeCallback.createDelegate(BPI, [CodeType, IdParent, CallbackProcess], true));
};
BPI.createNodeCallback = function (NewNode, CodeType, Parent, CallbackProcess) {
  BPI.getNode(NewNode.getId(), CallbackProcess);
};

//---------------------------------------------------------------------
BPI.removeNode = function (Id, CallbackProcess) {

  if (arguments.length < 2) {
    Desktop.reportBPIError(Lang.BPI.RemoveNode.Parameters);
    return;
  }

  var ProcessDeleteNodes = new CGProcessDeleteNodes();
  ProcessDeleteNodes.Nodes = [Id];

  BPI.dispatch(ProcessDeleteNodes, BPI.removeNodeCallback.createCallback(Id, CallbackProcess));
};
BPI.removeNodeCallback = function (Id, CallbackProcess) {
  if (CallbackProcess == null) return;
  CallbackProcess.execute();
};

//---------------------------------------------------------------------
BPI.executeCommand = function (sCommand) {
  CommandDispatcher.dispatch(sCommand);
};

//---------------------------------------------------------------------
BPI.redirect = function (sMonetLink) {
  var Expression = new RegExp(MONET_LINK_PATTERN, "g");
  var aResult = Expression.exec(sMonetLink);
  var sCommand = null;

  if (aResult != null) {
    if (aResult[1] == MONET_LINK_TYPE_NODE) {
      if (aResult.length == 3) sCommand = "shownode(" + aResult[2] + ",edit.html?mode=page)";
      else sCommand = "shownode(" + aResult[2] + ")";
    }
    else if (aResult[1] == MONET_LINK_TYPE_TASK) sCommand = "showtask(" + aResult[2] + ")";
  }

  if (sCommand == null) return;

  return BPI.executeCommand(sCommand);
};

WidgetManager = new Object();
WidgetManager.aWidgets = new Array();

WidgetManager.register = function (Widget) {
  WidgetManager.aWidgets[Widget.getId()] = Widget;
};

WidgetManager.unregister = function (Id) {
  if (!WidgetManager.aWidgets[Id]) return;
  delete (WidgetManager.aWidgets[Id]);
};

WidgetManager.get = function (Id) {
  return WidgetManager.aWidgets[Id];
};

CGCache = function () {
  this.aItems = new Array();
  this.IdCurrentItem = null;
};

CGCache.prototype.register = function (Item) {
  this.aItems[Item.getId()] = Item;
};

CGCache.prototype.unregister = function (IdItem) {
  if (!this.aItems[IdItem]) return true;
  delete this.aItems[IdItem];
};

CGCache.prototype.getCurrent = function () {
  return this.aItems[this.IdCurrentItem];
};

CGCache.prototype.setCurrent = function (IdItem) {
  this.IdCurrentItem = IdItem;
};

CGCache.prototype.exists = function (IdItem) {
  return (this.aItems[IdItem] != null);
};

CGCache.prototype.getCount = function () {
  return this.aItems.size();
};

CGCache.prototype.get = function (IdItem) {
  if (this.aItems[IdItem] == null) return false;
  return this.aItems[IdItem];
};

CGCache.prototype.getAll = function () {
  var aResult = new Array();

  for (var iPos in this.aItems) {
    if (isFunction(this.aItems[iPos])) continue;
    aResult.push(this.aItems[iPos]);
  }

  return aResult;
};

var Application = {};
var Context = {};
Context.Config = {};
Context.Config.DefaultLocation = {};
Context.Config.Layer = {};
Context.Config.Layer.iWidth = DEFAULT_WIDTH;
Context.Config.Layer.iHeight = DEFAULT_HEIGHT;
Context.Config.NodesBufferSize = 1;
Context.Config.SignatureApplication = {};
Context.Pages = {};
Context.Debugging = false;

Application.init = function () {

  readData(Context, Ext.get(Literals.Data));

  Ext.BLANK_IMAGE_URL = Context.Config.ImagesPath + "/s.gif";

  Kernel.init();
  CommandListener.start(CommandDispatcher);
  Extension = new CGExtension();

  NodesCache = new CGCache();
  TasksCache = new CGCache();
  TeamsCache = new CGCache();

  Desktop.init(Context.Config.Layer.Name);
  Desktop.setLayerSize(Context.Config.Layer.Width, Context.Config.Layer.Height);

  var DOMHistory = $(Literals.Frames.History);
  Event.observe(DOMHistory, "load", CommandDispatcher.History.executeCommand.bind(DOMHistory));

  var BPIListener = new CGListenerBPI();
  EventManager.addListener(BPIListener);
  EventManager.addListener(ViewerSidebar);
  if (Context.Config.PushEnabled == "true") EventManager.addListener(PushListener);

  var Action = new CGActionInit();
  Action.execute();

  WidgetFactory.init();
  Application.registerActionTimers();

  this.isRunning = true;
};

Application.registerActionTimers = function () {
  
};

Ext.onReady(
    function () {
      Ext.QuickTips.init();
      Ext.enableListenerCollection = true;
      Application.init();
    }
);

