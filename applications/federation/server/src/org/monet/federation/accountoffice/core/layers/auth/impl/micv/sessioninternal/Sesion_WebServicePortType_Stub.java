package org.monet.federation.accountoffice.core.layers.auth.impl.micv.sessioninternal;
/*
    Monet will assist business to process re-engineering. Monet separate the
    business logic from the underlying technology to allow Model-Driven
    Engineering (MDE). These models guide all the development process over a
    Service Oriented Architecture (SOA).

    Copyright (C) 2009  Grupo de Ingenieria del Sofware y Sistemas de la Universidad de Las Palmas de Gran Canaria

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/.
*/

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, compilaciï¿½n R1)
// Generated source version: 1.1.3


import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.StreamingSenderState;
import com.sun.xml.rpc.client.http.HttpClientTransport;
import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPDeserializationState;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPNamespaceConstants;
import com.sun.xml.rpc.streaming.XMLReader;

import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.handler.HandlerChain;
import java.rmi.RemoteException;

public class Sesion_WebServicePortType_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements Sesion_WebServicePortType {
    
    
    
    /*
     *  public constructor
     */
    public Sesion_WebServicePortType_Stub(HandlerChain handlerChain, String url) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, url);
    }
    
    
    /*
     *  implementation of comprobar_validez_sesion
     */
    public java.lang.String comprobar_validez_sesion(java.lang.String identificador_sesion, java.lang.String dni_usuario)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(comprobar_validez_sesion_OPCODE);
            Sesion_WebServicePortType_comprobar_validez_sesion_RequestStruct _mySesion_WebServicePortType_comprobar_validez_sesion_RequestStruct =
                new Sesion_WebServicePortType_comprobar_validez_sesion_RequestStruct();
            
            _mySesion_WebServicePortType_comprobar_validez_sesion_RequestStruct.setIdentificador_sesion(identificador_sesion);
            _mySesion_WebServicePortType_comprobar_validez_sesion_RequestStruct.setDni_usuario(dni_usuario);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_comprobar_validez_sesion_comprobar_validez_sesion_QNAME);
            _bodyBlock.setValue(_mySesion_WebServicePortType_comprobar_validez_sesion_RequestStruct);
            _bodyBlock.setSerializer(ns1_mySesion_WebServicePortType_comprobar_validez_sesion_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:Sesion_WebService#comprobar_validez_sesion");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            Sesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct _mySesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _mySesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct =
                    (Sesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _mySesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct =
                    (Sesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct)_responseObj;
            }
            
            return _mySesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct.get_return();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case comprobar_validez_sesion_OPCODE:
                _deserialize_comprobar_validez_sesion(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the comprobar_validez_sesion operation.
     */
    private void _deserialize_comprobar_validez_sesion(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mySesion_WebServicePortType_comprobar_validez_sesion_ResponseStructObj =
            ns1_mySesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct_SOAPSerializer.deserialize(ns1_comprobar_validez_sesion_comprobar_validez_sesionResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_comprobar_validez_sesion_comprobar_validez_sesionResponse_QNAME);
        bodyBlock.setValue(mySesion_WebServicePortType_comprobar_validez_sesion_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    public java.lang.String _getDefaultEnvelopeEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public java.lang.String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public java.lang.String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(java.lang.String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_mySesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, Sesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct.class, ns1_comprobar_validez_sesionResponse_TYPE_QNAME);
        ns1_mySesion_WebServicePortType_comprobar_validez_sesion_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, Sesion_WebServicePortType_comprobar_validez_sesion_RequestStruct.class, ns1_comprobar_validez_sesion_TYPE_QNAME);
    }
    
    private static final int comprobar_validez_sesion_OPCODE = 0;
    private static final javax.xml.namespace.QName ns1_comprobar_validez_sesion_comprobar_validez_sesion_QNAME = new QName("urn:Sesion_WebService", "comprobar_validez_sesion");
    private static final javax.xml.namespace.QName ns1_comprobar_validez_sesion_TYPE_QNAME = new QName("urn:Sesion_WebService", "comprobar_validez_sesion");
    private CombinedSerializer ns1_mySesion_WebServicePortType_comprobar_validez_sesion_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_comprobar_validez_sesion_comprobar_validez_sesionResponse_QNAME = new QName("urn:Sesion_WebService", "comprobar_validez_sesionResponse");
    private static final javax.xml.namespace.QName ns1_comprobar_validez_sesionResponse_TYPE_QNAME = new QName("urn:Sesion_WebService", "comprobar_validez_sesionResponse");
    private CombinedSerializer ns1_mySesion_WebServicePortType_comprobar_validez_sesion_ResponseStruct_SOAPSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "urn:Sesion_WebService"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
