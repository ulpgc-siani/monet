/*
    Monet will assist business to process re-engineering. Monet separate the
    business logic from the underlying technology to allow Model-Driven
    Engineering (MDE). These models guide all the development process over a
    Service Oriented Architecture (SOA).

    Copyright (C) 2009  Grupo de Ingenieria del Sofware y Sistemas de la Universidad de Las Palmas de Gran Canaria

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/.
*/

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, compilaciï¿½n R1)
// Generated source version: 1.1.3

package org.monet.federation.accountoffice.core.layers.auth.impl.micv.sessioninternal;

import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.ServiceException;

import com.sun.xml.rpc.client.HandlerChainImpl;
import com.sun.xml.rpc.client.ServiceExceptionImpl;
import com.sun.xml.rpc.util.exception.LocalizableExceptionAdapter;

@SuppressWarnings("rawtypes")
public class Sesion_WebService_Impl extends com.sun.xml.rpc.client.BasicService implements Sesion_WebService {
    private static final QName serviceName = new QName("urn:Sesion_WebService", "Sesion_WebService");
    private static final QName ns1_Sesion_WebServicePort_QNAME = new QName("urn:Sesion_WebService", "Sesion_WebServicePort");
    private static final Class sesion_WebServicePortType_PortClass = Sesion_WebServicePortType.class;
    
    public Sesion_WebService_Impl() {
        super(serviceName, new QName[] {
                        ns1_Sesion_WebServicePort_QNAME
                    },
            new Sesion_WebService_SerializerRegistry().getRegistry());
        
    }
    
    public java.rmi.Remote getPort(javax.xml.namespace.QName portName, java.lang.Class serviceDefInterface) throws javax.xml.rpc.ServiceException {
        try {
            if (portName.equals(ns1_Sesion_WebServicePort_QNAME) &&
                serviceDefInterface.equals(sesion_WebServicePortType_PortClass)) {
                return getSesion_WebServicePort();
            }
        } catch (Exception e) {
            throw new ServiceExceptionImpl(new LocalizableExceptionAdapter(e));
        }
        return super.getPort(portName, serviceDefInterface);
    }
    
    public java.rmi.Remote getPort(java.lang.Class serviceDefInterface) throws javax.xml.rpc.ServiceException {
        try {
            if (serviceDefInterface.equals(sesion_WebServicePortType_PortClass)) {
                return getSesion_WebServicePort();
            }
        } catch (Exception e) {
            throw new ServiceExceptionImpl(new LocalizableExceptionAdapter(e));
        }
        return super.getPort(serviceDefInterface);
    }
    
    public Sesion_WebServicePortType getSesion_WebServicePort(String url) {
        java.lang.String[] roles = new java.lang.String[] {};
        HandlerChainImpl handlerChain = new HandlerChainImpl(getHandlerRegistry().getHandlerChain(ns1_Sesion_WebServicePort_QNAME));
        handlerChain.setRoles(roles);
        Sesion_WebServicePortType_Stub stub = new Sesion_WebServicePortType_Stub(handlerChain, url);
        try {
            stub._initialize(super.internalTypeRegistry);
        } catch (JAXRPCException e) {
            throw e;
        } catch (Exception e) {
            throw new JAXRPCException(e.getMessage(), e);
        }
        return stub;
    }

    @Override
    public Sesion_WebServicePortType getSesion_WebServicePort()
        throws ServiceException {
      // TODO Auto-generated method stub
      return null;
    }
}
